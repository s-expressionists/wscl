Issue:          TEST-NOT-PROGRAM-ERROR
Forum:          Cleanup
Category:       CLARIFICATION
Status:         proposed
Edit History:   03-Sep-21, Version 1 by Tarn W. Burton
References:     ADJOIN, ASSOC, COUNT, FIND, INTERSECTION, NINTERSECTION,
                MEMBER, MISMATCH, POSITION, RASSOC, REMOVE, DELETE,
                REMOVE-DUPLICATES, DELETE-DUPLICATES, SEARCH,
                SET-DIFFERENCE, NSET-DIFFERENCE, SET-EXCLUSIVE-OR,
                NSET-EXCLUSIVE-OR, SUBLIS, NSUBLIS, SUBSETP, SUBST,
                NSUBST, SUBSTITUTE, NSUBSTITUTE, TREE-EQUAL, UNION,
                NUNION
Related Issues: TEST-NOT-IF-NOT

Problem Description:

  In section 17.2.1 "Satisfying a Two-Argument Test" of the draft
  ANSI Common Lisp specification it is stated that the consequences
  are unspecified if both the :TEST and the :TEST-NOT keys are
  supplied to the operators that permit these keys.

Proposal (TEST-NOT-PROGRAM-ERROR:SIGNAL-ERROR-IN-SAFE-CODE):

  This proposal updates the specification text to indicate that
  a PROGRAM-ERROR will be signaled if both keys are supplied.
  The individual proposed changes are:

  1. Update section 17.2.1 by replacing "The consequences are
     unspecified if both a :test and a :test-not argument are
     supplied in the same call to F." with "If both a :test and
     a :test-not argument are supplied in the same call to F then
     a program-error will be signaled."

  2. Add the following sentence to "Exceptional Situations" for
     each one of the functions listed in References: "If both
     a :test and a :test-not argument are supplied then a
     program-error will be signaled."

Test Cases:

  (defun adjoin/t ()
    (adjoin 1 '(1 2 3) :test #'eql :test-not #'eql))

  (defun assoc/t ()
    (assoc 1 '((1 . a) (2 . b) (3 . c)) :test #'eql :test-not #'eql))

  (defun count/t ()
    (count 1 '(1 2 3) :test #'eql :test-not #'eql))

  (defun find/t ()
    (find 1 '(1 2 3) :test #'eql :test-not #'eql))

  (defun intersection/t ()
    (intersection '(1 2 3) '(3 4 5) :test #'eql :test-not #'eql))

  (defun nintersection/t ()
    (nintersection (list 1 2 3) (list 3 4 5) :test #'eql :test-not #'eql))

  (defun member/t ()
    (member 1 '(1 2 3) :test #'eql :test-not #'eql))

  (defun mismatch/t ()
    (mismatch '((1 . a) (2 . b) (3 . c)) '(1 2 3) :test #'eql :test-not #'eql))

  (defun position/t ()
    (position 1 '(1 2 3) :test #'eql :test-not #'eql))

  (defun rassoc/t ()
    (rassoc 1 '((1 . a) (2 . b) (3 . c)) :test #'eql :test-not #'eql))

  (defun remove/t ()
    (remove 1 '(1 2 3) :test #'eql :test-not #'eql))

  (defun delete/t ()
    (delete 1 (list 1 2 3) :test #'eql :test-not #'eql))

  (defun remove-duplicates/t ()
    (remove-duplicates '(1 2 1 3) :test #'eql :test-not #'eql))

  (defun delete-duplicates/t ()
    (delete-duplicates (list 1 2 1 3) :test #'eql :test-not #'eql))

  (defun search/t ()
    (search '(1 2) '(1 2 3) :test #'eql :test-not #'eql))

  (defun set-difference/t ()
    (set-difference '(1 2 3) '(3 4 5) :test #'eql :test-not #'eql))

  (defun nset-difference/t ()
    (nset-difference (list 1 2 3) (list 3 4 5) :test #'eql :test-not #'eql))

  (defun set-exclusive-or/t ()
    (set-exclusive-or '(1 2 3) '(3 4 5) :test #'eql :test-not #'eql))

  (defun nset-exclusive-or/t ()
    (nset-exclusive-or (list 1 2 3) (list 3 4 5) :test #'eql :test-not #'eql))

  (defun sublis/t ()
    (sublis '((1 . a) (2 . b) (3 . c)) '(1 2 3) :test #'eql :test-not #'eql))

  (defun nsublis/t ()
    (sublis '((1 . a) (2 . b) (3 . c)) (list 1 2 3) :test #'eql :test-not #'eql))

  (defun subsetp/t ()
    (subsetp '(2 3) '(1 2 3) :test #'eql :test-not #'eql))

  (defun subst/t ()
    (subst 1 2 '(1 2 3) :test #'eql :test-not #'eql))

  (defun nsubst/t ()
    (nsubst 1 2 (list 1 2 3) :test #'eql :test-not #'eql))

  (defun substitute/t ()
    (substitute 1 2 '(1 2 3) :test #'eql :test-not #'eql))

  (defun nsubstitute/t ()
    (nsubstitute 1 2 (list 1 2 3) :test #'eql :test-not #'eql))

  (defun tree-equal/t ()
    (subsetp '(2 3) '(1 2 3) :test #'eql :test-not #'eql))

  (defun union/t ()
    (union '(1 2 3) '(3 4 5) :test #'eql :test-not #'eql))

  (defun nunion/t ()
    (nunion (list 1 2 3) (list 3 4 5) :test #'eql :test-not #'eql))

  (adjoin/t) => [signals program-error]
  (assoc/t) => [signals program-error]
  (count/t) => [signals program-error]
  (find/t) => [signals program-error]
  (intersection/t) => [signals program-error]
  (nintersection/t) => [signals program-error]
  (member/t) => [signals program-error]
  (mismatch/t) => [signals program-error]
  (position/t) => [signals program-error]
  (rassoc/t) => [signals program-error]
  (remove/t) => [signals program-error]
  (delete/t) => [signals program-error]
  (remove-duplicates/t) => [signals program-error]
  (delete-duplicates/t) => [signals program-error]
  (search/t) => [signals program-error]
  (set-difference/t) => [signals program-error]
  (nset-difference/t) => [signals program-error]
  (set-exclusive-or/t) => [signals program-error]
  (nset-exclusive-or/t) => [signals program-error]
  (sublis/t) => [signals program-error]
  (nsublis/t) => [signals program-error]
  (subsetp/t) => [signals program-error]
  (subst/t) => [signals program-error]
  (nsubst/t) => [signals program-error]
  (substitute/t) => [signals program-error]
  (nsubstitute/t) => [signals program-error]
  (tree-equal/t) => [signals program-error]
  (union/t) => [signals program-error]
  (nunion/t) => [signals program-error]

Rationale:

  X3J13 cleanup deprecated but did not remove the :test-not
  key. Supplying both keys is a contradition and although
  the draft ANSI specification states that consequences are
  unspecified most implementations are actually signalling
  an error for the majority of the affected operators.

Current Practice:

  ABCL 1.8.1-dev-fasl43
    (adjoin/t) => [signals simple-error]
    (assoc/t) => (1 . a)
    (count/t) => [signals simple-error]
    (find/t) => 2
    (intersection/t) => [signals simple-error]
    (nintersection/t) => [signals simple-error]
    (member/t) => [signals error]
    (mismatch/t) => [signals simple-error]
    (position/t) => 1
    (rassoc/t) => nil
    (remove/t) => (1)
    (delete/t) => (1)
    (remove-duplicates/t) => (3)
    (delete-duplicates/t) => (3)
    (search/t) => 1
    (set-difference/t) => [signals simple-error]
    (nset-difference/t) => [signals simple-error]
    (set-exclusive-or/t) => [signals simple-error]
    (nset-exclusive-or/t) => [signals simple-error]
    (sublis/t) => a
    (nsublis/t) => a
    (subsetp/t) => [signals simple-error]
    (subst/t) => (1 1 3)
    (nsubst/t) => (1 1 3)
    (substitute/t) => (1 2 1)
    (nsubstitute/t) => (1 2 1)
    (tree-equal/t) => [signals simple-error]
    (union/t) => [signals simple-error]
    (nunion/t) => [signals simple-error]

  ACL 10.1
    (adjoin/t) => (1 2 3)
    (assoc/t) => (2 . b)
    (count/t) => 2
    (find/t) => 2
    (intersection/t) => [signals simple-error]
    (nintersection/t) => [signals simple-error]
    (member/t) => (2 3)
    (mismatch/t) => nil
    (position/t) => 1
    (rassoc/t) => nil
    (remove/t) => (1)
    (delete/t) => (1)
    (remove-duplicates/t) => [signals simple-error]
    (delete-duplicates/t) => (3)
    (search/t) => 1
    (set-difference/t) => [signals simple-error]
    (nset-difference/t) => [signals simple-error]
    (set-exclusive-or/t) => [signals simple-error]
    (nset-exclusive-or/t) => [signals simple-error]
    (sublis/t) => a
    (nsublis/t) => a
    (subsetp/t) => [signals simple-error]
    (subst/t) => 1
    (nsubst/t) => 1
    (substitute/t) => (1 2 1)
    (nsubstitute/t) => (1 2 1)
    (tree-equal/t) => [signals simple-error]
    (union/t) => [signals simple-error]
    (nunion/t) => [signals simple-error]

  CCL 1.12-f98
    (adjoin/t) => [signals simple-error]
    (assoc/t) => [signals simple-error]
    (count/t) => [signals simple-error]
    (find/t) => [signals simple-error]
    (intersection/t) => [signals simple-error]
    (nintersection/t) => [signals simple-error]
    (member/t) => [signals simple-error]
    (mismatch/t) => [signals simple-error]
    (position/t) => [signals simple-error]
    (rassoc/t) => [signals simple-error]
    (remove/t) => [signals simple-error]
    (delete/t) => [signals simple-error]
    (remove-duplicates/t) => [signals simple-error]
    (delete-duplicates/t) => [signals simple-error]
    (search/t) => [signals simple-error]
    (set-difference/t) => [signals simple-error]
    (nset-difference/t) => [signals simple-error]
    (set-exclusive-or/t) => [signals simple-error]
    (nset-exclusive-or/t) => [signals simple-error]
    (sublis/t) => [signals simple-error]
    (nsublis/t) => [signals simple-error]
    (subsetp/t) => [signals simple-error]
    (subst/t) => [signals simple-error]
    (nsubst/t) => [signals simple-error]
    (substitute/t) => [signals simple-error]
    (nsubstitute/t) => (1 2 1)
    (tree-equal/t) => [signals simple-error]
    (union/t) => [signals simple-error]
    (nunion/t) => [signals simple-error]

  CLASP cclasp-boehmprecise-0.4.2-4610-g5e6b2fa12-cst
    (adjoin/t) => (1 2 3)
    (assoc/t) => [signals program-error]
    (count/t) => [signals simple-error]
    (find/t) => [signals simple-error]
    (intersection/t) => [signals program-error]
    (nintersection/t) => [signals program-error]
    (member/t) => [signals program-error]
    (mismatch/t) => [signals simple-error]
    (position/t) => [signals simple-error]
    (rassoc/t) => [signals simple-error]
    (remove/t) => [signals simple-error]
    (delete/t) => [signals simple-error]
    (remove-duplicates/t) => [signals simple-error]
    (delete-duplicates/t) => [signals simple-error]
    (search/t) => [signals simple-error]
    (set-difference/t) => [signals program-error]
    (nset-difference/t) => [signals program-error]
    (set-exclusive-or/t) => [signals program-error]
    (nset-exclusive-or/t) => [signals program-error]
    (sublis/t) => a
    (nsublis/t) => a
    (subsetp/t) => [signals program-error]
    (subst/t) => 1
    (nsubst/t) => [signals program-error]
    (substitute/t) => [signals simple-error]
    (nsubstitute/t) => [signals simple-error]
    (tree-equal/t) => [signals program-error]
    (union/t) => [signals program-error]
    (nunion/t) => [signals program-error]

  CLISP 2.49.93+
    (adjoin/t) => [signals simple-error]
    (assoc/t) => [signals simple-error]
    (count/t) => [signals simple-error]
    (find/t) => [signals simple-error]
    (intersection/t) => [signals simple-error]
    (nintersection/t) => [signals simple-error]
    (member/t) => [signals simple-error]
    (mismatch/t) => [signals simple-error]
    (position/t) => [signals simple-error]
    (rassoc/t) => [signals simple-error]
    (remove/t) => [signals simple-error]
    (delete/t) => [signals simple-error]
    (remove-duplicates/t) => [signals simple-error]
    (delete-duplicates/t) => [signals simple-error]
    (search/t) => [signals simple-error]
    (set-difference/t) => [signals simple-error]
    (nset-difference/t) => [signals simple-error]
    (set-exclusive-or/t) => [signals simple-error]
    (nset-exclusive-or/t) => [signals simple-error]
    (sublis/t) => [signals simple-error]
    (nsublis/t) => [signals simple-error]
    (subsetp/t) => [signals simple-error]
    (subst/t) => [signals simple-error]
    (nsubst/t) => [signals simple-error]
    (substitute/t) => [signals simple-error]
    (nsubstitute/t) => [signals simple-error]
    (tree-equal/t) => [signals simple-error]
    (union/t) => [signals simple-error]
    (nunion/t) => [signals simple-error]

  CMU 2019-05-27 16:42:54 (21D Unicode)
    (adjoin/t) => (1 2 3)
    (assoc/t) => (1 . a)
    (count/t) => [signals simple-error]
    (find/t) => 2
    (intersection/t) => [signals simple-error]
    (nintersection/t) => [signals simple-error]
    (member/t) => (1 2 3)
    (mismatch/t) => nil
    (position/t) => 1
    (rassoc/t) => nil
    (remove/t) => (1)
    (delete/t) => (1)
    (remove-duplicates/t) => (3)
    (delete-duplicates/t) => (3)
    (search/t) => 1
    (set-difference/t) => [signals simple-error]
    (nset-difference/t) => [signals simple-error]
    (set-exclusive-or/t) => [signals simple-error]
    (nset-exclusive-or/t) => [signals simple-error]
    (sublis/t) => a
    (nsublis/t) => a
    (subsetp/t) => [signals simple-error]
    (subst/t) => (1 1 3)
    (nsubst/t) => (1 1 3)
    (substitute/t) => (1 2 1)
    (nsubstitute/t) => (1 2 1)
    (tree-equal/t) => [signals simple-error]
    (union/t) => [signals simple-error]
    (nunion/t) => [signals simple-error]

  ECL 21.2.1-e68e6827
    (adjoin/t) => [signals simple-error]
    (assoc/t) => [signals simple-error]
    (count/t) => [signals simple-error]
    (find/t) => [signals simple-error]
    (intersection/t) => [signals simple-error]
    (nintersection/t) => [signals simple-error]
    (member/t) => [signals simple-error]
    (mismatch/t) => [signals simple-error]
    (position/t) => [signals simple-error]
    (rassoc/t) => [signals simple-error]
    (remove/t) => [signals simple-error]
    (delete/t) => [signals simple-error]
    (remove-duplicates/t) => [signals simple-error]
    (delete-duplicates/t) => [signals simple-error]
    (search/t) => [signals simple-error]
    (set-difference/t) => [signals simple-error]
    (nset-difference/t) => [signals simple-error]
    (set-exclusive-or/t) => [signals simple-error]
    (nset-exclusive-or/t) => [signals simple-error]
    (sublis/t) => [signals simple-error]
    (nsublis/t) => [signals simple-error]
    (subsetp/t) => [signals simple-error]
    (subst/t) => [signals simple-error]
    (nsubst/t) => [signals simple-error]
    (substitute/t) => [signals simple-error]
    (nsubstitute/t) => [signals simple-error]
    (tree-equal/t) => [signals simple-error]
    (union/t) => [signals simple-error]
    (nunion/t) => [signals simple-error]

  LWPE 7.1.2
    (adjoin/t) => (1 2 3)
    (assoc/t) => (1 . a)
    (count/t) => 2
    (find/t) => 2
    (intersection/t) => [signals program-error]
    (nintersection/t) => [signals program-error]
    (member/t) => [signals program-error]
    (mismatch/t) => nil
    (position/t) => 1
    (rassoc/t) => nil
    (remove/t) => (1)
    (delete/t) => (1)
    (remove-duplicates/t) => (3)
    (delete-duplicates/t) => (3)
    (search/t) => 1
    (set-difference/t) => [signals program-error]
    (nset-difference/t) => [signals program-error]
    (set-exclusive-or/t) => [signals program-error]
    (nset-exclusive-or/t) => [signals program-error]
    (sublis/t) => a
    (nsublis/t) => a
    (subsetp/t) => [signals program-error]
    (subst/t) => (1 1 3)
    (nsubst/t) => [signals program-error]
    (substitute/t) => (1 2 1)
    (nsubstitute/t) => (1 2 1)
    (tree-equal/t) => [signals program-error]
    (union/t) => [signals program-error]
    (nunion/t) => [signals program-error]

  SBCL 2.1.7
    (adjoin/t) => [signals simple-error]
    (assoc/t) => [signals simple-error]
    (count/t) => [signals simple-error]
    (find/t) => [signals simple-error]
    (intersection/t) => [signals simple-error]
    (nintersection/t) => [signals simple-error]
    (member/t) => [signals simple-error]
    (mismatch/t) => nil
    (position/t) => [signals simple-error]
    (rassoc/t) => [signals simple-error]
    (remove/t) => (1)
    (delete/t) => (1)
    (remove-duplicates/t) => (3)
    (delete-duplicates/t) => (3)
    (search/t) => 1
    (set-difference/t) => [signals simple-error]
    (nset-difference/t) => [signals simple-error]
    (set-exclusive-or/t) => [signals simple-error]
    (nset-exclusive-or/t) => [signals simple-error]
    (sublis/t) => [signals simple-error]
    (nsublis/t) => [signals simple-error]
    (subsetp/t) => [signals simple-error]
    (subst/t) => [signals simple-error]
    (nsubst/t) => [signals simple-error]
    (substitute/t) => (1 2 1)
    (nsubstitute/t) => (1 2 1)
    (tree-equal/t) => [signals simple-error]
    (union/t) => [signals simple-error]
    (nunion/t) => [signals simple-error]

Cost to Implementors:

  Very small.  Many of the functions listed in References are
  already signalling an error.

Cost to Users:

  None.

Cost of non-adoption:

  TODO

Benefits:

  TODO

Aesthetics:

  TODO

Discussion:

  TODO
