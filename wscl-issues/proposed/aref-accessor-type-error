Issue:          AREF-ACCESSOR-TYPE-ERROR
Forum:          Cleanup
Category:       CLARIFICATION
Status:         proposed
Edit History:   11-Jul-21, Version 1 by Robert Strandh,
                12-Jul-21, Version 2 by Robert Strandh.
References:     AREF

Problem Description:

  In the draft ANSI Common Lisp specification, the description of
  the accessor AREF indicates no exceptional situations.  The section
  "Arguments and Values" mentions that the array argument must be
  an array, which by default means that the consequences are undefined
  if an object that is not of type array is given.

Proposal (AREF-ACCESSOR-TYPE-ERROR:SIGNAL-ERROR-IN-SAFE-CODE):

  This proposal changes the description of the AREF accessor, so that
  the section "Exceptional Situations" instead reads:

  "The accessor AREF should signal an error of type TYPE-ERROR
  if given an argument which is not an array.

Test Cases:

  (defun one (object)
    (declare (optimize (safety 3)))
    (aref object 0))

  (one 234) => ERROR: The value 234 is not of type ARRAY.

  (defun two (object)
    (declare (optimize (safety 3)))
    (setf (aref object 0) 345))

  (two 234) => ERROR: The value 234 is not of type ARRAY.

Rationale:

  We think it was a simple omission from the draft ANSI specification
  to indicate no exceptional situations.

Current Practice:

  SBCL 2.1.3
    (one) => ERROR: The value 234 is not of type ARRAY.
    (two) => ERROR: The value 234 is not of type ARRAY.

  ECL
    (one 234) =>
      Condition of type: SIMPLE-TYPE-ERROR
      In function AREF, the value of the first argument is
       234
      which is not of the expected type ARRAY.
    (two 234) =>
      Debugger received error of type: SIMPLE-TYPE-ERROR
      In function SET, the value of the first argument is
       234
      which is not of the expected type ARRAY.

  This is SBCL 2.1.6
  (one 234): (NIL #<TYPE-ERROR expected-type: VECTOR datum: 234>)
  (two 234): (NIL #<TYPE-ERROR expected-type: VECTOR datum: 234>)

  This is Armed Bear Common Lisp 1.8.0
  (one 234): (NIL #<TYPE-ERROR {48643AF7}>)
  (two 234): (NIL #<TYPE-ERROR {EDD18F5}>)

  This is Clozure Common Lisp Version 1.12  LinuxX8664
  (one 234): (NIL #<TYPE-ERROR #x30200085EF2D>)
  (two 234): (NIL #<TYPE-ERROR #x302000852D3D>)

  This is ECL 21.2.1
  (one 234): (NIL #<a SIMPLE-TYPE-ERROR 0x55de344a0300>)
  (two 234): (NIL #<a SIMPLE-TYPE-ERROR 0x55de344a0280>)

  This is CLISP 2.49.92 (2018-02-18) (built on 8b44a77f9106 [172.17.0.4])
  (one 234): (NIL #<SIMPLE-TYPE-ERROR #x00007FD03C333026>)
  (two 234): (NIL #<SIMPLE-TYPE-ERROR #x00007FD03C33D656>)

  This is CMU Common Lisp 21d (21D Unicode)
  (one 234): (NIL #<TYPE-ERROR {604D203D}>)
  (two 234): (NIL #<TYPE-ERROR {604DFA4D}>)

  This is clasp cclasp-boehm-0.4.2-3852-gb14e329f4-cst
  (one 234): (NIL #<TYPE-ERROR>)
  (two 234): (NIL #<TYPE-ERROR>)

  TODO: check other implementations.

Cost to Implementors:

  Very small.  We believe that most implementations are already
  signaling an error in safe code.  Some implementations may signal a
  simple error, and those implementation would need to signal a
  type-error instead.

Cost to Users:

  None.

Cost of non-adoption:

  Application programmers may need to add numerous
  explicit checks to be certain that their code
  is conforming.

Benefits:

  Application programmers may rely on an error being
  signaled in safe code, and thus avoid having to
  add explicit checks in portable code.

Aesthetics:

  No influence.

Discussion:

  12-Jul-21 Pascal J. Bourguignon in in favor of this proposal.
