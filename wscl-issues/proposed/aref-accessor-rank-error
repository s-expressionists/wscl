Issue:          AREF-ACCESSOR-RANK-ERROR
Forum:          Cleanup
Category:       CLARIFICATION
Status:         proposed
Edit History:   12-Jul-21, Version 1 by Robert Strandh.
References:     AREF

Problem Description:

  In the draft ANSI Common Lisp specification, the description of
  the accessor AREF indicates no exceptional situations.

  It is therefore unclear what the behavior should be if AREF were
  given a number of indices that is not that of the rank of the
  array given as an argument.

Proposal (AREF-ACCESSOR-RANK-ERROR:SIGNAL-ERROR-IN-SAFE-CODE):

  This proposal changes the description of the AREF accessor, so that
  the section "Exceptional Situations" contains the following text:

  "The accessor AREF should signal an error of type TYPE-ERROR if the
  number of indices given is different from the rank of the array
  passed as an argument."

Test Cases:

  (defun one (object)
    (declare (optimize (safety 3)))
    (aref object 0 0))

  (one (make-array 1 :initial-element nil)) =>
     ERROR: The value #(nil) is not of type ARRAY * (* *)

  (defun two (object)
    (declare (optimize (safety 3)))
    (setf (aref object 0 0) 345))

  (two (make-array 1 :initial-element nil)) =>
     ERROR: The value #(nil) is not of type ARRAY * (* *)

Rationale:

  We think it was a simple omission from the draft ANSI specification
  to not specify the behavior in this situation.

Current Practice:

  SBCL 2.1.3
    (one ...)   => ERROR: The value #(nil) is not of type ARRAY * (* *)
    (two ...)   => ERROR: The value #(nil) is not of type ARRAY * (* *)

  TODO: check other implementations.

Cost to Implementors:

  Very small.  We believe that most implementations are already
  signaling an error in safe code.  Some implementations may signal a
  simple error, and those implementation would need to signal a
  type-error instead.

Cost to Users:

  None.

Cost of non-adoption:

  Application programmers may need to add numerous
  explicit checks to be certain that their code
  is conforming.

Benefits:

  Application programmers may rely on an error being
  signaled in safe code, and thus avoid having to
  add explicit checks in portable code.

Aesthetics:

  No influence.

Discussion:

  TODO
