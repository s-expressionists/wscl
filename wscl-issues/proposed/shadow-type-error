Issue:          SHADOW-TYPE-ERROR
Forum:          Cleanup
Category:       CLARIFICATION
Status:         proposed
Edit History:   25-Jul-21, Version 1 by Robert Strandh.
References:     SHADOW

Problem Description:

  In the draft ANSI Common Lisp specification, the description of the
  function SHADOW indicates no exceptional situations.  The section
  "Arguments and Values" mentions that the required argument is a
  designator for a list of string designators and that the optional
  argument is a package designator.  As a result, the behavior of
  SHADOW is undefined when one of the arguments is not of the type
  mentioned.

Proposal (SHADOW-TYPE-ERROR:SIGNAL-ERROR-IN-SAFE-CODE):

  This proposal changes the description of the SHADOW function, so
  that the section "Exceptional Situations" instead says:

  "The function SHADOW should signal an error of type TYPE-ERROR if
   the SYMBOL-NAMES argument is not a designator for a list of string
   designators, or if the PACKAGE argument is not a package
   designator."

Test Cases:

  (defun one (symbol-names package)
    (declare (optimize (safety 3)))
    (shadow symbol-names package))

  (one 234 *package*) => ERROR: The value 234 is not of type ...
  (one "hello" 234) => ERROR: The value 234 is not of type ...

Rationale:

  We think it was a simple omission from the draft ANSI specification
  to indicate no exceptional situations.

Current Practice:

  SBCL 2.1.3
    (one 234 *package*) => [signals a type error]
    (one "hello" 234) => [signals a type error]   

  TODO: check other implementations.

Cost to Implementors:

  Very small.  We believe that most implementations are already
  signaling an error in safe code.  Some implementations may signal a
  simple error, and those implementation would need to signal a
  TYPE-ERROR instead.

Cost to Users:

  None.

Cost of non-adoption:

  Application programmers may need to add explicit checks to be
  certain that their code is conforming.

Benefits:

  Application programmers may rely on an error being
  signaled in safe code, and thus avoid having to
  add explicit checks in portable code.

Aesthetics:

  No influence.

Discussion:

  TODO
