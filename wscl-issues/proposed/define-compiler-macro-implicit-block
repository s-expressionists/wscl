Issue:          DEFINE-COMPILER-MACRO-IMPLICIT-BLOCK
Forum:          Cleanup
Category:       CLARIFICATION
Status:         proposed
Edit history:   2004-06-10, Version 1 by Nikodemus Siivola
                2021-07-15, version 2 by Bike (reformat for WSCL, etc)
References:     DEFINE-COMPILER-MACRO
Related issues: FLET-IMPLICIT-BLOCK

Problem Description:

  The current definition of DEFINE-COMPILER-MACRO violates the rule of thumb
  observed by other named entities that take code bodies, that is mentioned in
  the Issue FLET-IMPLICIT-BLOCK writeup: "any named entity that takes a code 
  body establishes an implicit block with the obvious name."

Proposal COMPILER-MACRO-IMPLICIT-BLOCK:YES

  Specify that DEFINE-COMPILER-MACRO establishes an implicit block with the
  function block name of the compiler-macro as the block name.

  Specifically, add "block-name--the function block name of the name" to the
  Arguments and Values section, and add the sentence "define-compiler-macro
  implicitly puts a block named block-name around the body forms (but not the
  forms in the lambda-list) of the compiler macro function defined."

Test case:

  ;;; Under a strict reading of the standard, this is undefined behavior, and
  ;;; would probably result in a compiler warning and a control-error.
  ;;; Under the proposal, works fine (declining to macroexpand).
  (defun foo ())
  (define-compiler-macro foo (&whole whole) (return-from foo whole))
  (funcall (compiler-macro-function 'foo) '(foo) nil)

Rationale:

  The current behaviour violates expectations and complicates writing
  compiler-macros in some cases.

Current practice:

  SBCL, CCL, Movitz, and Clasp establish a block, which might violate the
  current standard, but conforms to the proposal. Poplog circa 1996 apparently
  does as well. CCL, Clasp, and Poplog rely on the implicit block in some of
  their internally used compiler macros.

Cost to Implementors:

  Small. Actually, given that DEFINE-COMPILER-MACRO and DEFMACRO are
  often defined in terms of the same or similar machinery, an implementation
  might have to go out of its way to not establish a block.

Cost to Users:

  None. The altered definition would not affect behaviour of conforming code.

Cost of Non-Adoption:

  The unintuitive behaviour violating expectations catered for by the rest of
  the language remains. Users writing complex compiler macros that would benefit
  from having a non-local exit via RETURN-FROM must explicitly establish the
  block or rely on their implementation's nonstandard behavior.

Benefits:

  More uniform specification and easier to write compiler-macros in some cases.

Aesthetics:

  Improved. Cleaner specification due to increased uniformity. Cleaner user
  code due to lack of explicit blocks in compiler-macros (though rare).

Discussion:

  Bruno Haible says: Agreed, with a minor change: DEFINE-COMPILER-MACRO should
  establish an implicit block, like DEFUN does (using the notion of "function
  block name").

  Bike says: Haible's suggestion has been incorporated into version 2. I would
  also like to note that CLtL 2 mentions FLET-IMPLICIT-BLOCK and states that
  "presumably" this also applies to DEFINE-COMPILER-MACRO.
