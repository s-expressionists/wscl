Issue:          DEFINE-COMPILER-MACRO-DECLINE
Forum:          Cleanup
Category:       CLARIFICATION, CHANGE
Status:         proposed
Edit history:   2004-06-16, Version 1 by Christophe Rhodes
                2021-07-15, version 2 by Bike (reformat for WSCL, etc)
References:     DEFINE-COMPILER-MACRO

Problem Description:

  The glossary entry for compiler macro function is inconsistent with the
  entries in the main body of the standard: the glossary states that returning
  NIL from the compiler macro function indicates that the original form should
  not be expanded, whereas DEFINE-COMPILER-MACRO states that this is achieved
  by returning the original form (from the &WHOLE argument).

Proposal (DEFINE-COMPILER-MACRO-DECLINE:ORIGINAL-FORM-ONLY):

  Specify that the glossary entry was in error, and that to decline expansion
  the original form should be returned from the compiler macro function.
  Specify that a return value of NIL indicates that the form should be expanded
  by the compiler, if it expands the compiler macro at all, to NIL.

Test case:

  (defun foo ())
  (define-compiler-macro foo () nil)
  ;;; Under the glossary definition, the compiler macro fails to expand, so this
  ;;; remains a call (assuming other optimizations aren't applied). Under the
  ;;; main body definition, this could be compiler macroexpanded to a constant
  ;;; NIL form.
  (foo)

Rationale:

  The glossary entry was clearly in error, and could potentially cause
  confusion.

Current practice:

  SBCL 2.1.1 (and earlier versions), CCL 1.12, CMUCL 18e and CLISP 2.33 behave
  as in proposal DEFINE-COMPILER-MACRO-DECLINE:ORIGINAL-FORM-ONLY.

  Note that because implementations are never required to expand compiler
  macros, and there is no "compiler-macroexpand(-1)" operator, there isn't
  a standard way to figure out what implementations are doing. But some export
  compiler macroexpansion functions.

Cost to Implementors:

  Implementations that treat NIL as a declination would need to make some small
  changes, if there are any.

Cost to Users:

  None.

Cost of Non-Adoption:

  Continued confusion over the required semantics of a compiler macro function.

Benefits:

  Enhanced ability to write compiler macros portably.

Aesthetics:

  Returning the original form to decline is clearly superior to returning nil,
  as it avoids any possible confusion over nil as expansion.

Discussion:

  None.
