Issue:          UNEXPORT-TYPE-ERROR
Forum:          Cleanup
Category:       CLARIFICATION
Status:         proposed
Edit History:   28-Jul-21, Version 1 by Robert Strandh.
References:     UNEXPORT

Problem Description:

  In the draft ANSI Common Lisp specification, the description of the
  function UNEXPORT indicates two exceptional situations.  The first
  one is related to the SYMBOLS argument, and determines what happens
  if a symbol is given that is not accessible in PACKAGE.  The second
  one is related to the optional PACKAGE argument, and determines what
  happens if PACKAGE is the KEYWORD package or the COMMON-LISP
  package.  However, no exceptional situation is mentioned related to
  the types of the arguments.  As a result, the consequences are
  undefined if the required argument is not a designator for a list of
  symbols, or if the optional argument is not a package designator.

Proposal (UNEXPORT-TYPE-ERROR:SIGNAL-ERROR-IN-SAFE-CODE):

  This proposal changes the description of the UNEXPORT function, so
  that the section "Exceptional Situations" contains these additional
  phrases:

  "The function UNEXPORT should signal an error of type TYPE-ERROR if
  the PACKAGE argument is not a package designator.", and "The
  function UNEXPORT should signal an error of type TYPE-ERROR if the
  SYMBOLS argument is not a designator for a list of symbols".

Test Cases:

  (defun one (object1 object2)
    (declare (optimize (safety 3)))
    (unexport object1 object2))

  (one 234 "CL-USER") => ERROR: The value 234 is not of type ...
  (one 'a 234) => ERROR: The value 234 is not of type ...

Rationale:

  We think it was a simple omission from the draft ANSI specification
  to indicate no exceptional situations for these cases.

Current Practice:

  SBCL 2.1.3
    (one 234 "CL-USER") => [signals a type error]
    (one 'a 234) => [signals a type error]

  TODO: check other implementations.

Cost to Implementors:

  Very small.  We believe that most implementations are already
  signaling an error in safe code.  Some implementations may signal a
  simple error, and those implementation would need to signal a
  TYPE-ERROR instead.

Cost to Users:

  None.

Cost of non-adoption:

  Application programmers may need to add explicit checks to be
  certain that their code is conforming.

Benefits:

  Application programmers may rely on an error being
  signaled in safe code, and thus avoid having to
  add explicit checks in portable code.

Aesthetics:

  No influence.

Discussion:

  TODO
