Issue:          AREF-ACCESSOR-TYPE-ERROR
Forum:          Cleanup
Category:       CLARIFICATION
Status:         draft
Edit History:   11-Jul-21, Version 1 by Robert Strandh,
                12-Jul-21, Version 2 by Robert Strandh,
                11-Aug-21, Version 3 by Tarn W. Burton (update current
                practice).
                06-May-24, Version 4 by Tarn W. Burton (update test
                  cases formatting)
References:     AREF

Problem Description:

  In the draft ANSI Common Lisp specification, the description of
  the accessor AREF indicates no exceptional situations.  The section
  "Arguments and Values" mentions that the array argument must be
  an array, which by default means that the consequences are undefined
  if an object that is not of type array is given.

Proposal (AREF-ACCESSOR-TYPE-ERROR:SIGNAL-ERROR-IN-SAFE-CODE):

  This proposal changes the description of the AREF accessor, so that
  the section "Exceptional Situations" instead reads:

  "The accessor AREF should signal an error of type TYPE-ERROR
  if given an argument which is not an array.

Test Cases:

  (defun one (object)
    (declare (optimize (safety 3)))
    (aref object 0))

  (one 234) ; => ERROR: The value 234 is not of type ARRAY.

  (defun two (object)
    (declare (optimize (safety 3)))
    (setf (aref object 0) 345))

  (two 234) ; => ERROR: The value 234 is not of type ARRAY.

Rationale:

  We think it was a simple omission from the draft ANSI specification
  to indicate no exceptional situations.

Current Practice:

  ABCL 1.9.3-dev-fasl43
    (one 234) ; => [signals TYPE-ERROR with expected type ARRAY]
    (two 234) ; => [signals TYPE-ERROR with expected type ARRAY]

  ACL 10.1
    (one 234) => [signals type-error]
    (two 234) => [signals type-error]

  CCL 1.12-f98
    (one 234) ; => [signals TYPE-ERROR with expected type ARRAY]
    (two 234) ; => [signals TYPE-ERROR with expected type ARRAY]

  CLASP cclasp-boehmprecise-2.5.0-235-ge805dd64a-gfb774da1-cst
    (one 234) ; => [signals TYPE-ERROR with expected type ARRAY]
    (two 234) ; => [signals TYPE-ERROR with expected type ARRAY]

  CLISP 2.49.93+
    (one 234) => [signals simple-type-error]
    (two 234) => [signals simple-type-error]

  CMU 2024-03-10 18:28:32 (21E Unicode)
    (one 234) ; => [signals TYPE-ERROR with expected type ARRAY]
    (two 234) ; => [signals TYPE-ERROR with expected type ARRAY]

  ECL 23.9.9-UNKNOWN
    (one 234) ; => [signals TYPE-ERROR with expected type ARRAY]
    (two 234) ; => [signals TYPE-ERROR with expected type ARRAY]

  LWPE 7.1.2
    (one 234) => [signals type-error]
    (two 234) => [signals type-error]

  SBCL 2.4.1
    (one 234) ; => [signals TYPE-ERROR with expected type VECTOR]
    (two 234) ; => [signals TYPE-ERROR with expected type VECTOR]

  
CLISP 2.49.93+
  (one 234) 
 => [signals TYPE-ERROR with expected type ARRAY]
  (two
  234) 
 => [signals TYPE-ERROR with expected type ARRAY]

Cost to Implementors:

  Very small.  We believe that most implementations are already
  signaling an error in safe code.  Some implementations may signal a
  simple error, and those implementation would need to signal a
  type-error instead.

Cost to Users:

  None.

Cost of non-adoption:

  Application programmers may need to add numerous
  explicit checks to be certain that their code
  is conforming.

Benefits:

  Application programmers may rely on an error being
  signaled in safe code, and thus avoid having to
  add explicit checks in portable code.

Aesthetics:

  No influence.

Discussion:

  12-Jul-21 Pascal J. Bourguignon in in favor of this proposal.
