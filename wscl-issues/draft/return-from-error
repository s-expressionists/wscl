Issue:          RETURN-FROM-ERROR
Forum:          Cleanup
Category:       CLARIFICATION
Status:         draft
Edit History:   12-Sep-21, Version 1 by Tarn W. Burton.
References:     RETURN-FROM, PROGRAM-ERROR

Problem Description:

  In the draft ANSI Common Lisp specification, the description of the
  special operator RETURN-FROM indicates no exceptional situations.

Proposal (RETURN-FROM-ERROR:SIGNAL-ERROR-IN-SAFE-CODE):

  This proposal changes the description of the RETURN-FROM special
  operator, so that the section "Exceptional Situations" contains the
  following text:

  "The special operator RETURN-FROM will signal an error of type
  PROGRAM-ERROR if no BLOCK form named NAME lexically encloses the
  occurrence of the RETURN-FROM form."

Test Cases:

  (defmacro one (block-name return-name)
    `(locally
       (declare (optimize (safety 3)))
       (block ,block-name
         (return-from ,return-name))))

  (one a a) ; => NIL
  (one a b) ; => [signals PROGRAM-ERROR]

Rationale:

  We think it was a simple omission from the draft ANSI specification
  to indicate no exceptional situations.

Current Practice:

Cost to Implementors:

  Very small.  Most implementations already signal an error and
  would only need to change the implementation of RETURN-FROM to
  signal the correct error.

Cost to Users:

  None.

Cost of non-adoption:

  Application programmers may need to add explicit checks to be
  certain that their code is conforming.

Benefits:

  Application programmers may rely on an error being
  signaled in safe code, and thus avoid having to
  add explicit checks in portable code.

Aesthetics:

  No influence.

Discussion:

  TODO
