Issue:          NTHCDR-LIST-TYPE-ERROR
Forum:          Cleanup
Category:       CLARIFICATION
Status:         draft
Edit History:   11-Sep-22, Version 1 by Robert Strandh.
References:     NTHCDR

Problem Description:

  In the draft ANSI Common Lisp specification, the description of the
  function NTHCDR indicates an exceptional situations only for the
  first parameter N, and for the LIST parameter when N is greater than
  1.  For the case of N=2, it is indicated that the error checking is
  the same as for (NTHCDR 1 (CDR LIST)).  The situation can not be
  generalized to N=1, because (NTHCDR 0 (CDR LIST)) behaves the same
  as (CDR LIST) if it is invoked as a recursive call from NTHCDR, but
  if it is invoked directly by some other operator, then (CDR LIST)
  must return a list in order to conform to the restrictions in the
  "Arguments and Values" section.  There are therefore two cases that
  are not specified, namely for N=0 and N=1. 
  
Proposal (NTHCDR-LIST-TYPE-ERROR:SIGNAL-ERROR-IN-SAFE-CODE):

  This proposal changes the description of the NTHCDR function, so
  that the following sentences are added to the end of section
  "Exceptional Situations":

  "For N=1, (NTHCDR 1 LIST) behaves the same way as (CDR LIST).  For
  N=0, NTHCDR should signal an error of type TYPE-ERROR if the LIST
  argument is not a list.

Test Cases:

  (nthcdr 1 234) ; => [signals TYPE-ERROR with expected type LIST]
  (nthcdr 0 234) ; => [signals TYPE-ERROR with expected type LIST]

Rationale:

  We think it was a simple omission from the draft ANSI specification
  to fail to indicate exceptional situations for N=1 and N=0.

Current Practice:

Cost to Implementors:

  Very small.  We believe that most implementations are already
  signaling an error in safe code.  Some implementations may signal a
  simple error, and those implementation would need to signal a
  TYPE-ERROR instead.

Cost to Users:

  None.

Cost of non-adoption:

  Application programmers may need to add explicit checks to be
  certain that their code is conforming.

Benefits:

  Application programmers may rely on an error being
  signaled in safe code, and thus avoid having to
  add explicit checks in portable code.

Aesthetics:

  No influence.

Discussion:

  TODO
