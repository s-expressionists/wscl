Issue:          GO-NON-EXISTENT-TAG
Forum:          Cleanup
Category:       CLARIFICATION
Status:         draft
Edit History:   16-Sep-21, Version 1 by Tarn W. Burton.
References:     GO, PROGRAM-ERROR

Problem Description:

  In the draft ANSI Common Lisp specification, the description of
  the special operator GO indicates no exceptional situations. The
  description of GO includes the following statement:

  "The consequences are undefined if there is no matching tag
  lexically visible to the point of the go."

  The description of PROGRAM-ERROR includes the following
  statement:

  "The errors that result from naming a go tag or a block tag that
  is not lexically apparent are of type program-error."

Proposal (GO-NON-EXISTENT-TAG:SIGNAL-ERROR-IN-SAFE-CODE):

  This proposal changes the description of GO so the consequences
  of naming a go tag that is not lexically apparent are defined.
  The individual proposed changes to the description of GO are:

  1. Remove the sentence "The consequences are undefined if there
     is no matching tag lexically visible to the point of the go."

  2. Update the section "Exceptional Situations" to contain the
     following text: "The special operator GO will signal an error
     of type PROGRAM-ERROR if there is no matching tag lexically
     visible to the point of the go."

Test Cases:

  (defmacro one (go-name tag-name)
    `(locally
       (declare (optimize (safety 3)))
       (tagbody
         (go ,go-name)
        ,tag-name)))

  (one a a) ; => NIL
  (one a b) ; => [signals PROGRAM-ERROR]

Rationale:

  The ANSI specification is inconsistent in regards to the expected
  behavior of GO when applied to unmatched tags.

Current Practice:

Cost to Implementors:

  Very small.  Most implementations already signal an error and
  would only need to change the implementation of GO to signal
  the correct error.

Cost to Users:

  None.

Cost of non-adoption:

  Application programmers may need to add explicit checks to be
  certain that their code is conforming.

Benefits:

  Application programmers may rely on an error being
  signaled in safe code, and thus avoid having to
  add explicit checks in portable code.

Aesthetics:

  No influence.

Discussion:

  TODO
