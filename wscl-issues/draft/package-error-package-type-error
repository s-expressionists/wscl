Issue:          PACKAGE-ERROR-PACKAGE-TYPE-ERROR
Forum:          Cleanup
Category:       CLARIFICATION
Status:         draft
Edit History:   22-Jul-21, Version 1 by Robert Strandh.
                18-Sep-21, Version 2 by Tarn W. Burton (update current practice)
References:     PACKAGE-ERROR-PACKAGE

Problem Description:

  In the draft ANSI Common Lisp specification, the description of the
  function PACKAGE-ERROR-PACKAGE indicates no exceptional situations.
  The section "Arguments and Values" mentions that the condition
  argument must be a condition of type PACKAGE-ERROR, which by default
  means that the consequences are undefined if an object that is not a
  condition of type PACKAGE-ERROR is given as an argument.

Proposal (PACKAGE-ERROR-PACKAGE-TYPE-ERROR:SIGNAL-ERROR-IN-SAFE-CODE):

  This proposal changes the description of the PACKAGE-ERROR-PACKAGE
  function, so that the section "Exceptional Situations" instead
  reads:

  "The function PACKAGE-ERROR-PACKAGE should signal an error of type
  TYPE-ERROR if the condition argument is not a condition of type
  PACKAGE-ERROR."

Test Cases:

  (defun one (object)
    (declare (optimize (safety 3)))
    (package-error-package object))

  (one 234) ; => [signals TYPE-ERROR with expected type PACKAGE-ERROR]

Rationale:

  We think it was a simple omission from the draft ANSI specification
  to indicate no exceptional situations.

Current Practice:

Cost to Implementors:

  Very small.  We believe that most implementations are already
  signaling an error in safe code.  Some implementations may signal a
  simple error, and those implementation would need to signal a
  TYPE-ERROR instead.  Some implementations, like SBCL may signal a
  type error but with expected type CONDITION, and those
  implementations would have to change so that PACKAGE-ERROR is the
  expected type instead.

Cost to Users:

  None.

Cost of non-adoption:

  Application programmers may need to add explicit checks to be
  certain that their code is conforming.

Benefits:

  Application programmers may rely on an error being
  signaled in safe code, and thus avoid having to
  add explicit checks in portable code.

Aesthetics:

  No influence.

Discussion:

  TODO
