Issue:          SETF-FDEFINITION-TYPE-ERROR
Forum:          Cleanup
Category:       CLARIFICATION
Status:         draft
Edit History:   21-Dec-22, Version 1 by Robert Strandh,
References:     (SETF FDEFINITION)

Problem Description:

  In the draft ANSI Common Lisp specification, the description of the
  accessor FDEFINITION indicates no exceptional situations for the
  case where FDEFINITION used with SETF is given an object other than
  a function.  The "Notes" section does indicate this requirement, but
  the "Notes" section is not normative.  As a result, the, the
  behavior is by definition undefined when FDEFINITION used with SETF
  is given an object other than a function.

  Furthermore, in the "Notes" section, appears the prase "It is an
  error to set the fdefinition of a function-name to a symbol, a list,
  or the value returned by FDEFINITION on the name of a macro or
  special form".  The term, "special form" should be replaced by
  "special operator".  And the "Exceptional Situations" section should
  indicate that an error is signaled when FDEFINITION is used with
  SETF and the NEW-DEFINITION argument is an object returned by
  a call to FDEFINITION on the name of a macro or a special operator.

Proposal (SETF-FDEFINITION-TYPE-ERROR:SIGNAL-ERROR):

  This proposal adds the following phrase to the end of the section
  "Exceptional Situations":

  "An error of type TYPE-ERROR is signaled in the SETF case when a an
  object other than a function is given as the NEW-DEFINITION
  argument.  An error is signaled in the SETF case when an object is
  given as the NEW-DEFINITION argument, when that object is the return
  value of calling FDEFINITION on a macro or a special operator."

  Furthermore, this proposal removes the phrase "It is an error to set
  the fdefinition of a function-name to a symbol, a list, or the value
  returned by FDEFINITION on the name of a macro or special form" from
  the "Notes" section.

Test Cases:

  (defun one (object)
    (declare (optimize (safety 0)))
    (setf (fdefinition 'foo) object))

  (one 'foo) ; => [signals TYPE-ERROR with expected type FUNCTION]
  (one '(foo)) ; => [signals TYPE-ERROR with expected type FUNCTION]
  (one (fdefinition 'let)) ; => [signals ERROR]
  (one (fdefinition 'defun)) ; => [signals ERROR]

Rationale:

  We think the phrase in the "Notes" section was meant to be
  normative.

Current Practice:

Cost to Implementors:

  Very small.  We believe that most implementations are already
  signaling an error.  Some implementations may signal a simple error,
  and those implementation would need to signal a type-error instead.

Cost to Users:

  None.

Cost of non-adoption:

  Since the "Notes" section is not normative, application programmers
  may need to add numerous explicit checks to be certain that their
  code is conforming.

Benefits:

  Application programmers may rely on an error being signaled, and
  thus avoid having to add explicit checks in portable code.

Aesthetics:

  No influence.

Discussion:

  TODO
