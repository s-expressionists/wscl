Issue:          PACKAGE-USED-BY-LIST-TYPE-ERROR
Forum:          Correction
Category:       CORRECTION
Status:         draft
Edit History:   20-Dec-22, Version 1 by Robert Strandh.
                20-Dec-22, Version 2 by Robert Strandh.
                20-Dec-22, Version 3 by Robert Strandh.
References:     PACKAGE-USED-BY-LIST

Problem Description:

  In the draft ANSI Common Lisp specification, the description of the
  function PACKAGE-USED-BY-LIST, the argument PACKAGE is a package
  designator.  However, in the "Exceptional Situations" section, it
  is indicated that an error should be signaled if that argument is
  not a package, thus explicitly disallowing a string designator
  as the value of the argument.

Proposal (PACKAGE-USED-BY-LIST-TYPE-ERROR:ALLOW-STRING-DESIGNATOR):

  This proposal changes the description of the function
  PACKAGE-USED-BY-LIST, so that the section "Exceptional Situations"
  reads:

  "Should signal an error of type TYPE-ERROR if PACKAGE is not a
  package designator."

Test Cases:

  (defun one (object)
    (declare (optimize (safety 3)))
    (listp (package-used-by-list object)))

  (one "CL") ; => T
  (one "ZZ") ; => [signals TYPE-ERROR with expected type PACKAGE]

Rationale:

  We think an update of the secton "Exceptional Situations" was
  forgotten perhaps when this function was modified to allow a package
  designator rather than a package object as an argument.

Current Practice:

Cost to Implementors:

  Very small.  We believe that most implementations are already
  allow a string designator for this argument.

Cost to Users:

  None.

Cost of non-adoption:

  Application programmers may need to make sure this function is
  called with a package object rather than a string designator,
  presumably by always calling FIND-PACKAGE with a string designator
  before calling this function.

Benefits:

  Application programmers may rely on this function allowing
  a string designator, and thus can avoid an explicit call
  to FIND-PACKAGE before calling this function.

Aesthetics:

  No influence.

Discussion:

  TODO
