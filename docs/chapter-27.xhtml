<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="style.css"/><script src="permalink.js"/><script src="navigation.js"/><title>Well-specified Common Lisp â€” Concurrency</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">Concurrency</span><br/><ol class="local-toc"><li><a href="#section-Concurrency">Concurrency</a><ol> <li><a href="#section-Definition">Definition</a><ol> <li><a href="#section-Reordering">Reordering</a><ol> </ol></li><li><a href="#section-SequentialConsistency">Sequential Consistency</a><ol> </ol></li></ol></li><li><a href="#section-Threads">Threads</a><ol> </ol></li><li><a href="#section-Locks">Locks</a><ol> <li><a href="#section-SemanticsOfLocks">Semantics of Locks</a><ol> </ol></li></ol></li><li><a href="#section-ConditionVariables">Condition Variables</a><ol> <li><a href="#section-SemanticsofConditionVariables">Semantics of Condition Variables</a><ol> </ol></li></ol></li></ol></li><li><a href="#section-Atomics">Atomics</a><ol> <li><a href="#section-AtomicOperations">Atomic Operations</a><ol> <li><a href="#section-ReadsandWritesandModificationOrders">Reads and Writes and Modification Orders</a><ol> </ol></li><li><a href="#section-AtomicOrdering">Atomic Ordering</a><ol> </ol></li><li><a href="#section-AtomicRead-Modify-WriteOperations">Atomic Read-Modify-Write Operations</a><ol> </ol></li><li><a href="#section-TheATOMICMacroandAtomicExpansions">The ATOMIC Macro and Atomic Expansions</a><ol> </ol></li><li><a href="#section-Fences">Fences</a><ol> </ol></li></ol></li><li><a href="#section-AcquireandReleaseOrderings">Acquire and Release Orderings</a><ol> </ol></li><li><a href="#section-RelaxedOrdering">Relaxed Ordering</a><ol> </ol></li></ol></li><li><a href="#section-Interruption">Interruption</a><ol> <li><a href="#section-Interruption">Interruption</a><ol> <li><a href="#section-ImplicitInterruptProcessing">Implicit Interrupt Processing</a><ol> </ol></li></ol></li></ol></li><li><a href="#section-Dictionary">Dictionary</a><ol> <li><a href="#type-thread">thread</a></li><li><a href="#type-thread-error">thread-error</a></li><li><a href="#function-thread-error-thread">thread-error-thread</a></li><li><a href="#type-abnormal-exit">abnormal-exit</a></li><li><a href="#function-abort-thread">abort-thread</a></li><li><a href="#function-join-thread">join-thread</a></li><li><a href="#function-make-thread">make-thread</a></li><li><a href="#function-current-thread">current-thread</a></li><li><a href="#type-lock">lock</a></li><li><a href="#function-lockp">lockp</a></li><li><a href="#function-lock-name">lock-name</a></li><li><a href="#function-make-lock">make-lock</a></li><li><a href="#function-acquire-lock">acquire-lock</a></li><li><a href="#function-release-lock">release-lock</a></li><li><a href="#macro-with-lock-held">with-lock-held</a></li><li><a href="#function-atomic">atomic</a></li><li><a href="#macro-atomic-update">atomic-update, atomic-update-explicit</a></li><li><a href="#macro-atomic-incf">atomic-incf, atomic-decf, atomic-incf-explicit, atomic-decf-explicit</a></li><li><a href="#declaration-interruptible">interruptible</a></li></ol></li></ol></nav><div class="content"><section id="section-ChapTwentySeven"><h1 class="section-title">27. Concurrency</h1>Concurrency constructs leave the order of some <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluations</a>
unspecified, allowing the implementation to order them as they see
fit. In some situations it may be possible to perform multiple
<a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluations</a> simultaneously. This can greatly improve the
performance and capabilities of programs, but complicates their
semantics.<br/>Concurrency in Lisp is expressed via <span class="glossary-reference error">glossary:threads</span>. Each
<span class="glossary-reference error">glossary:thread</span> proceeds as though it was performing an ordered sequence
of <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluations</a> according to the usual rules specified in
<a class="section-reference" href="chapter-3.xhtml#section-EvaluationModel">The Evaluation Model</a>. The order <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluations</a> in different
<span class="glossary-reference error">glossary:threads</span> take place in, however, is unspecified, unless
controlled by what are called synchronization operations, also
described in this chapter.<br/>It is important to note that, without the presence of synchronization
operations, the implementation is only constrained as to the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluation</a> order within a <span class="glossary-reference error">glossary:thread</span>. This means that
without synchronization, <a class="glossary-reference" href="chapter-26.xhtml#glossary-conforming code">conforming code</a> cannot rely on
<span class="glossary-reference error">glossary:side effects</span> in another <span class="glossary-reference error">glossary:thread</span> happening in any order,
including the order that seems clear from the program text.<br/>Concurrency is explained more formally in the remainder of this
section.<br/><section id="section-Concurrency"><h2 class="section-title">Concurrency</h2><section id="section-Definition"><h3 class="section-title">Definition</h3>The normal <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluation</a> rules in <a class="section-reference" href="chapter-3.xhtml#section-EvaluationModel">The Evaluation Model</a>
define the order <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluations</a> occur in in a non-concurrent
program. For example, in <code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-progn">progn</a> <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>form</mrow><mo>1</mo></msub></math> <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>form</mrow><mo>2</mo></msub></math>)</span>
</span></code>, any
<a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluation</a> of <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>form</mrow><mo>1</mo></msub></math> takes place before that of <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>form</mrow><mo>2</mo></msub></math>. In
general, the <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluation</a> order is not totally fixed by the
program text. For example, <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluation</a> of a function body may
proceed in different ways depending on the inputs to the function, and
function bodies may be <span class="glossary-reference error">glossary:evaluated</span> multiple times although they
only appear in the source code once. If the <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-progn">progn</a>
<a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> is <span class="glossary-reference error">glossary:evaluated</span> multiple times, an <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluation</a>
of <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>form</mrow><mo>2</mo></msub></math> may take place before an <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluation</a> of <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>form</mrow><mo>1</mo></msub></math>. As
such the non-concurrent <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluation</a> order rules in Section
3.1.2, and the concurrent order rules described here, constrain, but
do not totally fix the <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluation</a> order of any execution of a
program.<br/>We formalize this notion of <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluation</a> order as follows.<br/>An <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluation</a> <math xmlns="http://www.w3.org/1998/Math/MathML">A</math> in one <span class="glossary-reference error">glossary:thread</span> is
<span class="glossary-reference error">glossary:sequenced-before</span> another <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluation</a> <math xmlns="http://www.w3.org/1998/Math/MathML">B</math> in the same
<span class="glossary-reference error">glossary:thread</span> if <math xmlns="http://www.w3.org/1998/Math/MathML">A</math> must occur before <math xmlns="http://www.w3.org/1998/Math/MathML">B</math> according to the usual
evaluation rules. The <span class="glossary-reference error">glossary:sequenced-before</span> relation between
<a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluations</a> is antisymmetric and transitive: if <math xmlns="http://www.w3.org/1998/Math/MathML">A</math> is
<span class="glossary-reference error">glossary:sequenced-before</span> <math xmlns="http://www.w3.org/1998/Math/MathML">B</math>, <math xmlns="http://www.w3.org/1998/Math/MathML">B</math> is not <span class="glossary-reference error">glossary:sequenced-before</span>
<math xmlns="http://www.w3.org/1998/Math/MathML">A</math>. If <math xmlns="http://www.w3.org/1998/Math/MathML">A</math> is <span class="glossary-reference error">glossary:sequenced-before</span> <math xmlns="http://www.w3.org/1998/Math/MathML">B</math> and <math xmlns="http://www.w3.org/1998/Math/MathML">B</math> is
<span class="glossary-reference error">glossary:sequenced-before</span> <math xmlns="http://www.w3.org/1998/Math/MathML">C</math>, <math xmlns="http://www.w3.org/1998/Math/MathML">A</math> is <span class="glossary-reference error">glossary:sequenced-before</span> <math xmlns="http://www.w3.org/1998/Math/MathML">C</math>.<br/>An <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluation</a> in one <span class="glossary-reference error">glossary:thread</span> may <span class="glossary-reference error">glossary:synchronize-with</span>
an <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluation</a> in another <span class="glossary-reference error">glossary:thread</span>. The
<span class="glossary-reference error">glossary:synchronize-with</span> ordering is also antisymmetric and
transitive. Operations that may induce a <span class="glossary-reference error">glossary:synchronize-with</span>
ordering are called <span class="glossary-reference error">glossary:synchronization operations</span>. The most
important synchronization operations are as follows:<br/><ul><li>Release operations, such as <a class="function-reference" href="#function-release-lock">release-lock</a>, may
  <span class="glossary-reference error">glossary:synchronize-with</span> acquisition operations, such as
  <a class="function-reference" href="#function-acquire-lock">acquire-lock</a>, that refer to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-same">same</a>
  <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>. Acquisition and release operations are explained in
  more detail in <a class="section-reference" href="#section-Locks">Locks</a> [and <a class="section-reference" href="#section-AtomicOperations">Atomic Operations</a>].
</li><li><a class="function-reference" href="#function-make-thread">make-thread</a> <span class="glossary-reference error">glossary:synchronizes-with</span> the first
  <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluation</a> in the <span class="glossary-reference error">glossary:thread</span> it creates.
</li><li>The final evaluation in a <span class="glossary-reference error">glossary:thread</span>
  <span class="glossary-reference error">glossary:synchronizes-with</span> all <a class="function-reference" href="#function-join-thread">join-thread</a> calls on that
  <span class="glossary-reference error">glossary:thread</span> returning, as well as any <span class="function-reference error">function:thread-alive-p</span>
  calls on that <span class="glossary-reference error">glossary:thread</span> that return <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>.
</li></ul><br/>A third antisymmetric and transitive relation between
<a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluations</a> is the <span class="glossary-reference error">glossary:happens-before</span> ordering. An
<a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluation</a> <math xmlns="http://www.w3.org/1998/Math/MathML">A</math> <span class="glossary-reference error">glossary:happens-before</span> another <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluation</a>
<math xmlns="http://www.w3.org/1998/Math/MathML">B</math> if <math xmlns="http://www.w3.org/1998/Math/MathML">A</math> is <span class="glossary-reference error">glossary:sequenced-before</span> <math xmlns="http://www.w3.org/1998/Math/MathML">B</math>, or <math xmlns="http://www.w3.org/1998/Math/MathML">A</math> is
<span class="glossary-reference error">glossary:synchronized-with</span> <math xmlns="http://www.w3.org/1998/Math/MathML">B</math>, or there is a third <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluation</a>
<math xmlns="http://www.w3.org/1998/Math/MathML">C</math> such that <math xmlns="http://www.w3.org/1998/Math/MathML">A</math> <span class="glossary-reference error">glossary:happens-before</span> <math xmlns="http://www.w3.org/1998/Math/MathML">C</math> and <math xmlns="http://www.w3.org/1998/Math/MathML">C</math>
<span class="glossary-reference error">glossary:happens-before</span> <math xmlns="http://www.w3.org/1998/Math/MathML">B</math>.<br/>The <span class="glossary-reference error">glossary:happens-before</span> relation defines which <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluations</a>
occur before others in the intuitive sense. In a program that does not
use concurrency, all <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluations</a> must occur in one well defined
order, as for any two <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluations</a>, one is
<span class="glossary-reference error">glossary:sequenced-before</span> (and therefore <span class="glossary-reference error">glossary:happens-before</span>) the
other. In a program that does use concurrency, two <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluations</a>
may not have any necessary <span class="glossary-reference error">glossary:happens-before</span> relation between
them.<br/>If an <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluation</a> <math xmlns="http://www.w3.org/1998/Math/MathML">A</math> does not <span class="glossary-reference error">glossary:happen before</span> another
<a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluation</a> <math xmlns="http://www.w3.org/1998/Math/MathML">B</math>, and <math xmlns="http://www.w3.org/1998/Math/MathML">B</math> does not <span class="glossary-reference error">glossary:happen before</span> <math xmlns="http://www.w3.org/1998/Math/MathML">A</math>, the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluations</a> are unordered. The <span class="glossary-reference error">glossary:side effects</span> (e.g. writes
to <span class="glossary-reference error">glossary:places</span>) performed by <math xmlns="http://www.w3.org/1998/Math/MathML">A</math> may not be visible to <math xmlns="http://www.w3.org/1998/Math/MathML">B</math>, or may
appear partially completed, or may appear incoherently. For the case
of writes to <span class="glossary-reference error">glossary:places</span>, the visible effects may be constrained, as
described in Section NN.1.2 (Conflicts and Data Races). Because of the
unusual effects, if <math xmlns="http://www.w3.org/1998/Math/MathML">A</math> is affected by the side effects of <math xmlns="http://www.w3.org/1998/Math/MathML">B</math> or vice
versa, it is usually prudent to ensure that one <span class="glossary-reference error">glossary:happens-before</span>
the other.<br/><section id="section-Reordering"><h4 class="section-title">Reordering</h4>The weak constraints on <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluations</a> between <span class="glossary-reference error">glossary:threads</span> can
sometimes produce very unintuitive results. This section attempts to
explain one reason for this in more detail, in order to provide some
intuition for programmers.<br/>Consider the <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>
<pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-number">1</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">y</span> <span class="syntax-number">1</span>)</span>)</span> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-number">0</span>)</span> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">y</span> <span class="syntax-number">0</span>)</span> <span class="syntax-interned-symbol">...</span>)</span>
</span></code></pre>.
The write to <code><span class="syntax-root"><span class="syntax-interned-symbol">x</span>
</span></code> is <span class="glossary-reference error">glossary:sequenced-before</span> the write to
<code><span class="syntax-root"><span class="syntax-interned-symbol">y</span>
</span></code>. However, the evaluation of <code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">y</span> <span class="syntax-number">0</span>)</span>
</span></code> is not affected by
the side effects of <code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-number">0</span>)</span>
</span></code>. Subsequent code <span class="explicit-bold"> in the same
  <span class="glossary-reference error">glossary:thread</span></span> is not able to discern which write actually took
place first. As such, an implementation may decide to actually
evaluate the write to <code><span class="syntax-root"><span class="syntax-interned-symbol">y</span>
</span></code> before the write to <code><span class="syntax-root"><span class="syntax-interned-symbol">x</span>
</span></code>. In other words,
it has reordered the code. In this example there is no obvious point
to doing so, but this is sometimes useful for optimization purposes.<br/>The situation is complicated by concurrency. Consider what happens if
another <span class="glossary-reference error">glossary:thread</span> evaluates <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span>
</span></code>, and this evaluation is
unordered with respect to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluation</a> of the <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a>
<a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>. If the implementation has performed the reordering
described, it might be possible for <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span>
</span></code> to result in <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-number">1</span>
  <span class="syntax-number">0</span>)</span>
</span></code>, even though from looking at the obvious meaning of the
<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>, there is no point at which <code><span class="syntax-root"><span class="syntax-interned-symbol">x</span>
</span></code> is <code><span class="syntax-root"><span class="syntax-number">1</span>
</span></code>
and <code><span class="syntax-root"><span class="syntax-interned-symbol">y</span>
</span></code> is <code><span class="syntax-root"><span class="syntax-number">0</span>
</span></code>.<br/>Other valid transformations with similar effects are possible, such as
eliding writes. These transformations are widely carried out by
compilers and machines and are very important to
performance. Programmers working with concurrency should keep in mind
the unintuitive effects unordered evaluations can cause.<br/>The particular semantics of unordered writes and reads are explained
in more detail in Section NN.1.3 (Conflicts and Data Races).<br/></section><section id="section-SequentialConsistency"><h4 class="section-title">Sequential Consistency</h4>A set of <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluations</a> is <span class="glossary-reference error">glossary:sequentially consistent</span> iff
there is a total order on them, and this order is consistent with the
program's <span class="glossary-reference error">glossary:happens-before</span> order. In other words, for any two
sequentially consistent operations, one <span class="glossary-reference error">glossary:happens-before</span> the
other. This means that any <span class="glossary-reference error">glossary:sequentially consistent</span>
<a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluation</a> observes the <span class="glossary-reference error">glossary:side effects</span> of all
<span class="glossary-reference error">glossary:sequentially consistent</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluations</a> that
<span class="glossary-reference error">glossary:happen-before</span> it. If <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluations</a> across <span class="glossary-reference error">glossary:threads</span>
are <span class="glossary-reference error">glossary:sequentially consistent</span>, the execution of the program
consists of an interleaving of these <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluations</a> in some order
that is undefined other than being consistent with the
<span class="glossary-reference error">glossary:sequenced-before</span> order.<br/>Sequential consistency is a simple and intuitive notion of
concurrency, but some concurrent programs are not sequentially
consistent. Some compiler optimizations, as well as runtime
optimizations like per-<span class="glossary-reference error">glossary:thread</span> caches, defeat sequential
consistency, and so to guarantee sequential consistency requested by
the programmer, an implementation may have to disable certain
optimizations. As such, it is important that programmers be aware of
the more complex behaviors that they may have to deal with.<br/></section></section><section id="section-Threads"><h3 class="section-title">Threads</h3><br/>A <span class="glossary-reference error">glossary:thread</span> is an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> that represents a thread of
execution. Each <span class="glossary-reference error">glossary:thread</span> begins by calling a function provided
when the <span class="glossary-reference error">glossary:thread</span> is created, and ends when that function returns, or
when the thread is aborted. The detailed semantics of threads are
explained in Section NN.1 (Concurrency Concepts).<br/><span class="float" id="figure-Figure [whatever]. Some defined names relating to threads."><table><tbody><tr><td><a class="type-reference" href="#type-thread">thread</a></td><td><span class="?-reference error">?:thread-name</span></td><td><span class="?-reference error">?:threadp</span></td><td><a class="function-reference" href="#function-make-thread">make-thread</a></td><td><a class="function-reference" href="#function-current-thread">current-thread</a></td></tr><tr><td><span class="?-reference error">?:all-threads</span></td><td><a class="function-reference" href="#function-join-thread">join-thread</a></td><td><a class="function-reference" href="#function-abort-thread">abort-thread</a></td><td><span class="?-reference error">?:thread-yield</span></td><td><span class="?-reference error">?:interrupt-thread</span></td></tr><tr><td><span class="?-reference error">?:signal-in-thread</span></td><td><span class="?-reference error">?:warn-in-thread</span></td><td><span class="?-reference error">?:error-in-thread</span></td><td><span class="?-reference error">?:destroy-thread</span></td><td><span class="?-reference error">?:thread-alive-p</span></td></tr></tbody></table><div class="caption">Figure [whatever]. Some <a class="glossary-reference" href="chapter-26.xhtml#glossary-defined name">defined names</a> relating to <span class="glossary-reference error">glossary:threads</span>.</div></span><br/></section><section id="section-Locks"><h3 class="section-title">Locks</h3><br/>A lock is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> that can be used to
implement mutual exclusion, i.e. preventing multiple <span class="glossary-reference error">glossary:threads</span>
from <span class="glossary-reference error">glossary:evaluating</span> the same code simultaneously.
<span class="reviewer-note" id="reviewer-note-also-used-for-arbitr"><span class="reviewer-note-tooltip"><span class="reviewer">Moringen</span>: Also used for arbitrating access to resources from
  different code sections</span>â€£</span> A <span class="glossary-reference error">glossary:lock</span> that is not held can be
<span class="glossary-reference error">glossary:acquired</span> by a <span class="glossary-reference error">glossary:thread</span>, after which it is held by that
<span class="glossary-reference error">glossary:thread</span>. A <span class="glossary-reference error">glossary:thread</span> holding a <span class="glossary-reference error">glossary:lock</span> can
<span class="glossary-reference error">glossary:release</span> it, after which it is not held. Because only one
<span class="glossary-reference error">glossary:thread</span> can hold a <span class="glossary-reference error">glossary:lock</span> at a time, code that can only be
<span class="glossary-reference error">glossary:evaluated</span> while a <span class="glossary-reference error">glossary:lock</span> is held can only be
<span class="glossary-reference error">glossary:evaluated</span> by one <span class="glossary-reference error">glossary:thread</span> at a time.<br/><span class="float" id="figure-Figure [whatever]. Some defined names relating to locks."><table><tbody><tr><td><a class="type-reference" href="#type-lock">lock</a></td><td><a class="function-reference" href="#function-lockp">lockp</a></td><td><a class="function-reference" href="#function-lock-name">lock-name</a></td><td><a class="function-reference" href="#function-make-lock">make-lock</a></td></tr><tr><td><a class="function-reference" href="#function-acquire-lock">acquire-lock</a></td><td><a class="function-reference" href="#function-release-lock">release-lock</a></td><td><a class="macro-reference" href="#macro-with-lock-held">with-lock-held</a></td><td/></tr></tbody></table><div class="caption">Figure [whatever]. Some <a class="glossary-reference" href="chapter-26.xhtml#glossary-defined name">defined names</a> relating to <span class="glossary-reference error">glossary:locks</span>.</div></span><br/><section id="section-SemanticsOfLocks"><h4 class="section-title">Semantics of Locks</h4><br/>For any execution of a program, each <span class="glossary-reference error">glossary:lock</span> it uses has a
modification order. The <span class="glossary-reference error">glossary:modification order</span> is a sequence of
<span class="glossary-reference error">glossary:lock acquisitions</span> followed by <span class="glossary-reference error">glossary:lock releases</span>. The
<span class="glossary-reference error">glossary:modification order</span> may be empty if no <span class="glossary-reference error">glossary:thread</span> ever
acquires the <span class="glossary-reference error">glossary:lock</span>, but otherwise, it begins with a <span class="glossary-reference error">glossary:lock
  acquisition</span>. A <span class="glossary-reference error">glossary:lock</span>'s <span class="glossary-reference error">glossary:modification order</span> is the same
between all <span class="glossary-reference error">glossary:threads</span>.<br/>A <span class="glossary-reference error">glossary:lock acquisition</span> specifically occurs when a call to
<a class="function-reference" href="#function-acquire-lock">acquire-lock</a> on that <span class="glossary-reference error">glossary:lock</span> returns <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>, and a
<span class="glossary-reference error">glossary:lock release</span> occurs when a call to <a class="function-reference" href="#function-release-lock">release-lock</a> on
that <span class="glossary-reference error">glossary:lock</span> returns. [This is phrased pedantically so that for
example a RELEASE-LOCK call that signals an error due to the lock not
being held is not counted.]<br/>For any <span class="glossary-reference error">glossary:lock release</span> in the <span class="glossary-reference error">glossary:modification order</span>, the
<span class="glossary-reference error">glossary:lock acquisition</span> immediately before it in the order is
<span class="glossary-reference error">glossary:sequenced-before</span> the <span class="glossary-reference error">glossary:lock release</span>, because only the
<span class="glossary-reference error">glossary:thread</span> that acquired a <span class="glossary-reference error">glossary:lock</span> can release it. It is
further defined that for any <span class="glossary-reference error">glossary:lock acquisition</span> of the
<span class="glossary-reference error">glossary:lock</span> past the first, the <span class="glossary-reference error">glossary:lock release</span> immediately before
it in the order <span class="glossary-reference error">glossary:synchronizes-with</span> the <span class="glossary-reference error">glossary:lock
  acquisition</span>. Together, these two properties ensure that any
operation in the <span class="glossary-reference error">glossary:modification order</span> <span class="glossary-reference error">glossary:happens-before</span> the
subsequent operation in the <span class="glossary-reference error">glossary:modification order</span>, and therefore
<span class="glossary-reference error">glossary:happens-before</span> all subsequent operations in the
<span class="glossary-reference error">glossary:modification order</span>.<br/>The <span class="glossary-reference error">glossary:modification orders</span> of <span class="glossary-reference error">glossary:locks</span> must result in a
consistent (i.e. acyclic) <span class="glossary-reference error">glossary:happens-before</span> ordering of
<a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluations</a>. Beyond this and the above properties, the
<span class="glossary-reference error">glossary:modification order</span> is not defined and may vary between
executions.<br/></section></section><section id="section-ConditionVariables"><h3 class="section-title">Condition Variables</h3>Condition variables provide a mechanism for <span class="glossary-reference error">glossary:threads</span> to put
themselves to sleep while waiting for the state of something to
change, then to be subsequently woken by another <span class="glossary-reference error">glossary:thread</span> which
has changed the state.<br/>A condition variable must be used in conjunction with a <span class="glossary-reference error">glossary:lock</span> to
protect access to the state of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> of interest. The
procedure is as follows:<br/>Suppose there are two <span class="glossary-reference error">glossary:threads</span> <math xmlns="http://www.w3.org/1998/Math/MathML">A</math> and <math xmlns="http://www.w3.org/1998/Math/MathML">B</math>, a condition variable
<math xmlns="http://www.w3.org/1998/Math/MathML">CV</math>, and some kind of notional event channel <math xmlns="http://www.w3.org/1998/Math/MathML">C</math>. <math xmlns="http://www.w3.org/1998/Math/MathML">A</math> is consuming
events in <math xmlns="http://www.w3.org/1998/Math/MathML">C</math>, and <math xmlns="http://www.w3.org/1998/Math/MathML">B</math> is producing them.<span class="reviewer-note" id="reviewer-note-name-the&#10;--lock,-lik"><span class="reviewer-note-tooltip"><span class="reviewer">Moringen</span>: Name the
  lock, like "A \term{lock} $L$ that safeguards access to $C$"?</span>â€£</span><br/><ol><li><math xmlns="http://www.w3.org/1998/Math/MathML">A</math> acquires the <span class="glossary-reference error">glossary:lock</span> that safeguards access to <math xmlns="http://www.w3.org/1998/Math/MathML">C</math>
</li><li><math xmlns="http://www.w3.org/1998/Math/MathML">A</math> threads<span class="reviewer-note" id="reviewer-note-reads?"><span class="reviewer-note-tooltip"><span class="reviewer">Moringen</span>: reads?</span>â€£</span> and removes all
  events that are available in <math xmlns="http://www.w3.org/1998/Math/MathML">C</math>
</li><li>When <math xmlns="http://www.w3.org/1998/Math/MathML">C</math> is empty, <math xmlns="http://www.w3.org/1998/Math/MathML">A</math> calls <span class="function-reference error">function:condition-wait</span>, which
  atomically releases the <span class="glossary-reference error">glossary:lock</span> and puts <math xmlns="http://www.w3.org/1998/Math/MathML">A</math> to sleep on <math xmlns="http://www.w3.org/1998/Math/MathML">CV</math>
</li><li><math xmlns="http://www.w3.org/1998/Math/MathML">A</math> continues to sleep until notified. When notified,
  <span class="function-reference error">function:condition-wait</span> acquires the <span class="glossary-reference error">glossary:lock</span> again before
  returning
</li><li>Loop back to step 2, for as long as threading should
  continue
</li></ol><br/>When <math xmlns="http://www.w3.org/1998/Math/MathML">B</math> generates an event <math xmlns="http://www.w3.org/1998/Math/MathML">E</math>, it<br/><ol><li>acquires the <span class="glossary-reference error">glossary:lock</span> guarding <math xmlns="http://www.w3.org/1998/Math/MathML">C</math>
</li><li>adds <math xmlns="http://www.w3.org/1998/Math/MathML">E</math> to the channel <math xmlns="http://www.w3.org/1998/Math/MathML">C</math>
</li><li>releases the <span class="glossary-reference error">glossary:lock</span>
</li><li>calls <span class="function-reference error">function:condition-notify</span> on <math xmlns="http://www.w3.org/1998/Math/MathML">CV</math> to wake any sleeping
  <span class="glossary-reference error">glossary:thread</span> <span class="reviewer-note" id="reviewer-note-any-\term{thread}-sl"><span class="reviewer-note-tooltip"><span class="reviewer">Moringen</span>: any \term{thread} sleeping on $CV$
    such as $A$</span>â€£</span>
</li></ol><br/>To avoid the "lost wakeup" problem, the implementation must guarantee
that <span class="function-reference error">function:condition-wait</span> in <span class="glossary-reference error">glossary:thread</span> <math xmlns="http://www.w3.org/1998/Math/MathML">A</math> atomically releases
the <span class="glossary-reference error">glossary:lock</span> and sleeps. If this is not guaranteed there is the
possibility that <span class="glossary-reference error">glossary:thread</span> <math xmlns="http://www.w3.org/1998/Math/MathML">B</math> can add an event and call
<span class="function-reference error">function:condition-notify</span> between the <span class="glossary-reference error">glossary:lock release</span> and the
sleep &ndash; in this case the notify call would not see <math xmlns="http://www.w3.org/1998/Math/MathML">A</math>, which would
be left sleeping despite there being an event available.<br/>[copied almost verbatim from bordeaux, except the lock can be released
before notifying the CV]
<span class="reviewer-note" id="reviewer-note-ask-bordeaux-threads"><span class="reviewer-note-tooltip"><span class="reviewer">Moringen</span>: Ask bordeaux-threads authors to release this
  section into the public domain?</span>â€£</span><br/><span class="float" id="figure-Some defined names relating to condition variables"><table><tbody><tr><td><span class="?-reference error">?:condition-variable</span></td><td><span class="?-reference error">?:condition-variable-p</span></td><td><span class="?-reference error">?:make-condition-variable</span></td><td><span class="?-reference error">?:condition-variable-name</span></td></tr><tr><td><span class="?-reference error">?:condition-wait</span></td><td><span class="?-reference error">?:condition-notify</span></td><td><span class="?-reference error">?:condition-notify-broadcast</span></td><td/></tr></tbody></table><div class="caption">Some <a class="glossary-reference" href="chapter-26.xhtml#glossary-defined name">defined names</a> relating to <span class="glossary-reference error">glossary:condition variables</span></div></span><br/><section id="section-SemanticsofConditionVariables"><h4 class="section-title">Semantics of Condition Variables</h4>Implicitly associated with a <span class="glossary-reference error">glossary:condition variable</span> is a set of
<span class="glossary-reference error">glossary:threads</span> currently blocked on it. <span class="function-reference error">function:condition-wait</span> adds a
<span class="glossary-reference error">glossary:thread</span> to this set, <span class="function-reference error">function:condition-notify</span> removes one
arbitrarily selected <span class="glossary-reference error">glossary:thread</span> from it, and
<span class="function-reference error">function:condition-broadcast</span> empties the set entirely.<br/>A <span class="function-reference error">function:condition-wait</span>'s adding the <span class="glossary-reference error">glossary:current thread</span> to the
set clearly must <span class="glossary-reference error">glossary:happen-before</span> <span class="function-reference error">function:condition-notify</span> or
<span class="function-reference error">function:condition-broadcast</span> removing it. Since the
<span class="function-reference error">function:condition-notify</span> or <span class="function-reference error">function:condition-broadcast</span> necessarily
takes place in a different <span class="glossary-reference error">glossary:thread</span>, we require that
<span class="function-reference error">function:condition-wait</span> blocking its <span class="glossary-reference error">glossary:thread</span>
<span class="glossary-reference error">glossary:synchronizes-with</span> the call to <span class="function-reference error">function:condition-notify</span> or
<span class="function-reference error">function:condition-broadcast</span> that unblocks it.<br/>Clearly the waiting <span class="glossary-reference error">glossary:thread</span> cannot attempt to reacquire the
<span class="glossary-reference error">glossary:lock</span> until it has been unblocked, by the basic definition of
<span class="glossary-reference error">glossary:condition variables</span>. So the call to <span class="function-reference error">function:condition-notify</span>
or <span class="function-reference error">function:condition-broadcast</span> <span class="glossary-reference error">glossary:synchronizes-with</span> the waiting
<span class="glossary-reference error">glossary:thread</span>'s attempt to acquire the <span class="glossary-reference error">glossary:lock</span>. (Attempts, rather
than a successful acquisition, are referred to here to hedge against
the possibility that, for example, attempting to acquire a lock could
cause some other effect, like an error being signaled.) A waiting
<span class="glossary-reference error">glossary:thread</span> can also be spuriously unblocked, for which case further
synchronization is not required.<br/>In more detail, we can define a <span class="glossary-reference error">glossary:modification order</span> for each
<span class="glossary-reference error">glossary:condition variable</span>'s blocking set. The <span class="glossary-reference error">glossary:modification
  order</span> consists of writes to the blocking set (adding a
<span class="glossary-reference error">glossary:thread</span>, removing a <span class="glossary-reference error">glossary:thread</span>, or removing all
<span class="glossary-reference error">glossary:threads</span>) as well as the reads implicitly performed by the
notification functions to determine their return value. For example, a
notification that removes a <span class="glossary-reference error">glossary:thread</span> must appear in the order
after to the <span class="function-reference error">function:condition-wait</span> that put the <span class="glossary-reference error">glossary:thread</span> there,
and there must not be any <span class="function-reference error">function:condition-wait</span> blockings between
two <span class="function-reference error">function:condition-broadcasts</span> if the second
<span class="function-reference error">function:condition-broadcast</span> returns <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>. Then we require
that entries in the order must <span class="glossary-reference error">glossary:happen-before</span> later entries in
the order, whether by synchronization or sequencing.<br/>To avoid a "lost wakeup" problem, <span class="function-reference error">function:condition-wait</span> releasing
the <span class="glossary-reference error">glossary:lock</span> and blocking must occur atomically. Specifically, it
cannot be possible for another <span class="glossary-reference error">glossary:thread</span> to acquire the
<span class="glossary-reference error">glossary:lock</span> and then observe that the waiting <span class="glossary-reference error">glossary:thread</span> is not in
the blocked set. If it were not so, the following could occur: the
<span class="glossary-reference error">glossary:lock</span> is released. Another <span class="glossary-reference error">glossary:thread</span> acquires the
<span class="glossary-reference error">glossary:lock</span>, alters the condition so that the <span class="glossary-reference error">glossary:thread</span> could be
unblocked, and then in whatever order releases the <span class="glossary-reference error">glossary:lock</span> and
notifies the <span class="glossary-reference error">glossary:condition variable</span>. When it performs the
notification, the waiting <span class="glossary-reference error">glossary:thread</span> has not yet been added to the
waiting set, so the waiting <span class="glossary-reference error">glossary:thread</span> will not be
unblocked/"awoken" until something else unblocks it.<br/>We can formalize this last condition by saying that if the <span class="glossary-reference error">glossary:lock
  release</span> <span class="glossary-reference error">glossary:synchronizes-with</span> a <span class="glossary-reference error">glossary:lock acquisition</span>,
<span class="function-reference error">function:condition-wait</span> blocking the <span class="glossary-reference error">glossary:thread</span> also
<span class="glossary-reference error">glossary:synchronizes-with</span> that <span class="glossary-reference error">glossary:lock acquisition</span>. [I'm not sure
that requiring this in the other direction is strictly necessary. You
can imagine blocking the thread without releasing the lock, and then
another thread unblocking the thread, and then this causing the
waiting thread to try to acquire the lock it has not yet released, but
since the lock release is already sequenced-before the lock
acquisition maybe this isn't required.]<br/></section></section>
</section><section id="section-Atomics"><h2 class="section-title">Atomics</h2><section id="section-AtomicOperations"><h3 class="section-title">Atomic Operations</h3><br/>Some accesses to <span class="glossary-reference error">glossary:places</span> are <a class="glossary-reference" href="chapter-26.xhtml#glossary-atomic">atomic</a><sub>2</sub>. Atomic
access allows <span class="glossary-reference error">glossary:threads</span> to operate on the same data without the
expense of <span class="glossary-reference error">glossary:locks</span> and without causing data races.<br/>There are two ways this is possible. First, some <span class="glossary-reference error">glossary:atomic
  accesses</span> are <span class="glossary-reference error">glossary:synchronization operations</span>. This means that
they can cause <span class="glossary-reference error">glossary:synchronizes-with</span> relations between
<a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluations</a> similar to those caused by <span class="glossary-reference error">glossary:locks</span>, and can be
them sequentially consistent on top of that. Second, all <span class="glossary-reference error">glossary:atomic
  accesses</span> have defined behavior even when they conflict and there is
no <span class="glossary-reference error">glossary:happens-before</span> ordering between them, although sometimes
that behavior is only loosely defined.<br/><section id="section-ReadsandWritesandModificationOrders"><h4 class="section-title">Reads and Writes and Modification Orders</h4></section><section id="section-AtomicOrdering"><h4 class="section-title">Atomic Ordering</h4></section><section id="section-AtomicRead-Modify-WriteOperations"><h4 class="section-title">Atomic Read-Modify-Write Operations</h4></section><section id="section-TheATOMICMacroandAtomicExpansions"><h4 class="section-title">The ATOMIC Macro and Atomic Expansions</h4></section><section id="section-Fences"><h4 class="section-title">Fences</h4></section></section><section id="section-AcquireandReleaseOrderings"><h3 class="section-title">Acquire and Release Orderings</h3>The acquire ordering can only be given to reads, and the release
ordering only to writes.<br/>Acquire and release accesses synchronize. An acquiring read's write,
if it is a release operation or stronger, <span class="glossary-reference error">glossary:synchronizes-with</span> the
read.<br/>This can be used in the implementation of <span class="glossary-reference error">glossary:locks</span>, and
<span class="glossary-reference error">glossary:lock</span> operations gave these orderings their names. Acquiring a
<span class="glossary-reference error">glossary:lock</span> is a read (of a shared lock flag), and releasing a
<span class="glossary-reference error">glossary:lock</span> is a write. The release immediately before the acquisition
in the <span class="glossary-reference error">glossary:lock</span>'s modification order necessarily
<span class="glossary-reference error">glossary:synchronizes-with</span> it, ensuring that any operations performed
while the <span class="glossary-reference error">glossary:lock</span> was held are visible to the new <span class="glossary-reference error">glossary:lock</span>
holder.<br/>Acquire and release accesses do not need to be as closely paired as
they are with <span class="glossary-reference error">glossary:locks</span>. For example, consider a shared cache,
which is written by some <span class="glossary-reference error">glossary:threads</span> and read by others. Multiple
writes may occur without intervening reads, and only the write
immediately prior to a read in the modification order
<span class="glossary-reference error">glossary:synchronizes-with</span> that read.<br/></section><section id="section-RelaxedOrdering"><h3 class="section-title">Relaxed Ordering</h3>Relaxed ordering guarantees a modification order for a place that is
the same between all <span class="glossary-reference error">glossary:threads</span>. This means that, given that <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>W</mrow><mo>1</mo></msub></math> and
<math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>W</mrow><mo>2</mo></msub></math> are writes, and <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>R</mrow><mo>1</mo></msub></math> and <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>R</mrow><mo>2</mo></msub></math> are reads, the following
guarantees are in place:<br/><dl><dt>Write-write coherence</dt><dd>If <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>W</mrow><mo>1</mo></msub></math> <span class="glossary-reference error">glossary:happens-before</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>W</mrow><mo>2</mo></msub></math>,
  <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>W</mrow><mo>1</mo></msub></math> is prior to <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>W</mrow><mo>2</mo></msub></math> in the modification order.
</dd><dt>Read-read coherence</dt><dd>If <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>W</mrow><mo>1</mo></msub></math> is the write for <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>R</mrow><mo>1</mo></msub></math>, and <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>R</mrow><mo>1</mo></msub></math>
  <span class="glossary-reference error">glossary:happens-before</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>R</mrow><mo>2</mo></msub></math>, <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>R</mrow><mo>2</mo></msub></math>'s write is either <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>W</mrow><mo>1</mo></msub></math>, or some
  write <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>W</mrow><mo>2</mo></msub></math> such that <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>W</mrow><mo>1</mo></msub></math> <span class="glossary-reference error">glossary:happens-before</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>W</mrow><mo>2</mo></msub></math>.
</dd><dt>Read-write coherence</dt><dd>If <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>R</mrow><mo>1</mo></msub></math> <span class="glossary-reference error">glossary:happens-before</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>W</mrow><mo>1</mo></msub></math>,
  <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>R</mrow><mo>1</mo></msub></math>'s write <span class="glossary-reference error">glossary:happens-before</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>W</mrow><mo>1</mo></msub></math>.
</dd><dt>Write-read coherence</dt><dd>If <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>W</mrow><mo>1</mo></msub></math> <span class="glossary-reference error">glossary:happens-before</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>R</mrow><mo>1</mo></msub></math>, either
  <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>R</mrow><mo>1</mo></msub></math>'s write is <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>W</mrow><mo>1</mo></msub></math>, or <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>W</mrow><mo>1</mo></msub></math> <span class="glossary-reference error">glossary:happens-before</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>R</mrow><mo>1</mo></msub></math>'s
  write.
</dd></dl><br/>Note that the modification orders for different places are not
guaranteed to be coherent, and in general will not be. For example, if
<math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>R</mrow><mo>1</mo></msub></math> and <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>R</mrow><mo>2</mo></msub></math> are relaxed reads of different places, <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>R</mrow><mo>2</mo></msub></math>'s write
<math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>W</mrow><mo>2</mo></msub></math> could <span class="glossary-reference error">glossary:happen-before</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>R</mrow><mo>1</mo></msub></math>'s write <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>W</mrow><mo>1</mo></msub></math> even if <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>R</mrow><mo>1</mo></msub></math>
<span class="glossary-reference error">glossary:happens-before</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>R</mrow><mo>2</mo></msub></math>. As such, relaxed accesses cannot be used
for synchronization.<br/>Relaxed ordering is intended to provide a basic coherence guarantee. It is
suitable for applications such as shared counters, in which side effects other
than counter increments are irrelevant to the incrementing
<span class="glossary-reference error">glossary:threads</span>.<br/></section>
</section><section id="section-Interruption"><h2 class="section-title">Interruption</h2><section id="section-Interruption"><h3 class="section-title">Interruption</h3>An <span class="glossary-reference error">glossary:interrupt</span> is an asynchronous request to a <span class="glossary-reference error">glossary:thread</span> to
perform some action. <span class="glossary-reference error">glossary:Interrupts</span> are <a class="glossary-reference" href="chapter-26.xhtml#glossary-condition">conditions</a>
of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <span class="type-reference error">type:interrupt</span>.<br/><span class="float" id="figure-Defined names relating to interrupts"><table><tbody><tr><td><span class="?-reference error">?:call-interrupt</span></td><td><span class="?-reference error">?:defer-interrupt</span></td><td><span class="?-reference error">?:reject-interrupt</span></td><td><span class="?-reference error">?:destroy-thread</span></td></tr><tr><td><span class="?-reference error">?:interrupt-thread</span></td><td><span class="?-reference error">?:destruction-interrupt</span></td><td><span class="?-reference error">?:interactive-interrupt</span></td><td><a class="declaration-reference" href="#declaration-interruptible">interruptible</a></td></tr><tr><td><a class="section-reference" href="#section-Interruption">Interruption</a></td><td><span class="?-reference error">?:service-interrupt</span></td><td><span class="?-reference error">?:signal-interrupts</span></td><td><span class="?-reference error">?:signal-pending-interrupts</span></td></tr><tr><td><span class="?-reference error">?:simple-interrupt</span></td><td><span class="?-reference error">?:thread-dead</span></td><td><span class="?-reference error">?:without-interrupts</span></td><td><span class="?-reference error">?:interrupt</span></td></tr></tbody></table><div class="caption"><a class="glossary-reference" href="chapter-26.xhtml#glossary-defined name">Defined names</a> relating to <span class="glossary-reference error">glossary:interrupts</span></div></span><br/><span class="reviewer-note" id="reviewer-note-name-the-threads-$i$"><span class="reviewer-note-tooltip"><span class="reviewer">Moringen</span>: Name the threads $i$ (issuer) and $r$ (receiver)
  and specify for each action in which of the two it takes place?</span>â€£</span>
<span class="glossary-reference error">glossary:Interrupts</span> may be issued by one <span class="glossary-reference error">glossary:thread</span> to a different
<span class="glossary-reference error">glossary:thread</span><span class="reviewer-note" id="reviewer-note-slightly-reworded"><span class="reviewer-note-tooltip"><span class="reviewer">Moringen</span>: slightly reworded</span>â€£</span> with the function
<span class="function-reference error">function:interrupt-thread</span>, or by the implementation, at
<a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-defined">implementation-defined</a> points. In either case, the
<span class="glossary-reference error">glossary:interrupt</span> is an <span class="type-reference error">type:interrupt</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>, which is
placed on a <span class="glossary-reference error">glossary:thread</span>'s <span class="glossary-reference error">glossary:pending interrupts list</span>. These
<span class="type-reference error">type:interrupt</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a> may be <span class="glossary-reference error">glossary:signaled</span> by certain
<a class="glossary-reference" href="chapter-26.xhtml#glossary-operator">operators</a>, effectively by calling the
<span class="function-reference error">function:signal-pending-interrupts</span>
function. See <a class="section-reference" href="#section-ImplicitInterruptProcessing">Implicit Interrupt Processing</a> for details on when
this can happen.<br/>The <span class="glossary-reference error">glossary:thread</span> may then respond to the request in three ways:<br/><dl><dt>Defer</dt><dd>The <span class="glossary-reference error">glossary:thread</span> can defer action by invoking
  the <span class="symbol-reference error">symbol:defer-interrupt</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-restart">restart</a>, or by performing a <span class="glossary-reference error">glossary:non-local
    transfer of control</span>. The <span class="glossary-reference error">glossary:interrupt</span> remains on the
  <span class="glossary-reference error">glossary:thread</span>'s <span class="glossary-reference error">glossary:pending interrupt list</span>, and will be
  <span class="glossary-reference error">glossary:signaled</span> again by subsequent calls to
  <span class="function-reference error">function:signal-pending-interrupts</span>.<br/></dd><dt>Reject</dt><dd>The <span class="glossary-reference error">glossary:thread</span> can reject the <span class="glossary-reference error">glossary:interrupt</span> by
  invoking the <span class="symbol-reference error">symbol:reject-interrupt</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-restart">restart</a>. The <span class="glossary-reference error">glossary:interrupt</span> is
  removed from the <span class="glossary-reference error">glossary:thread</span>'s <span class="glossary-reference error">glossary:pending interrupt list</span>.<br/></dd><dt>Service</dt><dd>If an <span class="glossary-reference error">glossary:interrupt</span> is neither deferred nor
  rejected, it is serviced by calling <span class="function-reference error">function:service-interrupt</span> on
  it. The <span class="glossary-reference error">glossary:interrupt</span>'s action will be performed; what this
  action is is specific to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> of
  <span class="glossary-reference error">glossary:interrupt</span>. [Should a restart be added so that a handler can
  overrule any higher level handlers that might want to defer or
  reject an interrupt?]  </dd></dl><br/>[Possible: Add INTERRUPT-STATUS that allows a thread to see what happened to
an interrupt it put on another thread. Similarly, allow REJECT-INTERRUPT to
have a reason supplied, and make this reason accessible via
INTERRUPT-REJECTION-REASON or something. This is why INTERRUPT-THREAD returns
the interrupt.]<br/>Programmers should ensure that their code is prepared to deal with
<span class="glossary-reference error">glossary:interrupts</span>, for example by deferring them during sensitive
operations. Programmers should ensure that long-running code in
<span class="glossary-reference error">glossary:threads</span> regularly checks for <span class="glossary-reference error">glossary:interrupts</span> (by
<span class="function-reference error">function:signal-pending-interrupts</span>) and services them when it is safe
to do so, so that <span class="glossary-reference error">glossary:interruption</span> can be carried out successfully.<br/><span class="reviewer-note" id="reviewer-note-is-there-any-special"><span class="reviewer-note-tooltip"><span class="reviewer">Moringen</span>: Is there any special interaction with the
  debugger? In particular, what happens if an attempt is made to
  interrupt a thread that has entered the debugger?</span>â€£</span><br/><section id="section-ImplicitInterruptProcessing"><h4 class="section-title">Implicit Interrupt Processing</h4><br/>A program can force pending <span class="glossary-reference error">glossary:interrupts</span> to be <span class="glossary-reference error">glossary:signaled</span> by
calling <span class="function-reference error">function:signal-pending-interrupts</span>, but <span class="glossary-reference error">glossary:interrupt</span>
processing can occur in other contexts as well. Three cases are
required:<br/><ul><li>When execution of a <span class="glossary-reference error">glossary:thread</span> has temporarily ceased
  due to <a class="function-reference" href="chapter-25.xhtml#function-sleep">sleep</a>.
</li><li>When a <span class="glossary-reference error">glossary:thread</span> is blocking on a <span class="glossary-reference error">glossary:condition
    variable</span> due to <span class="function-reference error">function:condition-wait</span>.
</li><li>When a <span class="glossary-reference error">glossary:thread</span> is waiting for another <span class="glossary-reference error">glossary:thread</span>
  to finish due to <a class="function-reference" href="#function-join-thread">join-thread</a>.
</li></ul>
<span class="reviewer-note" id="reviewer-note-acquire-lock?"><span class="reviewer-note-tooltip"><span class="reviewer">Moringen</span>: acquire-lock?</span>â€£</span><br/>This means that if a <span class="glossary-reference error">glossary:thread</span> is in one of these three
situations, <span class="glossary-reference error">glossary:interrupts</span> are processed when they are received &ndash;
before the blocked/waiting function has returned. <span class="glossary-reference error">glossary:Portable
  programs</span> may rely on this behavior. Interrupt processing takes
place as if <span class="function-reference error">function:signal-pending-interrupts</span> was called.<br/>If a thread blocking on a condition variable is interrupted, and a handler
performs a non-local transfer of control (including by ABORT-THREAD), the thread
is removed from the condition variable's blocking set. This means that a
notification to a condition variable cannot be lost due to interruption - some
other thread receives the notification and is removed from the wait set instead.
[Text should probably be under CONDITION-VARIABLE-WAIT.]<br/>Implementations are permitted to define other situations in which
<span class="glossary-reference error">glossary:interrupt</span> processing implicitly occurs.
<span class="reviewer-note" id="reviewer-note-candidates:-read/wri"><span class="reviewer-note-tooltip"><span class="reviewer">Moringen</span>: Candidates: read/write-*, run-program, process-wait</span>â€£</span><br/>[I kind of want to put in a note that the program state must be coherent during
any implicit processing, e.g. reordering (setq x 0 y 0) to (setq y 0 x 0) and
then processing interrupts in the middle would not be okay if a handler could
refer to x and y, but I think that is implied by the rest of the semantics, and
common sense, and I can't think of a good way to phrase it.]<br/>Programmers may hint to the implementation that implicit processing should be
inserted by using the <a class="declaration-reference" href="#declaration-interruptible">interruptible</a> declaration.<br/></section></section>
</section><br/><section id="section-Dictionary"><h2 class="section-title">Dictionary</h2>
<br/><div class="component" id="type-thread"><div class="header"><span class="left"><span class="name" id="type-thread">thread</span></span><span class="right"><span class="ftype">System Class</span></span></div><br/><dl><dt class="label">Class Precedence List</dt><dd><a class="type-reference" href="#type-thread">thread</a>,
<a class="type-reference" href="chapter-4.xhtml#type-t">t</a><br/></dd></dl><dl><dt class="label">Description</dt><dd>A <span class="glossary-reference error">glossary:thread</span> is an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> that represents a thread of execution.<br/></dd></dl><div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><dl><dt class="label">See Also</dt><dd><a class="function-reference" href="#function-make-thread">make-thread</a>,
<a class="section-reference" href="#section-Threads">Threads</a><br/></dd></dl></div></div><br/>
<br/><div class="component" id="type-thread-error"><div class="header"><span class="left"><span class="name" id="type-thread-error">thread-error</span></span><span class="right"><span class="ftype">Condition Type</span></span></div><br/><dl><dt class="label">Class Precedence List</dt><dd><a class="type-reference" href="#type-thread-error">thread-error</a>,
<a class="type-reference" href="chapter-9.xhtml#type-error">error</a>,
<a class="type-reference" href="chapter-9.xhtml#type-condition">condition</a>,
<a class="type-reference" href="chapter-4.xhtml#type-t">t</a><br/></dd></dl><dl><dt class="label">Description</dt><dd>All <a class="glossary-reference" href="chapter-26.xhtml#glossary-condition">conditions</a> related to <span class="glossary-reference error">glossary:threads</span> are
of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="#type-thread-error">thread-error</a>. The initarg <span class="keyword">:thread</span> initializes the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-condition">condition</a> with the <span class="glossary-reference error">glossary:thread</span> at issue, which can be later
read by the function <a class="function-reference" href="#function-thread-error-thread">thread-error-thread</a>.<br/></dd></dl><div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><dl><dt class="label">See Also</dt><dd><a class="function-reference" href="#function-thread-error-thread">thread-error-thread</a><br/></dd></dl></div></div><br/>
<span class="reviewer-note" id="reviewer-note-added-this"><span class="reviewer-note-tooltip"><span class="reviewer">Moringen</span>: Added this</span>â€£</span>
<br/><div class="component" id="function-thread-error-thread"><div class="header"><span class="left"><span class="name" id="function-thread-error-thread">thread-error-thread</span></span><span class="right"><span class="ftype">Function</span></span></div><br/><span class="function-definition"><span class="name">thread-error-thread</span>&nbsp;<span class="lambda-list">condition</span>&nbsp;â†’&nbsp;<span class="return-values">thread</span></span><br/><br/><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">condition</span>&mdash;a <a class="type-reference" href="#type-thread-error">thread-error</a>.<br/><span class="parameter">thread</span>&mdash;a <a class="type-reference" href="#type-thread">thread</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>Returns <span class="parameter">thread</span>, the <span class="glossary-reference error">glossary:thread</span> which was the value of the
<span class="keyword">:thread</span> initarg when <span class="parameter">condition</span> was created.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd>The function <a class="function-reference" href="#function-thread-error-thread">thread-error-thread</a> should <a class="glossary-reference" href="chapter-26.xhtml#glossary-signal">signal</a> an
<a class="glossary-reference" href="chapter-26.xhtml#glossary-error">error</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-4.xhtml#type-type-error">type-error</a> if the <span class="parameter">condition</span> argument is
not of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="#type-thread-error">thread-error</a>.<br/></dd></dl><div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><dl><dt class="label">See Also</dt><dd><a class="type-reference" href="#type-thread-error">thread-error</a>,
<a class="type-reference" href="#type-thread">thread</a><br/></dd></dl></div><div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><dl><dt class="label">Notes</dt><dd><pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">thread-error-thread</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-9.xhtml#function-make-condition">make-condition</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">thread-error</span></span> <span class="syntax-keyword-symbol">:thread</span> <span class="parameter">thread</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>â‰¡</mo></math> <span class="parameter">thread</span>
</span></code></pre><br/></dd></dl></div></div><br/>
<br/><div class="component" id="type-abnormal-exit"><div class="header"><span class="left"><span class="name" id="type-abnormal-exit">abnormal-exit</span></span><span class="right"><span class="ftype">Condition Type</span></span></div><br/><dl><dt class="label">Class Precedence List</dt><dd><a class="type-reference" href="#type-abnormal-exit">abnormal-exit</a>,
<a class="type-reference" href="#type-thread-error">thread-error</a>,
<a class="type-reference" href="chapter-9.xhtml#type-error">error</a>,
<a class="type-reference" href="chapter-9.xhtml#type-condition">condition</a>,
<a class="type-reference" href="chapter-4.xhtml#type-t">t</a><br/></dd></dl><dl><dt class="label">Description</dt><dd>An error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="#type-abnormal-exit">abnormal-exit</a> is <span class="glossary-reference error">glossary:signaled</span> when
<a class="function-reference" href="#function-join-thread">join-thread</a> is called on a <span class="glossary-reference error">glossary:thread</span> that ended
abnormally. The <a class="type-reference" href="#type-abnormal-exit">abnormal-exit</a> can be initialized with a
<a class="glossary-reference" href="chapter-26.xhtml#glossary-condition">condition</a> that precipitated the abort with the <span class="glossary-reference error">glossary:initarg</span>
<span class="keyword">:condition</span>, and this <a class="glossary-reference" href="chapter-26.xhtml#glossary-condition">condition</a> can be read by the function
<span class="function-reference error">function:abnormal-exit-condition</span>.<br/></dd></dl><div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><dl><dt class="label">See Also</dt><dd><a class="function-reference" href="#function-join-thread">join-thread</a>,
<span class="function-reference error">function:abnormal-exit-condition</span><br/></dd></dl></div></div><br/>
<br/><div class="component" id="function-abort-thread"><div class="header"><span class="left"><span class="name" id="function-abort-thread">abort-thread</span></span><span class="right"><span class="ftype">Function</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">abort-thread</span>&nbsp;<span class="lambda-list"><span class="lambda-list-keyword">&amp;key</span> condition</span>&nbsp;â†’&nbsp;|</span><br/><span class="reviewer-note" id="reviewer-note-couldn't-this-just-a"><span class="reviewer-note-tooltip"><span class="reviewer">Moringen</span>: couldn't this just as well be a specifically named restart? As far as I can tell, the transfer of control and everything visible from join-thread calls would be the same but without as much special-casing.</span>â€£</span>
</dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">condition</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-condition">condition</a> or <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>Aborts the <span class="glossary-reference error">glossary:current thread</span> abnormally. No further
<a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluations</a> will be carried out in the <span class="glossary-reference error">glossary:current
thread</span>. Calls to <a class="function-reference" href="#function-join-thread">join-thread</a> on this <span class="glossary-reference error">glossary:thread</span> will
<a class="glossary-reference" href="chapter-26.xhtml#glossary-signal">signal</a> an <a class="glossary-reference" href="chapter-26.xhtml#glossary-error">error</a>.<br/>The <span class="parameter">condition</span>, if provided and not <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>, will be
associated with <a class="type-reference" href="#type-abnormal-exit">abnormal-exit</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-condition">conditions</a> <span class="glossary-reference error">glossary:signaled</span> by
<a class="function-reference" href="#function-join-thread">join-thread</a>. <span class="reviewer-note" id="reviewer-note-mention-that-the-arg"><span class="reviewer-note-tooltip"><span class="reviewer">Moringen</span>: Mention that the argument to join-thread is the current thread of the abort-thread call?</span>â€£</span><br/>Calls to this function <span class="glossary-reference error">glossary:synchronize-with</span> calls to
<a class="function-reference" href="#function-join-thread">join-thread</a> on this <span class="glossary-reference error">glossary:thread</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-signal">signaling</a>
<a class="type-reference" href="#type-abnormal-exit">abnormal-exit</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-condition">conditions</a>. <span class="reviewer-note" id="reviewer-note-would-it-make-sense-"><span class="reviewer-note-tooltip"><span class="reviewer">Moringen</span>: Would it make sense to establish for use in the entire section something like "Let $t$ be current thread of the evaluation in which the abort-thread call is made or similar?</span>â€£</span><br/>Aborting a <span class="glossary-reference error">glossary:thread</span> effectively<span class="reviewer-note" id="reviewer-note-why&#10;&quot;effectively&quot;?"><span class="reviewer-note-tooltip"><span class="reviewer">Moringen</span>: why
"effectively"?</span>â€£</span> transfers control to a point "outside" the
<span class="glossary-reference error">glossary:thread</span>. The process described in <a class="section-reference" href="chapter-5.xhtml#section-TransferOfControl">Transfer of Control to an Exit Point</a>
takes place, only the "exit point" being "transferred to" is outside
of any local <a class="glossary-reference" href="chapter-26.xhtml#glossary-dynamic environment">dynamic environment</a>. This means, particularly,
that<br/><ul><li>It is not valid to transfer to intervening <span class="glossary-reference error">glossary:exit
points</span>. Since there are no other <a class="glossary-reference" href="chapter-26.xhtml#glossary-exit point">exit points</a>, this means that
an abort cannot be caught or rejected once it has been triggered.
</li><li>Any <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-unwind-protect">unwind-protect</a> cleanup clauses in the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-dynamic environment">dynamic environment</a> are executed in the opposite order of their
establishment.
</li><li>Bindings of <a class="glossary-reference" href="chapter-26.xhtml#glossary-special variable">special variables</a>, <a class="glossary-reference" href="chapter-26.xhtml#glossary-catch tag">catch tags</a>,
<a class="glossary-reference" href="chapter-26.xhtml#glossary-condition handler">condition handlers</a>, and <a class="glossary-reference" href="chapter-26.xhtml#glossary-restart">restarts</a> are undone in the
opposite order of their establishment.
</li></ul><br/>[Might want to define a notion of "main thread" or "initial thread" and make
it undefined or an error to abort it? But then, what if there are multiple
initial threads, or there is no main thread?<br/>The idea of thread abortion should maybe be defined elsewhere, so that
ABORT-THREAD is just the public facing use of it, and implementations can
abort threads in other cirumstances.]<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd>An <a class="glossary-reference" href="chapter-26.xhtml#glossary-error">error</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-4.xhtml#type-type-error">type-error</a> should be <span class="glossary-reference error">glossary:signaled</span>
if <span class="parameter">condition</span> is not <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a> and not of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-9.xhtml#type-condition">condition</a>.<br/></dd></dl><div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><dl><dt class="label">Notes</dt><dd><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let*">let*</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">c1</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-9.xhtml#function-make-condition">make-condition</a> <span class="syntax-interned-symbol">â€¦</span>)</span>)</span>
       <span class="syntax-cons">(<span class="syntax-interned-symbol">th</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">make-thread</span> <span class="syntax-cons">(<a class="macro-reference" href="chapter-3.xhtml#macro-lambda">lambda</a> <span class="syntax-symbol">()</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">abort-thread</span> <span class="syntax-interned-symbol">c1</span>)</span>)</span>)</span>)</span>)</span>
  <span class="syntax-cons">(<a class="macro-reference" href="chapter-9.xhtml#macro-handler-case">handler-case</a>
      <span class="syntax-cons">(<span class="syntax-interned-symbol">join-thread</span> <span class="syntax-interned-symbol">th</span>)</span>
    <span class="syntax-cons">(<span class="syntax-interned-symbol">abnormal-exit</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">c2</span>)</span>
      <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-eq">eq</a> <span class="syntax-interned-symbol">c1</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">abnormal-exit-condition</span> <span class="syntax-interned-symbol">c2</span>)</span>)</span>)</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>
</span></code></pre><br/></dd></dl></div></div><br/>
<br/><div class="component" id="function-join-thread"><div class="header"><span class="left"><span class="name" id="function-join-thread">join-thread</span></span><span class="right"><span class="ftype">Function</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">join-thread</span>&nbsp;<span class="lambda-list">thread</span>&nbsp;â†’&nbsp;<span class="return-values"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">object</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span></span></span><br/>
<span class="reviewer-note" id="reviewer-note-should-this-take-a-&amp;"><span class="reviewer-note-tooltip"><span class="reviewer">Moringen</span>: Should this take a &amp;key wait argument?</span>â€£</span><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">thread</span>&mdash;a <span class="glossary-reference error">glossary:thread</span>.<br/><span class="parameter">object</span>&mdash;the values returned by the function of <span class="parameter">thread</span>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>Waits for the given <span class="glossary-reference error">glossary:thread</span> to finish, and then returns its
results.<br/>The last <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluation</a> in a <span class="glossary-reference error">glossary:thread</span> <span class="glossary-reference error">glossary:synchronizes-with</span>
any calls to <a class="function-reference" href="#function-join-thread">join-thread</a> on that <span class="glossary-reference error">glossary:thread</span> returning, or
with such calls <a class="glossary-reference" href="chapter-26.xhtml#glossary-signal">signaling</a> <a class="type-reference" href="#type-abnormal-exit">abnormal-exit</a> as described
under "Exceptional Situations" below.<br/><span class="reviewer-note" id="reviewer-note-are-multiple-(simual"><span class="reviewer-note-tooltip"><span class="reviewer">Moringen</span>: Are multiple (simualtaneous) join-thread calls for a single thread allowed? I think SBCL plans to limits this. See sb-thread:join-thread docstring</span>â€£</span><br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd>An <a class="glossary-reference" href="chapter-26.xhtml#glossary-error">error</a> should be <span class="glossary-reference error">glossary:signaled</span> if <span class="parameter">thread</span> is the
<span class="glossary-reference error">glossary:current thread</span>.<span class="reviewer-note" id="reviewer-note-should-this-say-\oft"><span class="reviewer-note-tooltip"><span class="reviewer">Moringen</span>: should this say \oftype{thread-error}?</span>â€£</span><br/>An <a class="glossary-reference" href="chapter-26.xhtml#glossary-error">error</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="#type-abnormal-exit">abnormal-exit</a> is <span class="glossary-reference error">glossary:signaled</span>
if <span class="parameter">thread</span> was aborted.<br/>An <a class="glossary-reference" href="chapter-26.xhtml#glossary-error">error</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-4.xhtml#type-type-error">type-error</a> should be <span class="glossary-reference error">glossary:signaled</span>
if <span class="parameter">thread</span> is not of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="#type-thread">thread</a>.<br/></dd></dl><div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><dl><dt class="label">See Also</dt><dd><a class="function-reference" href="#function-abort-thread">abort-thread</a>, Section NN.2 (Threads)<br/></dd></dl></div></div><br/>
<br/><div class="component" id="function-make-thread"><div class="header"><span class="left"><span class="name" id="function-make-thread">make-thread</span></span><span class="right"><span class="ftype">Function</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">make-thread</span>&nbsp;<span class="lambda-list">function <span class="lambda-list-keyword">&amp;key</span> name arguments</span>&nbsp;â†’&nbsp;<span class="return-values">thread</span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">function</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function designator">function designator</a>.<br/><span class="parameter">name</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>.<span class="reviewer-note" id="reviewer-note-could-this-be-any-\t"><span class="reviewer-note-tooltip"><span class="reviewer">Moringen</span>: Could this be any \term{object} instead?</span>â€£</span><br/><span class="parameter">arguments</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-proper list">proper list</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>Creates and returns a <span class="glossary-reference error">glossary:thread</span> named <span class="parameter">name</span>, which will
call the function <span class="reviewer-note" id="reviewer-note-designated-by?"><span class="reviewer-note-tooltip"><span class="reviewer">Moringen</span>: designated by?</span>â€£</span> <span class="parameter">function</span>
with the given <span class="parameter">arguments</span>. When the <span class="parameter">function</span> returns,
the <span class="glossary-reference error">glossary:thread</span> ends.
<span class="reviewer-note" id="reviewer-note-similar-note-to-that"><span class="reviewer-note-tooltip"><span class="reviewer">Moringen</span>: Similar note to that for apply about function not being allowed to mutate an argument list received via &amp;rest?</span>â€£</span><br/>A call to <a class="function-reference" href="#function-make-thread">make-thread</a> <span class="glossary-reference error">glossary:synchronizes-with</span> the first
<a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluation</a> of the new <span class="glossary-reference error">glossary:thread</span>.<br/><span class="reviewer-note" id="reviewer-note-would-it-make-sense-"><span class="reviewer-note-tooltip"><span class="reviewer">Moringen</span>: Would it make sense to name the environment, say $e$, in which make-thread is called and then refer to it by name below?</span>â€£</span>
While the created <span class="glossary-reference error">glossary:thread</span> shares the <a class="glossary-reference" href="chapter-26.xhtml#glossary-global environment">global environment</a>,
it starts in a new <a class="glossary-reference" href="chapter-26.xhtml#glossary-dynamic environment">dynamic environment</a>, not the <span class="glossary-reference error">glossary:dynamic
environment</span> <a class="function-reference" href="#function-make-thread">make-thread</a> was called in.<br/>This means that, for example:<br/><ul><li>Local <a class="glossary-reference" href="chapter-26.xhtml#glossary-dynamic variable">dynamic variable</a> bindings are not shared (though <span class="glossary-reference error">glossary:global bindings</span> are).
</li><li><a class="glossary-reference" href="chapter-26.xhtml#glossary-exit point">Exit points</a>, as established by <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-tagbody">tagbody</a>,
<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-block">block</a>, <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-unwind-protect">unwind-protect</a>, or <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-catch">catch</a>, are not
valid.
</li><li><a class="glossary-reference" href="chapter-26.xhtml#glossary-condition handler">Condition handlers</a> and <a class="glossary-reference" href="chapter-26.xhtml#glossary-restart">restarts</a> are not active.<span class="reviewer-note" id="reviewer-note-without-the-qualific"><span class="reviewer-note-tooltip"><span class="reviewer">Moringen</span>: Without the qualification suggested above, this contradicts the fact that an abort restart is active</span>â€£</span>
</li></ul><br/>It is <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-defined">implementation-defined</a> whether the <span class="glossary-reference error">glossary:thread</span>'s new <a class="glossary-reference" href="chapter-26.xhtml#glossary-dynamic environment">dynamic environment</a> is
actually empty or includes some bindings etc. defined by the implementation.
[Should this be more restrictive? For example, as written it allows an
implementation to rebind every dynamic variable that was bound in the thread
creator, making it impossible for the new thread to access global bindings.]<br/>It is encouraged for a new <a class="symbol-reference" href="chapter-9.xhtml#symbol-abort">abort</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-restart">restart</a> to be
available, and for this <a class="glossary-reference" href="chapter-26.xhtml#glossary-restart">restart</a> to effectively call
<a class="function-reference" href="#function-abort-thread">abort-thread</a>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd>An <a class="glossary-reference" href="chapter-26.xhtml#glossary-error">error</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-4.xhtml#type-type-error">type-error</a> should be <span class="glossary-reference error">glossary:signaled</span> if <span class="parameter">function</span> is not a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function designator">function designator</a>.
An <a class="glossary-reference" href="chapter-26.xhtml#glossary-error">error</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-4.xhtml#type-type-error">type-error</a> should be <span class="glossary-reference error">glossary:signaled</span> if <span class="parameter">name</span> is not a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>.<br/></dd></dl><div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><dl><dt class="label">See Also</dt><dd><a class="type-reference" href="#type-thread">thread</a>,
<span class="function-reference error">function:thread-name</span>,
Chapter NN (Concurrency),
Section NN.1.3 Note on Parallelism<br/></dd></dl></div></div><br/>
<br/><div class="component" id="function-current-thread"><div class="header"><span class="left"><span class="name" id="function-current-thread">current-thread</span></span><span class="right"><span class="ftype">Function</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">current-thread</span>&nbsp;<span class="lambda-list"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>âŸ¨</mi></math><span class="explicit-italic"> no <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">arguments</a></span><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>âŸ©</mi></math></span>&nbsp;â†’&nbsp;<span class="return-values">thread</span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">thread</span>&mdash;the <span class="glossary-reference error">glossary:current thread</span>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>Returns the <span class="glossary-reference error">glossary:thread</span> object representing the <span class="glossary-reference error">glossary:current
thread</span> of execution.<br/></dd></dl><dl><dt class="label">Side Effects</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd><span class="none">None</span>.
</dd></dl></div><br/>
<span class="reviewer-note" id="reviewer-note-added-this"><span class="reviewer-note-tooltip"><span class="reviewer">Moringen</span>: Added this</span>â€£</span>
<br/><div class="component" id="type-lock"><div class="header"><span class="left"><span class="name" id="type-lock">lock</span></span><span class="right"><span class="ftype">System Class</span></span></div><br/><dl><dt class="label">Class Precedence List</dt><dd><a class="type-reference" href="#type-lock">lock</a>,
<a class="type-reference" href="chapter-4.xhtml#type-t">t</a><br/></dd></dl><dl><dt class="label">Description</dt><dd/></dl><div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><dl><dt class="label">See Also</dt><dd><a class="function-reference" href="#function-lockp">lockp</a>,
<a class="function-reference" href="#function-make-lock">make-lock</a>,
<a class="function-reference" href="#function-acquire-lock">acquire-lock</a>,
<a class="function-reference" href="#function-release-lock">release-lock</a><br/></dd></dl></div></div><br/>
<span class="reviewer-note" id="reviewer-note-added-this"><span class="reviewer-note-tooltip"><span class="reviewer">Moringen</span>: Added this</span>â€£</span>
<br/><div class="component" id="function-lockp"><div class="header"><span class="left"><span class="name" id="function-lockp">lockp</span></span><span class="right"><span class="ftype">Function</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">lockp</span>&nbsp;<span class="lambda-list">object</span>&nbsp;â†’&nbsp;<span class="return-values">result</span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">object</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.<br/><span class="parameter">result</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generalized boolean">generalized boolean</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>Returns <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a> if <span class="parameter">object</span> is of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="#type-lock">lock</a>; otherwise
returns <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>.<br/></dd></dl><div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><dl><dt class="label">See Also</dt><dd><a class="type-reference" href="#type-lock">lock</a>,
<a class="function-reference" href="#function-make-lock">make-lock</a><br/></dd></dl></div><div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><dl><dt class="label">Notes</dt><dd><pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">lockp</span> <span class="parameter">object</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>â‰¡</mo></math> <span class="syntax-cons">(<a class="function-reference" href="chapter-4.xhtml#function-typep">typep</a> <span class="parameter">object</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">lock</span></span>)</span>
</span></code></pre><br/></dd></dl></div></div><br/>
<span class="reviewer-note" id="reviewer-note-added-this"><span class="reviewer-note-tooltip"><span class="reviewer">Moringen</span>: Added this</span>â€£</span>
<br/><div class="component" id="function-lock-name"><div class="header"><span class="left"><span class="name" id="function-lock-name">lock-name</span></span><span class="right"><span class="ftype">Function</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">lock-name</span>&nbsp;<span class="lambda-list">lock</span>&nbsp;â†’&nbsp;<span class="return-values">name</span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">lock</span>&mdash;a <a class="type-reference" href="#type-lock">lock</a>.<br/><span class="parameter">name</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>Returns <span class="parameter">name</span>, which is the name assigned to <span class="parameter">lock</span> in
the <a class="function-reference" href="#function-make-lock">make-lock</a> call that created <span class="parameter">lock</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd>The function <a class="function-reference" href="#function-lock-name">lock-name</a> should <a class="glossary-reference" href="chapter-26.xhtml#glossary-signal">signal</a> an <a class="glossary-reference" href="chapter-26.xhtml#glossary-error">error</a>
of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-4.xhtml#type-type-error">type-error</a> if the <span class="parameter">lock</span> argument is not of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="#type-lock">lock</a>.<br/></dd></dl><div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><dl><dt class="label">See Also</dt><dd><a class="type-reference" href="#type-lock">lock</a>,
<a class="function-reference" href="#function-make-lock">make-lock</a><br/></dd></dl></div><div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><dl><dt class="label">Notes</dt><dd><pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">lock-name</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">make-lock</span> <span class="parameter">name</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>â‰¡</mo></math> <span class="parameter">name</span>
</span></code></pre><br/></dd></dl></div></div><br/>
<span class="reviewer-note" id="reviewer-note-added-this"><span class="reviewer-note-tooltip"><span class="reviewer">Moringen</span>: Added this</span>â€£</span>
<br/><div class="component" id="function-make-lock"><div class="header"><span class="left"><span class="name" id="function-make-lock">make-lock</span></span><span class="right"><span class="ftype">Function</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><span class="reviewer-note" id="reviewer-note-&amp;optional-or-&amp;key-fo"><span class="reviewer-note-tooltip"><span class="reviewer">Moringen</span>: &amp;optional or &amp;key for the name?</span>â€£</span>
<span class="function-definition"><span class="name">make-lock</span>&nbsp;<span class="lambda-list"><span class="lambda-list-keyword">&amp;optional</span> name</span>&nbsp;â†’&nbsp;<span class="return-values">lock</span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="reviewer-note" id="reviewer-note-restrict-name-to-sym"><span class="reviewer-note-tooltip"><span class="reviewer">Moringen</span>: Restrict name to symbol or string?</span>â€£</span>
<span class="parameter">name</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>. Default is <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.<br/><span class="parameter">lock</span>&mdash;a <a class="type-reference" href="#type-lock">lock</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>Creates and returns a new <a class="type-reference" href="#type-lock">lock</a> named <span class="parameter">name</span>. The
returned <a class="type-reference" href="#type-lock">lock</a> is not held by any <span class="glossary-reference error">glossary:thread</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd><span class="none">None</span>.<br/></dd></dl><div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><dl><dt class="label">See Also</dt><dd><a class="type-reference" href="#type-lock">lock</a>,
<a class="function-reference" href="#function-lockp">lockp</a>,
<a class="function-reference" href="#function-lock-name">lock-name</a><br/></dd></dl></div></div><br/>
<br/><div class="component" id="function-acquire-lock"><div class="header"><span class="left"><span class="name" id="function-acquire-lock">acquire-lock</span></span><span class="right"><span class="ftype">Function</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">acquire-lock</span>&nbsp;<span class="lambda-list">lock <span class="lambda-list-keyword">&amp;key</span> wait</span>&nbsp;â†’&nbsp;<span class="return-values">success</span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">lock</span>&mdash;a <a class="type-reference" href="#type-lock">lock</a>.<br/><span class="parameter">wait</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generalized boolean">generalized boolean</a>. Default is <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>.<br/><span class="parameter">success</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generalized boolean">generalized boolean</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>Attempts to acquire the <span class="parameter">lock</span> for the <span class="glossary-reference error">glossary:current thread</span>.<br/>If the <span class="parameter">lock</span> is held and <span class="parameter">wait</span> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>, returns
<a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>. If the <span class="parameter">lock</span> is held by another <span class="glossary-reference error">glossary:thread</span>
and <span class="parameter">wait</span> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>, waits for the <span class="parameter">lock</span> to be
released, acquires it, and then returns <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>.<br/>The <span class="glossary-reference error">glossary:lock release</span> immediately prior to a <span class="glossary-reference error">glossary:lock acquisition</span>
in the <span class="parameter">lock</span>'s <span class="glossary-reference error">glossary:modification order</span>, if there is one,
<span class="glossary-reference error">glossary:synchronizes-with</span> the <span class="glossary-reference error">glossary:lock acquisition</span>.  [Since these
terms are used in multiple places, "lock release" and "lock
acquisition" may warrant glossary entries.]<br/>The consequences are undefined if <span class="parameter">wait</span> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a> and
the <span class="parameter">lock</span> is held by the <span class="glossary-reference error">glossary:current thread</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd>The function <a class="function-reference" href="#function-acquire-lock">acquire-lock</a> should <a class="glossary-reference" href="chapter-26.xhtml#glossary-signal">signal</a> an
<a class="glossary-reference" href="chapter-26.xhtml#glossary-error">error</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-4.xhtml#type-type-error">type-error</a> if the <span class="parameter">lock</span> argument is not
of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="#type-lock">lock</a>.<br/></dd></dl><div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><dl><dt class="label">See Also</dt><dd><a class="function-reference" href="#function-release-lock">release-lock</a>,
<a class="macro-reference" href="#macro-with-lock-held">with-lock-held</a>
</dd></dl></div></div><br/>
<br/><div class="component" id="function-release-lock"><div class="header"><span class="left"><span class="name" id="function-release-lock">release-lock</span></span><span class="right"><span class="ftype">Function</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">release-lock</span>&nbsp;<span class="lambda-list">lock</span>&nbsp;â†’&nbsp;<span class="return-values"><a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a></span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">lock</span>&mdash;a <a class="type-reference" href="#type-lock">lock</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>Releases the <span class="parameter">lock</span> if it is held by the <span class="glossary-reference error">glossary:current
thread</span>. The consequences are undefined if the <span class="parameter">lock</span> is not
held by the <span class="glossary-reference error">glossary:current thread</span>.<br/>A <span class="glossary-reference error">glossary:lock release</span> <span class="glossary-reference error">glossary:synchronizes-with</span> the <span class="glossary-reference error">glossary:lock
acquisition</span> immediately subsequent to it in the <span class="parameter">lock</span>'s
<span class="glossary-reference error">glossary:modification order</span>, if there is one.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd>The function <a class="function-reference" href="#function-release-lock">release-lock</a> should <a class="glossary-reference" href="chapter-26.xhtml#glossary-signal">signal</a> an
<a class="glossary-reference" href="chapter-26.xhtml#glossary-error">error</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-4.xhtml#type-type-error">type-error</a> if the <span class="parameter">lock</span> argument is not
of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="#type-lock">lock</a>.<br/></dd></dl><div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><dl><dt class="label">See Also</dt><dd><a class="function-reference" href="#function-acquire-lock">acquire-lock</a>,
<a class="macro-reference" href="#macro-with-lock-held">with-lock-held</a>
</dd></dl></div></div><br/>
<br/><div class="component" id="macro-with-lock-held"><div class="header"><span class="left"><span class="name" id="macro-with-lock-held">with-lock-held</span></span><span class="right"><span class="ftype">Macro</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">with-lock-held</span>&nbsp;<span class="lambda-list">(lock <span class="lambda-list-keyword">&amp;key</span>) <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">form</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span></span>&nbsp;â†’&nbsp;<span class="return-values"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">value</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span></span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">lock</span>&mdash;a <a class="type-reference" href="#type-lock">lock</a>; <span class="glossary-reference error">glossary:evaluated</span>.<br/><span class="parameter">forms</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-implicit progn">implicit progn</a>.<br/><span class="parameter">values</span>&mdash;the <span class="glossary-reference error">glossary:values</span> returned by the <span class="parameter">forms</span>.<br/></dd></dl><dl><dt class="label">Description</dt><dd><a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluate">Evaluates</a> the <span class="parameter">forms</span> while the <span class="parameter">lock</span> is held by
the <span class="glossary-reference error">glossary:current thread</span>.  In more detail, the <span class="parameter">lock</span> is
acquired as if by <a class="function-reference" href="#function-acquire-lock">acquire-lock</a> with <span class="keyword">:wait</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>,
<span class="reviewer-note" id="reviewer-note-this-used-to-say-:wa"><span class="reviewer-note-tooltip"><span class="reviewer">Moringen</span>: This used to say :wait nil, but that doesn't seem very useful</span>â€£</span>
and then the <span class="parameter">forms</span> are <span class="glossary-reference error">glossary:evaluated</span> as an <span class="glossary-reference error">glossary:implicit
progn</span>. When control leaves the body, either normally or abnormally,
the <span class="parameter">lock</span> is released as if by <a class="function-reference" href="#function-release-lock">release-lock</a>. The
values returned by the <span class="parameter">forms</span> are returned from
<a class="macro-reference" href="#macro-with-lock-held">with-lock-held</a>.<br/>[bordeaux threads additionally notes that if the debugger is entered, it is
unspecified whether the lock is released when the debugger is entered or
exited or what, but this is not mentioned by WITH-OPEN-FILE, and I think it's
a straightforward consequence of how INVOKE-DEBUGGER works.]<br/>The <span class="glossary-reference error">glossary:lock acquisition</span> and <span class="glossary-reference error">glossary:lock release</span> may
<span class="glossary-reference error">glossary:synchronize-with</span> other <span class="glossary-reference error">glossary:lock acquisitions</span> and <span class="glossary-reference error">glossary:lock
releases</span>, as described in <a class="section-reference" href="#section-SemanticsOfLocks">Semantics of Locks</a>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd>An <a class="glossary-reference" href="chapter-26.xhtml#glossary-error">error</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-4.xhtml#type-type-error">type-error</a> should be <span class="glossary-reference error">glossary:signaled</span>
if <span class="parameter">lock</span> is not a <a class="type-reference" href="#type-lock">lock</a>.<br/></dd></dl><div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><dl><dt class="label">See Also</dt><dd><a class="type-reference" href="#type-lock">lock</a>,
<a class="function-reference" href="#function-acquire-lock">acquire-lock</a>,
<a class="function-reference" href="#function-release-lock">release-lock</a>
</dd></dl></div></div><br/>
<br/><div class="component" id="function-atomic"><div class="header"><span class="left"><span class="name" id="function-atomic">atomic</span></span><span class="right"><span class="ftype">Accessor</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">atomic</span>&nbsp;<span class="lambda-list">place <span class="lambda-list-keyword">&amp;key</span> order <span class="lambda-list-keyword">&amp;allow-other-keys</span></span>&nbsp;â†’&nbsp;<span class="return-values">value</span></span><br/>
<span class="setf-definition">(setf (<span class="name">atomic</span>&nbsp;<span class="lambda-list">place <span class="lambda-list-keyword">&amp;key</span> order <span class="lambda-list-keyword">&amp;allow-other-keys</span></span>) <span class="new-value">new-value</span>)</span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">place</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-place">place</a>.<br/><span class="parameter">order</span>&mdash;an <span class="glossary-reference error">glossary:atomic ordering designator</span>. Default is <span class="keyword">:sequentially-consistent</span>.<br/><span class="parameter">value</span>, <span class="parameter">new-value</span>&mdash;<a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd><a class="function-reference" href="#function-atomic">atomic</a> is used to indicate that access to a <a class="glossary-reference" href="chapter-26.xhtml#glossary-place">place</a> must
be performed such that its effects and results are defined even in the
presence of conflicting accesses. Various requirements are imposed
depending on the value of <span class="parameter">order</span>: See NN.5.1.<br/>Possibilities for <span class="parameter">order</span> are <span class="keyword">:unordered</span>, <span class="keyword">:relaxed</span>,
<span class="keyword">:acquire</span>, <span class="keyword">:release</span>, <span class="keyword">:acquire-release</span>,
<span class="keyword">:sequentially-consistent</span>. The default is
<span class="keyword">:sequentially-consistent</span>. Other than <span class="keyword">:not-atomic</span>, these
correspond to the atomic orderings described in NN.5.1.<br/>Any other keyword arguments are passed, unevaluated, to
<span class="function-reference error">function:get-atomic-expansion</span>.<br/>The atomicity applies only to the single access, and not to evaluation
of the subforms.<br/><a class="function-reference" href="#function-atomic">atomic</a> of a <a class="special-operator-reference" href="chapter-3.xhtml#special-operator-the">the</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-place">place</a> is defined such that
<pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">atomic</span> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-3.xhtml#special-operator-the">the</a> <span class="syntax-interned-symbol">spec</span> <span class="syntax-interned-symbol">place</span>)</span> <span class="syntax-interned-symbol">order</span>)</span> <a class="function-reference" href="chapter-12.xhtml#function-=">=</a> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-3.xhtml#special-operator-the">the</a> <span class="syntax-interned-symbol">spec</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">atomic</span> <span class="syntax-interned-symbol">place</span> <span class="syntax-interned-symbol">order</span>)</span>)</span>
</span></code></pre>.
<a class="function-reference" href="#function-atomic">atomic</a> of a macro <a class="glossary-reference" href="chapter-26.xhtml#glossary-place">place</a> is defined such that
<pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">atomic</span> <span class="syntax-interned-symbol">macro-form</span> <span class="syntax-interned-symbol">order</span>)</span> <a class="function-reference" href="chapter-12.xhtml#function-=">=</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">atomic</span> <span class="syntax-interned-symbol">expanded-form</span> <span class="syntax-interned-symbol">order</span>)</span>
</span></code></pre>.<br/>Implementations are required to support <a class="function-reference" href="#function-atomic">atomic</a> with at least the following <span class="glossary-reference error">glossary:places</span> and ordering
<dl><dt><span class="keyword">:sequentially-consistent</span></dt><dd>lexical variables (including
closed-over variables), special variables, <a class="function-reference" href="chapter-14.xhtml#function-car">car</a>, <a class="function-reference" href="chapter-14.xhtml#function-cdr">cdr</a>,
<a class="function-reference" href="chapter-14.xhtml#function-first">first</a>, <a class="function-reference" href="chapter-14.xhtml#function-rest">rest</a>, <a class="function-reference" href="chapter-15.xhtml#function-svref">svref</a>, <a class="function-reference" href="chapter-10.xhtml#function-symbol-value">symbol-value</a>,
<span class="function-reference error">function:standard-instance-access</span>,
<span class="function-reference error">function:funcallable-standard-instance-access</span>, structure slots with a
type that <a class="type-reference" href="chapter-4.xhtml#type-t">t</a> is recognizably a subtype of,
<a class="function-reference" href="chapter-7.xhtml#function-slot-value">slot-value</a> given that <a class="type-reference" href="chapter-4.xhtml#type-t">t</a> is a <span class="glossary-reference error">glossary:recognizable
subtype</span> of the slot's <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a>.
</dd></dl><br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd>If the requirements cannot be met, an <a class="glossary-reference" href="chapter-26.xhtml#glossary-error">error</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <span class="type-reference error">type:not-atomic</span>
is <span class="glossary-reference error">glossary:signaled</span>.<br/></dd></dl><div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><dl><dt class="label">Notes</dt><dd><a class="function-reference" href="#function-atomic">atomic</a> could be implemented in terms of
<span class="function-reference error">function:get-atomic-expansion</span> as follows:
<pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-3.xhtml#macro-defmacro">defmacro</a> <span class="syntax-interned-symbol">atomic</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">place</span> <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-rest">&amp;REST</a> <span class="syntax-interned-symbol">keys</span> <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-key">&amp;KEY</a> <span class="syntax-interned-symbol">order</span> <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-allow-other-keys">&amp;ALLOW-OTHER-KEYS</a>
                  <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-environment">&amp;ENVIRONMENT</a> <span class="syntax-interned-symbol">env</span>)</span>
  <span class="syntax-cons">(<a class="symbol-reference" href="chapter-3.xhtml#symbol-declare">declare</a> <span class="syntax-cons">(<a class="declaration-reference" href="chapter-3.xhtml#declaration-ignore">ignore</a> <span class="syntax-interned-symbol">order</span>)</span>)</span>
  <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-multiple-value-bind">multiple-value-bind</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">vars</span> <span class="syntax-interned-symbol">vals</span> <span class="syntax-interned-symbol">stores</span> <a class="function-reference" href="chapter-22.xhtml#function-write">write</a> <a class="function-reference" href="chapter-23.xhtml#function-read">read</a>)</span>
      <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-apply">apply</a> <span class="syntax-function">#'<span class="syntax-interned-symbol">get-atomic-expansion</span></span> <span class="syntax-interned-symbol">place</span> <span class="syntax-keyword-symbol">:environment</span> <span class="syntax-interned-symbol">env</span> <span class="syntax-interned-symbol">keys</span>)</span>
    <span class="syntax-cons">(<a class="symbol-reference" href="chapter-3.xhtml#symbol-declare">declare</a> <span class="syntax-cons">(<a class="declaration-reference" href="chapter-3.xhtml#declaration-ignore">ignore</a> <span class="syntax-interned-symbol">stores</span> <a class="function-reference" href="chapter-22.xhtml#function-write">write</a>)</span>)</span>
    <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let*">let*</a> <span class="syntax-cons">(<span class="syntax-unquote">,@<span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-mapcar">mapcar</a> <span class="syntax-function">#'<a class="function-reference" href="chapter-14.xhtml#function-list">list</a></span> <span class="syntax-interned-symbol">vars</span> <span class="syntax-interned-symbol">vals</span>)</span></span>)</span> <span class="syntax-unquote">,<a class="function-reference" href="chapter-23.xhtml#function-read">read</a></span>)</span></span>)</span>)</span>

<span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-define-setf-expander">define-setf-expander</a> <span class="syntax-interned-symbol">atomic</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">place</span>
                              <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-rest">&amp;REST</a> <span class="syntax-interned-symbol">keys</span> <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-key">&amp;KEY</a> <span class="syntax-interned-symbol">order</span> <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-allow-other-keys">&amp;ALLOW-OTHER-KEYS</a>
                              <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-environment">&amp;ENVIRONMENT</a> <span class="syntax-interned-symbol">env</span>)</span>
  <span class="syntax-cons">(<a class="symbol-reference" href="chapter-3.xhtml#symbol-declare">declare</a> <span class="syntax-cons">(<a class="declaration-reference" href="chapter-3.xhtml#declaration-ignore">ignore</a> <span class="syntax-interned-symbol">order</span>)</span>)</span>
  <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-apply">apply</a> <span class="syntax-function">#'<span class="syntax-interned-symbol">get-atomic-expansion</span></span> <span class="syntax-interned-symbol">place</span> <span class="syntax-keyword-symbol">:environment</span> <span class="syntax-interned-symbol">env</span> <span class="syntax-interned-symbol">keys</span>)</span>)</span>
</span></code></pre>
</dd></dl></div></div><br/><br/><br/><div class="component" id="macro-atomic-update"><div class="header"><span class="left"><span class="name" id="macro-atomic-update">atomic-update</span>, <span class="name" id="macro-atomic-update-explicit">atomic-update-explicit</span></span><span class="right"><span class="ftype">Macro</span></span></div><br/><span class="function-definition"><span class="name">atomic-update</span>&nbsp;<span class="lambda-list">(place <span class="lambda-list-keyword">&amp;key</span> order <span class="lambda-list-keyword">&amp;allow-other-keys</span>) update-fn <span class="lambda-list-keyword">&amp;rest</span> arguments</span>&nbsp;â†’&nbsp;<span class="return-values">new-value</span></span><br/>
<span class="function-definition"><span class="name">atomic-update-explicit</span>&nbsp;<span class="lambda-list">place update-fn <span class="lambda-list-keyword">&amp;rest</span> arguments</span>&nbsp;â†’&nbsp;<span class="return-values">success, present</span></span><br/><br/><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">place</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-place">place</a> with an atomic expansion.<br/><span class="parameter">order</span>&mdash;an <span class="glossary-reference error">glossary:atomic ordering specifier</span>. Default is <span class="keyword">:sequentially-consistent</span>.<span class="reviewer-note" id="reviewer-note-is-this-evaluated?"><span class="reviewer-note-tooltip"><span class="reviewer">Moringen</span>: is this evaluated?</span>â€£</span><br/><span class="parameter">update-fn</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-designator">designator</a> for a function that accepts as many arguments as are provided, plus one.<br/><span class="parameter">arguments</span>&mdash;<a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a>.<br/><span class="parameter">new-value</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.<br/><span class="parameter">success</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generalized boolean">generalized boolean</a><span class="reviewer-note" id="reviewer-note-not-discussed"><span class="reviewer-note-tooltip"><span class="reviewer">Moringen</span>: Not discussed</span>â€£</span><br/><span class="parameter">present</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generalized boolean">generalized boolean</a><br/></dd></dl><dl><dt class="label">Description</dt><dd>Performs an arbitrary atomic read-modify-write operation
on <span class="parameter">place</span>. First, the subforms of <span class="parameter">place</span>,
the <span class="parameter">update-fn</span>, and the <span class="parameter">arguments</span> are <span class="glossary-reference error">glossary:evaluated</span>,
in that order. Second, the value of <span class="parameter">place</span> is read atomically,
with the given parameters <span class="reviewer-note" id="reviewer-note-be-more-explicit-abo"><span class="reviewer-note-tooltip"><span class="reviewer">Moringen</span>: Be more explicit about "parameters"?</span>â€£</span> in
<a class="macro-reference" href="#macro-atomic-update-explicit">atomic-update-explicit</a>. Third, <span class="parameter">update-fn</span> is called as
by <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-apply">apply</a> <span class="parameter">update-fn</span> <span class="parameter">placeval</span> <span class="parameter">arguments</span>)</span>
</span></code>, <span class="parameter">placeval</span> being the value read
from the <span class="parameter">place</span>.  Finally, the primary value of this call is written
into the <span class="parameter">place</span>, and returned from the <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>.
<span class="reviewer-note" id="reviewer-note-from-the-atomic-upda"><span class="reviewer-note-tooltip"><span class="reviewer">Moringen</span>: from the atomic-update[-explicit] form?</span>â€£</span><br/>It is permissible for an implementation to read from the <span class="parameter">place</span>
multiple times, and to call <span class="parameter">update-fn</span> multiple times, e.g. in
a compare-and-swap loop; however
<span class="parameter">place</span>'s subforms, <span class="parameter">update-fn</span>, and the <span class="parameter">arguments</span> may be evaluated at most once.<br/></dd></dl><div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><dl><dt class="label">See Also</dt><dd><a class="function-reference" href="#function-atomic">atomic</a><br/></dd></dl></div><div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><dl><dt class="label">Notes</dt><dd><pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">atomic-update</span> <span class="parameter">place</span> <span class="syntax-interned-symbol">...</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>â‰¡</mo></math> <span class="syntax-cons">(<span class="syntax-interned-symbol">atomic-update-explicit</span> <span class="syntax-interned-symbol">...</span>)</span> <span class="reviewer-note" id="reviewer-note-is-there-(supposed-t"><span class="reviewer-note-tooltip"><span class="reviewer">Moringen</span>: is there (supposed to be) such an equation given the different return values?</span>â€£</span>
</span></code></pre><br/></dd></dl></div></div><br/>
<br/><div class="component" id="macro-atomic-incf"><div class="header"><span class="left"><span class="name" id="macro-atomic-incf">atomic-incf</span>, <span class="name" id="macro-atomic-decf">atomic-decf</span>, <span class="name" id="macro-atomic-incf-explicit">atomic-incf-explicit</span>, <span class="name" id="macro-atomic-decf-explicit">atomic-decf-explicit</span></span><span class="right"><span class="ftype">Macro</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">atomic-incf</span>&nbsp;<span class="lambda-list">place <span class="lambda-list-keyword">&amp;optional</span> delta</span>&nbsp;â†’&nbsp;<span class="return-values">new</span></span><br/>
<span class="function-definition"><span class="name">atomic-decf</span>&nbsp;<span class="lambda-list">place <span class="lambda-list-keyword">&amp;optional</span> delta</span>&nbsp;â†’&nbsp;<span class="return-values">new</span></span><br/>
<span class="function-definition"><span class="name">atomic-incf-explicit</span>&nbsp;<span class="lambda-list">(place <span class="lambda-list-keyword">&amp;key</span> order <span class="lambda-list-keyword">&amp;allow-other-keys</span>) <span class="lambda-list-keyword">&amp;optional</span> delta</span>&nbsp;â†’&nbsp;<span class="return-values">new</span></span><br/>
<span class="function-definition"><span class="name">atomic-decf-explicit</span>&nbsp;<span class="lambda-list">(place <span class="lambda-list-keyword">&amp;key</span> order <span class="lambda-list-keyword">&amp;allow-other-keys</span>) <span class="lambda-list-keyword">&amp;optional</span> delta</span>&nbsp;â†’&nbsp;<span class="return-values">new</span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">place</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-place">place</a>, the value of which is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-number">number</a>, which has an atomic
expansion.<br/><span class="parameter">delta</span>&mdash;<span class="glossary-reference error">glossary:evaluated</span>. A <a class="glossary-reference" href="chapter-26.xhtml#glossary-number">number</a>. Default is <code><span class="syntax-root"><span class="syntax-number">1</span>
</span></code>.<br/><span class="parameter">order</span>&mdash;an <span class="glossary-reference error">glossary:atomic ordering specifier</span>. Default is <span class="keyword">:sequentially-consistent</span>.<br/><span class="parameter">new</span>&mdash;the value written by the operation.<span class="reviewer-note" id="reviewer-note-i-think-this-should-"><span class="reviewer-note-tooltip"><span class="reviewer">Moringen</span>: I think this should say "an object" and the semantics should be in the description</span>â€£</span><br/></dd></dl><dl><dt class="label">Description</dt><dd>As <a class="macro-reference" href="chapter-12.xhtml#macro-incf">incf</a> and <a class="macro-reference" href="chapter-12.xhtml#macro-decf">decf</a>, but as <a class="glossary-reference" href="chapter-26.xhtml#glossary-atomic">atomic</a>
read-modify-write operations.<br/>The <span class="parameter">place</span> may be read multiple times, but its subforms are
<span class="glossary-reference error">glossary:evaluated</span> only once, as is <span class="parameter">delta</span>. The order of
<a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluations</a> is as specified in <a class="section-reference" href="chapter-5.xhtml#section-GenRefSubFormEval">Evaluation of Subforms to Places</a>.<br/><span class="reviewer-note" id="reviewer-note-describe-\param{new}"><span class="reviewer-note-tooltip"><span class="reviewer">Moringen</span>: Describe \param{new} here?</span>â€£</span><br/></dd></dl><div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><dl><dt class="label">See Also</dt><dd><a class="macro-reference" href="chapter-12.xhtml#macro-incf">incf</a>,
<a class="macro-reference" href="chapter-12.xhtml#macro-decf">decf</a>,
<a class="macro-reference" href="#macro-atomic-update-explicit">atomic-update-explicit</a><br/></dd></dl></div><div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><dl><dt class="label">Notes</dt><dd><pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">atomic-incf</span> <span class="parameter">place</span> <span class="parameter">delta</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>â‰¡</mo></math> <span class="syntax-cons">(<span class="syntax-interned-symbol">atomic-incf-explicit</span> <span class="syntax-cons">(<span class="parameter">place</span>)</span> <span class="parameter">delta</span>)</span>
<span class="syntax-cons">(<span class="syntax-interned-symbol">atomic-incf-explicit</span> <span class="syntax-cons">(<span class="parameter">place</span> <span class="syntax-interned-symbol">...</span>)</span> <span class="parameter">delta</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>â‰¡</mo></math> <span class="syntax-cons">(<span class="syntax-interned-symbol">atomic-update-explicit</span> <span class="syntax-cons">(<span class="parameter">place</span> <span class="syntax-interned-symbol">...</span>)</span> <span class="syntax-function">#'<a class="function-reference" href="chapter-12.xhtml#function-+">+</a></span> <span class="parameter">delta</span>)</span> <span class="reviewer-note" id="reviewer-note-the-current-definiti"><span class="reviewer-note-tooltip"><span class="reviewer">Moringen</span>: The current definition of atomic-update-explicit does use this syntax</span>â€£</span>
</span></code></pre>
</dd></dl></div></div><br/><br/><br/><div class="component" id="declaration-interruptible"><div class="header"><span class="left"><span class="name" id="declaration-interruptible">interruptible</span></span><span class="right"><span class="ftype">Declaration</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">interruptible</span> <span class="syntax-interned-symbol">[\param{value}]</span>)</span>
</span></code>
<span class="reviewer-note" id="reviewer-note-is-the-value-suppose"><span class="reviewer-note-tooltip"><span class="reviewer">Moringen</span>: Is the value supposed to be optional? Would interruptible | (interruptible value) be better for that?</span>â€£</span><br/></dd></dl><dl><dt class="label">Arguments</dt><dd><span class="parameter">value</span>&mdash;one of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-integer">integers</a> <code><span class="syntax-root"><span class="syntax-number">0</span>
</span></code>, <code><span class="syntax-root"><span class="syntax-number">1</span>
</span></code>, <code><span class="syntax-root"><span class="syntax-number">2</span>
</span></code>, or <code><span class="syntax-root"><span class="syntax-number">3</span>
</span></code>.<br/></dd></dl><dl><dt class="label">Valid Context</dt><dd><a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration">declaration</a> or <a class="glossary-reference" href="chapter-26.xhtml#glossary-proclamation">proclamation</a><br/></dd></dl><dl><dt class="label">Binding Types Affected</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>Hints to the implementation the extent to which implicit
<span class="glossary-reference error">glossary:interrupt</span> processing should occur. <code><span class="syntax-root"><span class="syntax-number">0</span>
</span></code> means as little
processing as possible should be done, and <code><span class="syntax-root"><span class="syntax-number">3</span>
</span></code> means as much as
possible. This hint may be ignored.<br/>For example, a compiler given <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">interruptible</span> <span class="syntax-number">3</span>)</span>
</span></code> could decide to
insert implicit processing at the tops of loops and whenever a
<span class="glossary-reference error">glossary:lock acquisition</span> is attempted.<br/>Declaring <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">interruptible</span> <span class="syntax-number">0</span>)</span>
</span></code> does not prevent any <span class="glossary-reference error">glossary:interrupt</span>
processing from occurring, and in particular, <a class="function-reference" href="chapter-25.xhtml#function-sleep">sleep</a>,
<span class="function-reference error">function:condition-wait</span>, and <a class="function-reference" href="#function-join-thread">join-thread</a> must process
<span class="glossary-reference error">glossary:interrupts</span> regardless. For code to be actually uninterruptible,
<span class="glossary-reference error">glossary:interrupt</span> processing must be dynamically deferred, as by
<span class="macro-reference error">macro:without-interrupts</span>.<br/>[This could be an optimize quality, but I'm not sure a one-line description
suffices.]<br/><span class="reviewer-note" id="reviewer-note-added-this"><span class="reviewer-note-tooltip"><span class="reviewer">Moringen</span>: Added this</span>â€£</span>
</dd></dl><div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><dl><dt class="label">See Also</dt><dd><span class="function-reference error">function:signal-pending-interrupts</span>,
<span class="macro-reference error">macro:without-interrupts</span><br/></dd></dl></div></div><br/></section></section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>