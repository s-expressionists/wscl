<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="style.css"/><script src="permalink.js"/><script src="navigation.js"/><title>Well-specified Common Lisp â€” Objects</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">Objects</span><br/><ol class="local-toc"><li><a href="#section-ObjectCreationAndInit">Object Creation and Initialization</a><ol> <li><a href="#section-InitializationArguments">Initialization Arguments</a><ol> </ol></li><li><a href="#section-DeclaringInitargValidity">Declaring the Validity of Initialization Arguments</a><ol> </ol></li><li><a href="#section-DefaultingofInitializationArguments">Defaulting of Initialization Arguments</a><ol> </ol></li><li><a href="#section-InitargRules">Rules for Initialization Arguments</a><ol> </ol></li><li><a href="#section-SharedInitialize">Shared-Initialize</a><ol> </ol></li><li><a href="#section-Initialize-Instance">Initialize-Instance</a><ol> </ol></li><li><a href="#section-DefinitionsofMake-InstanceandInitialize-Instance">Definitions of Make-Instance and Initialize-Instance</a><ol> </ol></li></ol></li><li><a href="#section-ChangingInstanceClass">Changing the Class of an Instance</a><ol> <li><a href="#section-ModifyingtheStructureoftheInstance">Modifying the Structure of the Instance</a><ol> </ol></li><li><a href="#section-InitNewLocalSlots">Initializing Newly Added Local Slots</a><ol> </ol></li><li><a href="#section-CustomizingtheChangeofClassofanInstance">Customizing the Change of Class of an Instance</a><ol> </ol></li></ol></li><li><a href="#section-InstanceReInit">Reinitializing an Instance</a><ol> <li><a href="#section-CustomizingReinitialization">Customizing Reinitialization</a><ol> </ol></li></ol></li><li><a href="#section-MetaObjects">Meta-Objects</a><ol> <li><a href="#section-StandardMeta-objects">Standard Meta-objects</a><ol> </ol></li></ol></li><li><a href="#section-Slots">Slots</a><ol> <li><a href="#section-IntroductiontoSlots">Introduction to Slots</a><ol> </ol></li><li><a href="#section-AccessingSlots">Accessing Slots</a><ol> </ol></li><li><a href="#section-SlotInheritance">Inheritance of Slots and Slot Options</a><ol> </ol></li></ol></li><li><a href="#section-GFsAndMethods">Generic Functions and Methods</a><ol> <li><a href="#section-IntroToGFs">Introduction to Generic Functions</a><ol> </ol></li><li><a href="#section-IntroToMethods">Introduction to Methods</a><ol> </ol></li><li><a href="#section-SpecializerQualifierAgreement">Agreement on Parameter Specializers and Qualifiers</a><ol> </ol></li><li><a href="#section-GFMethodLambdaListCongruency">Congruent Lambda-lists for all Methods of a Generic Function</a><ol> </ol></li><li><a href="#section-KwdArgsInGFsAndMeths">Keyword Arguments in Generic Functions and Methods</a><ol> <li><a href="#section-ExamplesofKeywordArgumentsinGenericFunctionsandMethods">Examples of Keyword Arguments in Generic Functions and Methods</a><ol> </ol></li></ol></li><li><a href="#section-MethodSelectionAndCombination">Method Selection and Combination</a><ol> <li><a href="#section-DeterminingtheEffectiveMethod">Determining the Effective Method</a><ol> <li><a href="#section-SelApplMeth">Selecting the Applicable Methods</a><ol> </ol></li><li><a href="#section-SortingtheApplicableMethodsbyPrecedenceOrder">Sorting the Applicable Methods by Precedence Order</a><ol> </ol></li><li><a href="#section-ApplyMethCombToSortedMethods">Applying method combination to the sorted list of applicable methods</a><ol> </ol></li></ol></li><li><a href="#section-StdMethComb">Standard Method Combination</a><ol> </ol></li><li><a href="#section-DeclarativeMethodCombination">Declarative Method Combination</a><ol> </ol></li><li><a href="#section-BuiltInMethCombTypes">Built-in Method Combination Types</a><ol> </ol></li></ol></li><li><a href="#section-MethodInheritance">Inheritance of Methods</a><ol> </ol></li></ol></li><li><a href="#section-Dictionary">Dictionary</a><ol> <li><a href="#function-function-keywords">function-keywords</a></li><li><a href="#function-ensure-generic-function">ensure-generic-function</a></li><li><a href="#function-allocate-instance">allocate-instance</a></li><li><a href="#function-reinitialize-instance">reinitialize-instance</a></li><li><a href="#function-shared-initialize">shared-initialize</a></li><li><a href="#function-update-instance-for-different-class">update-instance-for-different-class</a></li><li><a href="#function-update-instance-for-redefined-class">update-instance-for-redefined-class</a></li><li><a href="#function-change-class">change-class</a></li><li><a href="#function-slot-boundp">slot-boundp</a></li><li><a href="#function-slot-exists-p">slot-exists-p</a></li><li><a href="#function-slot-makunbound">slot-makunbound</a></li><li><a href="#function-slot-missing">slot-missing</a></li><li><a href="#function-slot-unbound">slot-unbound</a></li><li><a href="#function-slot-value">slot-value</a></li><li><a href="#function-method-qualifiers">method-qualifiers</a></li><li><a href="#function-no-applicable-method">no-applicable-method</a></li><li><a href="#function-no-next-method">no-next-method</a></li><li><a href="#function-remove-method">remove-method</a></li><li><a href="#function-make-instance">make-instance</a></li><li><a href="#function-make-instances-obsolete">make-instances-obsolete</a></li><li><a href="#function-make-load-form">make-load-form</a></li><li><a href="#function-make-load-form-saving-slots">make-load-form-saving-slots</a></li><li><a href="#macro-with-accessors">with-accessors</a></li><li><a href="#macro-with-slots">with-slots</a></li><li><a href="#macro-defclass">defclass</a></li><li><a href="#macro-defgeneric">defgeneric</a></li><li><a href="#macro-defmethod">defmethod</a></li><li><a href="#function-find-class">find-class</a></li><li><a href="#function-next-method-p">next-method-p</a></li><li><a href="#macro-call-method">call-method, make-method</a></li><li><a href="#function-call-next-method">call-next-method</a></li><li><a href="#function-compute-applicable-methods">compute-applicable-methods</a></li><li><a href="#macro-define-method-combination">define-method-combination</a></li><li><a href="#function-find-method">find-method</a></li><li><a href="#function-add-method">add-method</a></li><li><a href="#function-initialize-instance">initialize-instance</a></li><li><a href="#function-class-name">class-name</a></li><li><a href="#function-SETF:(class-name)">(setf&nbsp;class-name)</a></li><li><a href="#function-class-of">class-of</a></li><li><a href="#type-unbound-slot">unbound-slot</a></li><li><a href="#function-unbound-slot-instance">unbound-slot-instance</a></li></ol></li></ol></nav><div class="content"><section id="section-ChapSeven"><h1 class="section-title">7. Objects</h1><section id="section-ObjectCreationAndInit"><h2 class="section-title">Object Creation and Initialization</h2>

                      
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> <a class="function-reference" href="#function-make-instance">make-instance</a> creates and returns a new
<a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a>.  The first argument is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> or
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a>, and the remaining arguments form an 
<span class="newterm">initialization argument list</span>.<br/>The initialization of a new <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> consists of several distinct
steps, including the following: combining the explicitly supplied initialization
arguments with default values for the unsupplied initialization arguments, 
checking the validity of the initialization arguments, allocating storage 
for the <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a>, filling <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a> with
values, and executing user-supplied <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> that perform additional
initialization.  Each step of <a class="function-reference" href="#function-make-instance">make-instance</a> is implemented by a
<a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> to provide a mechanism for customizing that step.  
In addition, <a class="function-reference" href="#function-make-instance">make-instance</a> is itself a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> 
and thus also can be customized.<br/>The object system specifies system-supplied primary <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> for each step 
and thus specifies a well-defined standard behavior for the entire
initialization process.  The standard behavior provides four simple
mechanisms for controlling initialization:<br/><ul><li>Declaring a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> to be an initialization argument 
for a <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>.  An initialization argument is declared by using the
<span class="keyword">:initarg</span> slot option to <a class="macro-reference" href="#macro-defclass">defclass</a>.  This provides a mechanism
for supplying a value for a <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> in a call to <a class="function-reference" href="#function-make-instance">make-instance</a>.<br/></li><li>Supplying a default value form for an initialization argument.
Default value forms for initialization arguments are defined by using the
<span class="keyword">:default-initargs</span> class option to <a class="macro-reference" href="#macro-defclass">defclass</a>.  If an 
initialization argument is not explicitly provided
as an argument to <a class="function-reference" href="#function-make-instance">make-instance</a>, the default value form is
evaluated in the lexical environment of the <a class="macro-reference" href="#macro-defclass">defclass</a> form that
defined it, and the resulting value is used as the value of the
initialization argument.<br/></li><li>Supplying a default initial value form for a <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>.  
A default initial value form for a <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> is defined by using the 
<span class="keyword">:initform</span> slot option to <a class="macro-reference" href="#macro-defclass">defclass</a>.  If no initialization
argument associated with that <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> is given as an argument to 
<a class="function-reference" href="#function-make-instance">make-instance</a> or is defaulted by <span class="keyword">:default-initargs</span>, this
default initial value form is evaluated in the lexical environment of
the <a class="macro-reference" href="#macro-defclass">defclass</a> form that defined it, and the resulting value is
stored in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>.  The <span class="keyword">:initform</span> form for a
<a class="glossary-reference" href="chapter-26.xhtml#glossary-local slot">local slot</a> may be used when creating an <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a>, when 
updating an <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> to conform to a redefined <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a>, 
or when updating an <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> to conform to the definition of a
different <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a>. The <span class="keyword">:initform</span> form for a
<a class="glossary-reference" href="chapter-26.xhtml#glossary-shared slot">shared slot</a> may be used when defining or re-defining the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a>.<br/></li><li>Defining <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> for <a class="function-reference" href="#function-initialize-instance">initialize-instance</a> and
<a class="function-reference" href="#function-shared-initialize">shared-initialize</a>.  The slot-filling behavior described above is
implemented by a system-supplied primary <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> for
<a class="function-reference" href="#function-initialize-instance">initialize-instance</a> which invokes <a class="function-reference" href="#function-shared-initialize">shared-initialize</a>. The
<a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> <a class="function-reference" href="#function-shared-initialize">shared-initialize</a> implements the parts of
initialization shared by these four situations: when making an <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a>, 
when re-initializing an <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a>, when updating an <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a>
to conform to a redefined <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a>, and when updating an <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> 
to conform to the definition of a different <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a>. The system-supplied
primary <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> for <a class="function-reference" href="#function-shared-initialize">shared-initialize</a> directly implements the
slot-filling behavior described above, and <a class="function-reference" href="#function-initialize-instance">initialize-instance</a>
simply invokes <a class="function-reference" href="#function-shared-initialize">shared-initialize</a>.<br/></li></ul><br/><section id="section-InitializationArguments"><h3 class="section-title">Initialization Arguments</h3>An initialization argument controls <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> creation and
initialization.  It is often convenient to use keyword <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbols</a>
to name initialization arguments, but the <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> of an
initialization argument can be any <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>, including <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.  An
initialization argument can be used in two ways: to fill a <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>
with a value or to provide an argument for an initialization
<a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a>.  A single initialization argument can be used for both
purposes.<br/>An <a class="glossary-reference" href="chapter-26.xhtml#glossary-initialization argument list">initialization argument list</a> is a
<a class="glossary-reference" href="chapter-26.xhtml#glossary-property list">property list</a> of
initialization argument names and values.
Its structure is identical
to a <a class="glossary-reference" href="chapter-26.xhtml#glossary-property list">property list</a> and also 
to the portion of an argument list
processed for <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-key">key</a> parameters.
As in those lists,
if an initialization
argument name appears more than once in an initialization argument list,
the leftmost occurrence supplies the value and the remaining occurrences
are ignored.  The arguments to <a class="function-reference" href="#function-make-instance">make-instance</a> (after the first
argument) form an <a class="glossary-reference" href="chapter-26.xhtml#glossary-initialization argument list">initialization argument list</a>.

An initialization argument can be associated with a <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>.  If
the initialization argument has a value in the <span class="glossary-reference error">glossary:initialization
argument list</span>, the value is stored into the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> of the newly
created <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>, overriding any <span class="keyword">:initform</span> form associated
with the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>.  A single initialization argument can initialize
more than one <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>.  An initialization argument that initializes
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-shared slot">shared slot</a> stores its value into the <a class="glossary-reference" href="chapter-26.xhtml#glossary-shared slot">shared slot</a>,
replacing any previous value.<br/>An initialization argument can be associated with a <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a>.  When
an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> is created and a particular initialization argument is
supplied, the <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic functions</a> <a class="function-reference" href="#function-initialize-instance">initialize-instance</a>,
<a class="function-reference" href="#function-shared-initialize">shared-initialize</a>, and <a class="function-reference" href="#function-allocate-instance">allocate-instance</a> are called
with that initialization argument's name and value as a keyword argument
pair.  If a value for the initialization argument is not supplied in the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-initialization argument list">initialization argument list</a>, the <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a>'s 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a> supplies a default value.<br/>Initialization arguments are used in four situations: when making an
<a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a>, when re-initializing an <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a>, when updating
an <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> to conform to a redefined <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a>, and when
updating an <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> to conform to the definition of a different
<a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a>.<br/>Because initialization arguments are used to control the creation and
initialization of an <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> of some particular <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a>,
we say that an initialization argument is
``an initialization argument for'' that <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a>.<br/></section><section id="section-DeclaringInitargValidity"><h3 class="section-title">Declaring the Validity of Initialization Arguments</h3><br/>Initialization arguments are checked for validity in each of the four
situations that use them.  An initialization argument may be valid in
one situation and not another. For example, the system-supplied     
primary <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> for <a class="function-reference" href="#function-make-instance">make-instance</a> defined for 
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> <a class="type-reference" href="chapter-4.xhtml#type-standard-class">standard-class</a> checks the validity of its initialization arguments
and signals an error if an initialization argument is supplied that is
not declared as valid in that situation.<br/>
There are two means for declaring initialization arguments valid.<br/><ul><li>Initialization arguments that fill <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a> are declared as valid
by the <span class="keyword">:initarg</span> slot option to <a class="macro-reference" href="#macro-defclass">defclass</a>.  The
<span class="keyword">:initarg</span> slot option is inherited from <a class="glossary-reference" href="chapter-26.xhtml#glossary-superclass">superclasses</a>.  Thus
the set of valid initialization arguments that fill <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a> for a
<a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> is the union of the initialization arguments that fill
<a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a> declared as valid by that <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> and its
<a class="glossary-reference" href="chapter-26.xhtml#glossary-superclass">superclasses</a>.  Initialization arguments that fill <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a>
are valid in all four contexts.<br/></li><li>Initialization arguments that supply arguments to <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> are
declared as valid by defining those <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a>.  The keyword name of
each keyword parameter specified in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a>'s 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a> becomes an initialization argument for all <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">classes</a> 
for which the <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> is applicable.
The presence of <span class="lambda-list-keyword">&amp;allow-other-keys</span> in the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a> of an applicable method disables validity checking of 
initialization arguments.
Thus <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> inheritance
controls the set of valid initialization arguments that supply arguments
to <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a>.  The <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic functions</a> for which <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a>
definitions serve to declare initialization arguments valid are as
follows:
<ul><li>Making an <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a>:
<a class="function-reference" href="#function-allocate-instance">allocate-instance</a>, <a class="function-reference" href="#function-initialize-instance">initialize-instance</a>, and
<a class="function-reference" href="#function-shared-initialize">shared-initialize</a>.  Initialization arguments declared as valid
by these <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> are valid when making 
an <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a>.<br/></li><li>Re-initializing an <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a>:
<a class="function-reference" href="#function-reinitialize-instance">reinitialize-instance</a> and <a class="function-reference" href="#function-shared-initialize">shared-initialize</a>.
Initialization arguments declared as valid by these <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> are
valid when re-initializing an <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a>.<br/></li><li>Updating an <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> to conform to a redefined <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a>:
<a class="function-reference" href="#function-update-instance-for-redefined-class">update-instance-for-redefined-class</a> and <a class="function-reference" href="#function-shared-initialize">shared-initialize</a>.
Initialization arguments declared as valid by these <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> are
valid when updating an <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> to conform to a redefined <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a>.<br/></li><li>Updating an <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> to conform to the definition of a
different <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a>:
<a class="function-reference" href="#function-update-instance-for-different-class">update-instance-for-different-class</a> and <a class="function-reference" href="#function-shared-initialize">shared-initialize</a>.
Initialization arguments declared as valid by these <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> are
valid when updating an <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> to conform to the definition
of a different <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a>.<br/></li></ul>
</li></ul><br/>The set of valid initialization arguments for a <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> is the set of
valid initialization arguments that either fill <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a> or supply
arguments to <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a>, along with the predefined initialization
argument <span class="keyword">:allow-other-keys</span>.  The default value for 
<span class="keyword">:allow-other-keys</span> is <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.
Validity checking of initialization arguments is disabled if the value of
the initialization argument <span class="keyword">:allow-other-keys</span> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>.

</section><section id="section-DefaultingofInitializationArguments"><h3 class="section-title">Defaulting of Initialization Arguments</h3>A default value <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> can be supplied for an initialization
argument by using the <span class="keyword">:default-initargs</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> option.  If an
initialization argument is declared valid by some particular <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a>,
its default  value form might be specified by a different <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a>. 
In this case <span class="keyword">:default-initargs</span> is used to supply a default value
for an inherited initialization argument.<br/>The <span class="keyword">:default-initargs</span> option is used only to provide default
values for initialization arguments; it does not declare a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> 
as a valid initialization argument name.  Furthermore, 
the <span class="keyword">:default-initargs</span> option is used only to provide default values for
initialization arguments when making an <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a>.<br/>The argument to the <span class="keyword">:default-initargs</span> class 
option is a list of
alternating initialization argument names and <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a>.  
Each <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> is the
default  value form for the corresponding initialization
argument.  The default  value <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> of an initialization
argument is used and evaluated only if that initialization argument
does not appear in the arguments to <a class="function-reference" href="#function-make-instance">make-instance</a> and is not
defaulted by a more specific <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a>.  The default  value <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> is
evaluated in the lexical environment of the <a class="macro-reference" href="#macro-defclass">defclass</a> form that
supplied it; the resulting value is used as the initialization
argument's value.<br/>The initialization arguments supplied to <a class="function-reference" href="#function-make-instance">make-instance</a> are combined
with defaulted initialization arguments to produce a 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-defaulted initialization argument list">defaulted initialization argument list</a>. A 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-defaulted initialization argument list">defaulted initialization argument list</a>
is a list of alternating initialization argument names and
values in which unsupplied initialization arguments are defaulted and in
which the explicitly supplied initialization arguments appear earlier in
the list than the defaulted initialization arguments.  Defaulted
initialization arguments are ordered according to the order in the 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-class precedence list">class precedence list</a> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">classes</a> that supplied the default values.<br/>There is a distinction between the purposes of the 
<span class="keyword">:default-initargs</span> and the <span class="keyword">:initform</span> options with respect to the
initialization of <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a>.  The <span class="keyword">:default-initargs</span> 
class option
provides a mechanism for the user to give a default  value <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>
for an initialization argument without knowing whether the
initialization argument initializes a <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> 
or is passed to a <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a>.
If that initialization argument is not explicitly supplied in a call
to <a class="function-reference" href="#function-make-instance">make-instance</a>, the default  value <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> is used, just
as if it had been supplied in the call.  In contrast, the 
<span class="keyword">:initform</span> slot option provides a mechanism for the user to give a
default initial value form for a <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>.  An <span class="keyword">:initform</span> form is
used to initialize a <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> only if no initialization argument
associated with that <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> is given as an argument to 
<a class="function-reference" href="#function-make-instance">make-instance</a> or is defaulted by <span class="keyword">:default-initargs</span>.<br/><a id="index/text-order of evaluation"></a><a id="index/text-evaluation order"></a>
The order of evaluation of default value <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a> for initialization
arguments and the order of evaluation of <span class="keyword">:initform</span> forms are
undefined.  If the order of evaluation is important, 
<a class="function-reference" href="#function-initialize-instance">initialize-instance</a> or <a class="function-reference" href="#function-shared-initialize">shared-initialize</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> 
should be used
instead.<br/></section><section id="section-InitargRules"><h3 class="section-title">Rules for Initialization Arguments</h3><br/>The <span class="keyword">:initarg</span> slot option may be specified more than
once for a given <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>.<br/>The following rules specify when initialization arguments may be
multiply defined:<br/><ul><li>A given initialization argument can be used to
initialize more than one <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> if the same initialization argument name
appears in more than one <span class="keyword">:initarg</span> slot option.<br/></li><li>A given initialization argument name can appear 
in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a> of more than one initialization <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a>.<br/></li><li>A given initialization argument name can
appear both in an <span class="keyword">:initarg</span> slot option and 
in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a>
of an initialization <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a>.<br/></li></ul><br/><br/>If two or more initialization arguments that initialize the same
<a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> are given in the arguments to <a class="function-reference" href="#function-make-instance">make-instance</a>, the
leftmost of these initialization arguments in the <span class="glossary-reference error">glossary:initialization
argument list</span> supplies the value, even if the initialization arguments
have different names.<br/>If two or more different initialization arguments that initialize the
same <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> have default values and none is given explicitly in the
arguments to <a class="function-reference" href="#function-make-instance">make-instance</a>, the initialization argument that
appears in a <span class="keyword">:default-initargs</span> class option in the most specific
of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">classes</a> supplies the value. If a single
<span class="keyword">:default-initargs</span> class option specifies two or more initialization
arguments that initialize the same <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> and none is given
explicitly in the arguments to <a class="function-reference" href="#function-make-instance">make-instance</a>, the leftmost in
the <span class="keyword">:default-initargs</span> class option supplies the value, and the
values of the remaining default value <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a> are ignored.<br/>Initialization arguments given explicitly in the arguments to
<a class="function-reference" href="#function-make-instance">make-instance</a> appear to the left of defaulted initialization
arguments. Suppose that the classes <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>C</mrow><mo>1</mo></msub></math> and <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>C</mrow><mo>2</mo></msub></math> supply the
values of defaulted initialization arguments for different <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a>,
and suppose that <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>C</mrow><mo>1</mo></msub></math> is more specific than <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>C</mrow><mo>2</mo></msub></math>; then the
defaulted initialization argument whose value is supplied by <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>C</mrow><mo>1</mo></msub></math>
is to the left of the defaulted initialization argument whose value is
supplied by <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>C</mrow><mo>2</mo></msub></math> in the <span class="glossary-reference error">glossary:defaulted initialization argument
list</span>.  If a single <span class="keyword">:default-initargs</span> class option supplies the
values of initialization arguments for two different <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a>, the
initialization argument whose value is specified farther to the left in
the <span class="keyword">:default-initargs</span> class option appears farther to the left in
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-defaulted initialization argument list">defaulted initialization argument list</a>.<br/><br/>If a <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> has both an <span class="keyword">:initform</span> form and an 
<span class="keyword">:initarg</span> slot option, and the initialization argument is defaulted
using <span class="keyword">:default-initargs</span> or is supplied to <a class="function-reference" href="#function-make-instance">make-instance</a>,
the captured <span class="keyword">:initform</span> form is neither used nor evaluated.<br/>The following is an example of the above rules:<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="#macro-defclass">defclass</a> <span class="syntax-interned-symbol">q</span> <span class="syntax-symbol">()</span> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-keyword-symbol">:initarg</span> <span class="syntax-interned-symbol">a</span>)</span>)</span>)</span>
<span class="syntax-cons">(<a class="macro-reference" href="#macro-defclass">defclass</a> <span class="syntax-interned-symbol">r</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">q</span>)</span> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-keyword-symbol">:initarg</span> <span class="syntax-interned-symbol">b</span>)</span>)</span>
  <span class="syntax-cons">(<span class="syntax-keyword-symbol">:default-initargs</span> <span class="syntax-interned-symbol">a</span> <span class="syntax-number">1</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-number">2</span>)</span>)</span>
</span></code></pre><br/><math xmlns="http://www.w3.org/1998/Math/MathML" display="block">\vbox<table><tbody><tr><td/><td/><td/></tr><tr><td/><td> Defaulted</td><td/></tr><tr><td> Form</td><td> Initialization Argument List</td><td> Contents of Slot X</td></tr><tr><td>
<span class="explicit-mono">(make-instance 'r)</span></td><td><span class="explicit-mono">(a 1 b 2)</span></td><td><span class="explicit-mono">1</span></td></tr><tr><td><span class="explicit-mono">(make-instance 'r 'a 3)</span></td><td><span class="explicit-mono">(a 3 b 2)</span></td><td><span class="explicit-mono">3</span></td></tr><tr><td><span class="explicit-mono">(make-instance 'r 'b 4)</span></td><td><span class="explicit-mono">(b 4 a 1)</span></td><td><span class="explicit-mono">4</span></td></tr><tr><td><span class="explicit-mono">(make-instance 'r 'a 1 'a 2)</span></td><td><span class="explicit-mono">(a 1 a 2 b 2)</span></td><td><span class="explicit-mono">1</span></td></tr></tbody></table></math></section><section id="section-SharedInitialize"><h3 class="section-title">Shared-Initialize</h3><br/>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> <a class="function-reference" href="#function-shared-initialize">shared-initialize</a> is used to fill the 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a>
of an <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> 
using initialization arguments and <span class="keyword">:initform</span>
forms when an <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> is created, when an 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> is re-initialized,
when an <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> 
is updated to conform to a redefined <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a>, and when
an <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> is updated to conform to a different <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a>.
It uses
standard <a class="glossary-reference" href="chapter-26.xhtml#glossary-method combination">method combination</a>. It takes the following arguments: the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> to be initialized, a 
specification of a set of <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">names</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a>
<a class="glossary-reference" href="chapter-26.xhtml#glossary-accessible">accessible</a> in that <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a>, and any number of initialization
arguments.  The arguments after the first two must form an
<a class="glossary-reference" href="chapter-26.xhtml#glossary-initialization argument list">initialization argument list</a>.<br/>The second argument to <a class="function-reference" href="#function-shared-initialize">shared-initialize</a> may be one of the following:<br/><ul><li>It can be a (possibly empty) <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> names,
which specifies the set of those <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> names. <br/>
</li><li>It can be the symbol <a class="symbol-reference" href="chapter-5.xhtml#symbol-t">t</a>, which specifies the set of all of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a>.<br/></li></ul><br/>There is a system-supplied primary <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> for <a class="function-reference" href="#function-shared-initialize">shared-initialize</a>
whose first <a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter specializer">parameter specializer</a> is the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> <a class="type-reference" href="chapter-4.xhtml#type-standard-object">standard-object</a>.
This <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> behaves as follows on each <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>, 
whether shared or local:<br/><ul><li>If an initialization argument in the 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-initialization argument list">initialization argument list</a> specifies a value for that <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>, 
that value is stored
into the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>, even if a value has already been stored in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>
before the <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> is run.  
The affected <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a> are independent of which
<a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a> are indicated by the second argument to <a class="function-reference" href="#function-shared-initialize">shared-initialize</a>.<br/></li><li>Any <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a> 
indicated by the second argument that are still
unbound at this point are initialized according to their 
<span class="keyword">:initform</span> forms.  For any such <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> 
that has an <span class="keyword">:initform</span> form,
that <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> is evaluated in the 
lexical environment of its defining 
<a class="macro-reference" href="#macro-defclass">defclass</a> form and the result is stored into the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>.  
For example,
if a <a class="glossary-reference" href="chapter-26.xhtml#glossary-before method">before method</a> stores a value in the 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>, the <span class="keyword">:initform</span> form will not be used to supply a value 
for the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>.  If
the second argument specifies a <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> that does not correspond to any
<a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-accessible">accessible</a> 
in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a>, the results are unspecified.<br/></li><li>The rules mentioned in <a class="section-reference" href="#section-InitargRules">Rules for Initialization Arguments</a> are obeyed.<br/></li></ul><br/>The generic function <a class="function-reference" href="#function-shared-initialize">shared-initialize</a> is called by the
system-supplied primary <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> 
for <a class="function-reference" href="#function-reinitialize-instance">reinitialize-instance</a>,
<a class="function-reference" href="#function-update-instance-for-different-class">update-instance-for-different-class</a>, 
<a class="function-reference" href="#function-update-instance-for-redefined-class">update-instance-for-redefined-class</a>, and 
<a class="function-reference" href="#function-initialize-instance">initialize-instance</a>.  Thus, <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> can be written for 
<a class="function-reference" href="#function-shared-initialize">shared-initialize</a> to specify actions that should be taken in all of
these contexts.<br/></section><section id="section-Initialize-Instance"><h3 class="section-title">Initialize-Instance</h3>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> <a class="function-reference" href="#function-initialize-instance">initialize-instance</a> is called by 
<a class="function-reference" href="#function-make-instance">make-instance</a> to initialize a newly created <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a>.
It uses <a class="glossary-reference" href="chapter-26.xhtml#glossary-standard method combination">standard method combination</a>.  <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">Methods</a> for 
<a class="function-reference" href="#function-initialize-instance">initialize-instance</a> can be defined in order to perform any
initialization that cannot be achieved 
simply by supplying initial values for <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a>.<br/>                        
During initialization, <a class="function-reference" href="#function-initialize-instance">initialize-instance</a> is invoked
after the following actions have been taken:<br/><ul><li>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-defaulted initialization argument list">defaulted initialization argument list</a> 
has been computed by combining the supplied <a class="glossary-reference" href="chapter-26.xhtml#glossary-initialization argument list">initialization argument list</a> 
with any default initialization arguments for the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a>.<br/></li><li>The validity of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-defaulted initialization argument list">defaulted initialization argument list</a>
has been checked.  If any of the initialization arguments has not
been declared as valid, an error is signaled. <br/></li><li>A new <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> whose <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a> 
are unbound has been created.<br/></li></ul><br/>The generic function <a class="function-reference" href="#function-initialize-instance">initialize-instance</a> is called with the
new <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> and the defaulted initialization arguments.  There is
a system-supplied primary <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> for <a class="function-reference" href="#function-initialize-instance">initialize-instance</a>
whose <a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter specializer">parameter specializer</a> is the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> <a class="type-reference" href="chapter-4.xhtml#type-standard-object">standard-object</a>.  This
<a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> calls the generic function 
<a class="function-reference" href="#function-shared-initialize">shared-initialize</a> to fill in
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a> according to the initialization arguments and the 
<span class="keyword">:initform</span> forms for the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a>; the generic function 
<a class="function-reference" href="#function-shared-initialize">shared-initialize</a> is called with the following arguments: the <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a>,
<a class="symbol-reference" href="chapter-5.xhtml#symbol-t">t</a>, and the defaulted initialization arguments.<br/>Note that <a class="function-reference" href="#function-initialize-instance">initialize-instance</a> provides the 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-defaulted initialization argument list">defaulted initialization argument list</a> in its call to <a class="function-reference" href="#function-shared-initialize">shared-initialize</a>,
so the first step performed by the system-supplied primary <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> for
<a class="function-reference" href="#function-shared-initialize">shared-initialize</a> takes into account both the initialization
arguments provided in the call to <a class="function-reference" href="#function-make-instance">make-instance</a> and the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-defaulted initialization argument list">defaulted initialization argument list</a>.<br/><a class="glossary-reference" href="chapter-26.xhtml#glossary-method">Methods</a> for <a class="function-reference" href="#function-initialize-instance">initialize-instance</a> can be defined to specify
actions to be taken when an <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> is initialized.  
If only <a class="glossary-reference" href="chapter-26.xhtml#glossary-after method">after methods</a> for <a class="function-reference" href="#function-initialize-instance">initialize-instance</a> are defined, they will be
run after the system-supplied primary <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> for initialization and
therefore will not interfere with the default behavior of 
<a class="function-reference" href="#function-initialize-instance">initialize-instance</a>.<br/>The object system provides two <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">functions</a> that are useful in the bodies of 
<a class="function-reference" href="#function-initialize-instance">initialize-instance</a> methods.  The <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="#function-slot-boundp">slot-boundp</a>
returns a <span class="glossary-reference error">glossary:generic boolean</span> value that indicates whether a specified <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> has a
value; this provides a mechanism for writing <a class="glossary-reference" href="chapter-26.xhtml#glossary-after method">after methods</a> for
<a class="function-reference" href="#function-initialize-instance">initialize-instance</a> that initialize <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a> only if they have
not already been initialized.  The <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="#function-slot-makunbound">slot-makunbound</a>
causes the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> to have no value.<br/></section><section id="section-DefinitionsofMake-InstanceandInitialize-Instance"><h3 class="section-title">Definitions of Make-Instance and Initialize-Instance</h3>The generic function <a class="function-reference" href="#function-make-instance">make-instance</a> behaves as if it were defined as
follows, except that certain optimizations are permitted:<br/><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="macro-reference" href="#macro-defmethod">defmethod</a> <a class="function-reference" href="#function-make-instance">make-instance</a> <span class="syntax-cons">(<span class="syntax-cons">(<a class="type-reference" href="chapter-4.xhtml#type-class">class</a> <a class="type-reference" href="chapter-4.xhtml#type-standard-class">standard-class</a>)</span> <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-rest">&amp;REST</a> <span class="syntax-interned-symbol">initargs</span>)</span>
   <span class="syntax-interned-symbol">...</span>
   <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">instance</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-apply">apply</a> <span class="syntax-function">#'<a class="function-reference" href="#function-allocate-instance">allocate-instance</a></span> <a class="type-reference" href="chapter-4.xhtml#type-class">class</a> <span class="syntax-interned-symbol">initargs</span>)</span>)</span>)</span>
     <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-apply">apply</a> <span class="syntax-function">#'<a class="function-reference" href="#function-initialize-instance">initialize-instance</a></span> <span class="syntax-interned-symbol">instance</span> <span class="syntax-interned-symbol">initargs</span>)</span>
     <span class="syntax-interned-symbol">instance</span>)</span>)</span>

 <span class="syntax-cons">(<a class="macro-reference" href="#macro-defmethod">defmethod</a> <a class="function-reference" href="#function-make-instance">make-instance</a> <span class="syntax-cons">(<span class="syntax-cons">(<a class="function-reference" href="#function-class-name">class-name</a> <a class="symbol-reference" href="chapter-2.xhtml#symbol-symbol">symbol</a>)</span> <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-rest">&amp;REST</a> <span class="syntax-interned-symbol">initargs</span>)</span>
   <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-apply">apply</a> <span class="syntax-function">#'<a class="function-reference" href="#function-make-instance">make-instance</a></span> <span class="syntax-cons">(<a class="function-reference" href="#function-find-class">find-class</a> <a class="function-reference" href="#function-class-name">class-name</a>)</span> <span class="syntax-interned-symbol">initargs</span>)</span>)</span>
</span></code></pre><br/>                                      
The elided code in the definition of <a class="function-reference" href="#function-make-instance">make-instance</a> 
augments the <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">initargs</span>
</span></code></pre> with any <span class="glossary-reference error">glossary:defaulted initialization arguments</span> and
checks the
resulting
initialization arguments to determine whether an initialization
argument was supplied that neither filled a <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> nor supplied an argument
to an applicable <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a>. 
                      
The generic function <a class="function-reference" href="#function-initialize-instance">initialize-instance</a> behaves as if it were
defined as follows, except that certain optimizations are permitted:<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="#macro-defmethod">defmethod</a> <a class="function-reference" href="#function-initialize-instance">initialize-instance</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">instance</span> <a class="type-reference" href="chapter-4.xhtml#type-standard-object">standard-object</a>)</span> <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-rest">&amp;REST</a> <span class="syntax-interned-symbol">initargs</span>)</span>
  <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-apply">apply</a> <span class="syntax-function">#'<a class="function-reference" href="#function-shared-initialize">shared-initialize</a></span> <span class="syntax-interned-symbol">instance</span> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a> <span class="syntax-interned-symbol">initargs</span>)</span>)</span>
</span></code></pre><br/>These procedures can be customized.
                                                                  
Customizing at the Programmer Interface level includes using the 
<span class="keyword">:initform</span>, <span class="keyword">:initarg</span>, and <span class="keyword">:default-initargs</span> options to
<a class="macro-reference" href="#macro-defclass">defclass</a>, as well as defining <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a>
for <a class="function-reference" href="#function-make-instance">make-instance</a>, 
<a class="function-reference" href="#function-allocate-instance">allocate-instance</a>,
and <a class="function-reference" href="#function-initialize-instance">initialize-instance</a>.  It is also possible to define
<a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> for <a class="function-reference" href="#function-shared-initialize">shared-initialize</a>, which would be invoked by the
generic functions <a class="function-reference" href="#function-reinitialize-instance">reinitialize-instance</a>, 
<a class="function-reference" href="#function-update-instance-for-redefined-class">update-instance-for-redefined-class</a>, 
<a class="function-reference" href="#function-update-instance-for-different-class">update-instance-for-different-class</a>, and 
<a class="function-reference" href="#function-initialize-instance">initialize-instance</a>.  
The meta-object level supports additional
customization.
                                                                
Implementations are permitted to make certain optimizations to 
<a class="function-reference" href="#function-initialize-instance">initialize-instance</a> and <a class="function-reference" href="#function-shared-initialize">shared-initialize</a>.  
The description of <a class="function-reference" href="#function-shared-initialize">shared-initialize</a> in Chapter7 mentions the
possible optimizations.<br/>
</section>
</section><section id="section-ChangingInstanceClass"><h2 class="section-title">Changing the Class of an Instance</h2>
              
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="#function-change-class">change-class</a> can be used to change the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> 
of an <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> from its current class, <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>C</mrow><mo>\hbox from</mo></msub></math>,
to a different class, <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>C</mrow><mo>\hbox to</mo></msub></math>; it changes the
structure of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> to conform to the definition of the class
<math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>C</mrow><mo>\hbox to</mo></msub></math>.<br/>Note that changing the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> of an <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> may cause
<a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a> to be added or deleted.  Changing the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> of an
<a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> does not change its identity as defined by the
<a class="function-reference" href="chapter-5.xhtml#function-eq">eq</a> function.<br/>When <a class="function-reference" href="#function-change-class">change-class</a> is invoked on an <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a>, a two-step
updating process takes place.  The first step modifies the structure of
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> by adding new <a class="glossary-reference" href="chapter-26.xhtml#glossary-local slot">local slots</a> and discarding 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-local slot">local slots</a> that are not specified in the new version of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a>.
The second step initializes the newly added <a class="glossary-reference" href="chapter-26.xhtml#glossary-local slot">local slots</a> and performs 
any other user-defined actions. These two steps are further described in the 
two following sections.<br/><section id="section-ModifyingtheStructureoftheInstance"><h3 class="section-title">Modifying the Structure of the Instance</h3>In order to make the <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> conform to the class <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>C</mrow><mo>\hbox to</mo></msub></math>, <a class="glossary-reference" href="chapter-26.xhtml#glossary-local slot">local slots</a> specified by the class <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>C</mrow><mo>\hbox to</mo></msub></math> that are not specified by the class <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>C</mrow><mo>\hbox from</mo></msub></math> are added, and <a class="glossary-reference" href="chapter-26.xhtml#glossary-local slot">local slots</a> not specified by
the class <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>C</mrow><mo>\hbox to</mo></msub></math> that are specified by the
class <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>C</mrow><mo>\hbox from</mo></msub></math> are discarded.<br/>The values of <a class="glossary-reference" href="chapter-26.xhtml#glossary-local slot">local slots</a> specified by both the class <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>C</mrow><mo>\hbox to</mo></msub></math> and the class <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>C</mrow><mo>\hbox
from</mo></msub></math> are retained. If such a <a class="glossary-reference" href="chapter-26.xhtml#glossary-local slot">local slot</a> was unbound, it remains
unbound.<br/>The values of <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a> specified as shared in the class <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>C</mrow><mo>\hbox from</mo></msub></math> and as local in the class <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>C</mrow><mo>\hbox to</mo></msub></math> are retained.<br/>This first step of the update does not affect the values of any 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-shared slot">shared slots</a>.<br/></section><section id="section-InitNewLocalSlots"><h3 class="section-title">Initializing Newly Added Local Slots</h3><br/>The second step of the update initializes the newly added <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a> and
performs any other user-defined actions.  This step is implemented by
the generic function <a class="function-reference" href="#function-update-instance-for-different-class">update-instance-for-different-class</a>.  The
generic function <a class="function-reference" href="#function-update-instance-for-different-class">update-instance-for-different-class</a> is invoked
by <a class="function-reference" href="#function-change-class">change-class</a> after the first step of the update has been
completed.<br/>The generic function <a class="function-reference" href="#function-update-instance-for-different-class">update-instance-for-different-class</a> is
invoked on arguments computed by <a class="function-reference" href="#function-change-class">change-class</a>.
The first argument passed is a copy of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> being updated 
and is an <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> of the class <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>C</mrow><mo>\hbox from</mo></msub></math>; 
this copy has <a class="glossary-reference" href="chapter-26.xhtml#glossary-dynamic extent">dynamic extent</a> within the generic function <a class="function-reference" href="#function-change-class">change-class</a>.  
The second argument is the <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> as updated so far by <a class="function-reference" href="#function-change-class">change-class</a>
and is an <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> of the class <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>C</mrow><mo>\hbox to</mo></msub></math>.
The remaining arguments are an <a class="glossary-reference" href="chapter-26.xhtml#glossary-initialization argument list">initialization argument list</a>.<br/>
There is a system-supplied primary <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> for 
<a class="function-reference" href="#function-update-instance-for-different-class">update-instance-for-different-class</a> that has two parameter
specializers, each of which is the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> <a class="type-reference" href="chapter-4.xhtml#type-standard-object">standard-object</a>.  First
this <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> checks the validity of initialization arguments and
signals an error if an initialization argument is supplied that is not
declared as valid.  (For more information, see <span class="section-reference error">section:DeclaringInitargValidity.</span>)
Then it calls the
generic function <a class="function-reference" href="#function-shared-initialize">shared-initialize</a> with the following arguments:
the
new
<a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a>, a list of <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">names</a> of the newly added 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a>, and the
initialization arguments it received.<br/></section><section id="section-CustomizingtheChangeofClassofanInstance"><h3 class="section-title">Customizing the Change of Class of an Instance</h3><a class="glossary-reference" href="chapter-26.xhtml#glossary-method">Methods</a> for <a class="function-reference" href="#function-update-instance-for-different-class">update-instance-for-different-class</a> may be defined
to specify actions to be taken when an <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> is updated.  If only
<a class="glossary-reference" href="chapter-26.xhtml#glossary-after method">after methods</a> for <a class="function-reference" href="#function-update-instance-for-different-class">update-instance-for-different-class</a> are
defined, they will be run after the system-supplied primary <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> for
initialization and will not interfere with the default behavior of
<a class="function-reference" href="#function-update-instance-for-different-class">update-instance-for-different-class</a>.

<a class="glossary-reference" href="chapter-26.xhtml#glossary-method">Methods</a> 
for <a class="function-reference" href="#function-shared-initialize">shared-initialize</a> may be defined to customize <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a>
redefinition.  For more information, see <span class="section-reference error">section:SharedInitialize.</span><br/></section>
</section><section id="section-InstanceReInit"><h2 class="section-title">Reinitializing an Instance</h2>
                      
The generic function <a class="function-reference" href="#function-reinitialize-instance">reinitialize-instance</a> may be used to change
the values of <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a> according to initialization arguments.<br/>The process of reinitialization changes the values of some <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a> and
performs any user-defined actions.  It does not modify the structure
of an <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> to add or delete <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a>, 
and it does not use any <span class="keyword">:initform</span> forms to initialize <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a>.<br/>The generic function <a class="function-reference" href="#function-reinitialize-instance">reinitialize-instance</a> may be called
directly.  It takes one required argument, the <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a>.  It also
takes any number of initialization arguments to be used by <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> for
<a class="function-reference" href="#function-reinitialize-instance">reinitialize-instance</a> or for <a class="function-reference" href="#function-shared-initialize">shared-initialize</a>. The
arguments after the required <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> must form an 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-initialization argument list">initialization argument list</a>.<br/>There is a system-supplied primary <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> for 
<a class="function-reference" href="#function-reinitialize-instance">reinitialize-instance</a> whose <a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter specializer">parameter specializer</a> is 
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> <a class="type-reference" href="chapter-4.xhtml#type-standard-object">standard-object</a>.  First this <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> checks the validity of
initialization arguments and signals an error if an initialization
argument is supplied that is not declared as valid. 
(For more information, see <span class="section-reference error">section:DeclaringInitargValidity.</span>)
Then it calls the generic function 
<a class="function-reference" href="#function-shared-initialize">shared-initialize</a> with the following arguments: the <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a>,
<a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>, and the initialization arguments it received.<br/><section id="section-CustomizingReinitialization"><h3 class="section-title">Customizing Reinitialization</h3><a class="glossary-reference" href="chapter-26.xhtml#glossary-method">Methods</a> for <a class="function-reference" href="#function-reinitialize-instance">reinitialize-instance</a> may be defined to specify
actions to be taken when an <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> is updated.  If only
<a class="glossary-reference" href="chapter-26.xhtml#glossary-after method">after methods</a> for <a class="function-reference" href="#function-reinitialize-instance">reinitialize-instance</a> are defined, 
they will be run after the system-supplied primary <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> for 
initialization and therefore will not interfere with the default behavior of 
<a class="function-reference" href="#function-reinitialize-instance">reinitialize-instance</a>.<br/><a class="glossary-reference" href="chapter-26.xhtml#glossary-method">Methods</a> for <a class="function-reference" href="#function-shared-initialize">shared-initialize</a> may be defined to customize 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> redefinition.  For more information, see <span class="section-reference error">section:SharedInitialize.</span><br/></section>
</section><section id="section-MetaObjects"><h2 class="section-title">Meta-Objects</h2>
<br/>
The implementation of the object system manipulates <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">classes</a>, <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a>,
and <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic functions</a>.  The object system contains a set of 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic functions</a> defined by <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> on <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">classes</a>; 
the behavior of those <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic functions</a> defines the behavior of
the object system.  The <span class="glossary-reference error">glossary:instances</span> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">classes</a> on which those
<a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> are defined are called meta-objects.  
<br/><section id="section-StandardMeta-objects"><h3 class="section-title">Standard Meta-objects</h3>The object system supplies a set of meta-objects, called standard meta-objects.
These include the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> <a class="type-reference" href="chapter-4.xhtml#type-standard-object">standard-object</a> and
<span class="glossary-reference error">glossary:instances</span> of the classes <a class="type-reference" href="chapter-4.xhtml#type-standard-method">standard-method</a>, 
<a class="type-reference" href="chapter-4.xhtml#type-standard-generic-function">standard-generic-function</a>, and <a class="type-reference" href="chapter-4.xhtml#type-method-combination">method-combination</a>.<br/><ul><li>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> <a class="type-reference" href="chapter-4.xhtml#type-standard-method">standard-method</a> is the default <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> of 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> defined by the 
 <a class="macro-reference" href="#macro-defmethod">defmethod</a> and
 <a class="macro-reference" href="#macro-defgeneric">defgeneric</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a>.

</li><li>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> <a class="type-reference" href="chapter-4.xhtml#type-standard-generic-function">standard-generic-function</a> is the default <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> of 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic functions</a> defined by the forms
  <a class="macro-reference" href="#macro-defmethod">defmethod</a>,
  <a class="macro-reference" href="#macro-defgeneric">defgeneric</a>,
 and
  <a class="macro-reference" href="#macro-defclass">defclass</a>.<br/></li><li>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> named <a class="type-reference" href="chapter-4.xhtml#type-standard-object">standard-object</a> 
is an <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> <a class="type-reference" href="chapter-4.xhtml#type-standard-class">standard-class</a> 
and is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-superclass">superclass</a> of every <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> that is an
<a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> of <a class="type-reference" href="chapter-4.xhtml#type-standard-class">standard-class</a> except itself and 
<a class="type-reference" href="chapter-4.xhtml#type-structure-class">structure-class</a>.<br/></li><li>Every <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> combination object is 
an <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-subclass">subclass</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> <a class="type-reference" href="chapter-4.xhtml#type-method-combination">method-combination</a>.<br/></li></ul><br/></section>
</section><section id="section-Slots"><h2 class="section-title">Slots</h2>

<section id="section-IntroductiontoSlots"><h3 class="section-title">Introduction to Slots</h3>An <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-metaclass">metaclass</a> <a class="type-reference" href="chapter-4.xhtml#type-standard-class">standard-class</a> has zero or more named
<a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a>.  The <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a> of an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> are determined 
by the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.  Each <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> can hold
one value.
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> that is syntactically
valid for use as a variable name.<br/>When a <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> does not have a value, the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> is said to be 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-unbound">unbound</a>.  When an unbound <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> is read,

the <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> <a class="function-reference" href="#function-slot-unbound">slot-unbound</a> is invoked. The 
system-supplied primary <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> 
for <a class="function-reference" href="#function-slot-unbound">slot-unbound</a> 
on <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> <a class="type-reference" href="chapter-4.xhtml#type-t">t</a> signals an error.
If <a class="function-reference" href="#function-slot-unbound">slot-unbound</a> returns, its <a class="glossary-reference" href="chapter-26.xhtml#glossary-primary value">primary value</a> 
is used that time as the <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>.

The default initial value form for a <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> is defined by
the <span class="keyword">:initform</span> slot option.  When the <span class="keyword">:initform</span> form is used to
supply a value, it is evaluated in the lexical environment in which
the <a class="macro-reference" href="#macro-defclass">defclass</a> form was evaluated. The <span class="keyword">:initform</span> along with
the lexical environment in which the <a class="macro-reference" href="#macro-defclass">defclass</a> form was evaluated
is called a <a class="glossary-reference" href="chapter-26.xhtml#glossary-captured initialization form">captured initialization form</a>. 
For more details, see <span class="section-reference error">section:ObjectCreationAndInit.</span><br/>A <a class="glossary-reference" href="chapter-26.xhtml#glossary-local slot">local slot</a> is defined to be a <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> that is
<a class="glossary-reference" href="chapter-26.xhtml#glossary-accessible">accessible</a>
to exactly one <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a>, 
namely the one in which the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> is allocated.  
A <a class="glossary-reference" href="chapter-26.xhtml#glossary-shared slot">shared slot</a> is defined to be a <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> that is visible to more than one
<a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> of a given <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> and its <a class="glossary-reference" href="chapter-26.xhtml#glossary-subclass">subclasses</a>.<br/>A <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> is said to define a <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> with a given <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> when
the <a class="macro-reference" href="#macro-defclass">defclass</a> form for that <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> contains a <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot specifier">slot specifier</a> with
that <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a>.  Defining a <a class="glossary-reference" href="chapter-26.xhtml#glossary-local slot">local slot</a> does not immediately create 
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>; it causes a <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> to be created each time 
an <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> is created.
Defining a <a class="glossary-reference" href="chapter-26.xhtml#glossary-shared slot">shared slot</a> immediately creates a <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>.<br/>The <span class="keyword">:allocation</span> slot option to <a class="macro-reference" href="#macro-defclass">defclass</a> controls the kind
of <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> that is defined.  If the value of the <span class="keyword">:allocation</span> slot
option is <span class="keyword">:instance</span>, a <a class="glossary-reference" href="chapter-26.xhtml#glossary-local slot">local slot</a> is created.  If the value of
<span class="keyword">:allocation</span> is <span class="keyword">:class</span>, a <a class="glossary-reference" href="chapter-26.xhtml#glossary-shared slot">shared slot</a> is created.<br/>A <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> is said to be <a class="glossary-reference" href="chapter-26.xhtml#glossary-accessible">accessible</a> in an <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> 
of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> if
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> is defined by the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> 
of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> or is inherited from
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-superclass">superclass</a> of that <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a>.  
At most one <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> of a given <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> can be
<a class="glossary-reference" href="chapter-26.xhtml#glossary-accessible">accessible</a> in an <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a>.  
A <a class="glossary-reference" href="chapter-26.xhtml#glossary-shared slot">shared slot</a> defined by a <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> is
<a class="glossary-reference" href="chapter-26.xhtml#glossary-accessible">accessible</a> in all <span class="glossary-reference error">glossary:instances</span> 
of that <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a>.  
A detailed explanation of the inheritance of <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a> is given in 
<a class="section-reference" href="#section-SlotInheritance">Inheritance of Slots and Slot Options</a>.<br/></section><section id="section-AccessingSlots"><h3 class="section-title">Accessing Slots</h3><a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">Slots</a> can be <a class="glossary-reference" href="chapter-26.xhtml#glossary-access">accessed</a> in two ways: by use of the primitive function
<a class="function-reference" href="#function-slot-value">slot-value</a> and by use of <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic functions</a> generated by
the <a class="macro-reference" href="#macro-defclass">defclass</a> form.<br/>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="#function-slot-value">slot-value</a> can be used with any of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>
names specified in the <a class="macro-reference" href="#macro-defclass">defclass</a> form to <a class="glossary-reference" href="chapter-26.xhtml#glossary-access">access</a> a specific
<a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-accessible">accessible</a> in an <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> of the given <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a>.<br/>The macro <a class="macro-reference" href="#macro-defclass">defclass</a> provides syntax for generating <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> to
read and write <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a>.  If a reader <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> is requested, 
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> is automatically generated for reading the value of the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>, but no <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> for storing a value into it is generated.
If a writer <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> is requested, a <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> is automatically 
generated for storing a value into the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>, but no <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> 
for reading its value is generated.  If an accessor <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> is 
requested, a <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> for reading the value of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> and a
<a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> for storing a value into the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> are automatically
generated.  Reader and writer <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> are implemented using
<a class="function-reference" href="#function-slot-value">slot-value</a>.<br/>When a reader or writer <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> is specified for a <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>, the
name of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> to which the generated <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a>
belongs is directly specified.  If the <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> specified for the writer
<a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> is the symbol <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">name</span>
</span></code></pre>, the <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> of the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> for writing the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> is the symbol
<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">name</span>
</span></code></pre>, and the <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> takes two arguments: the new
value and the <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a>, in that order.  If the <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> specified
for the accessor <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> is the symbol <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">name</span>
</span></code></pre>, the <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> of
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> for reading the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> is the symbol 
<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">name</span>
</span></code></pre>, and the <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> for writing 
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> is the list <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-interned-symbol">name</span>)</span>
</span></code></pre>.<br/>A <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> created or modified by supplying <span class="keyword">:reader</span>,
<span class="keyword">:writer</span>, or <span class="keyword">:accessor</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> options can be treated exactly
as an ordinary <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a>.<br/>Note that <a class="function-reference" href="#function-slot-value">slot-value</a> can be used to read or write the value of a
<a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> whether or not reader or writer <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> exist for that
<a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>.  When <a class="function-reference" href="#function-slot-value">slot-value</a> is used, no reader or writer
<a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> are invoked.<br/>The macro <a class="macro-reference" href="#macro-with-slots">with-slots</a> can be used to establish a 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical environment">lexical environment</a> in which specified <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a> are lexically
available as if they were variables.  The macro <a class="macro-reference" href="#macro-with-slots">with-slots</a> 
invokes the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="#function-slot-value">slot-value</a> to <a class="glossary-reference" href="chapter-26.xhtml#glossary-access">access</a> the specified <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a>.<br/>The macro <a class="macro-reference" href="#macro-with-accessors">with-accessors</a> can be used to establish a lexical
environment in which specified <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a> are lexically available through
their accessors as if they were variables.  The macro <a class="macro-reference" href="#macro-with-accessors">with-accessors</a>
invokes the appropriate accessors to <a class="glossary-reference" href="chapter-26.xhtml#glossary-access">access</a> the specified <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a>. 

</section><section id="section-SlotInheritance"><h3 class="section-title">Inheritance of Slots and Slot Options</h3><br/>The set of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">names</a> of all <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-accessible">accessible</a> 
in an <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> <math xmlns="http://www.w3.org/1998/Math/MathML">C</math> is the union of 
the sets of <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">names</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a> defined by <math xmlns="http://www.w3.org/1998/Math/MathML">C</math> and its
<a class="glossary-reference" href="chapter-26.xhtml#glossary-superclass">superclasses</a>. The structure of an <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> is
the set of <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">names</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-local slot">local slots</a> in that <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a>.<br/>In the simplest case, only one <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> among <math xmlns="http://www.w3.org/1998/Math/MathML">C</math> and its <a class="glossary-reference" href="chapter-26.xhtml#glossary-superclass">superclasses</a>
defines a <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> with a given <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> name.  
If a <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> is defined by a <a class="glossary-reference" href="chapter-26.xhtml#glossary-superclass">superclass</a> of <math xmlns="http://www.w3.org/1998/Math/MathML">C</math>, 
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> is said to be inherited.  The characteristics 
of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> are determined by the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot specifier">slot specifier</a>
of the defining <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a>.
Consider the defining <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> for
a slot <math xmlns="http://www.w3.org/1998/Math/MathML">S</math>.  If the value of the <span class="keyword">:allocation</span> 
slot
option is <span class="keyword">:instance</span>, then <math xmlns="http://www.w3.org/1998/Math/MathML">S</math> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-local slot">local slot</a> and each 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a>
of <math xmlns="http://www.w3.org/1998/Math/MathML">C</math> has its own <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> named <math xmlns="http://www.w3.org/1998/Math/MathML">S</math> that stores its own value.  If the
value of the <span class="keyword">:allocation</span> slot 
option is <span class="keyword">:class</span>, then <math xmlns="http://www.w3.org/1998/Math/MathML">S</math>
is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-shared slot">shared slot</a>, the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> 
that defined <math xmlns="http://www.w3.org/1998/Math/MathML">S</math> stores the value, and all
<span class="glossary-reference error">glossary:instances</span> of <math xmlns="http://www.w3.org/1998/Math/MathML">C</math> can <a class="glossary-reference" href="chapter-26.xhtml#glossary-access">access</a> that single <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>.  
If the <span class="keyword">:allocation</span> slot option is omitted, <span class="keyword">:instance</span> is used.<br/>In general, more than one <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> among <math xmlns="http://www.w3.org/1998/Math/MathML">C</math> and its 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-superclass">superclasses</a> can
define a <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> with a given <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a>.  
In such cases, only one <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> with
the given name is <a class="glossary-reference" href="chapter-26.xhtml#glossary-accessible">accessible</a> in an <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> 
of <math xmlns="http://www.w3.org/1998/Math/MathML">C</math>, and
the characteristics of that <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> are 
a combination of the several <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>
specifiers, computed as follows:<br/><ul><li>All the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot specifier">slot specifiers</a> for a given <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> name
are ordered from most specific to least specific, according to the order in <math xmlns="http://www.w3.org/1998/Math/MathML">C</math>'s
<a class="glossary-reference" href="chapter-26.xhtml#glossary-class precedence list">class precedence list</a> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">classes</a> that define them. All references
to the specificity of <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot specifier">slot specifiers</a> immediately below refers to this
ordering.<br/></li><li>The allocation of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> is controlled by the most 
specific <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot specifier">slot specifier</a>.  If the most specific <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot specifier">slot specifier</a> 
does not contain an <span class="keyword">:allocation</span> slot option, <span class="keyword">:instance</span> is used.
Less specific <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot specifier">slot specifiers</a> do not affect the allocation.<br/></li><li>The default initial value form for a <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> 
is the value of the <span class="keyword">:initform</span> slot option in the most specific
<a class="glossary-reference" href="chapter-26.xhtml#glossary-slot specifier">slot specifier</a> that contains one.  If no <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot specifier">slot specifier</a>
contains an <span class="keyword">:initform</span> slot option, the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> 
has no default initial value form.<br/></li><li>The contents of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> will always be of type 
<pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-and">and</a> <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>T</mrow><mo>1</mo></msub></math> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â€¦</mi></math> <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>T</mrow><mo>n</mo></msub></math>)</span>
</span></code></pre> where <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>T</mrow><mo>1 </mo></msub><mi>â€¦</mi><msub><mrow>T</mrow><mo>n</mo></msub></math> are
the values of the <span class="keyword">:type</span> slot options contained in all of the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-slot specifier">slot specifiers</a>.  If no <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot specifier">slot specifier</a> contains the
<span class="keyword">:type</span> slot option, the contents of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> will always be 
of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-4.xhtml#type-t">t</a>. The consequences of attempting to store in a <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>
a value that does not satisfy the <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> are undefined.<br/></li><li>The set of initialization arguments that initialize a 
given <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> is the union of the initialization arguments declared in
the <span class="keyword">:initarg</span> slot options in all the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot specifier">slot specifiers</a>.<br/></li><li>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-documentation string">documentation string</a> for a <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> is the value of
the <span class="keyword">:documentation</span> slot option in the most specific <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>
specifier that contains one.  If no <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot specifier">slot specifier</a> contains a
<span class="keyword">:documentation</span> slot option, the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> has no <a class="glossary-reference" href="chapter-26.xhtml#glossary-documentation string">documentation string</a>.<br/></li></ul><br/>A consequence of the allocation rule is that a <a class="glossary-reference" href="chapter-26.xhtml#glossary-shared slot">shared slot</a> can be
<a class="glossary-reference" href="chapter-26.xhtml#glossary-shadow">shadowed</a>.  For example, if a class <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>C</mrow><mo>1</mo></msub></math> defines 
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> named <math xmlns="http://www.w3.org/1998/Math/MathML">S</math>
whose value for the <span class="keyword">:allocation</span> slot option is <span class="keyword">:class</span>,
that <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-accessible">accessible</a> 
in <span class="glossary-reference error">glossary:instances</span> of <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>C</mrow><mo>1</mo></msub></math> and all of its
<a class="glossary-reference" href="chapter-26.xhtml#glossary-subclass">subclasses</a>.  However, if <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>C</mrow><mo>2</mo></msub></math> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-subclass">subclass</a> 
of <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>C</mrow><mo>1</mo></msub></math> and also
defines a <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> named <math xmlns="http://www.w3.org/1998/Math/MathML">S</math>, <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>C</mrow><mo>1</mo></msub></math>'s 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> is not shared
by <span class="glossary-reference error">glossary:instances</span> of <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>C</mrow><mo>2</mo></msub></math> and its <a class="glossary-reference" href="chapter-26.xhtml#glossary-subclass">subclasses</a>. When a class
<math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>C</mrow><mo>1</mo></msub></math> defines a <a class="glossary-reference" href="chapter-26.xhtml#glossary-shared slot">shared slot</a>, any subclass <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>C</mrow><mo>2</mo></msub></math> of <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>C</mrow><mo>1</mo></msub></math> will share this single <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> 
unless the <a class="macro-reference" href="#macro-defclass">defclass</a> form for
<math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>C</mrow><mo>2</mo></msub></math> specifies a <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> of the same 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> or there is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-superclass">superclass</a>
of <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>C</mrow><mo>2</mo></msub></math> that precedes <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>C</mrow><mo>1</mo></msub></math> in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class precedence list">class precedence list</a> of
<math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>C</mrow><mo>2</mo></msub></math> that defines a <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> of the same name.<br/>A consequence of the type rule is that the value of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>
satisfies the type constraint of each <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot specifier">slot specifier</a> that
contributes to that <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>.  Because the result of attempting to
store in a <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> a value that does not satisfy the type
constraint for the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> is undefined, the value in a <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>
might fail to satisfy its type constraint.<br/>The <span class="keyword">:reader</span>, <span class="keyword">:writer</span>, and <span class="keyword">:accessor</span> slot options
create <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> rather than define the characteristics of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>.
Reader and writer <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> are inherited in the sense described in
<a class="section-reference" href="#section-MethodInheritance">Inheritance of Methods</a>.<br/><a class="glossary-reference" href="chapter-26.xhtml#glossary-method">Methods</a> that <a class="glossary-reference" href="chapter-26.xhtml#glossary-access">access</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a> use only the name of the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> and the <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>'s value.  Suppose
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-superclass">superclass</a> provides a <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> that expects to <a class="glossary-reference" href="chapter-26.xhtml#glossary-access">access</a> a
<a class="glossary-reference" href="chapter-26.xhtml#glossary-shared slot">shared slot</a> of a given <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a>, and a <a class="glossary-reference" href="chapter-26.xhtml#glossary-subclass">subclass</a> defines
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-local slot">local slot</a> with the same <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a>.  If the <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> provided 
by the <a class="glossary-reference" href="chapter-26.xhtml#glossary-superclass">superclass</a> is used on an <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-subclass">subclass</a>, 
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-access">accesses</a> the <a class="glossary-reference" href="chapter-26.xhtml#glossary-local slot">local slot</a>.<br/></section>
</section><section id="section-GFsAndMethods"><h2 class="section-title">Generic Functions and Methods</h2>


<section id="section-IntroToGFs"><h3 class="section-title">Introduction to Generic Functions</h3><br/>A <span class="newterm">generic function</span> is a function whose behavior depends on
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">classes</a> or identities of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">arguments</a> supplied to it.
A <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> 
is associated with 
     a set of <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a>,
     a <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a>,
     a <a class="glossary-reference" href="chapter-26.xhtml#glossary-method combination">method combination</a><sub>2</sub>, 
 and other information.<br/>Like an <a class="glossary-reference" href="chapter-26.xhtml#glossary-ordinary function">ordinary function</a>, a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> takes <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">arguments</a>,
performs a series of operations, and perhaps returns useful <span class="glossary-reference error">glossary:values</span>.
An <a class="glossary-reference" href="chapter-26.xhtml#glossary-ordinary function">ordinary function</a> has a single body of <a class="glossary-reference" href="chapter-26.xhtml#glossary-code">code</a> that is always <span class="glossary-reference error">glossary:executed</span>
when the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> is called.  A <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> has a set of bodies
of <a class="glossary-reference" href="chapter-26.xhtml#glossary-code">code</a> of which a subset is selected for <span class="glossary-reference error">glossary:execution</span>. The selected
bodies of <a class="glossary-reference" href="chapter-26.xhtml#glossary-code">code</a> and the manner of their combination are determined by
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">classes</a> or identities of one or more of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">arguments</a> to the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> and by its <a class="glossary-reference" href="chapter-26.xhtml#glossary-method combination">method combination</a>.<br/><a class="glossary-reference" href="chapter-26.xhtml#glossary-ordinary function">Ordinary functions</a> and <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic functions</a> are called with identical syntax.<br/><a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">Generic functions</a> are true <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">functions</a> that can be passed as <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">arguments</a>
and used as the first <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">argument</a> to <a class="function-reference" href="chapter-5.xhtml#function-funcall">funcall</a> and <a class="function-reference" href="chapter-5.xhtml#function-apply">apply</a>.<br/>A <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function name">function name</a> to a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a>
can be <a class="glossary-reference" href="chapter-26.xhtml#glossary-establish">established</a> in one of several ways.  It can be
<a class="glossary-reference" href="chapter-26.xhtml#glossary-establish">established</a> in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-global environment">global environment</a> by 
 <a class="function-reference" href="#function-ensure-generic-function">ensure-generic-function</a>,
 <a class="macro-reference" href="#macro-defmethod">defmethod</a> (implicitly, due to <a class="function-reference" href="#function-ensure-generic-function">ensure-generic-function</a>)
or
 <a class="macro-reference" href="#macro-defgeneric">defgeneric</a> (also implicitly, due to <a class="function-reference" href="#function-ensure-generic-function">ensure-generic-function</a>).
No <a class="glossary-reference" href="chapter-26.xhtml#glossary-standardized">standardized</a> mechanism is provided for <a class="glossary-reference" href="chapter-26.xhtml#glossary-establish">establishing</a> a
<a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function name">function name</a> to a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a>
in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical environment">lexical environment</a>.



When a <a class="macro-reference" href="#macro-defgeneric">defgeneric</a> form is evaluated, one of three actions
is taken (due to <a class="function-reference" href="#function-ensure-generic-function">ensure-generic-function</a>):<br/><ul><li>If a generic function of the given name already exists,
the existing generic function object is modified.  Methods specified
by the current <a class="macro-reference" href="#macro-defgeneric">defgeneric</a> form are added, and any methods in the
existing generic function that were defined by a previous <a class="macro-reference" href="#macro-defgeneric">defgeneric</a>
form are removed.  Methods added by the current <a class="macro-reference" href="#macro-defgeneric">defgeneric</a> 
form might replace methods defined by <a class="macro-reference" href="#macro-defmethod">defmethod</a>, 
<a class="macro-reference" href="#macro-defclass">defclass</a>, <a class="macro-reference" href="chapter-9.xhtml#macro-define-condition">define-condition</a>, or <a class="macro-reference" href="chapter-8.xhtml#macro-defstruct">defstruct</a>.  
No other methods in the generic function are affected
or replaced.<br/></li><li>If the given name names 
    an <a class="glossary-reference" href="chapter-26.xhtml#glossary-ordinary function">ordinary function</a>, 
    a  <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a>,
 or a <a class="glossary-reference" href="chapter-26.xhtml#glossary-special operator">special operator</a>, 
an error is signaled.<br/></li><li>Otherwise a generic function is created with the
methods specified by the method definitions in the <a class="macro-reference" href="#macro-defgeneric">defgeneric</a>
form.<br/></li></ul><br/>Some <a class="glossary-reference" href="chapter-26.xhtml#glossary-operator">operators</a> permit specification of the options of a
<a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a>, such as 
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-method combination">method combination</a> it uses 
or its <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument precedence order">argument precedence order</a>.
These <a class="glossary-reference" href="chapter-26.xhtml#glossary-operator">operators</a> will be referred to as
``operators that specify generic function options.''
The only <a class="glossary-reference" href="chapter-26.xhtml#glossary-standardized">standardized</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-operator">operator</a> in this category is <a class="macro-reference" href="#macro-defgeneric">defgeneric</a>.

Some <a class="glossary-reference" href="chapter-26.xhtml#glossary-operator">operators</a> define <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> for a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a>.
These <a class="glossary-reference" href="chapter-26.xhtml#glossary-operator">operators</a> will be referred to as
<span class="newterm">method-defining operators</span>;
their associated <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a> are called <a class="glossary-reference" href="chapter-26.xhtml#glossary-method-defining form">method-defining forms</a>.
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-standardized">standardized</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-method-defining operator">method-defining operators</a> are listed in Figure <span class="explicit-mono">()</span>&ndash;.

<span class="float" id="figure-StdMethDefOps"><table><tbody><tr><td><a class="macro-reference" href="#macro-defgeneric">defgeneric</a></td><td><a class="macro-reference" href="#macro-defmethod">defmethod</a></td><td><a class="macro-reference" href="#macro-defclass">defclass</a></td></tr><tr><td><a class="macro-reference" href="chapter-9.xhtml#macro-define-condition">define-condition</a></td><td><a class="macro-reference" href="chapter-8.xhtml#macro-defstruct">defstruct</a></td><td/></tr></tbody></table><div class="caption">Standardized Method-Defining Operators</div></span>Note that of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-standardized">standardized</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-method-defining operator">method-defining operators</a>
only <a class="macro-reference" href="#macro-defgeneric">defgeneric</a>
can specify <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> options.
<a class="macro-reference" href="#macro-defgeneric">defgeneric</a> and any <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-defined">implementation-defined</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-operator">operators</a>
that can specify <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> options
are also referred to as ``operators that specify generic function options.''<br/></section><section id="section-IntroToMethods"><h3 class="section-title">Introduction to Methods</h3><br/><a class="glossary-reference" href="chapter-26.xhtml#glossary-method">Methods</a> define the class-specific or identity-specific behavior
and operations of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a>. <br/>A <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> 
is associated with 
     <a class="glossary-reference" href="chapter-26.xhtml#glossary-code">code</a> that implements the method's behavior,
     a sequence of <a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter specializer">parameter specializers</a> 
       that specify when the given <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> is applicable,
     a <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a>,
 and a sequence of <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifiers</a> that are used by the method combination
       facility to distinguish among <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a>.<br/>A method object is not a function and cannot be invoked as a function. 
Various mechanisms in the object system take a method object and invoke its method
function, as is the case when a generic function is invoked.  When this
occurs it is said that the method is invoked or called.<br/>A method-defining form contains the <a class="glossary-reference" href="chapter-26.xhtml#glossary-code">code</a> that is to be run when the
arguments to the generic function cause the method that it defines to
be invoked.  When a method-defining form is evaluated, a method object
is created and one of four actions is taken:<br/><ul><li>If a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> of the given name already exists
and if a <span class="glossary-reference error">glossary:method object</span> already exists that agrees with the new one on
<a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter specializer">parameter specializers</a> and <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifiers</a>, the new <span class="glossary-reference error">glossary:method object</span> replaces
the old one.  For a definition of one method agreeing with another on
<a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter specializer">parameter specializers</a> and <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifiers</a>, 
see <span class="section-reference error">section:SpecializerQualifierAgreement.</span><br/></li><li>If a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> of the given name already exists
and if there is no <span class="glossary-reference error">glossary:method object</span> that agrees with the new one on
<a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter specializer">parameter specializers</a> and <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifiers</a>, the existing <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a>
<a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> is modified to contain the new <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.<br/></li><li>If the given <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> names an <a class="glossary-reference" href="chapter-26.xhtml#glossary-ordinary function">ordinary function</a>, a <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a>,
or a <a class="glossary-reference" href="chapter-26.xhtml#glossary-special operator">special operator</a>, an error is signaled.<br/></li><li>Otherwise a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> is created with the <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a>
specified by the <a class="glossary-reference" href="chapter-26.xhtml#glossary-method-defining form">method-defining form</a>.<br/></li></ul><br/>If the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a> of a new <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> is not
<a class="glossary-reference" href="chapter-26.xhtml#glossary-congruent">congruent</a> with the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a>,
an error is signaled.  If a <a class="glossary-reference" href="chapter-26.xhtml#glossary-method-defining operator">method-defining operator</a> that cannot specify
<a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> options creates a new <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a>, 
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a> for that <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> is derived from the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-method-defining form">method-defining form</a> in such a way
as to be <a class="glossary-reference" href="chapter-26.xhtml#glossary-congruent">congruent</a> with it.  For a discussion of <span class="newterm">congruence</span>,
see <span class="section-reference error">section:GFMethodLambdaListCongruency.</span><br/>Each method has a <a class="glossary-reference" href="chapter-26.xhtml#glossary-specialized lambda list">specialized lambda list</a>, which determines
when that method can be applied.  A <a class="glossary-reference" href="chapter-26.xhtml#glossary-specialized lambda list">specialized lambda list</a> is like
an <a class="glossary-reference" href="chapter-26.xhtml#glossary-ordinary lambda list">ordinary lambda list</a> except that a specialized parameter
may occur instead of the name of a required parameter.  A specialized parameter
is a list <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="explicit-italic"> variable-name</span> <span class="explicit-italic"> parameter-specializer-name</span>)</span>
</span></code></pre>,
where <span class="explicit-italic"> parameter-specializer-name</span> is one of the following:<br/><dl><dt>a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a></dt><dd>denotes a <a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter specializer">parameter specializer</a> which is the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> 
named by that <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>.<br/></dd><dt>a <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a></dt><dd>denotes a <a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter specializer">parameter specializer</a> which is the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> itself.
</dd><dt><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-eql">eql</a> <span class="explicit-italic"> form</span>)</span>
</span></code></pre></dt><dd>denotes a <a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter specializer">parameter specializer</a> which satisfies the <a class="glossary-reference" href="chapter-26.xhtml#glossary-type specifier">type specifier</a>
<pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-eql">eql</a> <span class="explicit-italic"> object</span>)</span>
</span></code></pre>, where <span class="explicit-italic"> object</span> is the 
result of evaluating <span class="explicit-italic"> form</span>.  The form <span class="explicit-italic"> form</span> is evaluated in 
the lexical environment in which the method-defining form is evaluated.
Note that <span class="explicit-italic"> form</span> is evaluated only once, at the time the method is
defined, not each time the generic function is called.
</dd></dl><br/><a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter specializer name">Parameter specializer names</a> are used in macros intended as the
user-level interface (<a class="macro-reference" href="#macro-defmethod">defmethod</a>), while <a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter specializer">parameter specializers</a>
are used in the functional interface.<br/>Only required parameters may be specialized, and there must be a
<a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter specializer">parameter specializer</a> for each required parameter.  For notational
simplicity, if some required parameter in a <a class="glossary-reference" href="chapter-26.xhtml#glossary-specialized lambda list">specialized lambda list</a> in
a method-defining form is simply a variable name, its 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter specializer">parameter specializer</a> defaults to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> <a class="type-reference" href="chapter-4.xhtml#type-t">t</a>.<br/>Given a generic function and a set of arguments, an applicable
method is a method for that generic function whose parameter
specializers are satisfied by their corresponding arguments.  The
following definition specifies what it means for a method to be
applicable and for an argument to satisfy a <a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter specializer">parameter specializer</a>.<br/>Let <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>âŸ¨</mi><msub><mrow>A</mrow><mo>1, </mo></msub><mi>â€¦</mi><msub><mrow>, A</mrow><mo>n</mo></msub><mi>âŸ©</mi></math> be the required
arguments to a generic function in order. Let <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>âŸ¨</mi><msub><mrow>P</mrow><mo>1,
</mo></msub><mi>â€¦</mi><msub><mrow>, P</mrow><mo>n</mo></msub><mi>âŸ©</mi></math> be the <a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter specializer">parameter specializers</a> corresponding to
the required parameters of the method <math xmlns="http://www.w3.org/1998/Math/MathML">M</math> in order.  The method <math xmlns="http://www.w3.org/1998/Math/MathML">M</math> is
applicable when each <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>A</mrow><mo>i</mo></msub></math> is of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> specified by 
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-type specifier">type specifier</a> <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>P</mrow><mo>i</mo></msub></math>.
Because every valid <a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter specializer">parameter specializer</a> is 
also a valid <a class="glossary-reference" href="chapter-26.xhtml#glossary-type specifier">type specifier</a>, the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="chapter-4.xhtml#function-typep">typep</a> can be used during method
selection to determine whether an argument satisfies a <a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter specializer">parameter specializer</a>.  <br/>A method all of whose <a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter specializer">parameter specializers</a> are 
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> <a class="type-reference" href="chapter-4.xhtml#type-t">t</a> is called a <span class="newterm">default method</span>; it is always applicable but
may be shadowed by a more specific method.<br/>Methods can have <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifiers</a>, which give the method combination
procedure a way to distinguish among methods.  A method that has one
or more <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifiers</a> is called a <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualified method">qualified method</a>.
A method with no <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifiers</a> is called an <a class="glossary-reference" href="chapter-26.xhtml#glossary-unqualified method">unqualified method</a>. 
A <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifier</a> is any <a class="glossary-reference" href="chapter-26.xhtml#glossary-non-list">non-list</a>.
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifiers</a> defined by the <a class="glossary-reference" href="chapter-26.xhtml#glossary-standardized">standardized</a> method combination types 
are <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbols</a>.<br/>In this specification, the terms ``<a class="glossary-reference" href="chapter-26.xhtml#glossary-primary method">primary method</a>'' and 
``<a class="glossary-reference" href="chapter-26.xhtml#glossary-auxiliary method">auxiliary method</a>'' are used to partition <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a>
within a method combination type according to their intended use.  
In standard method combination, <a class="glossary-reference" href="chapter-26.xhtml#glossary-primary method">primary methods</a> are 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-unqualified method">unqualified methods</a> 
and <a class="glossary-reference" href="chapter-26.xhtml#glossary-auxiliary method">auxiliary methods</a> are methods with a single <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifier</a> 
that is one of <span class="keyword">:around</span>, <span class="keyword">:before</span>, or <span class="keyword">:after</span>.
<a class="glossary-reference" href="chapter-26.xhtml#glossary-method">Methods</a> with these <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifiers</a> are called <a class="glossary-reference" href="chapter-26.xhtml#glossary-around method">around methods</a>,
<a class="glossary-reference" href="chapter-26.xhtml#glossary-before method">before methods</a>, and <a class="glossary-reference" href="chapter-26.xhtml#glossary-after method">after methods</a>, respectively.
When a method combination type is defined using the short form of
<a class="macro-reference" href="#macro-define-method-combination">define-method-combination</a>, <a class="glossary-reference" href="chapter-26.xhtml#glossary-primary method">primary methods</a> are 
methods qualified with the name of the type of method combination, 
and auxiliary methods have the <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifier</a> <span class="keyword">:around</span>.
Thus the terms ``<a class="glossary-reference" href="chapter-26.xhtml#glossary-primary method">primary method</a>'' and ``<a class="glossary-reference" href="chapter-26.xhtml#glossary-auxiliary method">auxiliary method</a>''
have only a relative definition within a given method combination type.<br/></section><section id="section-SpecializerQualifierAgreement"><h3 class="section-title">Agreement on Parameter Specializers and Qualifiers</h3><br/>Two <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> are said to agree with each other on <a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter specializer">parameter specializers</a>
and <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifiers</a> if the following conditions hold:<br/><ol><li>Both methods have the same number of required parameters.
Suppose the <a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter specializer">parameter specializers</a> of the two methods are
<math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>P</mrow><mo>1,1</mo></msub><mi>â€¦</mi><msub><mrow>P</mrow><mo>1,n</mo></msub></math> and <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>P</mrow><mo>2,1</mo></msub><mi>â€¦</mi><msub><mrow>P</mrow><mo>2,n</mo></msub></math>.<br/></li><li>For each <math xmlns="http://www.w3.org/1998/Math/MathML">1<mo>â‰¤</mo>i<mo>â‰¤</mo>n</math>, <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>P</mrow><mo>1,i</mo></msub></math> agrees with <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>P</mrow><mo>2,i</mo></msub></math>.
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter specializer">parameter specializer</a> <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>P</mrow><mo>1,i</mo></msub></math> agrees with <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>P</mrow><mo>2,i</mo></msub></math> if
<math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>P</mrow><mo>1,i</mo></msub></math> and <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>P</mrow><mo>2,i</mo></msub></math> are the same class or if 
<math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>P</mrow><mo>1,i</mo></msub>=\hbox<span class="explicit-mono">(<span class="explicit-bold"> eql</span> <math xmlns="http://www.w3.org/1998/Math/MathML">\hbox<span class="explicit-italic"> object</span>_1</math>)</span></math>,
<math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>P</mrow><mo>2,i</mo></msub>=\hbox<span class="explicit-mono">(<span class="explicit-bold"> eql</span> <math xmlns="http://www.w3.org/1998/Math/MathML">\hbox<span class="explicit-italic"> object</span>_2</math>)</span></math>, and
<span class="explicit-mono">(<span class="explicit-bold"> eql</span> <math xmlns="http://www.w3.org/1998/Math/MathML">\hbox<span class="explicit-italic"> object</span>_1</math> <math xmlns="http://www.w3.org/1998/Math/MathML">\hbox<span class="explicit-italic"> object</span>_2</math>)</span>.
Otherwise <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>P</mrow><mo>1,i</mo></msub></math> and <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>P</mrow><mo>2,i</mo></msub></math> do not agree.<br/>
</li><li>The two <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">lists</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifiers</a> are the <a class="glossary-reference" href="chapter-26.xhtml#glossary-same">same</a> 
under <a class="function-reference" href="chapter-5.xhtml#function-equal">equal</a>.<br/>
</li></ol><br/></section><section id="section-GFMethodLambdaListCongruency"><h3 class="section-title">Congruent Lambda-lists for all Methods of a Generic Function</h3><br/>These rules define the congruence of a set of <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda lists</a>, including the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a> of each method for a given generic function and the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a> specified for the generic function itself, if given.<br/><ol><li>Each <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a> must have the same number of required
parameters.<br/></li><li>Each <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a> must have the same number of optional
parameters.  Each method can supply its own default for an optional
parameter.<br/></li><li>If any <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a> mentions <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-rest">rest</a> or <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-key">key</a>, each
<a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a> must mention one or both of them.<br/></li><li>If the <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a>
mentions <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-key">key</a>, each
method must accept all of the keyword names mentioned after <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-key">key</a>,
either by accepting them explicitly, by specifying <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-allow-other-keys">allow-other-keys</a>,
or by specifying <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-rest">rest</a> but not <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-key">key</a>.
Each method can accept additional keyword arguments of its own.  The
checking of the validity of keyword names is done in the generic
function, not in each method.
A method is invoked as if the keyword
argument pair whose name is <span class="keyword">:allow-other-keys</span> and whose value
is <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a> were supplied, though no such argument pair will be passed.
                      
</li><li>The use of <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-allow-other-keys">allow-other-keys</a> need not be consistent
across <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda lists</a>.  If <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-allow-other-keys">allow-other-keys</a> is mentioned in 
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a> of any applicable <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> or of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a>,
any keyword arguments may be mentioned in the call to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a>.<br/></li><li>The use of <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-aux">aux</a> need not be consistent across methods.<br/>If a <a class="glossary-reference" href="chapter-26.xhtml#glossary-method-defining operator">method-defining operator</a> that cannot specify <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> options
creates a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a>, and if the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a> for the method
mentions keyword arguments, the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a> of the generic function
will mention <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-key">key</a> (but no keyword arguments).<br/></li></ol><br/></section><section id="section-KwdArgsInGFsAndMeths"><h3 class="section-title">Keyword Arguments in Generic Functions and Methods</h3><br/>When a generic function or any of its methods mentions 
<a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-key">key</a> in a <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a>, the specific set of keyword
arguments accepted by the generic function varies according to the
applicable methods.  The set of keyword arguments accepted by the
generic function for a particular call is the union of the keyword
arguments accepted by all applicable methods and the keyword arguments
mentioned after <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-key">key</a> in the generic function definition,
if any.  A method that has <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-rest">rest</a> but not <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-key">key</a> does not affect the
set of acceptable keyword arguments.  If
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a> of any applicable method or of the generic
function definition contains <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-allow-other-keys">allow-other-keys</a>, all
keyword arguments are accepted by the generic function.<br/>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a> congruence rules require that each method
accept all of the keyword arguments mentioned after <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-key">key</a> in the
generic function definition, by accepting them explicitly, by
specifying <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-allow-other-keys">allow-other-keys</a>, or by specifying <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-rest">rest</a> but
not <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-key">key</a>.  Each method can accept additional keyword arguments
of its own, in addition to the keyword arguments mentioned in the
generic function definition.<br/>If a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> is passed a keyword argument that no applicable
method accepts, an error should be signaled; see <span class="section-reference error">section:FuncallErrorChecking.</span><br/><section id="section-ExamplesofKeywordArgumentsinGenericFunctionsandMethods"><h4 class="section-title">Examples of Keyword Arguments in Generic Functions and Methods</h4>For example, suppose there are two methods defined for <span class="explicit-mono">width</span>
as follows:<br/><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="macro-reference" href="#macro-defmethod">defmethod</a> <span class="syntax-interned-symbol">width</span> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">character-class</span>)</span> <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-key">&amp;KEY</a> <span class="syntax-interned-symbol">font</span>)</span> <span class="syntax-interned-symbol">...</span>)</span>
 
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-defmethod">defmethod</a> <span class="syntax-interned-symbol">width</span> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">p</span> <span class="syntax-interned-symbol">picture-class</span>)</span> <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-key">&amp;KEY</a> <span class="syntax-interned-symbol">pixel-size</span>)</span> <span class="syntax-interned-symbol">...</span>)</span>
</span></code></pre><br/> Assume that there are no other methods and no generic
function definition for <span class="explicit-mono">width</span>. The evaluation of the
following form should signal an error because 
the keyword argument <span class="keyword">:pixel-size</span> is not accepted by the applicable method.<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">width</span> <span class="syntax-cons">(<a class="function-reference" href="#function-make-instance">make-instance</a> <span class="syntax-quasiquote">`<span class="syntax-interned-symbol">character-class</span></span> <span class="syntax-keyword-symbol">:char</span> <span class="syntax-character">#\Q</span>)</span> 
       <span class="syntax-keyword-symbol">:font</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">baskerville</span></span> <span class="syntax-keyword-symbol">:pixel-size</span> <span class="syntax-number">10</span>)</span>
</span></code></pre><br/>The evaluation of the following form should signal an error.<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">width</span> <span class="syntax-cons">(<a class="function-reference" href="#function-make-instance">make-instance</a> <span class="syntax-quasiquote">`<span class="syntax-interned-symbol">picture-class</span></span> <span class="syntax-keyword-symbol">:glyph</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">glyph</span> <span class="syntax-character">#\Q</span>)</span>)</span> 
       <span class="syntax-keyword-symbol">:font</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">baskerville</span></span> <span class="syntax-keyword-symbol">:pixel-size</span> <span class="syntax-number">10</span>)</span>
</span></code></pre><br/>The evaluation of the following form will not signal an error
if the class named <span class="explicit-mono">character-picture-class</span> is a subclass of
both <span class="explicit-mono">picture-class</span> and <span class="explicit-mono">character-class</span>.<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">width</span> <span class="syntax-cons">(<a class="function-reference" href="#function-make-instance">make-instance</a> <span class="syntax-quasiquote">`<span class="syntax-interned-symbol">character-picture-class</span></span> <span class="syntax-keyword-symbol">:char</span> <span class="syntax-character">#\Q</span>)</span>
       <span class="syntax-keyword-symbol">:font</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">baskerville</span></span> <span class="syntax-keyword-symbol">:pixel-size</span> <span class="syntax-number">10</span>)</span>
</span></code></pre><br/></section></section><section id="section-MethodSelectionAndCombination"><h3 class="section-title">Method Selection and Combination</h3><br/>When a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> is called with particular arguments, it must
determine the code to execute.  This code is called the 
<span class="newterm">effective method</span> for those <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">arguments</a>.
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-effective method">effective method</a> is a 
combination of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-applicable method">applicable methods</a> in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a>
that <a class="glossary-reference" href="chapter-26.xhtml#glossary-call">calls</a> some or all of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a>.<br/>If a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> is called and no <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> are 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-applicable">applicable</a>, the <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> <a class="function-reference" href="#function-no-applicable-method">no-applicable-method</a>
is invoked, with the <span class="glossary-reference error">glossary:results</span> from that call being used as the
<span class="glossary-reference error">glossary:results</span> of the call to the original <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a>.  Calling
<a class="function-reference" href="#function-no-applicable-method">no-applicable-method</a> takes precedence over checking for acceptable
keyword arguments; see <span class="section-reference error">section:KwdArgsInGFsAndMeths.</span>
When the <a class="glossary-reference" href="chapter-26.xhtml#glossary-effective method">effective method</a> has been determined,
it is invoked with the same <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">arguments</a> as were passed to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a>.  
Whatever <span class="glossary-reference error">glossary:values</span> it returns are returned as the <span class="glossary-reference error">glossary:values</span>
of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a>.<br/><section id="section-DeterminingtheEffectiveMethod"><h4 class="section-title">Determining the Effective Method</h4><br/>The effective method is determined by the following three-step procedure:<br/><ol><li>Select the applicable methods.<br/></li><li>Sort the applicable methods by precedence order, putting
the most specific method first.<br/></li><li>Apply method combination to the sorted list of
applicable methods, producing the effective method.<br/></li></ol><br/><section id="section-SelApplMeth"><h5 class="section-title">Selecting the Applicable Methods</h5><br/>This step is described in <a class="section-reference" href="#section-IntroToMethods">Introduction to Methods</a>.<br/></section><section id="section-SortingtheApplicableMethodsbyPrecedenceOrder"><h5 class="section-title">Sorting the Applicable Methods by Precedence Order</h5>To compare the precedence of two methods, their <a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter specializer">parameter specializers</a>
are examined in order.  The default examination order is from left to
right, but an alternative order may be specified by the 
<span class="keyword">:argument-precedence-order</span> option to <a class="macro-reference" href="#macro-defgeneric">defgeneric</a> or to any of
the other operators that specify generic function options.<br/>The corresponding <a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter specializer">parameter specializers</a> from each method are
compared.  When a pair of <a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter specializer">parameter specializers</a> agree, the next
pair are compared for agreement.  If all corresponding parameter
specializers agree, the two methods must have different
<a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifiers</a>; in this case, either method can be selected to precede the
other.  For information about agreement, see <span class="section-reference error">section:SpecializerQualifierAgreement.</span><br/>If some corresponding <a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter specializer">parameter specializers</a> do not agree, the first
pair of <a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter specializer">parameter specializers</a> that do not agree determines the
precedence.  If both <a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter specializer">parameter specializers</a> are classes, the more
specific of the two methods is the method whose <a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter specializer">parameter specializer</a>
appears earlier in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class precedence list">class precedence list</a> of the corresponding
argument.  Because of the way in which the set of applicable methods
is chosen, the <a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter specializer">parameter specializers</a> are guaranteed to be present in
the class precedence list of the class of the argument.<br/>If just one of a pair of corresponding <a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter specializer">parameter specializers</a> is <span class="explicit-mono">(eql <span class="explicit-italic"> object</span>)</span>,
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> with that <a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter specializer">parameter specializer</a> precedes the
other <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a>.  If both <a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter specializer">parameter specializers</a> are <a class="function-reference" href="chapter-5.xhtml#function-eql">eql</a>
<a class="glossary-reference" href="chapter-26.xhtml#glossary-expression">expressions</a>, the
specializers must agree (otherwise the two <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> would
not both have been applicable to this argument).<br/>The resulting list of <a class="glossary-reference" href="chapter-26.xhtml#glossary-applicable method">applicable methods</a> has the most specific
<a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> first and the least specific <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> last.    <br/></section><section id="section-ApplyMethCombToSortedMethods"><h5 class="section-title">Applying method combination to the sorted list of applicable methods</h5><br/>In the simple case&mdash;if standard method combination is used and all
applicable methods are primary methods&mdash;the 
effective method is the most specific method.
That method can call the next most specific
method by using the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="#function-call-next-method">call-next-method</a>.  The method that
<a class="function-reference" href="#function-call-next-method">call-next-method</a> will call is referred to as the 
<span class="newterm">next method</span>.  The predicate <a class="function-reference" href="#function-next-method-p">next-method-p</a> tests whether a next
method exists.  If <a class="function-reference" href="#function-call-next-method">call-next-method</a> is called and there is no
next most specific method, the generic function <a class="function-reference" href="#function-no-next-method">no-next-method</a>
is invoked.<br/>In general, the effective method is some combination of the applicable
methods.  It is described by a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> that contains calls to some or
all of the applicable methods, returns the value or values that will
be returned as the value or values of the generic function, and
optionally makes some of the methods accessible by means of 
<a class="function-reference" href="#function-call-next-method">call-next-method</a>.

The role of each method in the effective method is determined by its
<a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifiers</a> and the specificity of the method.  A <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifier</a>
serves to mark a method, and the meaning of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifier</a> is
determined by the way that these marks are used by this step
of the procedure.  If an applicable method has an unrecognized
<a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifier</a>, this step signals an error and does not include that method
in the effective method.<br/>When standard method combination is used together with qualified methods, 
the effective method is produced as described in <a class="section-reference" href="#section-StdMethComb">Standard Method Combination</a>.<br/>Another type of method combination can be specified by using the
<span class="keyword">:method-combination</span> option of <a class="macro-reference" href="#macro-defgeneric">defgeneric</a> or
of any of the other operators that specify generic function options.  In
this way this step of the procedure can be customized.<br/>New types of method combination can be defined by using 
the <a class="macro-reference" href="#macro-define-method-combination">define-method-combination</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a>. <br/></section></section><section id="section-StdMethComb"><h4 class="section-title">Standard Method Combination</h4>
<a id="symbol-standard"></a><br/>Standard method combination is supported by the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> <a class="type-reference" href="chapter-4.xhtml#type-standard-generic-function">standard-generic-function</a>.
It is used if no other type of method
combination is specified or if the built-in method combination type
<a class="symbol-reference" href="#symbol-standard">standard</a> is specified. <br/>Primary methods define the main action of the effective method,  
while auxiliary methods modify that action in one of three ways.
A primary method has no method <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifiers</a>.<br/>An auxiliary method is a method whose 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifier</a> is <span class="keyword">:before</span>, <span class="keyword">:after</span>, or <span class="keyword">:around</span>.
Standard method combination
allows no more than one <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifier</a> per method; if a method definition
specifies more than one <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifier</a> per method, an error is signaled.<br/><ul><li>A <a class="glossary-reference" href="chapter-26.xhtml#glossary-before method">before method</a> has the keyword <span class="keyword">:before</span> as its only <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifier</a>.
A <a class="glossary-reference" href="chapter-26.xhtml#glossary-before method">before method</a> specifies <a class="glossary-reference" href="chapter-26.xhtml#glossary-code">code</a> that is to be run before any 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-primary method">primary methods</a>.<br/></li><li>An <a class="glossary-reference" href="chapter-26.xhtml#glossary-after method">after method</a> has the keyword <span class="keyword">:after</span> as its only <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifier</a>.
An <a class="glossary-reference" href="chapter-26.xhtml#glossary-after method">after method</a> specifies <a class="glossary-reference" href="chapter-26.xhtml#glossary-code">code</a> that is to be run after
<a class="glossary-reference" href="chapter-26.xhtml#glossary-primary method">primary methods</a>.<br/></li><li>An <a class="glossary-reference" href="chapter-26.xhtml#glossary-around method">around method</a> has the keyword <span class="keyword">:around</span> as its only <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifier</a>.
An <a class="glossary-reference" href="chapter-26.xhtml#glossary-around method">around method</a> specifies <a class="glossary-reference" href="chapter-26.xhtml#glossary-code">code</a> that is to be run instead of other
<a class="glossary-reference" href="chapter-26.xhtml#glossary-applicable method">applicable methods</a>,
but which might contain explicit <a class="glossary-reference" href="chapter-26.xhtml#glossary-code">code</a>
which calls some of those <a class="glossary-reference" href="chapter-26.xhtml#glossary-shadow">shadowed</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a>
(via <a class="function-reference" href="#function-call-next-method">call-next-method</a>).<br/></li></ul><br/>The semantics of standard method combination is as follows:<br/><ul><li>If there are any <a class="glossary-reference" href="chapter-26.xhtml#glossary-around method">around methods</a>, the most specific
<a class="glossary-reference" href="chapter-26.xhtml#glossary-around method">around method</a> is called.  It supplies the value or values of the
generic function.<br/></li><li>Inside the body of an <a class="glossary-reference" href="chapter-26.xhtml#glossary-around method">around method</a>, 
<a class="function-reference" href="#function-call-next-method">call-next-method</a> can be used to call the <a class="glossary-reference" href="chapter-26.xhtml#glossary-next method">next method</a>.  When the next
method returns, the <a class="glossary-reference" href="chapter-26.xhtml#glossary-around method">around method</a> can execute more code,
perhaps based on the returned value or values.
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> <a class="function-reference" href="#function-no-next-method">no-next-method</a> is invoked if <a class="function-reference" href="#function-call-next-method">call-next-method</a> is used and
there is no <a class="glossary-reference" href="chapter-26.xhtml#glossary-applicable method">applicable method</a> to call.  The <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="#function-next-method-p">next-method-p</a>
may be used to determine whether a <a class="glossary-reference" href="chapter-26.xhtml#glossary-next method">next method</a> exists.<br/></li><li>If an <a class="glossary-reference" href="chapter-26.xhtml#glossary-around method">around method</a> invokes <a class="function-reference" href="#function-call-next-method">call-next-method</a>,
the next most specific <a class="glossary-reference" href="chapter-26.xhtml#glossary-around method">around method</a>
is called, if one is applicable.  If there are no <a class="glossary-reference" href="chapter-26.xhtml#glossary-around method">around methods</a> 
or if <a class="function-reference" href="#function-call-next-method">call-next-method</a> is called by the least
specific <a class="glossary-reference" href="chapter-26.xhtml#glossary-around method">around method</a>, the other methods are called as
follows:
<ul><li>All the <a class="glossary-reference" href="chapter-26.xhtml#glossary-before method">before methods</a> are called, in
most-specific-first order.  Their values are ignored.
An error is signaled if <a class="function-reference" href="#function-call-next-method">call-next-method</a> is used in a
<a class="glossary-reference" href="chapter-26.xhtml#glossary-before method">before method</a>.<br/></li><li>The most specific primary method is called.  Inside the
body of a primary method, <a class="function-reference" href="#function-call-next-method">call-next-method</a> may be used to call
the next most specific primary method.  When that method returns, the
previous primary method can execute more code, perhaps based on the
returned value or values.  The generic function <a class="function-reference" href="#function-no-next-method">no-next-method</a>
is invoked if <a class="function-reference" href="#function-call-next-method">call-next-method</a> is used and there are no more
applicable primary methods.  The <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="#function-next-method-p">next-method-p</a> may be
used to determine whether a <a class="glossary-reference" href="chapter-26.xhtml#glossary-next method">next method</a> exists.  If <a class="function-reference" href="#function-call-next-method">call-next-method</a>
is not used, only the most specific <a class="glossary-reference" href="chapter-26.xhtml#glossary-primary method">primary method</a> is called.<br/></li><li>All the <a class="glossary-reference" href="chapter-26.xhtml#glossary-after method">after methods</a> are called in
most-specific-last order.  Their values are ignored.
An error is signaled if <a class="function-reference" href="#function-call-next-method">call-next-method</a> is used in an
<a class="glossary-reference" href="chapter-26.xhtml#glossary-after method">after method</a>.
</li></ul>
</li><li>If no <a class="glossary-reference" href="chapter-26.xhtml#glossary-around method">around methods</a> were invoked, the most
specific primary method supplies the value or values returned by the
generic function.  The value or values returned by the invocation of
<a class="function-reference" href="#function-call-next-method">call-next-method</a> in the least specific <a class="glossary-reference" href="chapter-26.xhtml#glossary-around method">around method</a> are
those returned by the most specific primary method.<br/></li></ul><br/>In standard method combination, if there is an applicable method
but no applicable primary method, an error is signaled.<br/>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-before method">before methods</a> are run in most-specific-first order while
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-after method">after methods</a> are run in least-specific-first order.  The
design rationale for this difference can be illustrated with an
example.  Suppose class <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>C</mrow><mo>1</mo></msub></math> modifies the behavior of its
superclass, <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>C</mrow><mo>2</mo></msub></math>, by adding <a class="glossary-reference" href="chapter-26.xhtml#glossary-before method">before methods</a> and <a class="glossary-reference" href="chapter-26.xhtml#glossary-after method">after methods</a>.
Whether the behavior of the class <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>C</mrow><mo>2</mo></msub></math> is defined
directly by methods on <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>C</mrow><mo>2</mo></msub></math> or is inherited from its superclasses
does not affect the relative order of invocation of methods on
instances of the class <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>C</mrow><mo>1</mo></msub></math>.  Class <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>C</mrow><mo>1</mo></msub></math>'s 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-before method">before method</a> runs before all of class <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>C</mrow><mo>2</mo></msub></math>'s methods.  
Class <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>C</mrow><mo>1</mo></msub></math>'s <a class="glossary-reference" href="chapter-26.xhtml#glossary-after method">after method</a> runs after all of class <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>C</mrow><mo>2</mo></msub></math>'s methods.<br/>By contrast, all <a class="glossary-reference" href="chapter-26.xhtml#glossary-around method">around methods</a> run before any other methods
run.  Thus a less specific <a class="glossary-reference" href="chapter-26.xhtml#glossary-around method">around method</a> runs before a more
specific primary method.<br/>If only primary methods are used and if <a class="function-reference" href="#function-call-next-method">call-next-method</a> is not
used, only the most specific method is invoked; that is, more specific
methods shadow more general ones. <br/></section><section id="section-DeclarativeMethodCombination"><h4 class="section-title">Declarative Method Combination</h4>The macro <a class="macro-reference" href="#macro-define-method-combination">define-method-combination</a> defines new forms of method
combination.  It provides a mechanism for customizing the production
of the effective method. The default procedure for producing an
effective method is described in <a class="section-reference" href="#section-DeterminingtheEffectiveMethod">Determining the Effective Method</a>.
There are two forms of
<a class="macro-reference" href="#macro-define-method-combination">define-method-combination</a>.  The short form is a simple facility while
the long form is more powerful and more verbose.  The long form
resembles <a class="macro-reference" href="chapter-3.xhtml#macro-defmacro">defmacro</a> in that the body is an expression that
computes a Lisp form; it provides mechanisms for implementing
arbitrary control structures within method combination and for
arbitrary processing of method <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifiers</a>.  <br/></section><section id="section-BuiltInMethCombTypes"><h4 class="section-title">Built-in Method Combination Types</h4><br/>The object system provides a set of built-in method combination types.  To
specify that a generic function is to use one of these method
combination types, the name of the method combination type is given as
the argument to the <span class="keyword">:method-combination</span> option to 
<a class="macro-reference" href="#macro-defgeneric">defgeneric</a> or to the <span class="keyword">:method-combination</span> option to any of the
other operators that specify generic function options.<br/>The names of the built-in  method combination types are listed in Figure <span class="explicit-mono">()</span>&ndash;.
<a id="symbol-+"></a><a id="symbol-and"></a><a id="symbol-append"></a><a id="symbol-list"></a><a id="symbol-max"></a><a id="symbol-min"></a><a id="symbol-nconc"></a><a id="symbol-or"></a><a id="symbol-progn"></a><a id="symbol-standard"></a><br/><span class="float" id="figure-Built-in Method Combination Types"><table><tbody><tr><td><a class="function-reference" href="chapter-12.xhtml#function-+">+</a></td><td><a class="function-reference" href="chapter-14.xhtml#function-append">append</a></td><td><a class="function-reference" href="chapter-12.xhtml#function-max">max</a></td><td><a class="function-reference" href="chapter-14.xhtml#function-nconc">nconc</a></td><td><a class="special-operator-reference" href="chapter-5.xhtml#special-operator-progn">progn</a></td></tr><tr><td><a class="macro-reference" href="chapter-5.xhtml#macro-and">and</a></td><td><a class="function-reference" href="chapter-14.xhtml#function-list">list</a></td><td><a class="function-reference" href="chapter-12.xhtml#function-min">min</a></td><td><a class="macro-reference" href="chapter-5.xhtml#macro-or">or</a></td><td><a class="symbol-reference" href="#symbol-standard">standard</a></td></tr></tbody></table><div class="caption">Built-in Method Combination Types</div></span><br/>The semantics of the <a class="symbol-reference" href="#symbol-standard">standard</a> built-in method combination type is
described in <a class="section-reference" href="#section-StdMethComb">Standard Method Combination</a>.  The other
built-in method combination types are called simple built-in method
combination types.<br/>The simple built-in method combination types act as though they were
defined by the short form of <a class="macro-reference" href="#macro-define-method-combination">define-method-combination</a>.  
They recognize two roles for <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a>:<br/><ul><li>An <a class="glossary-reference" href="chapter-26.xhtml#glossary-around method">around method</a> has the keyword symbol 
<span class="keyword">:around</span> as its sole <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifier</a>.  The meaning of 
<span class="keyword">:around</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> is the same as in standard method combination.
Use of the functions <a class="function-reference" href="#function-call-next-method">call-next-method</a> and <a class="function-reference" href="#function-next-method-p">next-method-p</a>
is supported in <a class="glossary-reference" href="chapter-26.xhtml#glossary-around method">around methods</a>.<br/></li><li>A primary method has the name of the method combination
type as its sole <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifier</a>.  For example, the built-in method
combination type <span class="explicit-mono">and</span> recognizes methods whose sole <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifier</a> is
<span class="explicit-mono">and</span>; these are primary methods. Use of the functions 
<a class="function-reference" href="#function-call-next-method">call-next-method</a> and <a class="function-reference" href="#function-next-method-p">next-method-p</a> is not supported 
in <a class="glossary-reference" href="chapter-26.xhtml#glossary-primary method">primary methods</a>.<br/></li></ul><br/>The semantics of the simple built-in method combination types is as
follows:<br/><ul><li>If there are any <a class="glossary-reference" href="chapter-26.xhtml#glossary-around method">around methods</a>, the most specific <a class="glossary-reference" href="chapter-26.xhtml#glossary-around method">around method</a>
is called.   It supplies the value or values of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a>. <br/></li><li>Inside the body of an <a class="glossary-reference" href="chapter-26.xhtml#glossary-around method">around method</a>, the function
<a class="function-reference" href="#function-call-next-method">call-next-method</a> can be used to call the <a class="glossary-reference" href="chapter-26.xhtml#glossary-next method">next method</a>.
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> <a class="function-reference" href="#function-no-next-method">no-next-method</a> is invoked if 
<a class="function-reference" href="#function-call-next-method">call-next-method</a> is used and there is no applicable method to call.
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="#function-next-method-p">next-method-p</a> may be used to determine whether a
<a class="glossary-reference" href="chapter-26.xhtml#glossary-next method">next method</a> exists. When the <a class="glossary-reference" href="chapter-26.xhtml#glossary-next method">next method</a> returns, 
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-around method">around method</a> can execute more code,
perhaps based on the returned value or values.<br/></li><li>If an <a class="glossary-reference" href="chapter-26.xhtml#glossary-around method">around method</a> invokes <a class="function-reference" href="#function-call-next-method">call-next-method</a>,
the next most specific <a class="glossary-reference" href="chapter-26.xhtml#glossary-around method">around method</a> is
called, if one is applicable.  If there are no <a class="glossary-reference" href="chapter-26.xhtml#glossary-around method">around methods</a>
or if <a class="function-reference" href="#function-call-next-method">call-next-method</a> is called by the least specific
<a class="glossary-reference" href="chapter-26.xhtml#glossary-around method">around method</a>, a Lisp form derived from the name of the built-in
method combination type and from the list of applicable primary
methods is evaluated to produce the value of the generic function.
Suppose the name of the method combination type is <span class="explicit-italic"> operator</span>
and the call to the generic function is of the form<br/><math xmlns="http://www.w3.org/1998/Math/MathML" display="block">(\hbox<span class="explicit-italic"> generic-function</span><msub><mrow> a</mrow><mo>1</mo></msub><mi>â€¦</mi><msub><mrow>a</mrow><mo>n)</mo></msub></math></li><li>Let <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>M</mrow><mo>1,</mo></msub><mi>â€¦</mi><msub><mrow>,M</mrow><mo>k</mo></msub></math> be the applicable primary methods
in order; then the derived Lisp form is<br/><math xmlns="http://www.w3.org/1998/Math/MathML" display="block">(\hbox<span class="explicit-italic"> operator</span> <mi>âŸ¨</mi><msub><mrow>M</mrow><mo>1</mo></msub><msub><mrow> a</mrow><mo>1</mo></msub><mi>â€¦</mi><msub><mrow>a</mrow><mo>n</mo></msub><mi>âŸ©</mi><mi>â€¦</mi><mi>âŸ¨</mi><msub><mrow>M</mrow><mo><msub><mrow>k a</mrow><mo>1</mo></msub></mo></msub><mi>â€¦</mi><msub><mrow>a</mrow><mo>n</mo></msub><mi>âŸ©</mi>)</math></li><li>If the expression <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>âŸ¨</mi><msub><mrow>M</mrow><mo><msub><mrow>i  a</mrow><mo>1</mo></msub></mo></msub><mi>â€¦</mi><msub><mrow>a</mrow><mo>n</mo></msub><mi>âŸ©</mi></math> is
evaluated, the method <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>M</mrow><mo>i</mo></msub></math> will be applied to the arguments
<math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>a</mrow><mo>1</mo></msub><mi>â€¦</mi><msub><mrow>a</mrow><mo>n</mo></msub></math>.  
For example,
if <span class="explicit-italic"> operator</span> is <span class="explicit-mono">or</span>,
the expression <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>âŸ¨</mi><msub><mrow>M</mrow><mo><msub><mrow>i  a</mrow><mo>1</mo></msub></mo></msub><mi>â€¦</mi><msub><mrow>a</mrow><mo>n</mo></msub><mi>âŸ©</mi></math> is
evaluated only if <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>âŸ¨</mi><msub><mrow>M</mrow><mo><msub><mrow>j  a</mrow><mo>1</mo></msub></mo></msub><mi>â€¦</mi><msub><mrow>a</mrow><mo>n</mo></msub><mi>âŸ©</mi></math>,
<math xmlns="http://www.w3.org/1998/Math/MathML">1<mo>â‰¤</mo>j&lt;i</math>, returned <span class="explicit-mono">nil</span>.<br/></li><li>The default order for the primary methods is 
<span class="keyword">:most-specific-first</span>.  However, the order can be reversed by supplying
<span class="keyword">:most-specific-last</span> as the second argument to the <span class="keyword">:method-combination</span> option.
</li></ul><br/>The simple built-in method combination types require exactly one
<a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifier</a> per method.  An error is signaled if there are applicable
methods with no <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifiers</a> or with <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifiers</a> that are not supported
by the method combination type. An error is signaled if there are
applicable <a class="glossary-reference" href="chapter-26.xhtml#glossary-around method">around methods</a> and no applicable primary
methods.<br/></section></section><section id="section-MethodInheritance"><h3 class="section-title">Inheritance of Methods</h3><br/>A subclass inherits methods in the sense that any method applicable to
all instances of a class is also applicable to all instances of any
subclass of that class.<br/>The inheritance of methods acts the same way regardless of 
which of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-method-defining operator">method-defining operators</a> created the methods.

The inheritance of methods is described in detail in 
<a class="section-reference" href="#section-MethodSelectionAndCombination">Method Selection and Combination</a>.<br/></section>
</section><br/><section id="section-Dictionary"><h2 class="section-title">Dictionary</h2>
<br/><br/><div class="component" id="function-function-keywords"><div class="header"><span class="left"><span class="name" id="function-function-keywords">function-keywords</span></span><span class="right"><span class="ftype">Standard Generic Function</span></span></div><br/>
<dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">function-keywords</span>&nbsp;<span class="lambda-list">method</span>&nbsp;â†’&nbsp;<span class="return-values">keys, allow-other-keys-p</span></span><br/><br/></dd></dl><dl><dt class="label">Method Signatures</dt><dd><span class="method"><span class="name">function-keywords</span>&nbsp;<span class="lambda-list"><span class="specialized-parameter">(<span class="name">method</span>&nbsp;<a class="type-reference" href="chapter-4.xhtml#type-standard-method">standard-method</a>)</span></span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">method</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a>.<br/><span class="parameter">keys</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a>.<br/><span class="parameter">allow-other-keys-p</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generalized boolean">generalized boolean</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>Returns the keyword parameter specifiers for a <span class="parameter">method</span>.<br/>Two values are returned: 
 a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> of the explicitly named keywords 
 and a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generalized boolean">generalized boolean</a> that states whether <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-allow-other-keys">allow-other-keys</a>
  had been specified in the <span class="parameter">method</span> definition.<br/></dd></dl><dl><dt class="label">Examples</dt><dd><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="macro-reference" href="#macro-defmethod">defmethod</a> <span class="syntax-interned-symbol">gf1</span> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <a class="type-reference" href="chapter-12.xhtml#type-integer">integer</a>)</span> <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-optional">&amp;OPTIONAL</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">b</span> <span class="syntax-number">2</span>)</span>
                 <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-key">&amp;KEY</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">c</span> <span class="syntax-number">3</span>)</span> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-keyword-symbol">:dee</span> <span class="syntax-interned-symbol">d</span>)</span> <span class="syntax-number">4</span>)</span> <span class="syntax-interned-symbol">e</span> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">eff</span> <span class="syntax-interned-symbol">f</span>)</span>)</span>)</span>
   <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">d</span> <span class="syntax-interned-symbol">e</span> <span class="syntax-interned-symbol">f</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-verbatim">#&lt;STANDARD-METHOD GF1 (INTEGER) 36324653&gt;</span>
 <span class="syntax-cons">(<a class="function-reference" href="#function-find-method">find-method</a> <span class="syntax-function">#'<span class="syntax-interned-symbol">gf1</span></span> <span class="syntax-quote">'<span class="syntax-symbol">()</span></span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-cons">(<a class="function-reference" href="#function-find-class">find-class</a> <span class="syntax-quote">'<a class="type-reference" href="chapter-12.xhtml#type-integer">integer</a></span>)</span>)</span>)</span> 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-verbatim">#&lt;STANDARD-METHOD GF1 (INTEGER) 36324653&gt;</span>
 <span class="syntax-cons">(<a class="function-reference" href="#function-function-keywords">function-keywords</a> <a class="function-reference" href="chapter-12.xhtml#function-*">*</a>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-keyword-symbol">:C</span> <span class="syntax-keyword-symbol">:DEE</span> <span class="syntax-keyword-symbol">:E</span> <span class="syntax-interned-symbol">EFF</span>)</span><span class="syntax-verbatim">,</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-defmethod">defmethod</a> <span class="syntax-interned-symbol">gf2</span> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <a class="type-reference" href="chapter-12.xhtml#type-integer">integer</a>)</span>)</span>
   <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">d</span> <span class="syntax-interned-symbol">e</span> <span class="syntax-interned-symbol">f</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-verbatim">#&lt;STANDARD-METHOD GF2 (INTEGER) 42701775&gt;</span>
 <span class="syntax-cons">(<a class="function-reference" href="#function-function-keywords">function-keywords</a> <span class="syntax-cons">(<a class="function-reference" href="#function-find-method">find-method</a> <span class="syntax-function">#'<span class="syntax-interned-symbol">gf1</span></span> <span class="syntax-quote">'<span class="syntax-symbol">()</span></span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-cons">(<a class="function-reference" href="#function-find-class">find-class</a> <span class="syntax-quote">'<a class="type-reference" href="chapter-12.xhtml#type-integer">integer</a></span>)</span>)</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-symbol">()</span><span class="syntax-verbatim">,</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-defmethod">defmethod</a> <span class="syntax-interned-symbol">gf3</span> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <a class="type-reference" href="chapter-12.xhtml#type-integer">integer</a>)</span> <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-key">&amp;KEY</a> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">d</span> <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-allow-other-keys">&amp;ALLOW-OTHER-KEYS</a>)</span>
   <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">d</span> <span class="syntax-interned-symbol">e</span> <span class="syntax-interned-symbol">f</span>)</span>)</span>
 <span class="syntax-cons">(<a class="function-reference" href="#function-function-keywords">function-keywords</a> <a class="function-reference" href="chapter-12.xhtml#function-*">*</a>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-keyword-symbol">:B</span> <span class="syntax-keyword-symbol">:C</span> <span class="syntax-keyword-symbol">:D</span>)</span><span class="syntax-verbatim">,</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>
</span></code></pre><br/></dd></dl><dl><dt class="label">Affected By</dt><dd><a class="macro-reference" href="#macro-defmethod">defmethod</a><br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="macro-reference" href="#macro-defmethod">defmethod</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd><span class="none">None</span>.<br/></dd></dl></div><br/><br/><br/><div class="component" id="function-ensure-generic-function"><div class="header"><span class="left"><span class="name" id="function-ensure-generic-function">ensure-generic-function</span></span><span class="right"><span class="ftype">Function</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">ensure-generic-function</span>&nbsp;<span class="lambda-list">function-name <span class="lambda-list-keyword">&amp;key</span>
			 argument-precedence-order declare
                               documentation environment
                               generic-function-class lambda-list
                               method-class method-combination</span>&nbsp;â†’&nbsp;<span class="return-values">generic-function</span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">function-name</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function name">function name</a>.<br/>The keyword arguments correspond to the <span class="parameter">option</span> arguments of
<a class="macro-reference" href="#macro-defgeneric">defgeneric</a>, except that the <span class="keyword">:method-class</span> and
<span class="keyword">:generic-function-class</span> arguments can be <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>s
as well as names.<br/><span class="parameter">method-combination</span>&mdash;method combination object.<br/><span class="parameter">environment</span>&mdash;the same as the <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-environment">environment</a> argument
to macro expansion functions and is used to distinguish between compile-time
and run-time environments.
 

<span class="parameter">generic-function</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="#function-ensure-generic-function">ensure-generic-function</a> is used to define 
a globally named <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> with no <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> 
or to specify or modify options and declarations that pertain to 
a globally named <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> as a whole.<br/>If <span class="parameter">function-name</span> is not <a class="glossary-reference" href="chapter-26.xhtml#glossary-fbound">fbound</a> in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-global environment">global environment</a>,
a new
<a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> is created.  
If 
<pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-fdefinition">fdefinition</a> <span class="parameter">function-name</span>)</span>
</span></code></pre> 
is an <a class="glossary-reference" href="chapter-26.xhtml#glossary-ordinary function">ordinary function</a>, 
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a>, 
or a <a class="glossary-reference" href="chapter-26.xhtml#glossary-special operator">special operator</a>,
an error is signaled.<br/>If <span class="parameter">function-name</span> 
is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a>, it must be of the
form <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> <span class="parameter">symbol</span>)</span>
</span></code></pre>.
If <span class="parameter">function-name</span> specifies a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> that has a
different value for any of the following arguments,
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> is modified to have the new value: 
<span class="keyword">:argument-precedence-order</span>, <span class="keyword">:declare</span>, <span class="keyword">:documentation</span>,
<span class="keyword">:method-combination</span>.<br/>If <span class="parameter">function-name</span> specifies a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> that has a
different value for the <span class="keyword">:lambda-list</span> argument, and the new value
is congruent with the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda lists</a> of all existing 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> or there
are no <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a>, the value is changed; otherwise an error is signaled.<br/>If <span class="parameter">function-name</span> specifies a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> that has a
different value for the <span class="keyword">:generic-function-class</span> argument and if
the new generic function class is compatible with the old,
<a class="function-reference" href="#function-change-class">change-class</a> is called to change the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> of the 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a>;
otherwise an error is signaled.<br/>If <span class="parameter">function-name</span> specifies a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> that has a
different value for the <span class="keyword">:method-class</span> argument, the value is
changed, but any existing <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> are not changed.<br/></dd></dl><dl><dt class="label">Examples</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Affected By</dt><dd>Existing function binding of <span class="parameter">function-name</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd>If 
<pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-fdefinition">fdefinition</a> <span class="parameter">function-name</span>)</span>
</span></code></pre>is an <a class="glossary-reference" href="chapter-26.xhtml#glossary-ordinary function">ordinary function</a>, a <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a>, or a <a class="glossary-reference" href="chapter-26.xhtml#glossary-special operator">special operator</a>, 
an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-9.xhtml#type-error">error</a> is signaled.<br/>If <span class="parameter">function-name</span> specifies a 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> that has a
different value for the <span class="keyword">:lambda-list</span> argument, and the new value
is not congruent with the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a> of any existing 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a>,
an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-9.xhtml#type-error">error</a> is signaled.<br/>If <span class="parameter">function-name</span> specifies a 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> that has a
different value for the <span class="keyword">:generic-function-class</span> argument and if
the new generic function class not is compatible with the old,
an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-9.xhtml#type-error">error</a> is signaled.<br/> 
</dd></dl><dl><dt class="label">See Also</dt><dd><a class="macro-reference" href="#macro-defgeneric">defgeneric</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd><span class="none">None</span>.<br/></dd></dl></div><br/><br/><br/><div class="component" id="function-allocate-instance"><div class="header"><span class="left"><span class="name" id="function-allocate-instance">allocate-instance</span></span><span class="right"><span class="ftype">Standard Generic Function</span></span></div><br/>
<dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">allocate-instance</span>&nbsp;<span class="lambda-list">class <span class="lambda-list-keyword">&amp;rest</span> initargs <span class="lambda-list-keyword">&amp;key</span> <span class="lambda-list-keyword">&amp;allow-other-keys</span></span>&nbsp;â†’&nbsp;<span class="return-values">new-instance</span></span><br/>
</dd></dl><dl><dt class="label">Method Signatures</dt><dd><span class="method"><span class="name">allocate-instance</span>&nbsp;<span class="lambda-list"><span class="specialized-parameter">(<span class="name">class</span>&nbsp;<a class="type-reference" href="chapter-4.xhtml#type-standard-class">standard-class</a>)</span> <span class="lambda-list-keyword">&amp;rest</span> initargs</span></span><br/><br/><span class="method"><span class="name">allocate-instance</span>&nbsp;<span class="lambda-list"><span class="specialized-parameter">(<span class="name">class</span>&nbsp;<a class="type-reference" href="chapter-4.xhtml#type-structure-class">structure-class</a>)</span> <span class="lambda-list-keyword">&amp;rest</span> initargs</span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">class</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a>.<br/><span class="parameter">initargs</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-keyword/value pair">keyword/value pairs</a> 
		   (initialization argument <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">names</a> and <span class="glossary-reference error">glossary:values</span>).<br/><span class="parameter">new-instance</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> whose <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> is <span class="parameter">class</span>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>The generic function <a class="function-reference" href="#function-allocate-instance">allocate-instance</a> creates and returns
a new instance of the <span class="parameter">class</span>, without initializing it.
When the <span class="parameter">class</span> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-standard class">standard class</a>, this means that
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a> are <a class="glossary-reference" href="chapter-26.xhtml#glossary-unbound">unbound</a>; when the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> is a
<a class="glossary-reference" href="chapter-26.xhtml#glossary-structure class">structure class</a>, this means the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a>' <span class="glossary-reference error">glossary:values</span>
are unspecified.<br/>The caller of <a class="function-reference" href="#function-allocate-instance">allocate-instance</a> is expected to have
already checked the initialization arguments.<br/>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> <a class="function-reference" href="#function-allocate-instance">allocate-instance</a> is called by
<a class="function-reference" href="#function-make-instance">make-instance</a>, as described in
<a class="section-reference" href="#section-ObjectCreationAndInit">Object Creation and Initialization</a>.<br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>. 
</dd></dl><dl><dt class="label">Exceptional Situations</dt><dd><span class="none">None</span>. 
</dd></dl><dl><dt class="label">See Also</dt><dd><a class="macro-reference" href="#macro-defclass">defclass</a>, <a class="function-reference" href="#function-make-instance">make-instance</a>, <a class="function-reference" href="#function-class-of">class-of</a>,
<a class="section-reference" href="#section-ObjectCreationAndInit">Object Creation and Initialization</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd>The consequences of adding <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> to <a class="function-reference" href="#function-allocate-instance">allocate-instance</a> is unspecified.
This capability might be added by the <a class="glossary-reference" href="chapter-26.xhtml#glossary-metaobject protocol">Metaobject Protocol</a>.<br/>
</dd></dl>
</div><br/><br/><br/><div class="component" id="function-reinitialize-instance"><div class="header"><span class="left"><span class="name" id="function-reinitialize-instance">reinitialize-instance</span></span><span class="right"><span class="ftype">Standard Generic Function</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">reinitialize-instance</span>&nbsp;<span class="lambda-list">instance <span class="lambda-list-keyword">&amp;rest</span> initargs <span class="lambda-list-keyword">&amp;key</span> <span class="lambda-list-keyword">&amp;allow-other-keys</span></span>&nbsp;â†’&nbsp;<span class="return-values">instance</span></span><br/>
</dd></dl><dl><dt class="label">Method Signatures</dt><dd><span class="method"><span class="name">reinitialize-instance</span>&nbsp;<span class="lambda-list"><span class="specialized-parameter">(<span class="name">instance</span>&nbsp;<a class="type-reference" href="chapter-4.xhtml#type-standard-object">standard-object</a>)</span> <span class="lambda-list-keyword">&amp;rest</span> initargs</span></span><br/> <br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">instance</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.<br/><span class="parameter">initargs</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-initialization argument list">initialization argument list</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> <a class="function-reference" href="#function-reinitialize-instance">reinitialize-instance</a> can be used to change
the values of <a class="glossary-reference" href="chapter-26.xhtml#glossary-local slot">local slots</a> of an <span class="parameter">instance</span> according to 
<span class="parameter">initargs</span>.
This <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> can be called by users.<br/>The system-supplied primary <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> for <a class="function-reference" href="#function-reinitialize-instance">reinitialize-instance</a>
checks the validity of <span class="parameter">initargs</span> and signals an error if
an <span class="parameter">initarg</span> is supplied that is not declared as valid.
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> then calls the generic function <a class="function-reference" href="#function-shared-initialize">shared-initialize</a>
with the following arguments:  the <span class="parameter">instance</span>, 
<a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a> (which means no <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a>
should be initialized according to their initforms), and the
<span class="parameter">initargs</span> it received.<br/></dd></dl><dl><dt class="label">Examples</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Side Effects</dt><dd>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> <a class="function-reference" href="#function-reinitialize-instance">reinitialize-instance</a> changes the values of <a class="glossary-reference" href="chapter-26.xhtml#glossary-local slot">local slots</a>.<br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd>The system-supplied primary <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> for <a class="function-reference" href="#function-reinitialize-instance">reinitialize-instance</a>
signals an error if an <span class="parameter">initarg</span> is supplied that is not declared as valid.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="function-reference" href="#function-initialize-instance">initialize-instance</a>,
<a class="function-reference" href="#function-shared-initialize">shared-initialize</a>,
<a class="function-reference" href="#function-update-instance-for-redefined-class">update-instance-for-redefined-class</a>,
<a class="function-reference" href="#function-update-instance-for-different-class">update-instance-for-different-class</a>,
<a class="function-reference" href="#function-slot-boundp">slot-boundp</a>,
<a class="function-reference" href="#function-slot-makunbound">slot-makunbound</a>,
<a class="section-reference" href="#section-InstanceReInit">Reinitializing an Instance</a>,
<a class="section-reference" href="#section-InitargRules">Rules for Initialization Arguments</a>,
<a class="section-reference" href="#section-DeclaringInitargValidity">Declaring the Validity of Initialization Arguments</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd><span class="parameter">Initargs</span> are declared as valid by using the
<span class="keyword">:initarg</span> option to <a class="macro-reference" href="#macro-defclass">defclass</a>, or by defining 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> for <a class="function-reference" href="#function-reinitialize-instance">reinitialize-instance</a>
or <a class="function-reference" href="#function-shared-initialize">shared-initialize</a>.  The keyword name
of each keyword parameter specifier in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a> of any 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a>
defined on <a class="function-reference" href="#function-reinitialize-instance">reinitialize-instance</a> or <a class="function-reference" href="#function-shared-initialize">shared-initialize</a> is
declared as a valid initialization argument name for all 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-class">classes</a> for
which that <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> is applicable.<br/></dd></dl></div><br/><br/><br/><div class="component" id="function-shared-initialize"><div class="header"><span class="left"><span class="name" id="function-shared-initialize">shared-initialize</span></span><span class="right"><span class="ftype">Standard Generic Function</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">shared-initialize</span>&nbsp;<span class="lambda-list">instance slot-names <span class="lambda-list-keyword">&amp;rest</span> initargs <span class="lambda-list-keyword">&amp;key</span> <span class="lambda-list-keyword">&amp;allow-other-keys</span></span>&nbsp;â†’&nbsp;<span class="return-values">instance</span></span><br/> 
</dd></dl><dl><dt class="label">Method Signatures</dt><dd><span class="method"><span class="name">shared-initialize</span>&nbsp;<span class="lambda-list"><span class="specialized-parameter">(<span class="name">instance</span>&nbsp;<a class="type-reference" href="chapter-4.xhtml#type-standard-object">standard-object</a>)</span> slot-names <span class="lambda-list-keyword">&amp;rest</span> initargs</span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">instance</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.<br/><span class="parameter">slot-names</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> or <a class="symbol-reference" href="chapter-5.xhtml#symbol-t">t</a>.<br/><span class="parameter">initargs</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-keyword/value pair">keyword/value pairs</a>
		   (of initialization argument <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">names</a> and <span class="glossary-reference error">glossary:values</span>).<br/></dd></dl><dl><dt class="label">Description</dt><dd>The generic function <a class="function-reference" href="#function-shared-initialize">shared-initialize</a> is used to fill the 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a>                        
of an <span class="parameter">instance</span> 
using <span class="parameter">initargs</span> and <span class="keyword">:initform</span>
forms.  It is called when an instance is created, when an instance is
re-initialized, when an instance is updated to conform to a redefined
<a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a>, and when an instance is updated to conform to a different
<a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a>. The generic function <a class="function-reference" href="#function-shared-initialize">shared-initialize</a> is called by the
system-supplied primary <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> for <a class="function-reference" href="#function-initialize-instance">initialize-instance</a>,
<a class="function-reference" href="#function-reinitialize-instance">reinitialize-instance</a>, <a class="function-reference" href="#function-update-instance-for-redefined-class">update-instance-for-redefined-class</a>, and
<a class="function-reference" href="#function-update-instance-for-different-class">update-instance-for-different-class</a>.<br/>The generic function <a class="function-reference" href="#function-shared-initialize">shared-initialize</a> takes the following
arguments: the <span class="parameter">instance</span> to be initialized, a specification of a set of
<span class="parameter">slot-names</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-accessible">accessible</a> in that <span class="parameter">instance</span>, 
and any number of <span class="parameter">initargs</span>.
The arguments after the first two must form an 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-initialization argument list">initialization argument list</a>.  The system-supplied primary <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> on 
<a class="function-reference" href="#function-shared-initialize">shared-initialize</a> initializes the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a> with values according to the
<span class="parameter">initargs</span> and supplied <span class="keyword">:initform</span> forms.  <span class="parameter">Slot-names</span>
indicates which <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a> should be initialized according
to their <span class="keyword">:initform</span> forms if no <span class="parameter">initargs</span> are
provided for those <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a>. <br/>The system-supplied primary <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> behaves as follows, 
regardless of whether the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a> are local or shared: <br/><ul><li>If an <span class="parameter">initarg</span> in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-initialization argument list">initialization argument list</a> 
 specifies a value for that <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>, that
 value is stored into the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>, even if a value has
 already been stored in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> before the <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> is run.<br/></li><li>Any <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a> indicated by <span class="parameter">slot-names</span> that are still unbound
 at this point are initialized according to their <span class="keyword">:initform</span> forms.
 For any such <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> that has an <span class="keyword">:initform</span> form,
 that <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> is evaluated in the lexical environment of its defining 
 <a class="macro-reference" href="#macro-defclass">defclass</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> and the result is stored into the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>.
 For example, if a <a class="glossary-reference" href="chapter-26.xhtml#glossary-before method">before method</a> stores a value in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>, 
 the <span class="keyword">:initform</span> form will not be used to supply a value for the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>.<br/></li><li>The rules mentioned in <a class="section-reference" href="#section-InitargRules">Rules for Initialization Arguments</a> are obeyed.<br/></li></ul><br/>The <span class="parameter">slots-names</span> argument specifies the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a> that are to be
initialized according to their <span class="keyword">:initform</span> forms if no
initialization arguments apply.  It can be a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> of slot <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">names</a>, 
which specifies the set of those slot <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">names</a>; or it can be the <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> <a class="symbol-reference" href="chapter-5.xhtml#symbol-t">t</a>, 
which specifies the set of all of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a>.<br/> 
</dd></dl><dl><dt class="label">Examples</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd><span class="none">None</span>.<br/><br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="function-reference" href="#function-initialize-instance">initialize-instance</a>,
<a class="function-reference" href="#function-reinitialize-instance">reinitialize-instance</a>,
<a class="function-reference" href="#function-update-instance-for-redefined-class">update-instance-for-redefined-class</a>,
<a class="function-reference" href="#function-update-instance-for-different-class">update-instance-for-different-class</a>,
<a class="function-reference" href="#function-slot-boundp">slot-boundp</a>,
<a class="function-reference" href="#function-slot-makunbound">slot-makunbound</a>,
<a class="section-reference" href="#section-ObjectCreationAndInit">Object Creation and Initialization</a>,
<a class="section-reference" href="#section-InitargRules">Rules for Initialization Arguments</a>,
<a class="section-reference" href="#section-DeclaringInitargValidity">Declaring the Validity of Initialization Arguments</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd><span class="parameter">Initargs</span> are declared as valid by using the <span class="keyword">:initarg</span>
option to <a class="macro-reference" href="#macro-defclass">defclass</a>, or by defining 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> for <a class="function-reference" href="#function-shared-initialize">shared-initialize</a>. 
The keyword name of each keyword parameter
specifier in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a> of any <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> defined on 
<a class="function-reference" href="#function-shared-initialize">shared-initialize</a> is declared as a valid <span class="parameter">initarg</span>
name for all <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">classes</a> for which that <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> is applicable.<br/>Implementations are permitted to optimize <span class="keyword">:initform</span> forms that 
neither produce nor depend on side effects, by evaluating these <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a>
and storing them into slots before running any 
<a class="function-reference" href="#function-initialize-instance">initialize-instance</a> methods, rather than by handling them in the
primary <a class="function-reference" href="#function-initialize-instance">initialize-instance</a> method.  (This optimization might
be implemented by having the <a class="function-reference" href="#function-allocate-instance">allocate-instance</a> method copy a
prototype instance.)<br/>Implementations are permitted to optimize default initial value forms
for <span class="parameter">initargs</span> associated with slots by not actually
creating the complete initialization argument 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> when the only <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a>
that would receive the complete <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> is the 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> on <a class="type-reference" href="chapter-4.xhtml#type-standard-object">standard-object</a>.
In this case default initial value forms can be 
treated like <span class="keyword">:initform</span> forms.  This optimization has no visible
effects other than a performance improvement.<br/></dd></dl></div><br/><br/><br/><div class="component" id="function-update-instance-for-different-class"><div class="header"><span class="left"><span class="name" id="function-update-instance-for-different-class">update-instance-for-different-class</span></span><span class="right"><span class="ftype">Standard Generic Function</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">update-instance-for-different-class</span>&nbsp;<span class="lambda-list">previous current 
		   <span class="lambda-list-keyword">&amp;rest</span> initargs
		   <span class="lambda-list-keyword">&amp;key</span> <span class="lambda-list-keyword">&amp;allow-other-keys</span></span>&nbsp;â†’&nbsp;<span class="return-values"><a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a></span></span><br/> 
</dd></dl><dl><dt class="label">Method Signatures</dt><dd><span class="method"><span class="name">update-instance-for-different-class</span>&nbsp;<span class="lambda-list"><span class="specialized-parameter">(<span class="name">previous</span>&nbsp;<a class="type-reference" href="chapter-4.xhtml#type-standard-object">standard-object</a>)</span>
	        <span class="specialized-parameter">(<span class="name">current</span>&nbsp;<a class="type-reference" href="chapter-4.xhtml#type-standard-object">standard-object</a>)</span>
	        <span class="lambda-list-keyword">&amp;rest</span> initargs</span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">previous</span>&mdash;a copy of the original <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a>.<br/><span class="parameter">current</span>&mdash;the original <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> (altered).<br/><span class="parameter">initargs</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-initialization argument list">initialization argument list</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>The generic function <a class="function-reference" href="#function-update-instance-for-different-class">update-instance-for-different-class</a> is not
intended to be called by programmers.  Programmers may write
<a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> for it.  The <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="#function-update-instance-for-different-class">update-instance-for-different-class</a>
is called only by the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="#function-change-class">change-class</a>.<br/>The system-supplied primary <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> on 
<a class="function-reference" href="#function-update-instance-for-different-class">update-instance-for-different-class</a> checks the validity of
<span class="parameter">initargs</span> and signals an error if an <span class="parameter">initarg</span>
is supplied that is not declared as valid.  This <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> then
initializes <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a> with values according to the <span class="parameter">initargs</span>,
and initializes the newly added <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a> with values according
to their <span class="keyword">:initform</span> forms.  It does this by calling the generic
function <a class="function-reference" href="#function-shared-initialize">shared-initialize</a> with the following arguments: the 
instance (<span class="parameter">current</span>),
a list of <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">names</a> of the newly added <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a>, and the <span class="parameter">initargs</span>
it received.  Newly added <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a> are those <a class="glossary-reference" href="chapter-26.xhtml#glossary-local slot">local slots</a> for which
no <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> of the same name exists in the <span class="parameter">previous</span> class.<br/><a class="glossary-reference" href="chapter-26.xhtml#glossary-method">Methods</a> for <a class="function-reference" href="#function-update-instance-for-different-class">update-instance-for-different-class</a> can be defined to
specify actions to be taken when an <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> is updated.  If only 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-after method">after methods</a> for <a class="function-reference" href="#function-update-instance-for-different-class">update-instance-for-different-class</a> are
defined, they will be run after the system-supplied primary <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> for
initialization and therefore will not interfere with the default
behavior of <a class="function-reference" href="#function-update-instance-for-different-class">update-instance-for-different-class</a>.<br/><a class="glossary-reference" href="chapter-26.xhtml#glossary-method">Methods</a> on <a class="function-reference" href="#function-update-instance-for-different-class">update-instance-for-different-class</a> can be defined to
initialize <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a> differently from <a class="function-reference" href="#function-change-class">change-class</a>.  The default
behavior of <a class="function-reference" href="#function-change-class">change-class</a> is described in 
<a class="section-reference" href="#section-ChangingInstanceClass">Changing the Class of an Instance</a>.<br/>The arguments to <a class="function-reference" href="#function-update-instance-for-different-class">update-instance-for-different-class</a> are
computed by <a class="function-reference" href="#function-change-class">change-class</a>.  When <a class="function-reference" href="#function-change-class">change-class</a> is invoked on
an <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a>, a copy of that <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> is made; <a class="function-reference" href="#function-change-class">change-class</a> then
destructively alters the original <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a>. The first argument to
<a class="function-reference" href="#function-update-instance-for-different-class">update-instance-for-different-class</a>, <span class="parameter">previous</span>, is that
copy; it holds the old <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> values temporarily.  This argument has
dynamic extent within <a class="function-reference" href="#function-change-class">change-class</a>; if it is referenced in any
way once <a class="function-reference" href="#function-update-instance-for-different-class">update-instance-for-different-class</a> returns, the
results are undefined.  The second argument to
<a class="function-reference" href="#function-update-instance-for-different-class">update-instance-for-different-class</a>, <span class="parameter">current</span>, is the altered
original <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a>.
The intended use of <span class="parameter">previous</span> is to extract old <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> values by using
<a class="function-reference" href="#function-slot-value">slot-value</a> or <a class="macro-reference" href="#macro-with-slots">with-slots</a> or by invoking 
a reader generic function, or to run other <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> that were applicable to 
<span class="glossary-reference error">glossary:instances</span> of
the original <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a>.<br/> 
</dd></dl><dl><dt class="label">Examples</dt><dd>See the example for the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="#function-change-class">change-class</a>.<br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd>The system-supplied primary <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> on
<a class="function-reference" href="#function-update-instance-for-different-class">update-instance-for-different-class</a> signals an error if an
initialization argument is supplied that is not declared as valid.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="function-reference" href="#function-change-class">change-class</a>,
<a class="function-reference" href="#function-shared-initialize">shared-initialize</a>,
<a class="section-reference" href="#section-ChangingInstanceClass">Changing the Class of an Instance</a>,
<a class="section-reference" href="#section-InitargRules">Rules for Initialization Arguments</a>,
<a class="section-reference" href="#section-DeclaringInitargValidity">Declaring the Validity of Initialization Arguments</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd><span class="parameter">Initargs</span> are declared as valid by using the <span class="keyword">:initarg</span>
option to <a class="macro-reference" href="#macro-defclass">defclass</a>, or by defining <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a>
for <a class="function-reference" href="#function-update-instance-for-different-class">update-instance-for-different-class</a> or <a class="function-reference" href="#function-shared-initialize">shared-initialize</a>.
The keyword name of each keyword parameter specifier in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a> of
any <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> defined on <a class="function-reference" href="#function-update-instance-for-different-class">update-instance-for-different-class</a>
or <a class="function-reference" href="#function-shared-initialize">shared-initialize</a> is declared as a valid <span class="parameter">initarg</span> name
for all <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">classes</a> for which that <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> is applicable.<br/>The value returned by <a class="function-reference" href="#function-update-instance-for-different-class">update-instance-for-different-class</a> is
ignored by <a class="function-reference" href="#function-change-class">change-class</a>.<br/></dd></dl></div><br/><br/><br/><div class="component" id="function-update-instance-for-redefined-class"><div class="header"><span class="left"><span class="name" id="function-update-instance-for-redefined-class">update-instance-for-redefined-class</span></span><span class="right"><span class="ftype">Standard Generic Function</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">update-instance-for-redefined-class</span>&nbsp;<span class="lambda-list">instance
                                added-slots discarded-slots
                                property-list
                                <span class="lambda-list-keyword">&amp;rest</span> initargs <span class="lambda-list-keyword">&amp;key</span> <span class="lambda-list-keyword">&amp;allow-other-keys</span></span>&nbsp;â†’&nbsp;<span class="return-values"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">result</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span></span></span><br/>
</dd></dl><dl><dt class="label">Method Signatures</dt><dd><span class="method"><span class="name">update-instance-for-redefined-class</span>&nbsp;<span class="lambda-list"><span class="specialized-parameter">(<span class="name">instance</span>&nbsp;<a class="type-reference" href="chapter-4.xhtml#type-standard-object">standard-object</a>)</span>
		added-slots discarded-slots
		property-list
		<span class="lambda-list-keyword">&amp;rest</span> initargs</span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">instance</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.<br/><span class="parameter">added-slots</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a>.<br/><span class="parameter">discarded-slots</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a>.<br/><span class="parameter">property-list</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a>.<br/><span class="parameter">initargs</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-initialization argument list">initialization argument list</a>.<br/><span class="parameter">result</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> <a class="function-reference" href="#function-update-instance-for-redefined-class">update-instance-for-redefined-class</a> 
is not intended to be called by programmers. Programmers may write
<a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> for it.  The <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> 
<a class="function-reference" href="#function-update-instance-for-redefined-class">update-instance-for-redefined-class</a> is called by the mechanism
activated by <a class="function-reference" href="#function-make-instances-obsolete">make-instances-obsolete</a>.<br/>The system-supplied primary <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> on 
<a class="function-reference" href="#function-update-instance-for-redefined-class">update-instance-for-redefined-class</a> checks the validity of
<span class="parameter">initargs</span> and signals an error if an <span class="parameter">initarg</span>
is supplied that is not declared as valid.  This <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> then
initializes <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a> with values according to the <span class="parameter">initargs</span>,
and initializes the newly <span class="parameter">added-slots</span> with values according
to their <span class="keyword">:initform</span> forms.  It does this by calling the generic
function <a class="function-reference" href="#function-shared-initialize">shared-initialize</a> with the following arguments: 
the <span class="parameter">instance</span>,
a list of names of the newly <span class="parameter">added-slots</span> to <span class="parameter">instance</span>,
and the <span class="parameter">initargs</span>
it received.  Newly <span class="parameter">added-slots</span> are those <a class="glossary-reference" href="chapter-26.xhtml#glossary-local slot">local slots</a> for which
no <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> of the same name exists in the old version of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a>.<br/>When <a class="function-reference" href="#function-make-instances-obsolete">make-instances-obsolete</a> is invoked or when a <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> has been
redefined and an <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> is being updated, a <span class="parameter">property-list</span> is created
that captures the slot names and values of all the <span class="parameter">discarded-slots</span> with
values in the original <span class="parameter">instance</span>.  The structure of the 
<span class="parameter">instance</span> is
transformed so that it conforms to the current class definition.  The
arguments to <a class="function-reference" href="#function-update-instance-for-redefined-class">update-instance-for-redefined-class</a> are this
transformed <span class="parameter">instance</span>, a list of <span class="parameter">added-slots</span> to the
<span class="parameter">instance</span>, a list <span class="parameter">discarded-slots</span> from the
<span class="parameter">instance</span>, and the <span class="parameter">property-list</span> 
containing the slot names and values for
<a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a> that were discarded and had values.  Included in this list of
discarded <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a> are <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a> that were local in the old <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> and are
shared in the new <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a>.<br/>
The value returned by <a class="function-reference" href="#function-update-instance-for-redefined-class">update-instance-for-redefined-class</a> is ignored.<br/></dd></dl><dl><dt class="label">Examples</dt><dd><pre><code><span class="syntax-root">  
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-defclass">defclass</a> <a class="function-reference" href="chapter-17.xhtml#function-position">position</a> <span class="syntax-symbol">()</span> <span class="syntax-symbol">()</span>)</span>
 
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-defclass">defclass</a> <span class="syntax-interned-symbol">x-y-position</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-17.xhtml#function-position">position</a>)</span>
     <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-keyword-symbol">:initform</span> <span class="syntax-number">0</span> <span class="syntax-keyword-symbol">:accessor</span> <span class="syntax-interned-symbol">position-x</span>)</span>
      <span class="syntax-cons">(<span class="syntax-interned-symbol">y</span> <span class="syntax-keyword-symbol">:initform</span> <span class="syntax-number">0</span> <span class="syntax-keyword-symbol">:accessor</span> <span class="syntax-interned-symbol">position-y</span>)</span>)</span>)</span>
 
;;; It turns out polar coordinates are used more than Cartesian 
;;; coordinates, so the representation is altered and some new
;;; accessor methods are added.
 
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-defmethod">defmethod</a> <a class="function-reference" href="#function-update-instance-for-redefined-class">update-instance-for-redefined-class</a> <span class="syntax-keyword-symbol">:before</span>
    <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">pos</span> <span class="syntax-interned-symbol">x-y-position</span>)</span> <span class="syntax-interned-symbol">added</span> <span class="syntax-interned-symbol">deleted</span> <span class="syntax-interned-symbol">plist</span> <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-key">&amp;KEY</a>)</span>
   <span class="syntax-line-comment syntax-comment">;; Transform the x-y coordinates to polar coordinates
</span>   <span class="syntax-line-comment syntax-comment">;; and store into the new slots.
</span>   <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-getf">getf</a> <span class="syntax-interned-symbol">plist</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">x</span></span>)</span>)</span>
         <span class="syntax-cons">(<span class="syntax-interned-symbol">y</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-getf">getf</a> <span class="syntax-interned-symbol">plist</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">y</span></span>)</span>)</span>)</span>
     <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">position-rho</span> <span class="syntax-interned-symbol">pos</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-sqrt">sqrt</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-*">*</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-*">*</a> <span class="syntax-interned-symbol">y</span> <span class="syntax-interned-symbol">y</span>)</span>)</span>)</span>
           <span class="syntax-cons">(<span class="syntax-interned-symbol">position-theta</span> <span class="syntax-interned-symbol">pos</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-atan">atan</a> <span class="syntax-interned-symbol">y</span> <span class="syntax-interned-symbol">x</span>)</span>)</span>)</span>)</span>
  
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-defclass">defclass</a> <span class="syntax-interned-symbol">x-y-position</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-17.xhtml#function-position">position</a>)</span>
     <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">rho</span> <span class="syntax-keyword-symbol">:initform</span> <span class="syntax-number">0</span> <span class="syntax-keyword-symbol">:accessor</span> <span class="syntax-interned-symbol">position-rho</span>)</span>
      <span class="syntax-cons">(<span class="syntax-interned-symbol">theta</span> <span class="syntax-keyword-symbol">:initform</span> <span class="syntax-number">0</span> <span class="syntax-keyword-symbol">:accessor</span> <span class="syntax-interned-symbol">position-theta</span>)</span>)</span>)</span>
  
;;; All instances of the old x-y-position class will be updated
;;; automatically.
 
;;; The new representation is given the look and feel of the old one.
 
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-defmethod">defmethod</a> <span class="syntax-interned-symbol">position-x</span> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">pos</span> <span class="syntax-interned-symbol">x-y-position</span>)</span>)</span>  
    <span class="syntax-cons">(<a class="macro-reference" href="#macro-with-slots">with-slots</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">rho</span> <span class="syntax-interned-symbol">theta</span>)</span> <span class="syntax-interned-symbol">pos</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-*">*</a> <span class="syntax-interned-symbol">rho</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-cos">cos</a> <span class="syntax-interned-symbol">theta</span>)</span>)</span>)</span>)</span>
 
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-defmethod">defmethod</a> <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-interned-symbol">position-x</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">new-x</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">pos</span> <span class="syntax-interned-symbol">x-y-position</span>)</span>)</span>
    <span class="syntax-cons">(<a class="macro-reference" href="#macro-with-slots">with-slots</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">rho</span> <span class="syntax-interned-symbol">theta</span>)</span> <span class="syntax-interned-symbol">pos</span>
      <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">y</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">position-y</span> <span class="syntax-interned-symbol">pos</span>)</span>)</span>)</span>
        <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">rho</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-sqrt">sqrt</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-*">*</a> <span class="syntax-interned-symbol">new-x</span> <span class="syntax-interned-symbol">new-x</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-*">*</a> <span class="syntax-interned-symbol">y</span> <span class="syntax-interned-symbol">y</span>)</span>)</span>)</span>
              <span class="syntax-interned-symbol">theta</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-atan">atan</a> <span class="syntax-interned-symbol">y</span> <span class="syntax-interned-symbol">new-x</span>)</span>)</span>
        <span class="syntax-interned-symbol">new-x</span>)</span>)</span>)</span>
 
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-defmethod">defmethod</a> <span class="syntax-interned-symbol">position-y</span> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">pos</span> <span class="syntax-interned-symbol">x-y-position</span>)</span>)</span>
    <span class="syntax-cons">(<a class="macro-reference" href="#macro-with-slots">with-slots</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">rho</span> <span class="syntax-interned-symbol">theta</span>)</span> <span class="syntax-interned-symbol">pos</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-*">*</a> <span class="syntax-interned-symbol">rho</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-sin">sin</a> <span class="syntax-interned-symbol">theta</span>)</span>)</span>)</span>)</span>
 
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-defmethod">defmethod</a> <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-interned-symbol">position-y</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">new-y</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">pos</span> <span class="syntax-interned-symbol">x-y-position</span>)</span>)</span>
    <span class="syntax-cons">(<a class="macro-reference" href="#macro-with-slots">with-slots</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">rho</span> <span class="syntax-interned-symbol">theta</span>)</span> <span class="syntax-interned-symbol">pos</span>
      <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">position-x</span> <span class="syntax-interned-symbol">pos</span>)</span>)</span>)</span>
        <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">rho</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-sqrt">sqrt</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-*">*</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-*">*</a> <span class="syntax-interned-symbol">new-y</span> <span class="syntax-interned-symbol">new-y</span>)</span>)</span>)</span>
              <span class="syntax-interned-symbol">theta</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-atan">atan</a> <span class="syntax-interned-symbol">new-y</span> <span class="syntax-interned-symbol">x</span>)</span>)</span>
        <span class="syntax-interned-symbol">new-y</span>)</span>)</span>)</span>
 
</span></code></pre><br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd>The system-supplied primary <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> on 
<a class="function-reference" href="#function-update-instance-for-redefined-class">update-instance-for-redefined-class</a> signals an error if an
<span class="parameter">initarg</span> is supplied that is not declared as valid.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="function-reference" href="#function-make-instances-obsolete">make-instances-obsolete</a>,
<a class="function-reference" href="#function-shared-initialize">shared-initialize</a>,
<a class="section-reference" href="chapter-4.xhtml#section-ClassReDef">Redefining Classes</a>,
<a class="section-reference" href="#section-InitargRules">Rules for Initialization Arguments</a>,
<a class="section-reference" href="#section-DeclaringInitargValidity">Declaring the Validity of Initialization Arguments</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd><span class="parameter">Initargs</span> are declared as valid by using the <span class="keyword">:initarg</span>
option to <a class="macro-reference" href="#macro-defclass">defclass</a>, or by defining <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> for
<a class="function-reference" href="#function-update-instance-for-redefined-class">update-instance-for-redefined-class</a> or <a class="function-reference" href="#function-shared-initialize">shared-initialize</a>.
The keyword name of each keyword parameter specifier in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a> of
any <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> defined on 
<a class="function-reference" href="#function-update-instance-for-redefined-class">update-instance-for-redefined-class</a> or 
<a class="function-reference" href="#function-shared-initialize">shared-initialize</a> is declared as a valid <span class="parameter">initarg</span> name
for all <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">classes</a> for which that <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> is applicable.<br/></dd></dl></div><br/><br/><br/><div class="component" id="function-change-class"><div class="header"><span class="left"><span class="name" id="function-change-class">change-class</span></span><span class="right"><span class="ftype">Standard Generic Function</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">change-class</span>&nbsp;<span class="lambda-list">instance new-class <span class="lambda-list-keyword">&amp;key</span> <span class="lambda-list-keyword">&amp;allow-other-keys</span></span>&nbsp;â†’&nbsp;<span class="return-values">instance</span></span><br/>
</dd></dl><dl><dt class="label">Method Signatures</dt><dd><span class="method"><span class="name">change-class</span>&nbsp;<span class="lambda-list"><span class="specialized-parameter">(<span class="name">instance</span>&nbsp;<a class="type-reference" href="chapter-4.xhtml#type-standard-object">standard-object</a>)</span>
			 <span class="specialized-parameter">(<span class="name">new-class</span>&nbsp;<a class="type-reference" href="chapter-4.xhtml#type-standard-class">standard-class</a>)</span>
			 <span class="lambda-list-keyword">&amp;rest</span> initargs</span></span><br/><br/><span class="method"><span class="name">change-class</span>&nbsp;<span class="lambda-list"><span class="specialized-parameter">(<span class="name">instance</span>&nbsp;<a class="type-reference" href="chapter-4.xhtml#type-t">t</a>)</span>
		         <span class="specialized-parameter">(<span class="name">new-class</span>&nbsp;<a class="type-reference" href="chapter-10.xhtml#type-symbol">symbol</a>)</span>
			 <span class="lambda-list-keyword">&amp;rest</span> initargs</span></span><br/>
</dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">instance</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.<br/><span class="parameter">new-class</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-class designator">class designator</a>.<br/><span class="parameter">initargs</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-initialization argument list">initialization argument list</a>.

</dd></dl><dl><dt class="label">Description</dt><dd>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> <a class="function-reference" href="#function-change-class">change-class</a> changes the 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> of an <span class="parameter">instance</span> to <span class="parameter">new-class</span>.  
It destructively modifies and returns the <span class="parameter">instance</span>.<br/>If in the old <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> there is any <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> of the 
same name as a local <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> in the <span class="parameter">new-class</span>, 
the value of that <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> is retained.  This means that if 
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> has a value, the value returned by <a class="function-reference" href="#function-slot-value">slot-value</a>
after <a class="function-reference" href="#function-change-class">change-class</a> is invoked is <a class="function-reference" href="chapter-5.xhtml#function-eql">eql</a> to the
value returned by <a class="function-reference" href="#function-slot-value">slot-value</a> before <a class="function-reference" href="#function-change-class">change-class</a> is
invoked.  Similarly, if the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> was unbound, it remains
unbound.  The other <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a> are initialized as described in 
<a class="section-reference" href="#section-ChangingInstanceClass">Changing the Class of an Instance</a>.<br/>After completing all other actions, <a class="function-reference" href="#function-change-class">change-class</a> invokes
<a class="function-reference" href="#function-update-instance-for-different-class">update-instance-for-different-class</a>.  The
generic function <a class="function-reference" href="#function-update-instance-for-different-class">update-instance-for-different-class</a> can be used
to assign values to slots in the transformed instance.
See <span class="section-reference error">section:InitNewLocalSlots.</span> 
If the second of the above <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> is selected, 
that <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> invokes <a class="function-reference" href="#function-change-class">change-class</a> 
on <span class="parameter">instance</span>, <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="#function-find-class">find-class</a> <span class="parameter">new-class</span>)</span>
</span></code></pre>,
and the <span class="parameter">initargs</span>.
 
</dd></dl><dl><dt class="label">Examples</dt><dd><pre><code><span class="syntax-root"> 
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-defclass">defclass</a> <a class="function-reference" href="chapter-17.xhtml#function-position">position</a> <span class="syntax-symbol">()</span> <span class="syntax-symbol">()</span>)</span>
  
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-defclass">defclass</a> <span class="syntax-interned-symbol">x-y-position</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-17.xhtml#function-position">position</a>)</span>
     <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-keyword-symbol">:initform</span> <span class="syntax-number">0</span> <span class="syntax-keyword-symbol">:initarg</span> <span class="syntax-keyword-symbol">:x</span>)</span>
      <span class="syntax-cons">(<span class="syntax-interned-symbol">y</span> <span class="syntax-keyword-symbol">:initform</span> <span class="syntax-number">0</span> <span class="syntax-keyword-symbol">:initarg</span> <span class="syntax-keyword-symbol">:y</span>)</span>)</span>)</span>
  
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-defclass">defclass</a> <span class="syntax-interned-symbol">rho-theta-position</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-17.xhtml#function-position">position</a>)</span>
     <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">rho</span> <span class="syntax-keyword-symbol">:initform</span> <span class="syntax-number">0</span>)</span>
      <span class="syntax-cons">(<span class="syntax-interned-symbol">theta</span> <span class="syntax-keyword-symbol">:initform</span> <span class="syntax-number">0</span>)</span>)</span>)</span>
  
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-defmethod">defmethod</a> <a class="function-reference" href="#function-update-instance-for-different-class">update-instance-for-different-class</a> <span class="syntax-keyword-symbol">:before</span> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">old</span> <span class="syntax-interned-symbol">x-y-position</span>)</span> 
                                                         <span class="syntax-cons">(<span class="syntax-interned-symbol">new</span> <span class="syntax-interned-symbol">rho-theta-position</span>)</span>
                                                         <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-key">&amp;KEY</a>)</span>
   <span class="syntax-line-comment syntax-comment">;; Copy the position information from old to new to make new
</span>   <span class="syntax-line-comment syntax-comment">;; be a rho-theta-position at the same position as old.
</span>   <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-cons">(<a class="function-reference" href="#function-slot-value">slot-value</a> <span class="syntax-interned-symbol">old</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">x</span></span>)</span>)</span>
         <span class="syntax-cons">(<span class="syntax-interned-symbol">y</span> <span class="syntax-cons">(<a class="function-reference" href="#function-slot-value">slot-value</a> <span class="syntax-interned-symbol">old</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">y</span></span>)</span>)</span>)</span>
     <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="function-reference" href="#function-slot-value">slot-value</a> <span class="syntax-interned-symbol">new</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">rho</span></span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-sqrt">sqrt</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-*">*</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-*">*</a> <span class="syntax-interned-symbol">y</span> <span class="syntax-interned-symbol">y</span>)</span>)</span>)</span>
           <span class="syntax-cons">(<a class="function-reference" href="#function-slot-value">slot-value</a> <span class="syntax-interned-symbol">new</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">theta</span></span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-atan">atan</a> <span class="syntax-interned-symbol">y</span> <span class="syntax-interned-symbol">x</span>)</span>)</span>)</span>)</span>
  
;;; At this point an instance of the class x-y-position can be
;;; changed to be an instance of the class rho-theta-position using
;;; change-class:
 
 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">p1</span> <span class="syntax-cons">(<a class="function-reference" href="#function-make-instance">make-instance</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">x-y-position</span></span> <span class="syntax-keyword-symbol">:x</span> <span class="syntax-number">2</span> <span class="syntax-keyword-symbol">:y</span> <span class="syntax-number">0</span>)</span>)</span>
  
 <span class="syntax-cons">(<a class="function-reference" href="#function-change-class">change-class</a> <span class="syntax-interned-symbol">p1</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">rho-theta-position</span></span>)</span>
  
;;; The result is that the instance bound to p1 is now an instance of
;;; the class rho-theta-position.   The update-instance-for-different-class
;;; method performed the initialization of the rho and theta slots based
;;; on the value of the x and y slots, which were maintained by
;;; the old instance.
 
</span></code></pre><br/></dd></dl><dl><dt class="label">Examples</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="function-reference" href="#function-update-instance-for-different-class">update-instance-for-different-class</a>,
<a class="section-reference" href="#section-ChangingInstanceClass">Changing the Class of an Instance</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd>The generic function <a class="function-reference" href="#function-change-class">change-class</a> has several semantic
difficulties.  First, it performs a destructive operation that can be
invoked within a <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> on an <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> that was used to select that
<a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a>. 
When multiple <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> are involved because <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> are being
combined, the <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> currently executing or about to be executed may
no longer be applicable.  Second, some implementations might use
compiler optimizations of slot <a class="glossary-reference" href="chapter-26.xhtml#glossary-access">access</a>, and when the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> of an
<a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> is changed the assumptions the compiler made might be
violated.  This implies that a programmer must not use
<a class="function-reference" href="#function-change-class">change-class</a> inside a <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> if any 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> for that <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a>
<a class="glossary-reference" href="chapter-26.xhtml#glossary-access">access</a> any <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a>, or the results are undefined.<br/></dd></dl></div><br/><br/><br/><div class="component" id="function-slot-boundp"><div class="header"><span class="left"><span class="name" id="function-slot-boundp">slot-boundp</span></span><span class="right"><span class="ftype">Function</span></span></div><br/>
<dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">slot-boundp</span>&nbsp;<span class="lambda-list">instance slot-name</span>&nbsp;â†’&nbsp;<span class="return-values">generalized-boolean</span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">instance</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.<br/><span class="parameter">slot-name</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> naming a <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> of <span class="parameter">instance</span>.<br/><span class="parameter">generalized-boolean</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generalized boolean">generalized boolean</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>Returns <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a> if the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> named <span class="parameter">slot-name</span> in <span class="parameter">instance</span> is bound;
otherwise, returns <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>.<br/></dd></dl><dl><dt class="label">Examples</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd>If no <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> <span class="parameter">slot-name</span> exists in the 
<span class="parameter">instance</span>, <a class="function-reference" href="#function-slot-missing">slot-missing</a> is called as follows:<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="#function-slot-missing">slot-missing</a> <span class="syntax-cons">(<a class="function-reference" href="#function-class-of">class-of</a> <span class="parameter">instance</span>)</span>
              <span class="parameter">instance</span>
              <span class="parameter">slot-name</span>
              <span class="syntax-quote">'<a class="function-reference" href="#function-slot-boundp">slot-boundp</a></span>)</span>
</span></code></pre><br/>(If <a class="function-reference" href="#function-slot-missing">slot-missing</a> is invoked and returns a value,
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-boolean equivalent">boolean equivalent</a> to its <a class="glossary-reference" href="chapter-26.xhtml#glossary-primary value">primary value</a> 
is returned by <a class="function-reference" href="#function-slot-boundp">slot-boundp</a>.)

The specific behavior depends on <span class="parameter">instance</span>'s <a class="glossary-reference" href="chapter-26.xhtml#glossary-metaclass">metaclass</a>.
An error is never signaled if <span class="parameter">instance</span> has <a class="glossary-reference" href="chapter-26.xhtml#glossary-metaclass">metaclass</a> <a class="type-reference" href="chapter-4.xhtml#type-standard-class">standard-class</a>.
An error is always signaled if <span class="parameter">instance</span> has <a class="glossary-reference" href="chapter-26.xhtml#glossary-metaclass">metaclass</a> <a class="type-reference" href="chapter-4.xhtml#type-built-in-class">built-in-class</a>.
The consequences are undefined if <span class="parameter">instance</span> has any other <a class="glossary-reference" href="chapter-26.xhtml#glossary-metaclass">metaclass</a>&ndash;an error
might or might not be signaled in this situation.  Note in particular that the behavior
for <a class="glossary-reference" href="chapter-26.xhtml#glossary-condition">conditions</a> and <span class="glossary-reference error">glossary:structures</span> is not specified.
 
</dd></dl><dl><dt class="label">See Also</dt><dd><a class="function-reference" href="#function-slot-makunbound">slot-makunbound</a>,
<a class="function-reference" href="#function-slot-missing">slot-missing</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="#function-slot-boundp">slot-boundp</a> allows for writing 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-after method">after methods</a> on <a class="function-reference" href="#function-initialize-instance">initialize-instance</a> in order to initialize only
those <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a> that have not already been bound.<br/>  Although no <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation">implementation</a> is required to do so,
  implementors are strongly encouraged to implement the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="#function-slot-boundp">slot-boundp</a> using 
  the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <pre><code><span class="syntax-root"><span class="syntax-symbol">#2
Â¶</span></span></code></pre> described in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-metaobject protocol">Metaobject Protocol</a>.
<br/></dd></dl></div><br/><br/><br/><div class="component" id="function-slot-exists-p"><div class="header"><span class="left"><span class="name" id="function-slot-exists-p">slot-exists-p</span></span><span class="right"><span class="ftype">Function</span></span></div><br/>
<dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">slot-exists-p</span>&nbsp;<span class="lambda-list">object slot-name</span>&nbsp;â†’&nbsp;<span class="return-values">generalized-boolean</span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">object</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.
 
<span class="parameter">slot-name</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>.<br/><span class="parameter">generalized-boolean</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generalized boolean">generalized boolean</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>Returns <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a> if the <span class="parameter">object</span> has
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> named <span class="parameter">slot-name</span>.<br/></dd></dl><dl><dt class="label">Examples</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Affected By</dt><dd><a class="macro-reference" href="#macro-defclass">defclass</a>,
<a class="macro-reference" href="chapter-8.xhtml#macro-defstruct">defstruct</a><br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="macro-reference" href="#macro-defclass">defclass</a>,
<a class="function-reference" href="#function-slot-missing">slot-missing</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd>  Although no <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation">implementation</a> is required to do so,
  implementors are strongly encouraged to implement the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="#function-slot-exists-p">slot-exists-p</a> using 
  the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <pre><code><span class="syntax-root"><span class="syntax-symbol">#2
Â¶</span></span></code></pre> described in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-metaobject protocol">Metaobject Protocol</a>.
<br/></dd></dl></div><br/><br/><br/><div class="component" id="function-slot-makunbound"><div class="header"><span class="left"><span class="name" id="function-slot-makunbound">slot-makunbound</span></span><span class="right"><span class="ftype">Function</span></span></div><br/>
<dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">slot-makunbound</span>&nbsp;<span class="lambda-list">instance slot-name</span>&nbsp;â†’&nbsp;<span class="return-values">instance</span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">instance</span>&mdash;<a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a>.<br/><span class="parameter">slot-name</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="#function-slot-makunbound">slot-makunbound</a> restores a <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> 
of the name <span class="parameter">slot-name</span> in an <span class="parameter">instance</span> to
the unbound state.<br/></dd></dl><dl><dt class="label">Examples</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd>If no <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> of the name <span class="parameter">slot-name</span> exists in the 
<span class="parameter">instance</span>, <a class="function-reference" href="#function-slot-missing">slot-missing</a> is called as follows:<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="#function-slot-missing">slot-missing</a> <span class="syntax-cons">(<a class="function-reference" href="#function-class-of">class-of</a> <span class="parameter">instance</span>)</span>
              <span class="parameter">instance</span>
              <span class="parameter">slot-name</span>
              <span class="syntax-quote">'<a class="function-reference" href="#function-slot-makunbound">slot-makunbound</a></span>)</span>
</span></code></pre><br/>(Any values returned by <a class="function-reference" href="#function-slot-missing">slot-missing</a> in this case are
ignored by <a class="function-reference" href="#function-slot-makunbound">slot-makunbound</a>.)
 
The specific behavior depends on <span class="parameter">instance</span>'s <a class="glossary-reference" href="chapter-26.xhtml#glossary-metaclass">metaclass</a>.
An error is never signaled if <span class="parameter">instance</span> has <a class="glossary-reference" href="chapter-26.xhtml#glossary-metaclass">metaclass</a> <a class="type-reference" href="chapter-4.xhtml#type-standard-class">standard-class</a>.
An error is always signaled if <span class="parameter">instance</span> has <a class="glossary-reference" href="chapter-26.xhtml#glossary-metaclass">metaclass</a> <a class="type-reference" href="chapter-4.xhtml#type-built-in-class">built-in-class</a>.
The consequences are undefined if <span class="parameter">instance</span> has any other <a class="glossary-reference" href="chapter-26.xhtml#glossary-metaclass">metaclass</a>&ndash;an error
might or might not be signaled in this situation.  Note in particular that the behavior
for <a class="glossary-reference" href="chapter-26.xhtml#glossary-condition">conditions</a> and <span class="glossary-reference error">glossary:structures</span> is not specified.
 
</dd></dl><dl><dt class="label">See Also</dt><dd><a class="function-reference" href="#function-slot-boundp">slot-boundp</a>,
<a class="function-reference" href="#function-slot-missing">slot-missing</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd>  Although no <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation">implementation</a> is required to do so,
  implementors are strongly encouraged to implement the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="#function-slot-makunbound">slot-makunbound</a> using 
  the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <pre><code><span class="syntax-root"><span class="syntax-symbol">#2
Â¶</span></span></code></pre> described in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-metaobject protocol">Metaobject Protocol</a>.
<br/></dd></dl></div><br/><br/><br/><div class="component" id="function-slot-missing"><div class="header"><span class="left"><span class="name" id="function-slot-missing">slot-missing</span></span><span class="right"><span class="ftype">Standard Generic Function</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">slot-missing</span>&nbsp;<span class="lambda-list">class object slot-name operation <span class="lambda-list-keyword">&amp;optional</span> new-value</span>&nbsp;â†’&nbsp;<span class="return-values"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">result</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span></span></span><br/><br/></dd></dl><dl><dt class="label">Method Signatures</dt><dd><span class="method"><span class="name">slot-missing</span>&nbsp;<span class="lambda-list"><span class="specialized-parameter">(<span class="name">class</span>&nbsp;<a class="type-reference" href="chapter-4.xhtml#type-t">t</a>)</span>
				   object slot-name
			     operation <span class="lambda-list-keyword">&amp;optional</span> new-value</span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">class</span>&mdash;the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> of <span class="parameter">object</span>.<br/><span class="parameter">object</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.  
<span class="parameter">slot-name</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> (the <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> of a would-be <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>).<br/><span class="parameter">operation</span>&mdash;one of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbols</a>
		    <span class="function-reference error">function:setf</span>,
		    <a class="function-reference" href="#function-slot-boundp">slot-boundp</a>,
		    <a class="function-reference" href="#function-slot-makunbound">slot-makunbound</a>,
		 or <a class="function-reference" href="#function-slot-value">slot-value</a>.<br/><span class="parameter">new-value</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.<br/><span class="parameter">result</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>The generic function <a class="function-reference" href="#function-slot-missing">slot-missing</a> is invoked when an attempt is
made to <a class="glossary-reference" href="chapter-26.xhtml#glossary-access">access</a> a <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> in an <span class="parameter">object</span> whose 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-metaclass">metaclass</a> is <a class="type-reference" href="chapter-4.xhtml#type-standard-class">standard-class</a>
and the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> of the name <span class="parameter">slot-name</span>
is not a <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> of a
<a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> in that <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a>. 
The default <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> signals an error.<br/>The generic function <a class="function-reference" href="#function-slot-missing">slot-missing</a> is not intended to be called by
programmers.  Programmers may write <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> for it.<br/>The generic function <a class="function-reference" href="#function-slot-missing">slot-missing</a> may be called during
evaluation of <a class="function-reference" href="#function-slot-value">slot-value</a>, <span class="function-reference error">function:(setf slot-value)</span>, 
<a class="function-reference" href="#function-slot-boundp">slot-boundp</a>, and <a class="function-reference" href="#function-slot-makunbound">slot-makunbound</a>.  For each
of these operations the corresponding <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> 
for the <span class="parameter">operation</span>
argument is <span class="symbol-reference error">symbol:slot-value</span>, <a class="symbol-reference" href="chapter-25.xhtml#symbol-setf">setf</a>, <span class="symbol-reference error">symbol:slot-boundp</span>,
and <span class="symbol-reference error">symbol:slot-makunbound</span> respectively.<br/>The optional <span class="parameter">new-value</span> argument to <a class="function-reference" href="#function-slot-missing">slot-missing</a> is used
when the operation is attempting to set the value of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>.<br/>If <a class="function-reference" href="#function-slot-missing">slot-missing</a> returns, its values will be treated as follows:<br/><ul><li>If the <span class="parameter">operation</span> is <a class="symbol-reference" href="chapter-25.xhtml#symbol-setf">setf</a> or <span class="symbol-reference error">symbol:slot-makunbound</span>,
any <span class="glossary-reference error">glossary:values</span> will be ignored by the caller.<br/></li><li>If the <span class="parameter">operation</span> is <span class="symbol-reference error">symbol:slot-value</span>,
only the <a class="glossary-reference" href="chapter-26.xhtml#glossary-primary value">primary value</a> will be used by the caller,
and all other values will be ignored.<br/></li><li>If the <span class="parameter">operation</span> is <span class="symbol-reference error">symbol:slot-boundp</span>,
any <a class="glossary-reference" href="chapter-26.xhtml#glossary-boolean equivalent">boolean equivalent</a> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-primary value">primary value</a>
of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> might be is used,
and all other values will be ignored.
</li></ul>
</dd></dl><dl><dt class="label">Examples</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd>The default <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> on <a class="function-reference" href="#function-slot-missing">slot-missing</a> 
signals an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-9.xhtml#type-error">error</a>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="macro-reference" href="#macro-defclass">defclass</a>,
<a class="function-reference" href="#function-slot-exists-p">slot-exists-p</a>,
<a class="function-reference" href="#function-slot-value">slot-value</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd>The set of arguments (including the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> of the instance) facilitates
defining methods on the metaclass for <a class="function-reference" href="#function-slot-missing">slot-missing</a>.<br/></dd></dl></div><br/><br/><br/><div class="component" id="function-slot-unbound"><div class="header"><span class="left"><span class="name" id="function-slot-unbound">slot-unbound</span></span><span class="right"><span class="ftype">Standard Generic Function</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">slot-unbound</span>&nbsp;<span class="lambda-list">class instance slot-name</span>&nbsp;â†’&nbsp;<span class="return-values"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">result</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span></span></span><br/><br/></dd></dl><dl><dt class="label">Method Signatures</dt><dd><span class="method"><span class="name">slot-unbound</span>&nbsp;<span class="lambda-list"><span class="specialized-parameter">(<span class="name">class</span>&nbsp;<a class="type-reference" href="chapter-4.xhtml#type-t">t</a>)</span>
		       instance slot-name</span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">class</span>&mdash;the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> of the <span class="parameter">instance</span>.<br/><span class="parameter">instance</span>&mdash;the <span class="parameter">instance</span> in which an attempt
		   was made to <a class="glossary-reference" href="chapter-26.xhtml#glossary-read">read</a> the <a class="glossary-reference" href="chapter-26.xhtml#glossary-unbound">unbound</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>.<br/><span class="parameter">slot-name</span>&mdash;the <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-unbound">unbound</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>.<br/><span class="parameter">result</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>The generic function <a class="function-reference" href="#function-slot-unbound">slot-unbound</a> is called when an
unbound <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> is read in
an <span class="parameter">instance</span> whose metaclass is <a class="type-reference" href="chapter-4.xhtml#type-standard-class">standard-class</a>.
The default <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> signals an error 
 
of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="#type-unbound-slot">unbound-slot</a>.
The name slot of the 
<a class="type-reference" href="#type-unbound-slot">unbound-slot</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-condition">condition</a> is initialized
  to the name of the offending variable, and the instance slot
  of the <a class="type-reference" href="#type-unbound-slot">unbound-slot</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-condition">condition</a> is initialized to the offending instance.
 <br/> 
The generic function <a class="function-reference" href="#function-slot-unbound">slot-unbound</a> is not intended to be called
by programmers.  Programmers may write <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> for it.
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="#function-slot-unbound">slot-unbound</a> is called only 
indirectly by <a class="function-reference" href="#function-slot-value">slot-value</a>.<br/>If <a class="function-reference" href="#function-slot-unbound">slot-unbound</a> returns, 
only the <a class="glossary-reference" href="chapter-26.xhtml#glossary-primary value">primary value</a> will be used by the caller,
and all other values will be ignored.

</dd></dl><dl><dt class="label">Examples</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd> 
The default <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> on <a class="function-reference" href="#function-slot-unbound">slot-unbound</a>
signals an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="#type-unbound-slot">unbound-slot</a>.
 <br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="function-reference" href="#function-slot-makunbound">slot-makunbound</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd>An unbound <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> may occur if no <span class="keyword">:initform</span> form was
specified for the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> and the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> value has not been set,
or if <a class="function-reference" href="#function-slot-makunbound">slot-makunbound</a> has been called on the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>.<br/></dd></dl></div><br/><br/><br/><div class="component" id="function-slot-value"><div class="header"><span class="left"><span class="name" id="function-slot-value">slot-value</span></span><span class="right"><span class="ftype">Accessor</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">slot-value</span>&nbsp;<span class="lambda-list">object slot-name</span>&nbsp;â†’&nbsp;<span class="return-values">value</span></span><br/>
<span class="setf-definition">(setf (<span class="name">slot-value</span>&nbsp;<span class="lambda-list">object slot-name</span>) <span class="new-value">new-value</span>)</span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">object</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.  
<span class="parameter">slot-name</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>.<br/><span class="parameter">value</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.<br/><span class="parameter">new-value</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="#function-slot-value">slot-value</a> returns the <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>
named <span class="parameter">slot-name</span> in the <span class="parameter">object</span>.
If there is no <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> named <span class="parameter">slot-name</span>, <a class="function-reference" href="#function-slot-missing">slot-missing</a> is called.
If the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> is unbound, <a class="function-reference" href="#function-slot-unbound">slot-unbound</a> is called.<br/>The macro <a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> can be used with <a class="function-reference" href="#function-slot-value">slot-value</a> 
to change the value of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>. <br/></dd></dl><dl><dt class="label">Examples</dt><dd><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="macro-reference" href="#macro-defclass">defclass</a> <span class="syntax-interned-symbol">foo</span> <span class="syntax-symbol">()</span> 
   <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-keyword-symbol">:accessor</span> <span class="syntax-interned-symbol">foo-a</span> <span class="syntax-keyword-symbol">:initarg</span> <span class="syntax-keyword-symbol">:a</span> <span class="syntax-keyword-symbol">:initform</span> <span class="syntax-number">1</span>)</span>
    <span class="syntax-cons">(<span class="syntax-interned-symbol">b</span> <span class="syntax-keyword-symbol">:accessor</span> <span class="syntax-interned-symbol">foo-b</span> <span class="syntax-keyword-symbol">:initarg</span> <span class="syntax-keyword-symbol">:b</span>)</span>
    <span class="syntax-cons">(<span class="syntax-interned-symbol">c</span> <span class="syntax-keyword-symbol">:accessor</span> <span class="syntax-interned-symbol">foo-c</span> <span class="syntax-keyword-symbol">:initform</span> <span class="syntax-number">3</span>)</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-verbatim">#&lt;STANDARD-CLASS FOO 244020371&gt;</span>
 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">foo1</span> <span class="syntax-cons">(<a class="function-reference" href="#function-make-instance">make-instance</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">foo</span></span> <span class="syntax-keyword-symbol">:a</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">one</span></span> <span class="syntax-keyword-symbol">:b</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">two</span></span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-verbatim">#&lt;FOO 36325624&gt;</span>
 <span class="syntax-cons">(<a class="function-reference" href="#function-slot-value">slot-value</a> <span class="syntax-interned-symbol">foo1</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">a</span></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">ONE</span>
 <span class="syntax-cons">(<a class="function-reference" href="#function-slot-value">slot-value</a> <span class="syntax-interned-symbol">foo1</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">b</span></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">TWO</span>
 <span class="syntax-cons">(<a class="function-reference" href="#function-slot-value">slot-value</a> <span class="syntax-interned-symbol">foo1</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">c</span></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">3</span>
 <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="function-reference" href="#function-slot-value">slot-value</a> <span class="syntax-interned-symbol">foo1</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">a</span></span>)</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">uno</span></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">UNO</span>
 <span class="syntax-cons">(<a class="function-reference" href="#function-slot-value">slot-value</a> <span class="syntax-interned-symbol">foo1</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">a</span></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">UNO</span>
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-defmethod">defmethod</a> <span class="syntax-interned-symbol">foo-method</span> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">foo</span>)</span>)</span>
   <span class="syntax-cons">(<a class="function-reference" href="#function-slot-value">slot-value</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">a</span></span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-verbatim">#&lt;STANDARD-METHOD FOO-METHOD (FOO) 42720573&gt;</span>
 <span class="syntax-cons">(<span class="syntax-interned-symbol">foo-method</span> <span class="syntax-interned-symbol">foo1</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">UNO</span>
</span></code></pre><br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd>If an attempt is made to read a <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> and no <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> of
the name <span class="parameter">slot-name</span> exists in the <span class="parameter">object</span>,
<a class="function-reference" href="#function-slot-missing">slot-missing</a> is called as follows:<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="#function-slot-missing">slot-missing</a> <span class="syntax-cons">(<a class="function-reference" href="#function-class-of">class-of</a> <span class="parameter">object</span>)</span>
              <span class="parameter">object</span>
              <span class="parameter">slot-name</span>
              <span class="syntax-quote">'<a class="function-reference" href="#function-slot-value">slot-value</a></span>)</span>
</span></code></pre><br/>(If <a class="function-reference" href="#function-slot-missing">slot-missing</a> is invoked, its <a class="glossary-reference" href="chapter-26.xhtml#glossary-primary value">primary value</a> 
 is returned by <a class="function-reference" href="#function-slot-value">slot-value</a>.)

If an attempt is made to write a <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> and no <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> of
the name <span class="parameter">slot-name</span> exists in the <span class="parameter">object</span>,
<a class="function-reference" href="#function-slot-missing">slot-missing</a> is called as follows:<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="#function-slot-missing">slot-missing</a> <span class="syntax-cons">(<a class="function-reference" href="#function-class-of">class-of</a> <span class="parameter">object</span>)</span>
              <span class="parameter">object</span>
              <span class="parameter">slot-name</span>
              <span class="syntax-quote">'<a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a></span>
              <span class="parameter">new-value</span>)</span>
</span></code></pre><br/>(If <a class="function-reference" href="#function-slot-missing">slot-missing</a> returns in this case, any <span class="glossary-reference error">glossary:values</span> are ignored.)

The specific behavior depends on <span class="parameter">object</span>'s <a class="glossary-reference" href="chapter-26.xhtml#glossary-metaclass">metaclass</a>.
An error is never signaled if <span class="parameter">object</span> has <a class="glossary-reference" href="chapter-26.xhtml#glossary-metaclass">metaclass</a> <a class="type-reference" href="chapter-4.xhtml#type-standard-class">standard-class</a>.
An error is always signaled if <span class="parameter">object</span> has <a class="glossary-reference" href="chapter-26.xhtml#glossary-metaclass">metaclass</a> <a class="type-reference" href="chapter-4.xhtml#type-built-in-class">built-in-class</a>.
The consequences are 
unspecified
if <span class="parameter">object</span> has any other <a class="glossary-reference" href="chapter-26.xhtml#glossary-metaclass">metaclass</a>&ndash;an error
might or might not be signaled in this situation.  Note in particular that the behavior
for <a class="glossary-reference" href="chapter-26.xhtml#glossary-condition">conditions</a> and <span class="glossary-reference error">glossary:structures</span> is not specified.

</dd></dl><dl><dt class="label">See Also</dt><dd><a class="function-reference" href="#function-slot-missing">slot-missing</a>,
<a class="function-reference" href="#function-slot-unbound">slot-unbound</a>,
<a class="macro-reference" href="#macro-with-slots">with-slots</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd>  Although no <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation">implementation</a> is required to do so,
  implementors are strongly encouraged to implement the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="#function-slot-value">slot-value</a> using 
  the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <pre><code><span class="syntax-root"><span class="syntax-symbol">#2
Â¶</span></span></code></pre> described in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-metaobject protocol">Metaobject Protocol</a>.
<br/>Implementations may optimize <a class="function-reference" href="#function-slot-value">slot-value</a> by compiling it inline.<br/></dd></dl></div><br/><br/><br/><div class="component" id="function-method-qualifiers"><div class="header"><span class="left"><span class="name" id="function-method-qualifiers">method-qualifiers</span></span><span class="right"><span class="ftype">Standard Generic Function</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">method-qualifiers</span>&nbsp;<span class="lambda-list">method</span>&nbsp;â†’&nbsp;<span class="return-values">qualifiers</span></span><br/><br/></dd></dl><dl><dt class="label">Method Signatures</dt><dd><span class="method"><span class="name">method-qualifiers</span>&nbsp;<span class="lambda-list"><span class="specialized-parameter">(<span class="name">method</span>&nbsp;<a class="type-reference" href="chapter-4.xhtml#type-standard-method">standard-method</a>)</span></span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">method</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a>.<br/><span class="parameter">qualifiers</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-proper list">proper list</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>Returns a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifiers</a> of the <span class="parameter">method</span>.<br/></dd></dl><dl><dt class="label">Examples</dt><dd><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="macro-reference" href="#macro-defmethod">defmethod</a> <span class="syntax-interned-symbol">some-gf</span> <span class="syntax-keyword-symbol">:before</span> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <a class="type-reference" href="chapter-12.xhtml#type-integer">integer</a>)</span>)</span> <span class="syntax-interned-symbol">a</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-verbatim">#&lt;STANDARD-METHOD SOME-GF (:BEFORE) (INTEGER) 42736540&gt;</span>
 <span class="syntax-cons">(<a class="function-reference" href="#function-method-qualifiers">method-qualifiers</a> <a class="function-reference" href="chapter-12.xhtml#function-*">*</a>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-keyword-symbol">:BEFORE</span>)</span>
</span></code></pre><br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="macro-reference" href="#macro-define-method-combination">define-method-combination</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd><span class="none">None</span>.<br/></dd></dl></div><br/><br/><br/><div class="component" id="function-no-applicable-method"><div class="header"><span class="left"><span class="name" id="function-no-applicable-method">no-applicable-method</span></span><span class="right"><span class="ftype">Standard Generic Function</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">no-applicable-method</span>&nbsp;<span class="lambda-list">generic-function <span class="lambda-list-keyword">&amp;rest</span> function-arguments</span>&nbsp;â†’&nbsp;<span class="return-values"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">result</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span></span></span><br/><br/></dd></dl><dl><dt class="label">Method Signatures</dt><dd><span class="method"><span class="name">no-applicable-method</span>&nbsp;<span class="lambda-list"><span class="specialized-parameter">(<span class="name">generic-function</span>&nbsp;<a class="type-reference" href="chapter-4.xhtml#type-t">t</a>)</span>
				     <span class="lambda-list-keyword">&amp;rest</span> function-arguments</span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">generic-function</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> 
			   on which no <a class="glossary-reference" href="chapter-26.xhtml#glossary-applicable method">applicable method</a> was found.  <br/><span class="parameter">function-arguments</span>&mdash;<a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">arguments</a> to the <span class="parameter">generic-function</span>.<br/><span class="parameter">result</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>The generic function <a class="function-reference" href="#function-no-applicable-method">no-applicable-method</a> is called when a
<a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> 
is invoked
and no <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> on that <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> is applicable.
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-default method">default method</a> signals an error.<br/>The generic function <a class="function-reference" href="#function-no-applicable-method">no-applicable-method</a> is not intended
to be called by programmers.  Programmers may write <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> for it.<br/></dd></dl><dl><dt class="label">Examples</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd>The default <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> signals an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-9.xhtml#type-error">error</a>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd/></dl><dl><dt class="label">Notes</dt><dd><span class="none">None</span>.<br/></dd></dl></div><br/><br/><br/><div class="component" id="function-no-next-method"><div class="header"><span class="left"><span class="name" id="function-no-next-method">no-next-method</span></span><span class="right"><span class="ftype">Standard Generic Function</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">no-next-method</span>&nbsp;<span class="lambda-list">generic-function method <span class="lambda-list-keyword">&amp;rest</span> args</span>&nbsp;â†’&nbsp;<span class="return-values"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">result</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span></span></span><br/><br/></dd></dl><dl><dt class="label">Method Signatures</dt><dd><span class="method"><span class="name">no-next-method</span>&nbsp;<span class="lambda-list"><span class="specialized-parameter">(<span class="name">generic-function</span>&nbsp;<a class="type-reference" href="chapter-4.xhtml#type-standard-generic-function">standard-generic-function</a>)</span>
			       <span class="specialized-parameter">(<span class="name">method</span>&nbsp;<a class="type-reference" href="chapter-4.xhtml#type-standard-method">standard-method</a>)</span>
			       <span class="lambda-list-keyword">&amp;rest</span> args</span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">generic-function</span>&mdash;<a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> to which <span class="parameter">method</span> belongs.<br/><span class="parameter">method</span>&mdash;<a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> that contained the call to
		  <a class="function-reference" href="#function-call-next-method">call-next-method</a> for which there is no next <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a>.<br/><span class="parameter">args</span>&mdash;arguments to <a class="function-reference" href="#function-call-next-method">call-next-method</a>.<br/><span class="parameter">result</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> <a class="function-reference" href="#function-no-next-method">no-next-method</a> is called by <a class="function-reference" href="#function-call-next-method">call-next-method</a> 
when there is no <a class="glossary-reference" href="chapter-26.xhtml#glossary-next method">next method</a>.<br/>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> <a class="function-reference" href="#function-no-next-method">no-next-method</a> is not intended to be called by programmers.
Programmers may write <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> for it.<br/></dd></dl><dl><dt class="label">Examples</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd>The system-supplied <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> on <a class="function-reference" href="#function-no-next-method">no-next-method</a> 
signals an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-9.xhtml#type-error">error</a>. <br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="function-reference" href="#function-call-next-method">call-next-method</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd><span class="none">None</span>.<br/></dd></dl></div><br/><br/><br/><div class="component" id="function-remove-method"><div class="header"><span class="left"><span class="name" id="function-remove-method">remove-method</span></span><span class="right"><span class="ftype">Standard Generic Function</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">remove-method</span>&nbsp;<span class="lambda-list">generic-function method</span>&nbsp;â†’&nbsp;<span class="return-values">generic-function</span></span><br/><br/></dd></dl><dl><dt class="label">Method Signatures</dt><dd><span class="method"><span class="name">remove-method</span>&nbsp;<span class="lambda-list"><span class="specialized-parameter">(<span class="name">generic-function</span>&nbsp;<a class="type-reference" href="chapter-4.xhtml#type-standard-generic-function">standard-generic-function</a>)</span>
			      method</span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">generic-function</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a>.<br/><span class="parameter">method</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> <a class="function-reference" href="#function-remove-method">remove-method</a> removes a <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> from <span class="parameter">generic-function</span>
by modifying the <span class="parameter">generic-function</span> (if necessary).<br/><a class="function-reference" href="#function-remove-method">remove-method</a> must not signal an error if the <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> 
is not one of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> on the <span class="parameter">generic-function</span>.<br/></dd></dl><dl><dt class="label">Examples</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="function-reference" href="#function-find-method">find-method</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd><span class="none">None</span>.<br/></dd></dl></div><br/><br/>
<br/><div class="component" id="function-make-instance"><div class="header"><span class="left"><span class="name" id="function-make-instance">make-instance</span></span><span class="right"><span class="ftype">Standard Generic Function</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">make-instance</span>&nbsp;<span class="lambda-list">class <span class="lambda-list-keyword">&amp;rest</span> initargs <span class="lambda-list-keyword">&amp;key</span> <span class="lambda-list-keyword">&amp;allow-other-keys</span></span>&nbsp;â†’&nbsp;<span class="return-values">instance</span></span><br/> 
</dd></dl><dl><dt class="label">Method Signatures</dt><dd><span class="method"><span class="name">make-instance</span>&nbsp;<span class="lambda-list"><span class="specialized-parameter">(<span class="name">class</span>&nbsp;<a class="type-reference" href="chapter-4.xhtml#type-standard-class">standard-class</a>)</span> <span class="lambda-list-keyword">&amp;rest</span> initargs</span></span><br/><br/><span class="method"><span class="name">make-instance</span>&nbsp;<span class="lambda-list"><span class="specialized-parameter">(<span class="name">class</span>&nbsp;<a class="type-reference" href="chapter-10.xhtml#type-symbol">symbol</a>)</span> <span class="lambda-list-keyword">&amp;rest</span> initargs</span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">class</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a>,
	     or a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> that names a <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a>.<br/><span class="parameter">initargs</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-initialization argument list">initialization argument list</a>.<br/><span class="parameter">instance</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-fresh">fresh</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> <span class="parameter">class</span>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> <a class="function-reference" href="#function-make-instance">make-instance</a> 
creates and returns a new <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> of the given <span class="parameter">class</span>.<br/>If the second of the above <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> is selected, 
that <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> invokes <a class="function-reference" href="#function-make-instance">make-instance</a> on the arguments
<pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="#function-find-class">find-class</a> <span class="parameter">class</span>)</span>
</span></code></pre> and <span class="parameter">initargs</span>.<br/>The initialization arguments are checked within <a class="function-reference" href="#function-make-instance">make-instance</a>.<br/>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> <a class="function-reference" href="#function-make-instance">make-instance</a> 
may be used as described in <a class="section-reference" href="#section-ObjectCreationAndInit">Object Creation and Initialization</a>.<br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd>If any of the initialization arguments has not
been declared as valid, an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-9.xhtml#type-error">error</a> is signaled.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="macro-reference" href="#macro-defclass">defclass</a>,
<a class="function-reference" href="#function-class-of">class-of</a>,
<a class="function-reference" href="#function-allocate-instance">allocate-instance</a>,
<a class="function-reference" href="#function-initialize-instance">initialize-instance</a>,
<a class="section-reference" href="#section-ObjectCreationAndInit">Object Creation and Initialization</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd><span class="none">None</span>.<br/> 
</dd></dl></div><br/><br/><br/><div class="component" id="function-make-instances-obsolete"><div class="header"><span class="left"><span class="name" id="function-make-instances-obsolete">make-instances-obsolete</span></span><span class="right"><span class="ftype">Standard Generic Function</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">make-instances-obsolete</span>&nbsp;<span class="lambda-list">class</span>&nbsp;â†’&nbsp;<span class="return-values">class</span></span><br/><br/></dd></dl><dl><dt class="label">Method Signatures</dt><dd><span class="method"><span class="name">make-instances-obsolete</span>&nbsp;<span class="lambda-list"><span class="specialized-parameter">(<span class="name">class</span>&nbsp;<a class="type-reference" href="chapter-4.xhtml#type-standard-class">standard-class</a>)</span></span></span><br/><br/><span class="method"><span class="name">make-instances-obsolete</span>&nbsp;<span class="lambda-list"><span class="specialized-parameter">(<span class="name">class</span>&nbsp;<a class="type-reference" href="chapter-10.xhtml#type-symbol">symbol</a>)</span></span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">class</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-class designator">class designator</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="#function-make-instances-obsolete">make-instances-obsolete</a> has the effect of
initiating the process of updating the instances of the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a>. During updating, the generic function
<a class="function-reference" href="#function-update-instance-for-redefined-class">update-instance-for-redefined-class</a> will be invoked.<br/>The generic function <a class="function-reference" href="#function-make-instances-obsolete">make-instances-obsolete</a> is invoked
automatically by the system when <a class="macro-reference" href="#macro-defclass">defclass</a> has been used to
redefine an existing standard class and the set of local 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-accessible">accessible</a> in an
instance is changed or the order of <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a> in storage is changed.  It
can also be explicitly invoked by the user.<br/>If the second of the above <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> is selected, that 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> invokes
<a class="function-reference" href="#function-make-instances-obsolete">make-instances-obsolete</a> on <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="#function-find-class">find-class</a> <span class="parameter">class</span>)</span>
</span></code></pre>.<br/></dd></dl><dl><dt class="label">Examples</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="function-reference" href="#function-update-instance-for-redefined-class">update-instance-for-redefined-class</a>,
<a class="section-reference" href="chapter-4.xhtml#section-ClassReDef">Redefining Classes</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd><span class="none">None</span>.<br/></dd></dl></div><br/><br/><br/><div class="component" id="function-make-load-form"><div class="header"><span class="left"><span class="name" id="function-make-load-form">make-load-form</span></span><span class="right"><span class="ftype">Standard Generic Function</span></span></div>
 
<dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">make-load-form</span>&nbsp;<span class="lambda-list">object <span class="lambda-list-keyword">&amp;optional</span> environment</span>&nbsp;â†’&nbsp;<span class="return-values">creation-form<span class="explicit-roman">[</span>, initialization-form<span class="explicit-roman">]</span></span></span><br/><br/></dd></dl><dl><dt class="label">Method Signatures</dt><dd><span class="method"><span class="name">make-load-form</span>&nbsp;<span class="lambda-list"><span class="specialized-parameter">(<span class="name">object</span>&nbsp;<a class="type-reference" href="chapter-4.xhtml#type-standard-object">standard-object</a>)</span>  <span class="lambda-list-keyword">&amp;optional</span> environment</span></span><br/>
<span class="method"><span class="name">make-load-form</span>&nbsp;<span class="lambda-list"><span class="specialized-parameter">(<span class="name">object</span>&nbsp;<a class="type-reference" href="chapter-4.xhtml#type-structure-object">structure-object</a>)</span> <span class="lambda-list-keyword">&amp;optional</span> environment</span></span><br/>
<span class="method"><span class="name">make-load-form</span>&nbsp;<span class="lambda-list"><span class="specialized-parameter">(<span class="name">object</span>&nbsp;<a class="type-reference" href="chapter-9.xhtml#type-condition">condition</a>)</span>        <span class="lambda-list-keyword">&amp;optional</span> environment</span></span><br/>
<span class="method"><span class="name">make-load-form</span>&nbsp;<span class="lambda-list"><span class="specialized-parameter">(<span class="name">object</span>&nbsp;<a class="type-reference" href="chapter-4.xhtml#type-class">class</a>)</span>            <span class="lambda-list-keyword">&amp;optional</span> environment</span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">object</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.<br/><span class="parameter">environment</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-environment object">environment object</a>.<br/><span class="parameter">creation-form</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>.<br/><span class="parameter">initialization-form</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> <a class="function-reference" href="#function-make-load-form">make-load-form</a> creates and returns 
one or two <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a>,
     a <span class="parameter">creation-form</span>
 and an <span class="parameter">initialization-form</span>,
that enable <a class="function-reference" href="chapter-24.xhtml#function-load">load</a> to construct an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>
equivalent to <span class="parameter">object</span>.
<span class="parameter">Environment</span> is an <a class="glossary-reference" href="chapter-26.xhtml#glossary-environment object">environment object</a> 
corresponding to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical environment">lexical environment</a> 
in which the <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a> will be processed.<br/>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-file compiler">file compiler</a> calls <a class="function-reference" href="#function-make-load-form">make-load-form</a> to process certain
<a class="glossary-reference" href="chapter-26.xhtml#glossary-class">classes</a> of <span class="glossary-reference error">glossary:literal objects</span>; see <span class="section-reference error">section:CallingMakeLoadForm.</span><br/><a class="glossary-reference" href="chapter-26.xhtml#glossary-conforming program">Conforming programs</a> may call <a class="function-reference" href="#function-make-load-form">make-load-form</a> directly,
providing <span class="parameter">object</span> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generalized instance">generalized instance</a> of
<a class="type-reference" href="chapter-4.xhtml#type-standard-object">standard-object</a>, <a class="type-reference" href="chapter-4.xhtml#type-structure-object">structure-object</a>, 
or <a class="type-reference" href="chapter-9.xhtml#type-condition">condition</a>.<br/>The creation form is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> that, when evaluated at
<a class="function-reference" href="chapter-24.xhtml#function-load">load</a> time, should return an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> that 
is equivalent to <span class="parameter">object</span>.  The exact meaning of
equivalent depends on the <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> 
and is up to the programmer who defines a <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> for
<a class="function-reference" href="#function-make-load-form">make-load-form</a>;
see <span class="section-reference error">section:LiteralsInCompiledFiles.</span>
 
The initialization form is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> that, when evaluated at <a class="function-reference" href="chapter-24.xhtml#function-load">load</a> time, 
should perform further initialization of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.  
The value returned by the initialization form is ignored.
If <a class="function-reference" href="#function-make-load-form">make-load-form</a>
returns only one value, 
the initialization form is <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>, which has no effect.
If <span class="parameter">object</span> appears as a constant in the initialization form,
at <a class="function-reference" href="chapter-24.xhtml#function-load">load</a> time it will be replaced by the equivalent <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> 
constructed by the creation form;
this is how the further initialization gains access to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.<br/>Both the <span class="parameter">creation-form</span> and the <span class="parameter">initialization-form</span> may contain references
to any <a class="glossary-reference" href="chapter-26.xhtml#glossary-externalizable object">externalizable object</a>.
However, there must not be any circular dependencies in creation forms.
An example of a circular dependency is when the creation form for the
object <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">X</span>
</span></code></pre> contains a reference to the object <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">Y</span>
</span></code></pre>,
and the creation form for the object <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">Y</span>
</span></code></pre> contains a reference to the object <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">X</span>
</span></code></pre>.  
Initialization forms are not subject to any restriction against circular dependencies, 
which is the reason that initialization forms exist; 
see the example of circular data structures below.<br/>
The creation form for an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> is always <span class="glossary-reference error">glossary:evaluated</span> before the
initialization form for that <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.  When either the creation form or
the initialization form references other <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a> that have not been
referenced earlier in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-file">file</a> being <a class="glossary-reference" href="chapter-26.xhtml#glossary-compile">compiled</a>, the <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler">compiler</a> ensures
that all of the referenced <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a> have been created before <span class="glossary-reference error">glossary:evaluating</span>
the referencing <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>.  When the referenced <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> is of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> which
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-file compiler">file compiler</a> processes using <a class="function-reference" href="#function-make-load-form">make-load-form</a>,
this involves <span class="glossary-reference error">glossary:evaluating</span>
the creation form returned for it.  (This is the reason for the
prohibition against circular references among creation forms).<br/>Each initialization form is <span class="glossary-reference error">glossary:evaluated</span> as soon as possible after its
associated creation form, as determined by data flow.  If the
initialization form for an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> does not reference any other <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a>
not referenced earlier in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-file">file</a> and processed by 
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-file compiler">file compiler</a>
using
<a class="function-reference" href="#function-make-load-form">make-load-form</a>, the initialization form is evaluated immediately after
the creation form.  If a creation or initialization form <math xmlns="http://www.w3.org/1998/Math/MathML">F</math> does contain
references to such <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a>, the creation forms for those other objects
are evaluated before <math xmlns="http://www.w3.org/1998/Math/MathML">F</math>, and the initialization forms for those other
<a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a> are also evaluated before <math xmlns="http://www.w3.org/1998/Math/MathML">F</math> whenever they do not depend on the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> created or initialized by <math xmlns="http://www.w3.org/1998/Math/MathML">F</math>.  Where these rules do not uniquely
determine an order of <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluation</a> between two creation/initialization
forms, the order of <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluation</a> is unspecified.<br/>  While these creation and initialization forms are being evaluated, the
  <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a> are possibly in an uninitialized state, 
analogous to the state
  of an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> 
between the time it has been created by <a class="function-reference" href="#function-allocate-instance">allocate-instance</a>
  and it has been processed fully by 
<a class="function-reference" href="#function-initialize-instance">initialize-instance</a>.  Programmers
  writing <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> for 
<a class="function-reference" href="#function-make-load-form">make-load-form</a> must take care in manipulating
  <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a> not to depend on 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a> that have not yet been initialized.<br/>  It is <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a>
whether <a class="function-reference" href="chapter-24.xhtml#function-load">load</a> calls <a class="function-reference" href="chapter-3.xhtml#function-eval">eval</a> on the 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a> or does some
  other operation that has an equivalent effect.  For example, the
  <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a> might be translated into different but equivalent 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a> and
  then evaluated, they might be compiled and the resulting functions
  called by <a class="function-reference" href="chapter-24.xhtml#function-load">load</a>, 
or they might be interpreted by a special-purpose
function different from <a class="function-reference" href="chapter-3.xhtml#function-eval">eval</a>.  
All that is required is that the
  effect be equivalent to evaluating the <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a>.<br/>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-specialized">specialized</a> on <a class="type-reference" href="chapter-4.xhtml#type-class">class</a> returns a creation
<a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> using the <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> if the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> has
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-proper name">proper name</a> in <span class="parameter">environment</span>, signaling an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-9.xhtml#type-error">error</a>
if it does not have a <a class="glossary-reference" href="chapter-26.xhtml#glossary-proper name">proper name</a>.  <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">Evaluation</a> of the creation
<a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> uses the <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> to find the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> with that
<a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a>, as if by <a class="glossary-reference" href="chapter-26.xhtml#glossary-call">calling</a> <a class="function-reference" href="#function-find-class">find-class</a>.  If a <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a>
with that <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> has not been defined, then a <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> may be
computed in an <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-defined">implementation-defined</a> manner.  If a <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a>
cannot be returned as the result of <span class="glossary-reference error">glossary:evaluating</span> the creation
<a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>, then an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-9.xhtml#type-error">error</a> is signaled.<br/>Both <a class="glossary-reference" href="chapter-26.xhtml#glossary-conforming implementation">conforming implementations</a> and <a class="glossary-reference" href="chapter-26.xhtml#glossary-conforming program">conforming programs</a> may
further <a class="glossary-reference" href="chapter-26.xhtml#glossary-specialize">specialize</a> <a class="function-reference" href="#function-make-load-form">make-load-form</a>.<br/></dd></dl><dl><dt class="label">Examples</dt><dd><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="macro-reference" href="#macro-defclass">defclass</a> <span class="syntax-interned-symbol">obj</span> <span class="syntax-symbol">()</span>
    <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-keyword-symbol">:initarg</span> <span class="syntax-keyword-symbol">:x</span> <span class="syntax-keyword-symbol">:reader</span> <span class="syntax-interned-symbol">obj-x</span>)</span>
     <span class="syntax-cons">(<span class="syntax-interned-symbol">y</span> <span class="syntax-keyword-symbol">:initarg</span> <span class="syntax-keyword-symbol">:y</span> <span class="syntax-keyword-symbol">:reader</span> <span class="syntax-interned-symbol">obj-y</span>)</span>
     <span class="syntax-cons">(<span class="syntax-interned-symbol">dist</span> <span class="syntax-keyword-symbol">:accessor</span> <span class="syntax-interned-symbol">obj-dist</span>)</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-verbatim">#&lt;STANDARD-CLASS OBJ 250020030&gt;</span>
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-defmethod">defmethod</a> <a class="function-reference" href="#function-shared-initialize">shared-initialize</a> <span class="syntax-keyword-symbol">:after</span> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">self</span> <span class="syntax-interned-symbol">obj</span>)</span> <span class="syntax-interned-symbol">slot-names</span> <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-rest">&amp;REST</a> <span class="syntax-interned-symbol">keys</span>)</span>
   <span class="syntax-cons">(<a class="symbol-reference" href="chapter-3.xhtml#symbol-declare">declare</a> <span class="syntax-cons">(<a class="declaration-reference" href="chapter-3.xhtml#declaration-ignore">ignore</a> <span class="syntax-interned-symbol">slot-names</span> <span class="syntax-interned-symbol">keys</span>)</span>)</span>
   <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-unless">unless</a> <span class="syntax-cons">(<a class="function-reference" href="#function-slot-boundp">slot-boundp</a> <span class="syntax-interned-symbol">self</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">dist</span></span>)</span>
     <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">obj-dist</span> <span class="syntax-interned-symbol">self</span>)</span>
           <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-sqrt">sqrt</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-expt">expt</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">obj-x</span> <span class="syntax-interned-symbol">self</span>)</span> <span class="syntax-number">2</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-expt">expt</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">obj-y</span> <span class="syntax-interned-symbol">self</span>)</span> <span class="syntax-number">2</span>)</span>)</span>)</span>)</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-verbatim">#&lt;STANDARD-METHOD SHARED-INITIALIZE (:AFTER) (OBJ T) 26266714&gt;</span>
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-defmethod">defmethod</a> <a class="function-reference" href="#function-make-load-form">make-load-form</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">self</span> <span class="syntax-interned-symbol">obj</span>)</span> <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-optional">&amp;OPTIONAL</a> <span class="syntax-interned-symbol">environment</span>)</span>
   <span class="syntax-cons">(<a class="symbol-reference" href="chapter-3.xhtml#symbol-declare">declare</a> <span class="syntax-cons">(<a class="declaration-reference" href="chapter-3.xhtml#declaration-ignore">ignore</a> <span class="syntax-interned-symbol">environment</span>)</span>)</span>
   <span class="syntax-line-comment syntax-comment">;; Note that this definition only works because X and Y do not
</span>   <span class="syntax-line-comment syntax-comment">;; contain information which refers back to the object itself.
</span>   <span class="syntax-line-comment syntax-comment">;; For a more general solution to this problem, see revised example below.
</span>   <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="function-reference" href="#function-make-instance">make-instance</a> <span class="syntax-quote">'<span class="syntax-unquote">,<span class="syntax-cons">(<a class="function-reference" href="#function-class-of">class-of</a> <span class="syntax-interned-symbol">self</span>)</span></span></span>
                   <span class="syntax-keyword-symbol">:x</span> <span class="syntax-quote">'<span class="syntax-unquote">,<span class="syntax-cons">(<span class="syntax-interned-symbol">obj-x</span> <span class="syntax-interned-symbol">self</span>)</span></span></span> <span class="syntax-keyword-symbol">:y</span> <span class="syntax-quote">'<span class="syntax-unquote">,<span class="syntax-cons">(<span class="syntax-interned-symbol">obj-y</span> <span class="syntax-interned-symbol">self</span>)</span></span></span>)</span></span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-verbatim">#&lt;STANDARD-METHOD MAKE-LOAD-FORM (OBJ) 26267532&gt;</span>
 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">obj1</span> <span class="syntax-cons">(<a class="function-reference" href="#function-make-instance">make-instance</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">obj</span></span> <span class="syntax-keyword-symbol">:x</span> <span class="syntax-number">3.0</span> <span class="syntax-keyword-symbol">:y</span> <span class="syntax-number">4.0</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-verbatim">#&lt;OBJ 26274136&gt;</span>
 <span class="syntax-cons">(<span class="syntax-interned-symbol">obj-dist</span> <span class="syntax-interned-symbol">obj1</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">5.0</span>
 <span class="syntax-cons">(<a class="function-reference" href="#function-make-load-form">make-load-form</a> <span class="syntax-interned-symbol">obj1</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<a class="function-reference" href="#function-make-instance">make-instance</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">OBJ</span></span> <span class="syntax-keyword-symbol">:X</span> <span class="syntax-quote">'<span class="syntax-number">3.0</span></span> <span class="syntax-keyword-symbol">:Y</span> <span class="syntax-quote">'<span class="syntax-number">4.0</span></span>)</span>
</span></code></pre><br/>In the above example, an equivalent <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> of <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">obj</span>
</span></code></pre> is
reconstructed by using the values of two of its <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a>.  
The value of the third <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> is derived from those two values.<br/>
Another way to write the <a class="function-reference" href="#function-make-load-form">make-load-form</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a>
in that example is to use <a class="function-reference" href="#function-make-load-form-saving-slots">make-load-form-saving-slots</a>.
The code it generates might yield a slightly different result 
from the <a class="function-reference" href="#function-make-load-form">make-load-form</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> shown above,
but the operational effect will be the same.  For example:<br/>
<pre><code><span class="syntax-root"> ;; Redefine method defined above.
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-defmethod">defmethod</a> <a class="function-reference" href="#function-make-load-form">make-load-form</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">self</span> <span class="syntax-interned-symbol">obj</span>)</span> <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-optional">&amp;OPTIONAL</a> <span class="syntax-interned-symbol">environment</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="#function-make-load-form-saving-slots">make-load-form-saving-slots</a> <span class="syntax-interned-symbol">self</span>
                                 <span class="syntax-keyword-symbol">:slot-names</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span></span>
                                 <span class="syntax-keyword-symbol">:environment</span> <span class="syntax-interned-symbol">environment</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-verbatim">#&lt;STANDARD-METHOD MAKE-LOAD-FORM (OBJ) 42755655&gt;</span>
 ;; Try MAKE-LOAD-FORM on object created above.
 <span class="syntax-cons">(<a class="function-reference" href="#function-make-load-form">make-load-form</a> <span class="syntax-interned-symbol">obj1</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<a class="function-reference" href="#function-allocate-instance">allocate-instance</a> <span class="syntax-quote">'<span class="syntax-verbatim">#&lt;STANDARD-CLASS OBJ 250020030&gt;</span></span>)</span><span class="syntax-verbatim">,</span>
    <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-progn">progn</a>
      <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="function-reference" href="#function-slot-value">slot-value</a> <span class="syntax-quote">'<span class="syntax-verbatim">#&lt;OBJ 26274136&gt;</span></span> <span class="syntax-quote">'<span class="syntax-interned-symbol">X</span></span>)</span> <span class="syntax-quote">'<span class="syntax-number">3.0</span></span>)</span>
      <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="function-reference" href="#function-slot-value">slot-value</a> <span class="syntax-quote">'<span class="syntax-verbatim">#&lt;OBJ 26274136&gt;</span></span> <span class="syntax-quote">'<span class="syntax-interned-symbol">Y</span></span>)</span> <span class="syntax-quote">'<span class="syntax-number">4.0</span></span>)</span>
      <span class="syntax-cons">(<a class="function-reference" href="#function-initialize-instance">initialize-instance</a> <span class="syntax-quote">'<span class="syntax-verbatim">#&lt;OBJ 26274136&gt;</span></span>)</span>)</span>
</span></code></pre><br/>
In the following example, <span class="glossary-reference error">glossary:instances</span> of <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">my-frob</span>
</span></code></pre> are ``interned'' 
in some way.  An equivalent <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> is reconstructed by using the 
value of the name slot as a key for searching existing <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a>.
In this case the programmer has chosen to create a new <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> 
if no existing <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> is found; alternatively an error could 
have been signaled in that case.<br/>
<pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="#macro-defclass">defclass</a> <span class="syntax-interned-symbol">my-frob</span> <span class="syntax-symbol">()</span>
   <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">name</span> <span class="syntax-keyword-symbol">:initarg</span> <span class="syntax-keyword-symbol">:name</span> <span class="syntax-keyword-symbol">:reader</span> <span class="syntax-interned-symbol">my-name</span>)</span>)</span>)</span>
<span class="syntax-cons">(<a class="macro-reference" href="#macro-defmethod">defmethod</a> <a class="function-reference" href="#function-make-load-form">make-load-form</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">self</span> <span class="syntax-interned-symbol">my-frob</span>)</span> <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-optional">&amp;OPTIONAL</a> <span class="syntax-interned-symbol">environment</span>)</span>
  <span class="syntax-cons">(<a class="symbol-reference" href="chapter-3.xhtml#symbol-declare">declare</a> <span class="syntax-cons">(<a class="declaration-reference" href="chapter-3.xhtml#declaration-ignore">ignore</a> <span class="syntax-interned-symbol">environment</span>)</span>)</span>
  <span class="syntax-quasiquote">`<span class="syntax-cons">(<span class="syntax-interned-symbol">find-my-frob</span> <span class="syntax-quote">'<span class="syntax-unquote">,<span class="syntax-cons">(<span class="syntax-interned-symbol">my-name</span> <span class="syntax-interned-symbol">self</span>)</span></span></span> <span class="syntax-keyword-symbol">:if-does-not-exist</span> <span class="syntax-keyword-symbol">:create</span>)</span></span>)</span>
</span></code></pre><br/>
In the following example, the data structure to be dumped is circular, 
because each parent has a list of its children and each child has a reference
back to its parent.  If <a class="function-reference" href="#function-make-load-form">make-load-form</a> is called on one   
<a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> in such a structure,  the creation form creates an equivalent 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> and fills in the children slot, which forces creation of equivalent
<a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a> for all of its children, grandchildren, etc.  At this point
none of the parent <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a> have been filled in.  
The initialization form fills in the parent <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>, which forces creation 
of an equivalent <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> for the parent if it was not already created.
Thus the entire tree is recreated at <a class="function-reference" href="chapter-24.xhtml#function-load">load</a> time.  
At compile time, <a class="function-reference" href="#function-make-load-form">make-load-form</a> is called once for each <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> 
in the tree.  
All of the creation forms are evaluated,
in <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a> order,
and then all of the initialization forms are evaluated, 
also in <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a> order.<br/>
<pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="#macro-defclass">defclass</a> <span class="syntax-interned-symbol">tree-with-parent</span> <span class="syntax-symbol">()</span> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">parent</span> <span class="syntax-keyword-symbol">:accessor</span> <span class="syntax-interned-symbol">tree-parent</span>)</span>
                               <span class="syntax-cons">(<span class="syntax-interned-symbol">children</span> <span class="syntax-keyword-symbol">:initarg</span> <span class="syntax-keyword-symbol">:children</span>)</span>)</span>)</span>
<span class="syntax-cons">(<a class="macro-reference" href="#macro-defmethod">defmethod</a> <a class="function-reference" href="#function-make-load-form">make-load-form</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">tree-with-parent</span>)</span> <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-optional">&amp;OPTIONAL</a> <span class="syntax-interned-symbol">environment</span>)</span>
  <span class="syntax-cons">(<a class="symbol-reference" href="chapter-3.xhtml#symbol-declare">declare</a> <span class="syntax-cons">(<a class="declaration-reference" href="chapter-3.xhtml#declaration-ignore">ignore</a> <span class="syntax-interned-symbol">environment</span>)</span>)</span>
  <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-values">values</a>
    <span class="syntax-line-comment syntax-comment">;; creation form
</span>    <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="function-reference" href="#function-make-instance">make-instance</a> <span class="syntax-quote">'<span class="syntax-unquote">,<span class="syntax-cons">(<a class="function-reference" href="#function-class-of">class-of</a> <span class="syntax-interned-symbol">x</span>)</span></span></span> <span class="syntax-keyword-symbol">:children</span> <span class="syntax-quote">'<span class="syntax-unquote">,<span class="syntax-cons">(<a class="function-reference" href="#function-slot-value">slot-value</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">children</span></span>)</span></span></span>)</span></span>
    <span class="syntax-line-comment syntax-comment">;; initialization form
</span>    <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">tree-parent</span> <span class="syntax-quote">'<span class="syntax-unquote">,<span class="syntax-interned-symbol">x</span></span></span>)</span> <span class="syntax-quote">'<span class="syntax-unquote">,<span class="syntax-cons">(<a class="function-reference" href="#function-slot-value">slot-value</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">parent</span></span>)</span></span></span>)</span></span>)</span>)</span>
</span></code></pre><br/>
In the following example, the data structure to be dumped has no special
properties and an equivalent structure can be reconstructed
simply by reconstructing the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a>' contents.<br/>
<pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-8.xhtml#macro-defstruct">defstruct</a> <span class="syntax-interned-symbol">my-struct</span> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span>)</span>
<span class="syntax-cons">(<a class="macro-reference" href="#macro-defmethod">defmethod</a> <a class="function-reference" href="#function-make-load-form">make-load-form</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">s</span> <span class="syntax-interned-symbol">my-struct</span>)</span> <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-optional">&amp;OPTIONAL</a> <span class="syntax-interned-symbol">environment</span>)</span>
   <span class="syntax-cons">(<a class="function-reference" href="#function-make-load-form-saving-slots">make-load-form-saving-slots</a> <span class="syntax-interned-symbol">s</span> <span class="syntax-keyword-symbol">:environment</span> <span class="syntax-interned-symbol">environment</span>)</span>)</span>
</span></code></pre><br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-specialized">specialized</a> on 
     <a class="type-reference" href="chapter-4.xhtml#type-standard-object">standard-object</a>,
     <a class="type-reference" href="chapter-4.xhtml#type-structure-object">structure-object</a>,
 and <a class="type-reference" href="chapter-9.xhtml#type-condition">condition</a>
all signal an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-9.xhtml#type-error">error</a>.<br/>It is <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a> whether <a class="glossary-reference" href="chapter-26.xhtml#glossary-call">calling</a>
<a class="function-reference" href="#function-make-load-form">make-load-form</a> on a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generalized instance">generalized instance</a> of a
<a class="glossary-reference" href="chapter-26.xhtml#glossary-system class">system class</a> signals an error or returns creation and
initialization <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="function-reference" href="chapter-24.xhtml#function-compile-file">compile-file</a>, 
<a class="function-reference" href="#function-make-load-form-saving-slots">make-load-form-saving-slots</a>,
<a class="section-reference" href="chapter-3.xhtml#section-CallingMakeLoadForm">Additional Constraints on Externalizable Objects</a>,
<a class="section-reference" href="chapter-3.xhtml#section-Evaluation">Evaluation</a>,
<a class="section-reference" href="chapter-3.xhtml#section-Compilation">Compilation</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-file compiler">file compiler</a>
calls <a class="function-reference" href="#function-make-load-form">make-load-form</a> in specific circumstances
detailed in <a class="section-reference" href="chapter-3.xhtml#section-CallingMakeLoadForm">Additional Constraints on Externalizable Objects</a>.

Some <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation">implementations</a> may provide facilities for defining new
<a class="glossary-reference" href="chapter-26.xhtml#glossary-subclass">subclasses</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">classes</a> which are specified as
<a class="glossary-reference" href="chapter-26.xhtml#glossary-system class">system classes</a>.  (Some likely candidates include
<a class="type-reference" href="chapter-4.xhtml#type-generic-function">generic-function</a>, <a class="type-reference" href="chapter-4.xhtml#type-method">method</a>, and <a class="type-reference" href="chapter-21.xhtml#type-stream">stream</a>).  Such
<a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation">implementations</a> should document how the <a class="glossary-reference" href="chapter-26.xhtml#glossary-file compiler">file compiler</a> processes
<span class="glossary-reference error">glossary:instances</span> of such <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">classes</a> when encountered as
<span class="glossary-reference error">glossary:literal objects</span>, and should document any relevant <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a>
for <a class="function-reference" href="#function-make-load-form">make-load-form</a>.<br/></dd></dl></div><br/><br/><br/><div class="component" id="function-make-load-form-saving-slots"><div class="header"><span class="left"><span class="name" id="function-make-load-form-saving-slots">make-load-form-saving-slots</span></span><span class="right"><span class="ftype">Function</span></span></div><br/>
<dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">make-load-form-saving-slots</span>&nbsp;<span class="lambda-list">object <span class="lambda-list-keyword">&amp;key</span> slot-names environment</span>&nbsp;â†’&nbsp;<span class="return-values">creation-form, initialization-form</span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">object</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.<br/><span class="parameter">slot-names</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a>.<br/><span class="parameter">environment</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-environment object">environment object</a>.<br/><span class="parameter">creation-form</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>.<br/><span class="parameter">initialization-form</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>Returns <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a> that, when <span class="glossary-reference error">glossary:evaluated</span>, will construct an
<a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> equivalent to <span class="parameter">object</span>, without <span class="glossary-reference error">glossary:executing</span>
<a class="glossary-reference" href="chapter-26.xhtml#glossary-initialization form">initialization forms</a>.  The <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a> in the new <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>
that correspond to initialized <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a> in <span class="parameter">object</span> are
initialized using the values from <span class="parameter">object</span>.  Uninitialized <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a>
in <span class="parameter">object</span> are not initialized in the new <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.
<a class="function-reference" href="#function-make-load-form-saving-slots">make-load-form-saving-slots</a> works for any <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> of
<a class="type-reference" href="chapter-4.xhtml#type-standard-object">standard-object</a> or <a class="type-reference" href="chapter-4.xhtml#type-structure-object">structure-object</a>.


<span class="parameter">Slot-names</span> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> of the names of the 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a> to preserve. If <span class="parameter">slot-names</span> is not
supplied, its value is all of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-local slot">local slots</a>.  <br/><a class="function-reference" href="#function-make-load-form-saving-slots">make-load-form-saving-slots</a> returns two values,
thus it can deal with circular structures.
Whether the result is useful in an application depends on
whether the <span class="parameter">object</span>'s <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> and slot contents
fully capture the application's idea of the <span class="parameter">object</span>'s state.<br/><span class="parameter">Environment</span> is the environment in which the forms will be processed.<br/></dd></dl><dl><dt class="label">Examples</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Side Effects</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="function-reference" href="#function-make-load-form">make-load-form</a>,
<a class="function-reference" href="#function-make-instance">make-instance</a>,
<a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a>,
<a class="function-reference" href="#function-slot-value">slot-value</a>,
<a class="function-reference" href="#function-slot-makunbound">slot-makunbound</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd><a class="function-reference" href="#function-make-load-form-saving-slots">make-load-form-saving-slots</a> can be useful in user-written
<a class="function-reference" href="#function-make-load-form">make-load-form</a> methods.<br/></dd></dl>
When the <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> is an <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> of <a class="type-reference" href="chapter-4.xhtml#type-standard-object">standard-object</a>,
<a class="function-reference" href="#function-make-load-form-saving-slots">make-load-form-saving-slots</a> could return a creation form that
<a class="glossary-reference" href="chapter-26.xhtml#glossary-call">calls</a> <a class="function-reference" href="#function-allocate-instance">allocate-instance</a> and an initialization form that
contains <a class="glossary-reference" href="chapter-26.xhtml#glossary-call">calls</a> to <a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> of <a class="function-reference" href="#function-slot-value">slot-value</a> and
<a class="function-reference" href="#function-slot-makunbound">slot-makunbound</a>, though other <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">functions</a> of similar effect
might actually be used.

</div><br/><br/><br/><br/><div class="component" id="macro-with-accessors"><div class="header"><span class="left"><span class="name" id="macro-with-accessors">with-accessors</span></span><span class="right"><span class="ftype">Macro</span></span></div><br/>
<dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">with-accessors</span>&nbsp;<span class="lambda-list"><span class="explicit-roman">(</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">slot-entry</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span><span class="explicit-roman">)</span> 
		   instance-form
 		   <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">declaration</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">form</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span></span>&nbsp;â†’&nbsp;<span class="return-values"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">result</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span></span></span><br/><br/><tr><td>slot-entry</td><td>::=</td><td><span class="explicit-roman">(</span>variable-name accessor-name<span class="explicit-roman">)</span></td></tr><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">variable-name</span>&mdash;a <span class="glossary-reference error">glossary:variable name</span>; not evaluated.<br/><span class="parameter">accessor-name</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function name">function name</a>; not evaluated.<br/><span class="parameter">instance-form</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>; evaluated.<br/><span class="parameter">declaration</span>&mdash;a <a class="symbol-reference" href="chapter-3.xhtml#symbol-declare">declare</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-expression">expression</a>; not evaluated.<br/><span class="parameter">forms</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-implicit progn">implicit progn</a>.<br/><span class="parameter">results</span>&mdash;the <span class="glossary-reference error">glossary:values</span> returned by the <span class="parameter">forms</span>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>Creates a lexical environment in which
the slots specified by
<span class="parameter">slot-entry</span> are lexically available through their accessors as if
they were variables.  The macro <a class="macro-reference" href="#macro-with-accessors">with-accessors</a> invokes the
appropriate accessors to <span class="parameter">access</span> the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a> specified
by <span class="parameter">slot-entry</span>.  Both <a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a>
and <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> can be used to set the value of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>.<br/></dd></dl><dl><dt class="label">Examples</dt><dd><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="macro-reference" href="#macro-defclass">defclass</a> <span class="syntax-interned-symbol">thing</span> <span class="syntax-symbol">()</span>
           <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-keyword-symbol">:initarg</span> <span class="syntax-keyword-symbol">:x</span> <span class="syntax-keyword-symbol">:accessor</span> <span class="syntax-interned-symbol">thing-x</span>)</span>
            <span class="syntax-cons">(<span class="syntax-interned-symbol">y</span> <span class="syntax-keyword-symbol">:initarg</span> <span class="syntax-keyword-symbol">:y</span> <span class="syntax-keyword-symbol">:accessor</span> <span class="syntax-interned-symbol">thing-y</span>)</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-verbatim">#&lt;STANDARD-CLASS THING 250020173&gt;</span>
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-defmethod">defmethod</a> <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-interned-symbol">thing-x</span>)</span> <span class="syntax-keyword-symbol">:before</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">new-x</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">thing</span> <span class="syntax-interned-symbol">thing</span>)</span>)</span>
   <span class="syntax-cons">(<a class="function-reference" href="chapter-22.xhtml#function-format">format</a> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a> <span class="syntax-string">"~&amp;Changing X from ~D to ~D in ~S.~%"</span>
           <span class="syntax-cons">(<span class="syntax-interned-symbol">thing-x</span> <span class="syntax-interned-symbol">thing</span>)</span> <span class="syntax-interned-symbol">new-x</span> <span class="syntax-interned-symbol">thing</span>)</span>)</span>
 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">thing1</span> <span class="syntax-cons">(<a class="function-reference" href="#function-make-instance">make-instance</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">thing</span></span> <span class="syntax-keyword-symbol">:x</span> <span class="syntax-number">1</span> <span class="syntax-keyword-symbol">:y</span> <span class="syntax-number">2</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-verbatim">#&lt;THING 43135676&gt;</span>
 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">thing2</span> <span class="syntax-cons">(<a class="function-reference" href="#function-make-instance">make-instance</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">thing</span></span> <span class="syntax-keyword-symbol">:x</span> <span class="syntax-number">7</span> <span class="syntax-keyword-symbol">:y</span> <span class="syntax-number">8</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-verbatim">#&lt;THING 43147374&gt;</span>
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-with-accessors">with-accessors</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x1</span> <span class="syntax-interned-symbol">thing-x</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">y1</span> <span class="syntax-interned-symbol">thing-y</span>)</span>)</span>
                 <span class="syntax-interned-symbol">thing1</span>
   <span class="syntax-cons">(<a class="macro-reference" href="#macro-with-accessors">with-accessors</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x2</span> <span class="syntax-interned-symbol">thing-x</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">y2</span> <span class="syntax-interned-symbol">thing-y</span>)</span>)</span>
                   <span class="syntax-interned-symbol">thing2</span>
     <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">x1</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">thing-x</span> <span class="syntax-interned-symbol">thing1</span>)</span> <span class="syntax-interned-symbol">y1</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">thing-y</span> <span class="syntax-interned-symbol">thing1</span>)</span>
                 <span class="syntax-interned-symbol">x2</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">thing-x</span> <span class="syntax-interned-symbol">thing2</span>)</span> <span class="syntax-interned-symbol">y2</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">thing-y</span> <span class="syntax-interned-symbol">thing2</span>)</span>)</span>
           <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">x1</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">y1</span> <span class="syntax-interned-symbol">x2</span>)</span>)</span>
           <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">x1</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">thing-x</span> <span class="syntax-interned-symbol">thing1</span>)</span> <span class="syntax-interned-symbol">y1</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">thing-y</span> <span class="syntax-interned-symbol">thing1</span>)</span>
                 <span class="syntax-interned-symbol">x2</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">thing-x</span> <span class="syntax-interned-symbol">thing2</span>)</span> <span class="syntax-interned-symbol">y2</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">thing-y</span> <span class="syntax-interned-symbol">thing2</span>)</span>)</span>
           <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">thing-x</span> <span class="syntax-interned-symbol">thing2</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">x1</span>)</span>)</span>
           <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">x1</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">thing-x</span> <span class="syntax-interned-symbol">thing1</span>)</span> <span class="syntax-interned-symbol">y1</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">thing-y</span> <span class="syntax-interned-symbol">thing1</span>)</span>
                 <span class="syntax-interned-symbol">x2</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">thing-x</span> <span class="syntax-interned-symbol">thing2</span>)</span> <span class="syntax-interned-symbol">y2</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">thing-y</span> <span class="syntax-interned-symbol">thing2</span>)</span>)</span>)</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> Changing X from 1 to 9 in #&lt;THING 43135676&gt;.
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> Changing X from 7 to (9) in #&lt;THING 43147374&gt;.
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">2</span> <span class="syntax-number">7</span> <span class="syntax-number">7</span> <span class="syntax-number">8</span> <span class="syntax-number">8</span>)</span>
     <span class="syntax-number">9</span>
     <span class="syntax-cons">(<span class="syntax-number">9</span> <span class="syntax-number">9</span> <span class="syntax-number">2</span> <span class="syntax-number">2</span> <span class="syntax-number">7</span> <span class="syntax-number">7</span> <span class="syntax-number">8</span> <span class="syntax-number">8</span>)</span> 
     <span class="syntax-cons">(<span class="syntax-number">9</span>)</span>
     <span class="syntax-cons">(<span class="syntax-number">9</span> <span class="syntax-number">9</span> <span class="syntax-number">2</span> <span class="syntax-number">2</span> <span class="syntax-cons">(<span class="syntax-number">9</span>)</span> <span class="syntax-cons">(<span class="syntax-number">9</span>)</span> <span class="syntax-number">8</span> <span class="syntax-number">8</span>)</span>)</span>
</span></code></pre><br/></dd></dl><dl><dt class="label">Affected By</dt><dd><a class="macro-reference" href="#macro-defclass">defclass</a><br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd>The consequences are undefined if any <span class="parameter">accessor-name</span> is not the name
of an accessor for the <span class="parameter">instance</span>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="macro-reference" href="#macro-with-slots">with-slots</a>,
<a class="special-operator-reference" href="chapter-3.xhtml#special-operator-symbol-macrolet">symbol-macrolet</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd>A <a class="macro-reference" href="#macro-with-accessors">with-accessors</a> expression of the form:<br/><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><span class="error">unexpanded non-math macro: (:OTHER-COMMAND-APPLICATION (# #) :OUTPUT-FILE
                            "chapter-7" :NAME "openup" :BOUNDS (83810 . 83822))</span>\vbox<table><tbody><tr/><tr><td><span class="explicit-mono">(with-accessors</span>(<math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>\hbox<span class="explicit-italic"> slot-entry</span></mrow><mo>1</mo></msub><mi>â€¦</mi><msub><mrow>\hbox<span class="explicit-italic"> slot-entry</span></mrow><mo>n</mo></msub></math>) <span class="explicit-italic"> instance-form</span><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>\hbox<span class="explicit-italic"> form</span></mrow><mo>1</mo></msub><mi>â€¦</mi><msub><mrow>\hbox<span class="explicit-italic"> form</span></mrow><mo>k</mo></msub></math>)</td></tr></tbody></table></math> expands into the equivalent of<br/><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><span class="error">unexpanded non-math macro: (:OTHER-COMMAND-APPLICATION (# #) :OUTPUT-FILE
                            "chapter-7" :NAME "openup" :BOUNDS (84066 . 84078))</span>\vbox<table><tbody><tr/><tr><td><span class="explicit-mono">(</span></td><td><span class="explicit-mono">let ((</span><math xmlns="http://www.w3.org/1998/Math/MathML">in</math><span class="explicit-italic"> instance-form</span><span class="explicit-mono">))</span></td></tr><tr><td/><td><span class="explicit-mono">(symbol-macrolet (</span><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>\hbox<span class="explicit-italic"> Q</span></mrow><mo>1</mo></msub><mi>â€¦</mi><msub><mrow>\hbox<span class="explicit-italic"> Q</span></mrow><mo>n</mo></msub></math><span class="explicit-mono">)</span><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>\hbox<span class="explicit-italic"> form</span></mrow><mo>1</mo></msub><mi>â€¦</mi><msub><mrow>\hbox<span class="explicit-italic"> form</span></mrow><mo>k</mo></msub></math><span class="explicit-mono">))</span></td></tr></tbody></table></math> where <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>\hbox<span class="explicit-italic"> Q</span></mrow><mo>i</mo></msub></math> is <br/><math xmlns="http://www.w3.org/1998/Math/MathML" display="block">\vbox\hbox<span class="explicit-mono">(</span><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>\hbox<span class="explicit-italic"> variable-name</span></mrow><mo>i</mo></msub></math> <span class="explicit-mono">(<math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>\hbox<span class="explicit-italic"> accessor-name</span></mrow><mo>i</mo></msub> in</math>))</span></math></dd></dl>
</div><br/><br/><br/><div class="component" id="macro-with-slots"><div class="header"><span class="left"><span class="name" id="macro-with-slots">with-slots</span></span><span class="right"><span class="ftype">Macro</span></span></div><br/>
<dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">with-slots</span>&nbsp;<span class="lambda-list"><span class="explicit-roman">(</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">slot-entry</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span><span class="explicit-roman">)</span>
		          instance-form 
                          <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">declaration</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">form</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span></span>&nbsp;â†’&nbsp;<span class="return-values"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">result</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span></span></span><br/><br/><tr><td>slot-entry</td><td>::=</td><td>slot-name | <span class="explicit-roman">(</span>variable-name slot-name<span class="explicit-roman">)</span></td></tr><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">slot-name</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a>; not evaluated.<br/><span class="parameter">variable-name</span>&mdash;a <span class="glossary-reference error">glossary:variable name</span>; not evaluated.<br/><span class="parameter">instance-form</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>; evaluted to produce <span class="parameter">instance</span>.<br/><span class="parameter">instance</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.<br/><span class="parameter">declaration</span>&mdash;a <a class="symbol-reference" href="chapter-3.xhtml#symbol-declare">declare</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-expression">expression</a>; not evaluated.<br/><span class="parameter">forms</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-implicit progn">implicit progn</a>.<br/><span class="parameter">results</span>&mdash;the <span class="glossary-reference error">glossary:values</span> returned by the <span class="parameter">forms</span>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>The macro <a class="macro-reference" href="#macro-with-slots">with-slots</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-establish">establishes</a> a
<a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical environment">lexical environment</a>
for referring to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a> in the <span class="parameter">instance</span> 
named by the given <span class="parameter">slot-names</span> 
as though they were <a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variables</a>.  Within such a context
the value of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> can be specified by using its slot name, as if
it were a lexically bound variable.  Both <a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> and <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a>
can be used to set the value of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>.<br/>The macro <a class="macro-reference" href="#macro-with-slots">with-slots</a> translates an appearance of the slot 
name as a <a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variable</a> into a call to <a class="function-reference" href="#function-slot-value">slot-value</a>.<br/></dd></dl><dl><dt class="label">Examples</dt><dd><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="macro-reference" href="#macro-defclass">defclass</a> <span class="syntax-interned-symbol">thing</span> <span class="syntax-symbol">()</span>
           <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-keyword-symbol">:initarg</span> <span class="syntax-keyword-symbol">:x</span> <span class="syntax-keyword-symbol">:accessor</span> <span class="syntax-interned-symbol">thing-x</span>)</span>
            <span class="syntax-cons">(<span class="syntax-interned-symbol">y</span> <span class="syntax-keyword-symbol">:initarg</span> <span class="syntax-keyword-symbol">:y</span> <span class="syntax-keyword-symbol">:accessor</span> <span class="syntax-interned-symbol">thing-y</span>)</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-verbatim">#&lt;STANDARD-CLASS THING 250020173&gt;</span>
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-defmethod">defmethod</a> <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-interned-symbol">thing-x</span>)</span> <span class="syntax-keyword-symbol">:before</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">new-x</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">thing</span> <span class="syntax-interned-symbol">thing</span>)</span>)</span>
   <span class="syntax-cons">(<a class="function-reference" href="chapter-22.xhtml#function-format">format</a> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a> <span class="syntax-string">"~&amp;Changing X from ~D to ~D in ~S.~%"</span>
           <span class="syntax-cons">(<span class="syntax-interned-symbol">thing-x</span> <span class="syntax-interned-symbol">thing</span>)</span> <span class="syntax-interned-symbol">new-x</span> <span class="syntax-interned-symbol">thing</span>)</span>)</span>
 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">thing</span> <span class="syntax-cons">(<a class="function-reference" href="#function-make-instance">make-instance</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">thing</span></span> <span class="syntax-keyword-symbol">:x</span> <span class="syntax-number">0</span> <span class="syntax-keyword-symbol">:y</span> <span class="syntax-number">1</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-verbatim">#&lt;THING 62310540&gt;</span>
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-with-slots">with-slots</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span> <span class="syntax-interned-symbol">thing</span> <span class="syntax-cons">(<a class="macro-reference" href="chapter-12.xhtml#macro-incf">incf</a> <span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-cons">(<a class="macro-reference" href="chapter-12.xhtml#macro-incf">incf</a> <span class="syntax-interned-symbol">y</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">2</span>
 <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-values">values</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">thing-x</span> <span class="syntax-interned-symbol">thing</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">thing-y</span> <span class="syntax-interned-symbol">thing</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">1</span><span class="syntax-verbatim">,</span> <span class="syntax-number">2</span>
 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">thing1</span> <span class="syntax-cons">(<a class="function-reference" href="#function-make-instance">make-instance</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">thing</span></span> <span class="syntax-keyword-symbol">:x</span> <span class="syntax-number">1</span> <span class="syntax-keyword-symbol">:y</span> <span class="syntax-number">2</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-verbatim">#&lt;THING 43135676&gt;</span>
 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">thing2</span> <span class="syntax-cons">(<a class="function-reference" href="#function-make-instance">make-instance</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">thing</span></span> <span class="syntax-keyword-symbol">:x</span> <span class="syntax-number">7</span> <span class="syntax-keyword-symbol">:y</span> <span class="syntax-number">8</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-verbatim">#&lt;THING 43147374&gt;</span>
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-with-slots">with-slots</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x1</span> <span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">y1</span> <span class="syntax-interned-symbol">y</span>)</span>)</span>
             <span class="syntax-interned-symbol">thing1</span>
   <span class="syntax-cons">(<a class="macro-reference" href="#macro-with-slots">with-slots</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x2</span> <span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">y2</span> <span class="syntax-interned-symbol">y</span>)</span>)</span>
               <span class="syntax-interned-symbol">thing2</span>
     <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">x1</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">thing-x</span> <span class="syntax-interned-symbol">thing1</span>)</span> <span class="syntax-interned-symbol">y1</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">thing-y</span> <span class="syntax-interned-symbol">thing1</span>)</span>
                 <span class="syntax-interned-symbol">x2</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">thing-x</span> <span class="syntax-interned-symbol">thing2</span>)</span> <span class="syntax-interned-symbol">y2</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">thing-y</span> <span class="syntax-interned-symbol">thing2</span>)</span>)</span>
           <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">x1</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">y1</span> <span class="syntax-interned-symbol">x2</span>)</span>)</span>
           <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">x1</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">thing-x</span> <span class="syntax-interned-symbol">thing1</span>)</span> <span class="syntax-interned-symbol">y1</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">thing-y</span> <span class="syntax-interned-symbol">thing1</span>)</span>
                 <span class="syntax-interned-symbol">x2</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">thing-x</span> <span class="syntax-interned-symbol">thing2</span>)</span> <span class="syntax-interned-symbol">y2</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">thing-y</span> <span class="syntax-interned-symbol">thing2</span>)</span>)</span>
           <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">thing-x</span> <span class="syntax-interned-symbol">thing2</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">x1</span>)</span>)</span>
           <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">x1</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">thing-x</span> <span class="syntax-interned-symbol">thing1</span>)</span> <span class="syntax-interned-symbol">y1</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">thing-y</span> <span class="syntax-interned-symbol">thing1</span>)</span>
                 <span class="syntax-interned-symbol">x2</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">thing-x</span> <span class="syntax-interned-symbol">thing2</span>)</span> <span class="syntax-interned-symbol">y2</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">thing-y</span> <span class="syntax-interned-symbol">thing2</span>)</span>)</span>)</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> Changing X from 7 to (9) in #&lt;THING 43147374&gt;.
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">2</span> <span class="syntax-number">7</span> <span class="syntax-number">7</span> <span class="syntax-number">8</span> <span class="syntax-number">8</span>)</span>
     <span class="syntax-number">9</span>
     <span class="syntax-cons">(<span class="syntax-number">9</span> <span class="syntax-number">9</span> <span class="syntax-number">2</span> <span class="syntax-number">2</span> <span class="syntax-number">7</span> <span class="syntax-number">7</span> <span class="syntax-number">8</span> <span class="syntax-number">8</span>)</span> 
     <span class="syntax-cons">(<span class="syntax-number">9</span>)</span>
     <span class="syntax-cons">(<span class="syntax-number">9</span> <span class="syntax-number">9</span> <span class="syntax-number">2</span> <span class="syntax-number">2</span> <span class="syntax-cons">(<span class="syntax-number">9</span>)</span> <span class="syntax-cons">(<span class="syntax-number">9</span>)</span> <span class="syntax-number">8</span> <span class="syntax-number">8</span>)</span>)</span>
</span></code></pre><br/></dd></dl><dl><dt class="label">Affected By</dt><dd><a class="macro-reference" href="#macro-defclass">defclass</a><br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd>The consequences are undefined if any <span class="parameter">slot-name</span> is not the name
of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> in the <span class="parameter">instance</span>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="macro-reference" href="#macro-with-accessors">with-accessors</a>,
<a class="function-reference" href="#function-slot-value">slot-value</a>,
<a class="special-operator-reference" href="chapter-3.xhtml#special-operator-symbol-macrolet">symbol-macrolet</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd>A <a class="macro-reference" href="#macro-with-slots">with-slots</a> expression of the form:<br/><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><span class="error">unexpanded non-math macro: (:OTHER-COMMAND-APPLICATION (# #) :OUTPUT-FILE
                            "chapter-7" :NAME "openup" :BOUNDS (87648 . 87660))</span>\vbox<table><tbody><tr/><tr><td><span class="explicit-mono">(with-slots</span>(<math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>\hbox<span class="explicit-italic"> slot-entry</span></mrow><mo>1</mo></msub><mi>â€¦</mi><msub><mrow>\hbox<span class="explicit-italic"> slot-entry</span></mrow><mo>n</mo></msub></math>) <span class="explicit-italic"> instance-form</span><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>\hbox<span class="explicit-italic"> form</span></mrow><mo>1</mo></msub><mi>â€¦</mi><msub><mrow>\hbox<span class="explicit-italic"> form</span></mrow><mo>k</mo></msub></math>)</td></tr></tbody></table></math> expands into the equivalent of<br/><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><span class="error">unexpanded non-math macro: (:OTHER-COMMAND-APPLICATION (# #) :OUTPUT-FILE
                            "chapter-7" :NAME "openup" :BOUNDS (87900 . 87912))</span>\vbox<table><tbody><tr/><tr><td><span class="explicit-mono">(</span></td><td><span class="explicit-mono">let ((</span><math xmlns="http://www.w3.org/1998/Math/MathML">in</math><span class="explicit-italic"> instance-form</span><span class="explicit-mono">))</span></td></tr><tr><td/><td><span class="explicit-mono">(symbol-macrolet (</span><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>\hbox<span class="explicit-italic"> Q</span></mrow><mo>1</mo></msub><mi>â€¦</mi><msub><mrow>\hbox<span class="explicit-italic"> Q</span></mrow><mo>n</mo></msub></math><span class="explicit-mono">)</span><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>\hbox<span class="explicit-italic"> form</span></mrow><mo>1</mo></msub><mi>â€¦</mi><msub><mrow>\hbox<span class="explicit-italic"> form</span></mrow><mo>k</mo></msub></math><span class="explicit-mono">))</span></td></tr></tbody></table></math> where <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>\hbox<span class="explicit-italic"> Q</span></mrow><mo>i</mo></msub></math> is <br/><math xmlns="http://www.w3.org/1998/Math/MathML" display="block">\vbox\hbox<span class="explicit-mono">(</span><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>\hbox<span class="explicit-italic"> slot-entry</span></mrow><mo>i</mo></msub></math> () <span class="explicit-mono">(slot-value </span><math xmlns="http://www.w3.org/1998/Math/MathML">in</math> '<math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>\hbox<span class="explicit-italic"> slot-entry</span></mrow><mo>i</mo></msub></math><span class="explicit-mono">))</span></math> if <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>\hbox<span class="explicit-italic"> slot-entry</span></mrow><mo>i</mo></msub></math> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>
and is<br/><math xmlns="http://www.w3.org/1998/Math/MathML" display="block">\vbox\hbox<span class="explicit-mono">(</span><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>\hbox<span class="explicit-italic"> variable-name</span></mrow><mo>i</mo></msub></math> () <span class="explicit-mono">(slot-value </span><math xmlns="http://www.w3.org/1998/Math/MathML">in</math> '<math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>\hbox<span class="explicit-italic"> slot-name</span></mrow><mo>i</mo></msub></math><span class="explicit-mono">))</span></math> if <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>\hbox<span class="explicit-italic"> slot-entry</span></mrow><mo>i</mo></msub></math>
is of the form <br/><math xmlns="http://www.w3.org/1998/Math/MathML" display="block">\vbox\hbox<span class="explicit-mono">(</span><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>\hbox<span class="explicit-italic"> variable-name</span></mrow><mo>i</mo></msub></math> <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>\hbox<span class="explicit-italic"> slot-name</span></mrow><mo>i</mo></msub></math><span class="explicit-mono">)</span></math></dd></dl>
</div><br/><br/><br/><div class="component" id="macro-defclass"><div class="header"><span class="left"><span class="name" id="macro-defclass">defclass</span></span><span class="right"><span class="ftype">Macro</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">defclass</span>&nbsp;<span class="lambda-list"><span class="parameter">class-name</span> <span class="explicit-roman">(</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">superclass-name</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span><span class="explicit-roman">)</span>
         <span class="explicit-roman">(</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="explicit-italic"> slot-specifier</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span><span class="explicit-roman">)</span>
         <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>[</mi><mi>[</mi><mi>â†“</mi>\hbox<span class="explicit-italic"> class-option</span><mi>]</mi><mi>]</mi></math></span>&nbsp;â†’&nbsp;<span class="return-values">new-class</span></span><br/><br/><tr><td>slot-specifier</td><td>::=</td><td><span class="parameter">slot-name</span> |
                        (<span class="parameter">slot-name</span>                         
                         <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>[</mi><mi>[</mi></math><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter"><span class="parameter">slot-option</span></span><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>]</mi><mi>]</mi></math>)</td></tr>
<tr><td>slot-name</td><td>::=</td><td><a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a></td></tr>
<tr><td>slot-option</td><td>::=</td><td><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="keyword">:reader</span>        <span class="parameter">reader-function-name</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span> | <br/>
                     <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="keyword">:writer</span>        <span class="parameter">writer-function-name</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span> | <br/>
                     <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="keyword">:accessor</span>      <span class="parameter">reader-function-name</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span> | <br/>
                           <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="keyword">:allocation</span>    <span class="parameter">allocation-type</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math>       | <br/>
                     <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="keyword">:initarg</span>       <span class="parameter">initarg-name</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span>         | <br/>
                           <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="keyword">:initform</span>      <span class="parameter">form</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math>                  | <br/>
                           <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="keyword">:type</span>          <span class="parameter">type-specifier</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math>        | <br/>
                           <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="keyword">:documentation</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-string">string</a><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math></td></tr>
<tr><td>function-name</td><td>::=</td><td><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> | <span class="explicit-mono">(setf <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>)</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math></td></tr>
<tr><td>class-option</td><td>::=</td><td>(<span class="keyword">:default-initargs</span> <pre><code><span class="syntax-root">.
</span></code></pre> <span class="parameter">initarg-list</span>) | <br/>
                      (<span class="keyword">:documentation</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-string">string</a>)                 | <br/>
                      (<span class="keyword">:metaclass</span> <span class="parameter">class-name</span>)</td></tr><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">class-name</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-non-nil">non-nil</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>.<br/><span class="parameter">superclass-name</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-non-nil">non-nil</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>.<br/><span class="parameter">slot-name</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>.
  The <span class="parameter">slot-name</span> argument is 
  a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> that is syntactically valid for use as a variable name.<br/><span class="parameter">reader-function-name</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-non-nil">non-nil</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>.
 <span class="keyword">:reader</span> can be supplied more than once for a given <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>.<br/><span class="parameter">writer-function-name</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> name.
 <span class="keyword">:writer</span> can be supplied more than once for a given <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>.<br/><span class="parameter">reader-function-name</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-non-nil">non-nil</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>.
 <span class="keyword">:accessor</span> can be supplied more than once for a given <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>.<br/><span class="parameter">allocation-type</span>&mdash;(member <span class="keyword">:instance</span> <span class="keyword">:class</span>).
 <span class="keyword">:allocation</span> can be supplied once at most for a given <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>.<br/><span class="parameter">initarg-name</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>.
 <span class="keyword">:initarg</span> can be supplied more than once for a given <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>.  <br/><span class="parameter">form</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>.
 <span class="keyword">:initform</span> can be supplied once at most for a given <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>.  <br/><span class="parameter">type-specifier</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-type specifier">type specifier</a>.
 <span class="keyword">:type</span> can be supplied once at most for a given <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>. <br/><span class="parameter">class-option</span>&mdash; refers to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> as a whole or to all class <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a>.<br/><span class="parameter">initarg-list</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> of alternating initialization argument
		        <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">names</a> and default initial value <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a>.
 <span class="keyword">:default-initargs</span> can be supplied at most once.<br/><span class="parameter">class-name</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-non-nil">non-nil</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>.  <span class="keyword">:metaclass</span> can be supplied once at most.<br/> 
 
 <br/> 
 
 
<span class="parameter">new-class</span>&mdash;the new <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>The macro <a class="macro-reference" href="#macro-defclass">defclass</a> defines a new named <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a>.  It returns
the new <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> as its result.<br/>The syntax of <a class="macro-reference" href="#macro-defclass">defclass</a> provides options for specifying
initialization arguments for <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a>, for specifying default
initialization values for <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a>, and for requesting that 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> on specified <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic functions</a> be automatically 
generated for reading and writing the values of <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a>.  
No reader or writer functions are defined by default; 
their generation must be explicitly requested.  However,
<a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a> can always be <a class="glossary-reference" href="chapter-26.xhtml#glossary-access">accessed</a> using <a class="function-reference" href="#function-slot-value">slot-value</a>.<br/>Defining a new <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> also causes a <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> of the same name to be
defined.  The predicate <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="chapter-4.xhtml#function-typep">typep</a> <span class="parameter">object</span> <span class="parameter">class-name</span>)</span>
</span></code></pre> returns
true if the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> of the given <span class="parameter">object</span> is 
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> named by <span class="parameter">class-name</span> itself or
a subclass of the class <span class="parameter">class-name</span>.  A <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> 
can be used as a <a class="glossary-reference" href="chapter-26.xhtml#glossary-type specifier">type specifier</a>.  
Thus <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="chapter-4.xhtml#function-typep">typep</a> <span class="parameter">object</span> <span class="parameter">class</span>)</span>
</span></code></pre> returns <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>
if the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> of the <span class="parameter">object</span> is 
<span class="parameter">class</span> itself or a subclass of <span class="parameter">class</span>.   <br/>The <span class="parameter">class-name</span> argument specifies the <a class="glossary-reference" href="chapter-26.xhtml#glossary-proper name">proper name</a> 
of the new <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a>.  
If a <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> with the same <a class="glossary-reference" href="chapter-26.xhtml#glossary-proper name">proper name</a> already exists 
 and that <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> is an <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> of <a class="type-reference" href="chapter-4.xhtml#type-standard-class">standard-class</a>, 
 and if the <a class="macro-reference" href="#macro-defclass">defclass</a> form for the definition of the new <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a>
      specifies a <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> <a class="type-reference" href="chapter-4.xhtml#type-standard-class">standard-class</a>,
the existing <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> is redefined,
and instances of it (and its <a class="glossary-reference" href="chapter-26.xhtml#glossary-subclass">subclasses</a>) are updated 
 to the new definition at the time that they are next <a class="glossary-reference" href="chapter-26.xhtml#glossary-access">accessed</a>.
For details, see <span class="section-reference error">section:ClassReDef.</span><br/> 
Each <span class="parameter">superclass-name</span> argument 
specifies a direct <a class="glossary-reference" href="chapter-26.xhtml#glossary-superclass">superclass</a> of the new <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a>.  
If the <a class="glossary-reference" href="chapter-26.xhtml#glossary-superclass">superclass</a> list is empty, then the <a class="glossary-reference" href="chapter-26.xhtml#glossary-superclass">superclass</a>
defaults depending on the <a class="glossary-reference" href="chapter-26.xhtml#glossary-metaclass">metaclass</a>, 
with <a class="type-reference" href="chapter-4.xhtml#type-standard-object">standard-object</a> being the
default for <a class="type-reference" href="chapter-4.xhtml#type-standard-class">standard-class</a>.<br/>The new <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> will
inherit <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a> and <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> 
from each of its direct <a class="glossary-reference" href="chapter-26.xhtml#glossary-superclass">superclasses</a>, from
their direct <a class="glossary-reference" href="chapter-26.xhtml#glossary-superclass">superclasses</a>, and so on.  
For a discussion of how <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a> and <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> are inherited,
see <span class="section-reference error">section:Inheritance.</span><br/> 
The following slot options are available:<br/><ul><li>The <span class="keyword">:reader</span> slot option specifies that an <a class="glossary-reference" href="chapter-26.xhtml#glossary-unqualified method">unqualified method</a> is
to be defined on the <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> named <span class="parameter">reader-function-name</span>
to read the value of the given <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>.<br/></li><li>The <span class="keyword">:writer</span> slot option specifies that an <a class="glossary-reference" href="chapter-26.xhtml#glossary-unqualified method">unqualified method</a> is
to be defined on the <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> named <span class="parameter">writer-function-name</span>
to write the value of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>.<br/></li><li>The <span class="keyword">:accessor</span> slot option specifies that an <a class="glossary-reference" href="chapter-26.xhtml#glossary-unqualified method">unqualified method</a>
is to be defined on the generic function named <span class="parameter">reader-function-name</span>
to read the value of the given <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>
and that an <a class="glossary-reference" href="chapter-26.xhtml#glossary-unqualified method">unqualified method</a> is to be defined on the 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> named <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> <span class="parameter">reader-function-name</span>)</span>
</span></code></pre> to be
used with <a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> to modify the value of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>.<br/></li><li>The <span class="keyword">:allocation</span> slot option is used to specify where storage is
to be allocated for the given <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>.  Storage for a 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> can be located
in each instance or in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> itself.
The value of the <span class="parameter">allocation-type</span> argument can be 
either the keyword <span class="keyword">:instance</span>
or the keyword <span class="keyword">:class</span>.    If the <span class="keyword">:allocation</span>
slot option is not specified, the effect is the same as specifying
<pre><code><span class="syntax-root"><span class="syntax-keyword-symbol">:allocation</span> <span class="syntax-keyword-symbol">:instance</span>
</span></code></pre>.
<ul><li>If <span class="parameter">allocation-type</span> is <span class="keyword">:instance</span>, a <a class="glossary-reference" href="chapter-26.xhtml#glossary-local slot">local slot</a> of
the name <span class="parameter">slot-name</span> is allocated in each instance of the 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a>.<br/></li><li>If <span class="parameter">allocation-type</span> is <span class="keyword">:class</span>, a shared 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> of the given                                      
name is allocated in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> created by this <a class="macro-reference" href="#macro-defclass">defclass</a>
form.  The value of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> is shared by all 
<span class="glossary-reference error">glossary:instances</span> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a>.
If a class <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>C</mrow><mo>1</mo></msub></math> defines such a <a class="glossary-reference" href="chapter-26.xhtml#glossary-shared slot">shared slot</a>, any 
subclass <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>C</mrow><mo>2</mo></msub></math> of
<math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>C</mrow><mo>1</mo></msub></math> will share this single <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> unless the <a class="macro-reference" href="#macro-defclass">defclass</a> form
for <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>C</mrow><mo>2</mo></msub></math> specifies a <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> of the same <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> or there is a
superclass of <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>C</mrow><mo>2</mo></msub></math> that precedes <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>C</mrow><mo>1</mo></msub></math> in the class precedence
list of <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>C</mrow><mo>2</mo></msub></math> and that defines a <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> of the same <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a>.
</li></ul>              
</li><li>The <span class="keyword">:initform</span> slot option is used to provide a default
initial value form to be used in the initialization of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>.  This
<a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> is evaluated every time it is used to initialize the 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>.  The
lexical environment in which this <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> is evaluated is the lexical
environment in which the <a class="macro-reference" href="#macro-defclass">defclass</a> form was evaluated.
Note that the lexical environment refers both to variables and to
functions.  For <a class="glossary-reference" href="chapter-26.xhtml#glossary-local slot">local slots</a>, the dynamic environment is the dynamic
environment in which <a class="function-reference" href="#function-make-instance">make-instance</a> is called; for shared
<a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a>, the dynamic environment is the dynamic environment in which the
<a class="macro-reference" href="#macro-defclass">defclass</a> form was evaluated.  
See <span class="section-reference error">section:ObjectCreationAndInit.</span><br/>No implementation is permitted to extend the syntax of <a class="macro-reference" href="#macro-defclass">defclass</a>
to allow <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="parameter">slot-name</span> <span class="parameter">form</span>)</span>
</span></code></pre> as an abbreviation for 
<pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="parameter">slot-name</span> <span class="syntax-keyword-symbol">:initform</span> <span class="parameter">form</span>)</span>
</span></code></pre>.
<br/></li><li>The <span class="keyword">:initarg</span> slot option declares an initialization
argument named <span class="parameter">initarg-name</span> and specifies that this
initialization argument initializes the given <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>.  If the
initialization argument has a value in the call to
<a class="function-reference" href="#function-initialize-instance">initialize-instance</a>, the value will be stored into the given <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>,
and the slot's <span class="keyword">:initform</span> slot option, if any, is not
evaluated.  If none of the initialization arguments specified for a
given <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> has a value, the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> is initialized according to the
<span class="keyword">:initform</span> slot option, if specified.  <br/></li><li>The <span class="keyword">:type</span> slot option specifies that the contents of the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> will always be of the specified data type.  It effectively
declares the result type of the reader generic function when applied
to an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> of this <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a>.  The consequences of attempting to store in a
<a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> a value that does not satisfy the type of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> are undefined.
The <span class="keyword">:type</span> slot option is further discussed in 
<a class="section-reference" href="#section-SlotInheritance">Inheritance of Slots and Slot Options</a>.<br/></li><li>The <span class="keyword">:documentation</span> slot option provides a <a class="glossary-reference" href="chapter-26.xhtml#glossary-documentation string">documentation string</a>
for the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>.  <span class="keyword">:documentation</span> can be supplied once at most 
for a given <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>. 
</li></ul><br/>Each class option is an option that refers to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> as a whole.
The following class options are available:<br/><ul><li>The <span class="keyword">:default-initargs</span> class option is followed by a list of
alternating initialization argument <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">names</a> and default initial value
forms.  If any of these initialization arguments does not appear in
the initialization argument list supplied to <a class="function-reference" href="#function-make-instance">make-instance</a>, the
corresponding default initial value form is evaluated, and the
initialization argument <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> and the <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>'s value are added to the end
of the initialization argument list before the instance is created;
see <span class="section-reference error">section:ObjectCreationAndInit.</span>
The default initial value form is evaluated each time it is used.  The lexical
environment in which this <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> is evaluated is the lexical environment
in which the <a class="macro-reference" href="#macro-defclass">defclass</a> form was evaluated.  The dynamic
environment is the dynamic environment in which <a class="function-reference" href="#function-make-instance">make-instance</a>
was called.  If an initialization argument <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> appears more than once
in a <span class="keyword">:default-initargs</span> class option, an error is signaled.<br/> 
</li><li>The <span class="keyword">:documentation</span> class option causes a <a class="glossary-reference" href="chapter-26.xhtml#glossary-documentation string">documentation string</a> 
to be attached with the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>,
and attached with kind <a class="symbol-reference" href="chapter-25.xhtml#symbol-type">type</a> to the <span class="parameter">class-name</span>.
<span class="keyword">:documentation</span> can be supplied once at most.
 
</li><li>The <span class="keyword">:metaclass</span> class option is used to specify that
instances of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> being defined are to have a different metaclass
than the default provided by the system (the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> <a class="type-reference" href="chapter-4.xhtml#type-standard-class">standard-class</a>).<br/></li></ul><br/>Note the following rules of <a class="macro-reference" href="#macro-defclass">defclass</a> for <a class="glossary-reference" href="chapter-26.xhtml#glossary-standard class">standard classes</a>:<br/><ul><li>It is not required that the <a class="glossary-reference" href="chapter-26.xhtml#glossary-superclass">superclasses</a> of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> be defined before
the <a class="macro-reference" href="#macro-defclass">defclass</a> form for that <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> is evaluated.<br/></li><li>All the <a class="glossary-reference" href="chapter-26.xhtml#glossary-superclass">superclasses</a> of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> must be defined before 
an <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> can be made.<br/></li><li>A <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> must be defined before it can be used as a parameter
specializer in a <a class="macro-reference" href="#macro-defmethod">defmethod</a> form.<br/></li></ul><br/>The object system can be extended to cover situations where these rules are not
obeyed.<br/>Some slot options are inherited by a <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> from its 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-superclass">superclasses</a>, and
some can be shadowed or altered by providing a local slot description.
No class options except <span class="keyword">:default-initargs</span> are inherited.  For a
detailed description of how <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a> and slot options are inherited, 
see <span class="section-reference error">section:SlotInheritance.</span><br/>The options to <a class="macro-reference" href="#macro-defclass">defclass</a> can be extended.  It is required that
all implementations signal an error if they observe a class option or
a slot option that is not implemented locally.<br/>It is valid to specify more than one reader, writer, accessor, or
initialization argument for a <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>.  No other slot option can
appear
more than once in a single slot description, or an error is
signaled.<br/>If no reader, writer, or accessor is specified for a <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>, 
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> can only be <a class="glossary-reference" href="chapter-26.xhtml#glossary-access">accessed</a> by the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="#function-slot-value">slot-value</a>.<br/> 
      
      
      
      
 
If a <a class="macro-reference" href="#macro-defclass">defclass</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> appears as a <a class="glossary-reference" href="chapter-26.xhtml#glossary-top level form">top level form</a>,
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler">compiler</a> must make the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> be recognized as a
valid <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> in subsequent declarations (as for <a class="macro-reference" href="chapter-4.xhtml#macro-deftype">deftype</a>)
and be recognized as a valid <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> for <a class="macro-reference" href="#macro-defmethod">defmethod</a>
<a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter specializer">parameter specializers</a> and for use as the <span class="keyword">:metaclass</span> option of a
subsequent <a class="macro-reference" href="#macro-defclass">defclass</a>.  The <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler">compiler</a> must make 
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> definition 
available to be returned by <a class="function-reference" href="#function-find-class">find-class</a> when its <span class="parameter">environment</span>
<a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">argument</a> is a value received as the <a class="glossary-reference" href="chapter-26.xhtml#glossary-environment parameter">environment parameter</a> of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a>.

</dd></dl><dl><dt class="label">Examples</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd>If there are any duplicate slot names, 
an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-5.xhtml#type-program-error">program-error</a> is signaled.<br/>If an initialization argument <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> appears more than once in 
<span class="keyword">:default-initargs</span> class option, 
an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-5.xhtml#type-program-error">program-error</a> is signaled.<br/>If any of the following slot options appears more than once in a
single slot description, an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-5.xhtml#type-program-error">program-error</a>
is signaled: <span class="keyword">:allocation</span>,
<span class="keyword">:initform</span>, <span class="keyword">:type</span>, <span class="keyword">:documentation</span>.<br/>It is required that all implementations signal 
an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-5.xhtml#type-program-error">program-error</a> if they observe a class option 
or a slot option that is not implemented locally.<br/> <br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="function-reference" href="chapter-25.xhtml#function-documentation">documentation</a>,
<a class="function-reference" href="#function-initialize-instance">initialize-instance</a>,
<a class="function-reference" href="#function-make-instance">make-instance</a>,
<a class="function-reference" href="#function-slot-value">slot-value</a>,
<a class="section-reference" href="chapter-4.xhtml#section-Classes">Classes</a>,
<a class="section-reference" href="chapter-4.xhtml#section-Inheritance">Inheritance</a>,
<a class="section-reference" href="chapter-4.xhtml#section-ClassReDef">Redefining Classes</a>,
<a class="section-reference" href="chapter-4.xhtml#section-DeterminingtheCPL">Determining the Class Precedence List</a>,
<a class="section-reference" href="#section-ObjectCreationAndInit">Object Creation and Initialization</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd><span class="none">None</span>.<br/></dd></dl></div><br/><br/><br/><div class="component" id="macro-defgeneric"><div class="header"><span class="left"><span class="name" id="macro-defgeneric">defgeneric</span></span><span class="right"><span class="ftype">Macro</span></span></div><br/>
<dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">defgeneric</span>&nbsp;<span class="lambda-list">function-name gf-lambda-list
	  		  <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>[</mi><mi>[</mi></math> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">option</span> | <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">method-description</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>]</mi><mi>]</mi></math></span>&nbsp;â†’&nbsp;<span class="return-values">new-generic</span></span><br/><br/><tr><td>option</td><td>::=</td><td><span class="explicit-roman">(</span><span class="keyword">:argument-precedence-order</span> <math xmlns="http://www.w3.org/1998/Math/MathML">\hbox<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">parameter-name</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><msup><mrow/><mo>+</mo></msup></math><span class="explicit-roman">)</span>  |<br/>
		<span class="explicit-roman">(</span><a class="symbol-reference" href="chapter-3.xhtml#symbol-declare">declare</a> <math xmlns="http://www.w3.org/1998/Math/MathML">\hbox<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">gf-declaration</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><msup><mrow/><mo>+</mo></msup></math><span class="explicit-roman">)</span>		    |<br/>
	        <span class="explicit-roman">(</span><span class="keyword">:documentation</span> <span class="parameter">gf-documentation</span><span class="explicit-roman">)</span>		    |<br/>
		<span class="explicit-roman">(</span><span class="keyword">:method-combination</span> 
		       <span class="parameter">method-combination</span> 
		       <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">method-combination-argument</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span><span class="explicit-roman">)</span>			    |<br/>
		<span class="explicit-roman">(</span><span class="keyword">:generic-function-class</span> <span class="parameter">generic-function-class</span><span class="explicit-roman">)</span> |<br/>
		<span class="explicit-roman">(</span><span class="keyword">:method-class</span> <span class="parameter">method-class</span><span class="explicit-roman">)</span></td></tr>
<tr><td>method-description</td><td>::=</td><td><span class="explicit-roman">(</span><span class="keyword">:method</span>
			    <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">method-qualifier</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span> 
					<span class="parameter">specialized-lambda-list</span>
			          <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>[</mi><mi>[</mi></math> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">declaration</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>|</mi></math> <span class="parameter">documentation</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>]</mi><mi>]</mi></math> 
					<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">form</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span><span class="explicit-roman">)</span></td></tr><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">function-name</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function name">function name</a>.<br/><span class="parameter">generic-function-class</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-non-nil">non-nil</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> naming a <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a>.<br/><span class="parameter">gf-declaration</span>&mdash;an <a class="declaration-reference" href="chapter-3.xhtml#declaration-optimize">optimize</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration specifier">declaration specifier</a>;
  other <a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration specifier">declaration specifiers</a> are not permitted.

<span class="parameter">gf-documentation</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-string">string</a>; not evaluated.<br/><span class="parameter">gf-lambda-list</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function lambda list">generic function lambda list</a>.<br/><span class="parameter">method-class</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-non-nil">non-nil</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> naming a <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a>.<br/><span class="parameter">method-combination-argument</span>&mdash;an <span class="glossary-reference error">glossary:object.</span>

<span class="parameter">method-combination-name</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> 
				  naming a <a class="glossary-reference" href="chapter-26.xhtml#glossary-method combination">method combination</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a>.<br/><span class="parameter">method-qualifiers</span>,
<span class="parameter">specialized-lambda-list</span>,
<span class="parameter">declarations</span>,
<span class="parameter">documentation</span>,
<span class="parameter">forms</span>&mdash;as per <a class="macro-reference" href="#macro-defmethod">defmethod</a>.<br/><span class="parameter">new-generic</span>&mdash;the <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.<br/><span class="parameter">parameter-name</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> that names a <a class="glossary-reference" href="chapter-26.xhtml#glossary-required parameter">required parameter</a> 
			 in the <span class="parameter">lambda-list</span>.
  (If the <span class="keyword">:argument-precedence-order</span> option is specified,
   each <a class="glossary-reference" href="chapter-26.xhtml#glossary-required parameter">required parameter</a> in the <span class="parameter">lambda-list</span>
   must be used exactly once as a <span class="parameter">parameter-name</span>.)<br/></dd></dl><dl><dt class="label">Description</dt><dd>The macro <a class="macro-reference" href="#macro-defgeneric">defgeneric</a> is used to define a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a>
or to specify options and declarations that pertain 
to a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> as a whole.<br/>If <span class="parameter">function-name</span> is a 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> it must be of the form <span class="explicit-mono">(setf <span class="explicit-italic"> symbol</span>)</span>.
If <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-fboundp">fboundp</a> <span class="parameter">function-name</span>)</span>
</span></code></pre> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>, a new
<a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> is created.  
If <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-fdefinition">fdefinition</a> <span class="parameter">function-name</span>)</span>
</span></code></pre> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a>, that 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a>
is modified.  If <span class="parameter">function-name</span> names 
an <a class="glossary-reference" href="chapter-26.xhtml#glossary-ordinary function">ordinary function</a>,
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a>, or a <a class="glossary-reference" href="chapter-26.xhtml#glossary-special operator">special operator</a>, 
an error is signaled.<br/>The effect of the <a class="macro-reference" href="#macro-defgeneric">defgeneric</a> macro is as if the following three
steps were performed: first, 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> defined by previous <a class="macro-reference" href="#macro-defgeneric">defgeneric</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a> are removed; 

second, <a class="function-reference" href="#function-ensure-generic-function">ensure-generic-function</a>
is called; and finally, <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> specified by the current
<a class="macro-reference" href="#macro-defgeneric">defgeneric</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> are added to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a>. <br/>Each <span class="parameter">method-description</span> defines a <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> on the <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a>.
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a> of each <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> must be congruent with the 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a>
specified by the <span class="parameter">gf-lambda-list</span> option.  
If no <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> descriptions are specified and a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> of the same
name does not already exist, a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> with no 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> is created.<br/>The <span class="parameter">gf-lambda-list</span> argument of <a class="macro-reference" href="#macro-defgeneric">defgeneric</a> specifies the shape of
<a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda lists</a> for the <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> on this <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a>.
All <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> on the resulting 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> must have
<a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda lists</a> that are congruent with this shape.  If a <a class="macro-reference" href="#macro-defgeneric">defgeneric</a>
form is evaluated and some 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> for that <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a>
have <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda lists</a> that are not congruent with that given in
the <a class="macro-reference" href="#macro-defgeneric">defgeneric</a> form, an error is signaled.  For further details
on method congruence, see <span class="section-reference error">section:GFMethodLambdaListCongruency.</span><br/>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> passes to the 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> all the argument values passed to
it, and only those; default values are not supported.
Note that optional and keyword arguments in method definitions, however,
can have default initial value forms and can use supplied-p parameters. <br/>The following options are provided.  
Except as otherwise noted, 
a given option may occur only once.<br/><ul><li>The <span class="keyword">:argument-precedence-order</span> option is used to specify the
order in which the required arguments in a call to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a>
are tested for specificity when selecting a particular
<a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a>. Each required argument, as specified in the <span class="parameter">gf-lambda-list</span>
argument, must be included exactly once as a <span class="parameter">parameter-name</span>
so that the full and unambiguous precedence order is
supplied.  If this condition is not met, an error is signaled.
<br/></li><li>The <a class="symbol-reference" href="chapter-3.xhtml#symbol-declare">declare</a> option is used to specify declarations that pertain
to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a>.<br/>An <a class="declaration-reference" href="chapter-3.xhtml#declaration-optimize">optimize</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration specifier">declaration specifier</a> is allowed.
It specifies whether method selection should be optimized for 
speed or space, but it has no effect on <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a>.
To control how a <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> is optimized, an <a class="declaration-reference" href="chapter-3.xhtml#declaration-optimize">optimize</a>
declaration must be placed directly in the <a class="macro-reference" href="#macro-defmethod">defmethod</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>
or method description.  The optimization qualities <a class="symbol-reference" href="chapter-3.xhtml#symbol-speed">speed</a> and
<a class="symbol-reference" href="chapter-3.xhtml#symbol-space">space</a> are the only qualities this standard requires, but an
implementation can extend the object system to recognize other qualities.  
A simple implementation that has only one method selection technique 
and ignores <a class="declaration-reference" href="chapter-3.xhtml#declaration-optimize">optimize</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration specifier">declaration specifiers</a> is valid.<br/>The <a class="declaration-reference" href="chapter-3.xhtml#declaration-special">special</a>, <a class="declaration-reference" href="chapter-3.xhtml#declaration-ftype">ftype</a>
, <a class="declaration-reference" href="chapter-3.xhtml#declaration-inline">inline</a>,
<a class="declaration-reference" href="chapter-3.xhtml#declaration-notinline">notinline</a>, and <a class="declaration-reference" href="chapter-3.xhtml#declaration-declaration">declaration</a> declarations are not permitted.
Individual implementations can extend the <a class="symbol-reference" href="chapter-3.xhtml#symbol-declare">declare</a> option to
support additional declarations.

If an implementation notices a <a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration specifier">declaration specifier</a> that it does
not support and that has not been proclaimed as a non-standard 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration identifier">declaration identifier</a> name in a <a class="declaration-reference" href="chapter-3.xhtml#declaration-declaration">declaration</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-proclamation">proclamation</a>, 
it should issue a warning. <br/>The <a class="symbol-reference" href="chapter-3.xhtml#symbol-declare">declare</a> option may be specified more than once.
The effect is the same as if the lists of <a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration specifier">declaration specifiers</a> 
had been appended together into a single list and specified as a 
single <a class="symbol-reference" href="chapter-3.xhtml#symbol-declare">declare</a> option.

</li><li>The <span class="keyword">:documentation</span> argument is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-documentation string">documentation string</a>
to be attached to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>, 
and to be attached with kind <a class="symbol-reference" href="chapter-2.xhtml#symbol-function">function</a> to the <span class="parameter">function-name</span>.<br/></li><li>The <span class="keyword">:generic-function-class</span> option may be used to specify that
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> is to have a different <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> than
the default provided by the system (the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> <a class="type-reference" href="chapter-4.xhtml#type-standard-generic-function">standard-generic-function</a>).
The <span class="parameter">class-name</span> argument is the name of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> that can be the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a>.  If <span class="parameter">function-name</span> specifies
an existing <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> that has a different value for the
<span class="keyword">:generic-function-class</span> argument and the new generic function 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> is compatible with the old, <a class="function-reference" href="#function-change-class">change-class</a> is called 
to change the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a>; 
otherwise an error is signaled.<br/></li><li>The <span class="keyword">:method-class</span> option is used to specify that all <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> on
this <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> are to have a different <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> from the 
default provided by the system (the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> <a class="type-reference" href="chapter-4.xhtml#type-standard-method">standard-method</a>).
The <span class="parameter">class-name</span> argument is the name of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> that is capable 
of being the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a>.
<br/></li><li>The <span class="keyword">:method-combination</span> option is followed by a symbol that
names a type of method combination.  The arguments (if any) that
follow that symbol depend on the type of method combination.  Note
that the standard method combination type does not support any
arguments.  However, all types of method combination defined by the
short form of <a class="macro-reference" href="#macro-define-method-combination">define-method-combination</a> accept an optional
argument named <span class="parameter">order</span>, defaulting to <span class="keyword">:most-specific-first</span>,
where a value of <span class="keyword">:most-specific-last</span> reverses
the order of the primary <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> without affecting the order of the
auxiliary <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a>.<br/></li></ul><br/>The <span class="parameter">method-description</span> arguments define <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> that will
be associated with the <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a>.  The <span class="parameter">method-qualifier</span>
and <span class="parameter">specialized-lambda-list</span> arguments in a method description
are the same as for <a class="macro-reference" href="#macro-defmethod">defmethod</a>.<br/>The <span class="parameter">form</span> arguments specify the method body.  The body of the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> is enclosed in an <a class="glossary-reference" href="chapter-26.xhtml#glossary-implicit block">implicit block</a>.
If <span class="parameter">function-name</span> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>, this block bears the same name as
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a>.  If <span class="parameter">function-name</span> is a 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> of the
form <span class="explicit-mono">(setf <span class="parameter">symbol</span>)</span>, the name of the block is <span class="parameter">symbol</span>.  <br/>Implementations can extend <a class="macro-reference" href="#macro-defgeneric">defgeneric</a> to include other options.
It is required that an implementation signal an error if
it observes an option that is not implemented locally.<br/><a class="macro-reference" href="#macro-defgeneric">defgeneric</a> is not required to perform any compile-time side effects.
In particular, the <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> are not installed for invocation during 
compilation.  An <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation">implementation</a> may choose to store information about
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> for the purposes of compile-time error-checking
(such as checking the number of arguments on calls, or noting that a definition
 for the function name has been seen).

</dd></dl><dl><dt class="label">Examples</dt><dd/></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd>If <span class="parameter">function-name</span> names an <a class="glossary-reference" href="chapter-26.xhtml#glossary-ordinary function">ordinary function</a>, a <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a>,
or a <a class="glossary-reference" href="chapter-26.xhtml#glossary-special operator">special operator</a>, an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-5.xhtml#type-program-error">program-error</a> is signaled.<br/>Each required argument, as specified in the <span class="parameter">gf-lambda-list</span>
argument, must be included exactly once as a <span class="parameter">parameter-name</span>,
or an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-5.xhtml#type-program-error">program-error</a> is signaled.<br/>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a> of each <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> specified by a 
<span class="parameter">method-description</span> must be congruent with the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a> specified
by the <span class="parameter">gf-lambda-list</span> option, or
an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-9.xhtml#type-error">error</a> is signaled.<br/>If a <a class="macro-reference" href="#macro-defgeneric">defgeneric</a> form is evaluated and some <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> for
that <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> have <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda lists</a> that are not congruent with
that given in the <a class="macro-reference" href="#macro-defgeneric">defgeneric</a> form, 
an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-9.xhtml#type-error">error</a> is signaled.<br/>A given <span class="parameter">option</span> may occur only once,
or an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-5.xhtml#type-program-error">program-error</a> is signaled.<br/>
If <span class="parameter">function-name</span> specifies an existing <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> 
that has a different value for the <span class="keyword">:generic-function-class</span> 
argument and the new generic function <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> is compatible with the
old, <a class="function-reference" href="#function-change-class">change-class</a> is called to change the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> of 
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a>; otherwise an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-9.xhtml#type-error">error</a> is signaled.<br/>Implementations can extend <a class="macro-reference" href="#macro-defgeneric">defgeneric</a> to include other options.
It is required that an implementation 
signal an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-5.xhtml#type-program-error">program-error</a> if
it observes an option that is not implemented locally.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="macro-reference" href="#macro-defmethod">defmethod</a>,
<a class="function-reference" href="chapter-25.xhtml#function-documentation">documentation</a>,
<a class="function-reference" href="#function-ensure-generic-function">ensure-generic-function</a>,
<a class="type-reference" href="chapter-4.xhtml#type-generic-function">generic-function</a>,
<a class="section-reference" href="#section-GFMethodLambdaListCongruency">Congruent Lambda-lists for all Methods of a Generic Function</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd><span class="none">None</span>.<br/></dd></dl>
</div><br/><br/><br/><div class="component" id="macro-defmethod"><div class="header"><span class="left"><span class="name" id="macro-defmethod">defmethod</span></span><span class="right"><span class="ftype">Macro</span></span></div><br/>
<dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">defmethod</span>&nbsp;<span class="lambda-list"><span class="explicit-italic"> function-name</span>
				      <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="explicit-italic"> method-qualifier</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span>
				      <span class="explicit-italic"> specialized-lambda-list</span>
				<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>[</mi><mi>[</mi></math> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">declaration</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>|</mi></math> <span class="parameter">documentation</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>]</mi><mi>]</mi></math> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">form</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span></span>&nbsp;â†’&nbsp;<span class="return-values">new-method</span></span><br/><br/><br/>


<span class="explicit-italic"> function-name</span>::= <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>|</mi></math> <span class="explicit-mono">(setf <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>)</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math>
<br/>


<span class="explicit-italic"> method-qualifier</span>::= <a class="glossary-reference" href="chapter-26.xhtml#glossary-non-list">non-list</a>
<br/>


<table><tbody><tr><td/></tr><tr><td/><td><span class="explicit-italic"> specialized-lambda-list</span>::=(</td><td><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">var</span>  <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>|</mi></math> <span class="explicit-roman">(</span><span class="parameter">var</span>
<span class="explicit-italic"> parameter-specializer-name</span><span class="explicit-roman">)</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span></td></tr><tr><td/><td/><td><span class="explicit-mono">[</span><span class="lambda-list-keyword">&amp;optional</span> 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">var</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>|</mi></math> <span class="explicit-roman">(</span>var 
<span class="explicit-mono">[</span><span class="parameter">initform</span> <span class="explicit-roman">[</span><span class="parameter">supplied-p-parameter</span><span class="explicit-roman">]</span> <span class="explicit-mono">]</span><span class="explicit-roman">)</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span><span class="explicit-mono">]</span></td></tr><tr><td/><td/><td><span class="explicit-mono">[</span><span class="explicit-mono">&amp;rest</span> <span class="parameter">var</span><span class="explicit-mono">]</span></td></tr><tr><td/><td/><td><span class="explicit-mono"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>[</mi></math></span><span class="lambda-list-keyword">&amp;key</span></td><td><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">var</span>  <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>|</mi></math>
<span class="explicit-roman">(</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">var</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>|</mi></math> <span class="explicit-roman">(</span><a class="glossary-reference" href="chapter-26.xhtml#glossary-keyword">keyword</a><span class="parameter">var</span><span class="explicit-roman">)</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math>
<span class="explicit-mono">[</span><span class="parameter">initform</span> <span class="explicit-roman">[</span><span class="parameter">supplied-p-parameter</span><span class="explicit-roman">]</span> <span class="explicit-mono">]</span><span class="explicit-roman">)</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span></td></tr><tr><td/><td/><td/><td><span class="explicit-roman">[</span><a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-allow-other-keys">allow-other-keys</a><span class="explicit-roman">]</span><span class="explicit-mono"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>]</mi></math></span></td></tr><tr><td/><td/><td><span class="explicit-mono">[</span><span class="explicit-mono">&amp;aux</span> 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">var</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>|</mi></math> <span class="explicit-roman">(</span><span class="parameter">var</span> 
<span class="explicit-roman">[</span><span class="parameter">initform</span><span class="explicit-roman">]</span> <span class="explicit-roman">)</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span><span class="explicit-mono">]</span><span class="explicit-roman">)</span></td></tr><tr><td/><td><span class="explicit-italic"> parameter-specializer-name</span>::=<a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>|</mi></math><span class="explicit-roman">(</span><span class="explicit-mono">eql</span><span class="parameter">eql-specializer-form</span><span class="explicit-roman">)</span></td></tr></tbody></table>
<br/>

<br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">declaration</span>&mdash;a <a class="symbol-reference" href="chapter-3.xhtml#symbol-declare">declare</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-expression">expression</a>; not evaluated.<br/><span class="parameter">documentation</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-string">string</a>; not evaluated.<br/><span class="parameter">var</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variable</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a>.<br/><span class="parameter">eql-specializer-form</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>.<br/><span class="parameter">Form</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>.<br/><span class="parameter">Initform</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>.<br/><span class="parameter">Supplied-p-parameter</span>&mdash;variable name. <br/><span class="parameter">new-method</span>&mdash;the new <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>The macro <a class="macro-reference" href="#macro-defmethod">defmethod</a> defines a <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> on a 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a>.  <br/>If <span class="explicit-mono">(fboundp <span class="explicit-italic"> function-name</span>)</span> is <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>, a 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> is created with default values for 
the argument precedence order
(each argument is more specific than the arguments to its right
in the argument list),
for the generic function class (the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> <a class="type-reference" href="chapter-4.xhtml#type-standard-generic-function">standard-generic-function</a>),
for the method class (the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> <a class="type-reference" href="chapter-4.xhtml#type-standard-method">standard-method</a>),
and for the method combination type (the standard method combination type).
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> is
congruent with the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a> of the 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> being defined; if the
<a class="macro-reference" href="#macro-defmethod">defmethod</a> form mentions keyword arguments, the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a> of
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> 
will mention <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-key">key</a> (but no keyword
arguments).  If <span class="explicit-italic"> function-name</span> names 
an <a class="glossary-reference" href="chapter-26.xhtml#glossary-ordinary function">ordinary function</a>,
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a>, or a <a class="glossary-reference" href="chapter-26.xhtml#glossary-special operator">special operator</a>, 
an error is signaled.<br/>If a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> is currently named by <span class="explicit-italic"> function-name</span>,
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a> of the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> must be congruent with the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a> of the 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a>.
If this condition does not hold, an error is signaled.  
For a definition of congruence in this context, see <span class="section-reference error">section:GFMethodLambdaListCongruency.</span><br/>
Each <span class="explicit-italic"> method-qualifier</span> argument is an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> that is used by
method combination to identify the given <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a>.  
The method combination type might further
restrict what a method <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifier</a> can be.
The standard method combination type allows for <a class="glossary-reference" href="chapter-26.xhtml#glossary-unqualified method">unqualified methods</a> and
<a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> whose sole
<a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifier</a> is one of the keywords <span class="keyword">:before</span>, <span class="keyword">:after</span>, or <span class="keyword">:around</span>.<br/>The <span class="explicit-italic"> specialized-lambda-list</span> argument is like an ordinary
<a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a> except that the <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">names</a> of required parameters can
be replaced by specialized parameters.  A specialized parameter is a
list of the form 
<pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="parameter">var</span> <span class="explicit-italic"> parameter-specializer-name</span>)</span>
</span></code></pre>.
Only required parameters can be
specialized.  If <span class="explicit-italic"> parameter-specializer-name</span> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> it names a
<a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a>; if it is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a>,
it is of the form <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-eql">eql</a> <span class="parameter">eql-specializer-form</span>)</span>
</span></code></pre>.  The parameter
specializer name <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-eql">eql</a> <span class="parameter">eql-specializer-form</span>)</span>
</span></code></pre> indicates
that the corresponding argument must be <a class="function-reference" href="chapter-5.xhtml#function-eql">eql</a> to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> that
is the value of <span class="parameter">eql-specializer-form</span> for the <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> to be applicable.  
The <span class="parameter">eql-specializer-form</span> is evaluated at the time
that the expansion of the <a class="macro-reference" href="#macro-defmethod">defmethod</a> macro is evaluated.  
If no <a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter specializer name">parameter specializer name</a> is specified for a given
required parameter, the <a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter specializer">parameter specializer</a> defaults to 
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> <a class="type-reference" href="chapter-4.xhtml#type-t">t</a>.
For further discussion, see <span class="section-reference error">section:IntroToMethods.</span><br/>The <span class="parameter">form</span> arguments specify the method body.
The body of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> is enclosed in an <a class="glossary-reference" href="chapter-26.xhtml#glossary-implicit block">implicit block</a>.  If
<span class="explicit-italic"> function-name</span> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>, 
this block bears the same <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> as the <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a>.  
If <span class="explicit-italic"> function-name</span> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> of the form 
<span class="explicit-mono">(setf <span class="explicit-italic"> symbol</span>)</span>, the <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> of the block is <span class="explicit-italic"> symbol</span>.  <br/>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> that is created is that given by the 
method class option of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> 
on which the <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> is defined.<br/>If the <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> already has a <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> that agrees with the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> being defined on <a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter specializer">parameter specializers</a> and <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifiers</a>,
<a class="macro-reference" href="#macro-defmethod">defmethod</a> replaces the existing <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> with the one now being
defined.
For a definition of agreement in this context.
see <span class="section-reference error">section:SpecializerQualifierAgreement.</span><br/>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter specializer">parameter specializers</a> are derived from 
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter specializer name">parameter specializer names</a> as described in
<a class="section-reference" href="#section-IntroToMethods">Introduction to Methods</a>.<br/>The expansion of the <a class="macro-reference" href="#macro-defmethod">defmethod</a> macro ``refers to'' each
specialized parameter (see the description of <a class="declaration-reference" href="chapter-3.xhtml#declaration-ignore">ignore</a> 
within the description of <a class="symbol-reference" href="chapter-3.xhtml#symbol-declare">declare</a>).
This includes parameters that
have an explicit <a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter specializer name">parameter specializer name</a> of <a class="symbol-reference" href="chapter-5.xhtml#symbol-t">t</a>.  This means
that a compiler warning does not occur if the body of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> does
not refer to a specialized parameter, while a warning might occur
if the body of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> does not refer to an unspecialized parameter.
For this reason, a parameter that specializes on <a class="symbol-reference" href="chapter-5.xhtml#symbol-t">t</a> is not quite synonymous
with an unspecialized parameter in this context.<br/>Declarations at the head of the method body that apply to the 
method's <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda variable">lambda variables</a> are treated as <a class="glossary-reference" href="chapter-26.xhtml#glossary-bound declaration">bound declarations</a>
whose <a class="glossary-reference" href="chapter-26.xhtml#glossary-scope">scope</a> is the same as the corresponding <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a>.<br/>Declarations at the head of the method body that apply to the 
functional bindings of <a class="function-reference" href="#function-call-next-method">call-next-method</a> or <a class="function-reference" href="#function-next-method-p">next-method-p</a>
apply to references to those functions within the method body <span class="parameter">forms</span>.
Any outer <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function name">function names</a> <a class="function-reference" href="#function-call-next-method">call-next-method</a> and
<a class="function-reference" href="#function-next-method-p">next-method-p</a>, and declarations associated with such <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a>
are <a class="glossary-reference" href="chapter-26.xhtml#glossary-shadow">shadowed</a><sub>2</sub> within the method body <span class="parameter">forms</span>.<br/>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-scope">scope</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-free declaration">free declarations</a> at the head of the method body 
is the entire method body, 
which includes any implicit local function definitions
  but excludes <a class="glossary-reference" href="chapter-26.xhtml#glossary-initialization form">initialization forms</a> for the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda variable">lambda variables</a>.

<a class="macro-reference" href="#macro-defmethod">defmethod</a> is not required to perform any compile-time side effects.
In particular, the <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> are not installed for invocation during 
compilation.  An <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation">implementation</a> may choose to store information about
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> for the purposes of compile-time error-checking
(such as checking the number of arguments on calls, or noting that a definition
 for the function name has been seen).

<span class="parameter">Documentation</span> is attached as a <a class="glossary-reference" href="chapter-26.xhtml#glossary-documentation string">documentation string</a>
to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.

</dd></dl><dl><dt class="label">Examples</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Affected By</dt><dd>The definition of the referenced <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd>If <span class="explicit-italic"> function-name</span> names an <a class="glossary-reference" href="chapter-26.xhtml#glossary-ordinary function">ordinary function</a>,
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a>, or a <a class="glossary-reference" href="chapter-26.xhtml#glossary-special operator">special operator</a>, 
an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-9.xhtml#type-error">error</a> is signaled.<br/>If a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> is currently named by <span class="explicit-italic"> function-name</span>,
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a> of the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> must be congruent with the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a> of the 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a>, or
an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-9.xhtml#type-error">error</a> is signaled.<br/> 
</dd></dl><dl><dt class="label">See Also</dt><dd><a class="macro-reference" href="#macro-defgeneric">defgeneric</a>, 
<a class="function-reference" href="chapter-25.xhtml#function-documentation">documentation</a>,
<a class="section-reference" href="#section-IntroToMethods">Introduction to Methods</a>,
<a class="section-reference" href="#section-GFMethodLambdaListCongruency">Congruent Lambda-lists for all Methods of a Generic Function</a>,
<a class="section-reference" href="#section-SpecializerQualifierAgreement">Agreement on Parameter Specializers and Qualifiers</a>,
<a class="section-reference" href="chapter-3.xhtml#section-DocVsDecls">Syntactic Interaction of Documentation Strings and Declarations</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd><span class="none">None</span>.<br/></dd></dl>
</div><br/><br/><br/><div class="component" id="function-find-class"><div class="header"><span class="left"><span class="name" id="function-find-class">find-class</span></span><span class="right"><span class="ftype">Accessor</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">find-class</span>&nbsp;<span class="lambda-list">symbol <span class="lambda-list-keyword">&amp;optional</span> errorp environment</span>&nbsp;â†’&nbsp;<span class="return-values">class</span></span><br/>
<span class="setf-definition">(setf (<span class="name">find-class</span>&nbsp;<span class="lambda-list">symbol <span class="lambda-list-keyword">&amp;optional</span> errorp environment</span>) <span class="new-value">new-class</span>)</span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">symbol</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>.<br/><span class="parameter">errorp</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generalized boolean">generalized boolean</a>.
 The default is <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>.<br/><span class="parameter">environment</span>&mdash;same as the <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-environment">environment</a> argument to
  macro expansion functions and is used to distinguish between 
  compile-time and run-time environments.
  The <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-environment">environment</a> argument has 
  <a class="glossary-reference" href="chapter-26.xhtml#glossary-dynamic extent">dynamic extent</a>; the consequences are undefined if 
  the <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-environment">environment</a> argument is 
  referred to outside the <a class="glossary-reference" href="chapter-26.xhtml#glossary-dynamic extent">dynamic extent</a> 
  of the macro expansion function.
 
<span class="parameter">class</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>, or <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>Returns the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> named by the <span class="parameter">symbol</span>
in the <span class="parameter">environment</span>.  If there is no such <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a>,
<a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a> is returned if <span class="parameter">errorp</span> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>; otherwise,
if <span class="parameter">errorp</span> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>, an error is signaled.<br/>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> associated with a particular <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> can be changed by using
<a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> with <a class="function-reference" href="#function-find-class">find-class</a>;
or, if the new <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> given to <a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> is <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>,
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> association is removed 
(but the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> itself is not affected).
The results are undefined if the user attempts to change
or remove
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> associated with a 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> that is defined as a <a class="glossary-reference" href="chapter-26.xhtml#glossary-type specifier">type specifier</a> in this standard.
See <span class="section-reference error">section:IntegratingTypesAndClasses.</span><br/>When using <a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> of <span class="symbol-reference error">symbol:find-class</span>, any <span class="glossary-reference error">glossary:errorp</span> argument is <span class="glossary-reference error">glossary:evaluated</span>
for effect, but any <span class="glossary-reference error">glossary:values</span> it returns are ignored; the <span class="parameter">errorp</span>
<a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter">parameter</a> is permitted primarily so that the <span class="parameter">environment</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter">parameter</a>
can be used.<br/>The <span class="parameter">environment</span> might be used to distinguish between a compile-time and a
run-time environment.<br/></dd></dl><dl><dt class="label">Examples</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd>If there is no such <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> and <span class="parameter">errorp</span> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>,
<a class="function-reference" href="#function-find-class">find-class</a> signals an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-9.xhtml#type-error">error</a>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="macro-reference" href="chapter-3.xhtml#macro-defmacro">defmacro</a>,
<a class="section-reference" href="chapter-4.xhtml#section-IntegratingTypesAndClasses">Integrating Types and Classes</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd><span class="none">None</span>.<br/></dd></dl></div><br/><br/><br/><div class="component" id="function-next-method-p"><div class="header"><span class="left"><span class="name" id="function-next-method-p">next-method-p</span></span><span class="right"><span class="ftype">Local Function</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">next-method-p</span>&nbsp;<span class="lambda-list"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>âŸ¨</mi></math><span class="explicit-italic"> no <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">arguments</a></span><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>âŸ©</mi></math></span>&nbsp;â†’&nbsp;<span class="return-values">generalized-boolean</span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">generalized-boolean</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generalized boolean">generalized boolean</a>. <br/></dd></dl><dl><dt class="label">Description</dt><dd>The locally defined function <a class="function-reference" href="#function-next-method-p">next-method-p</a> can be used 
within the body <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a> (but not the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a>)
defined by a <a class="glossary-reference" href="chapter-26.xhtml#glossary-method-defining form">method-defining form</a> to determine
whether a next <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> exists.<br/>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="#function-next-method-p">next-method-p</a> has <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical scope">lexical scope</a> and <a class="glossary-reference" href="chapter-26.xhtml#glossary-indefinite extent">indefinite extent</a>.<br/>Whether or not <a class="function-reference" href="#function-next-method-p">next-method-p</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-fbound">fbound</a> in the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-global environment">global environment</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a>;
however, the restrictions on redefinition and <a class="glossary-reference" href="chapter-26.xhtml#glossary-shadow">shadowing</a> of
<a class="function-reference" href="#function-next-method-p">next-method-p</a> are the same as for <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbols</a> in the <a class="package-reference" href="chapter-1.xhtml#package-common-lisp">common-lisp</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-package">package</a>
which are <a class="glossary-reference" href="chapter-26.xhtml#glossary-fbound">fbound</a> in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-global environment">global environment</a>.
The consequences of attempting to use <a class="function-reference" href="#function-next-method-p">next-method-p</a> outside
of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-method-defining form">method-defining form</a> are undefined.

</dd></dl><dl><dt class="label">Examples</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="function-reference" href="#function-call-next-method">call-next-method</a>,
<a class="macro-reference" href="#macro-defmethod">defmethod</a>,
<a class="macro-reference" href="#macro-call-method">call-method</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd><span class="none">None</span>.<br/></dd></dl></div><br/><br/><br/><div class="component" id="macro-call-method"><div class="header"><span class="left"><span class="name" id="macro-call-method">call-method</span>, <span class="name" id="macro-make-method">make-method</span></span><span class="right"><span class="ftype">Local Macro</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">call-method</span>&nbsp;<span class="lambda-list">method <span class="lambda-list-keyword">&amp;optional</span> next-method-list</span>&nbsp;â†’&nbsp;<span class="return-values"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">result</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span></span></span><br/>
<span class="function-definition"><span class="name">make-method</span>&nbsp;<span class="lambda-list">form</span>&nbsp;â†’&nbsp;<span class="return-values">method-object</span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">method</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>,
	      or a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> (see below); not evaluated.<br/><span class="parameter">method-object</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.<br/><span class="parameter">next-method-list</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> of <span class="parameter">method</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a>; not evaluated.<br/><span class="parameter">results</span>&mdash;the <span class="glossary-reference error">glossary:values</span> returned by the <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> invocation.<br/></dd></dl><dl><dt class="label">Description</dt><dd>The macro <a class="macro-reference" href="#macro-call-method">call-method</a> is used in method combination.  It hides
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a> details of how 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> are called. The
macro <a class="macro-reference" href="#macro-call-method">call-method</a> has <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical scope">lexical scope</a> and 
can only be used within
an <a class="glossary-reference" href="chapter-26.xhtml#glossary-effective method">effective method</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>.<br/>Whether or not <a class="macro-reference" href="#macro-call-method">call-method</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-fbound">fbound</a> in the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-global environment">global environment</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a>;
however, the restrictions on redefinition and <a class="glossary-reference" href="chapter-26.xhtml#glossary-shadow">shadowing</a> of
<a class="macro-reference" href="#macro-call-method">call-method</a> are the same as for <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbols</a> in the <a class="package-reference" href="chapter-1.xhtml#package-common-lisp">common-lisp</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-package">package</a>
which are <a class="glossary-reference" href="chapter-26.xhtml#glossary-fbound">fbound</a> in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-global environment">global environment</a>.
The consequences of attempting to use <a class="macro-reference" href="#macro-call-method">call-method</a> outside
of an <a class="glossary-reference" href="chapter-26.xhtml#glossary-effective method">effective method</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> are undefined.
<br/> 
The macro <a class="macro-reference" href="#macro-call-method">call-method</a> invokes the specified <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a>,
supplying it with arguments and with definitions for
<a class="function-reference" href="#function-call-next-method">call-next-method</a> and for <a class="function-reference" href="#function-next-method-p">next-method-p</a>.
If the invocation of <a class="macro-reference" href="#macro-call-method">call-method</a> is lexically inside
of a <a class="macro-reference" href="#macro-make-method">make-method</a>, the arguments are those that
were supplied to that method.  Otherwise the arguments are
those that were supplied to the generic function.
The definitions
of <a class="function-reference" href="#function-call-next-method">call-next-method</a> and <a class="function-reference" href="#function-next-method-p">next-method-p</a> rely on
the specified <span class="parameter">next-method-list</span>.<br/>If <span class="parameter">method</span> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a>, the first element of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a>
must be the symbol <a class="macro-reference" href="#macro-make-method">make-method</a> and the second element must be
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>.  Such a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> specifies a <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>
whose <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> function has a body that is the given <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>.<br/><span class="parameter">Next-method-list</span> can contain <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a> or <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">lists</a>,
the first element of which must be the symbol <a class="macro-reference" href="#macro-make-method">make-method</a> and the
second element of which must be a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>.<br/> 
Those are the only two places where <a class="macro-reference" href="#macro-make-method">make-method</a> can be used.
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> used with <a class="macro-reference" href="#macro-make-method">make-method</a> is evaluated in
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-null lexical environment">null lexical environment</a> augmented with a local macro definition
for <a class="macro-reference" href="#macro-call-method">call-method</a> and with bindings named by
symbols not <a class="glossary-reference" href="chapter-26.xhtml#glossary-accessible">accessible</a> from the <a class="package-reference" href="chapter-11.xhtml#package-common-lisp-user">common-lisp-user</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-package">package</a>.<br/>The <a class="function-reference" href="#function-call-next-method">call-next-method</a> function available to <span class="parameter">method</span> 
will call the first <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> in <span class="parameter">next-method-list</span>.
The <a class="function-reference" href="#function-call-next-method">call-next-method</a> function
available in that <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a>, in turn, will call the second
<a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> in <span class="parameter">next-method-list</span>, and so on, until
the list of next <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> is exhausted.<br/> 
If <span class="parameter">next-method-list</span> is not supplied, the
<a class="function-reference" href="#function-call-next-method">call-next-method</a> function available to
<span class="parameter">method</span> signals an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-5.xhtml#type-control-error">control-error</a>
and the <a class="function-reference" href="#function-next-method-p">next-method-p</a> function
available to <span class="parameter">method</span> returns <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.<br/></dd></dl><dl><dt class="label">Examples</dt><dd/></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="function-reference" href="#function-call-next-method">call-next-method</a>,
<a class="macro-reference" href="#macro-define-method-combination">define-method-combination</a>,
<a class="function-reference" href="#function-next-method-p">next-method-p</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd><span class="none">None</span>.<br/></dd></dl></div><br/><br/><br/><div class="component" id="function-call-next-method"><div class="header"><span class="left"><span class="name" id="function-call-next-method">call-next-method</span></span><span class="right"><span class="ftype">Local Function</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">call-next-method</span>&nbsp;<span class="lambda-list"><span class="lambda-list-keyword">&amp;rest</span> args</span>&nbsp;â†’&nbsp;<span class="return-values"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">result</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span></span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">args</span>&mdash;<a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a> to be used as arguments to the next method.  
 
<span class="parameter">results</span>&mdash;the <span class="glossary-reference error">glossary:values</span> returned by the <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> it calls.<br/></dd></dl><dl><dt class="label">Description</dt><dd>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="#function-call-next-method">call-next-method</a> can be used 
within the body <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a> (but not the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a>)
of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> defined by a <a class="glossary-reference" href="chapter-26.xhtml#glossary-method-defining form">method-defining form</a> to call the 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-next method">next method</a>.<br/>If there is no next <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a>, the generic function 
<a class="function-reference" href="#function-no-next-method">no-next-method</a> is called.<br/>The type of method combination used determines which <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a>
can invoke <a class="function-reference" href="#function-call-next-method">call-next-method</a>.  The standard 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-method combination">method combination</a> type allows <a class="function-reference" href="#function-call-next-method">call-next-method</a> 
to be used within primary <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> and <a class="glossary-reference" href="chapter-26.xhtml#glossary-around method">around methods</a>.
For generic functions using a type of method combination defined by
the short form of <a class="macro-reference" href="#macro-define-method-combination">define-method-combination</a>,
<a class="function-reference" href="#function-call-next-method">call-next-method</a> can be used in <a class="glossary-reference" href="chapter-26.xhtml#glossary-around method">around methods</a> only.<br/>When <a class="function-reference" href="#function-call-next-method">call-next-method</a> is called with no arguments, it passes the
current <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a>'s original arguments to the next <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a>.  Neither
argument defaulting, nor using <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a>, nor rebinding variables
with the same <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">names</a> as parameters of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> affects the values
<a class="function-reference" href="#function-call-next-method">call-next-method</a> passes to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> it calls.<br/> 
When <a class="function-reference" href="#function-call-next-method">call-next-method</a> is called with arguments, the 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-next method">next method</a> is called with those arguments.<br/>If <a class="function-reference" href="#function-call-next-method">call-next-method</a> is called with arguments but omits
optional arguments, the <a class="glossary-reference" href="chapter-26.xhtml#glossary-next method">next method</a> called defaults those arguments.<br/>
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="#function-call-next-method">call-next-method</a> returns any <span class="glossary-reference error">glossary:values</span> that are
returned by the <a class="glossary-reference" href="chapter-26.xhtml#glossary-next method">next method</a>.<br/>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="#function-call-next-method">call-next-method</a> has <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical scope">lexical scope</a> and 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-indefinite extent">indefinite extent</a> and can only be used within the body of a
<a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> defined by a <a class="glossary-reference" href="chapter-26.xhtml#glossary-method-defining form">method-defining form</a>.<br/>Whether or not <a class="function-reference" href="#function-call-next-method">call-next-method</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-fbound">fbound</a> in the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-global environment">global environment</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a>;
however, the restrictions on redefinition and <a class="glossary-reference" href="chapter-26.xhtml#glossary-shadow">shadowing</a> of
<a class="function-reference" href="#function-call-next-method">call-next-method</a> are the same as for <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbols</a> in the <a class="package-reference" href="chapter-1.xhtml#package-common-lisp">common-lisp</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-package">package</a>
which are <a class="glossary-reference" href="chapter-26.xhtml#glossary-fbound">fbound</a> in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-global environment">global environment</a>.
The consequences of attempting to use <a class="function-reference" href="#function-call-next-method">call-next-method</a> outside
of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-method-defining form">method-defining form</a> are undefined.

</dd></dl><dl><dt class="label">Examples</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Affected By</dt><dd><a class="macro-reference" href="#macro-defmethod">defmethod</a>, <a class="macro-reference" href="#macro-call-method">call-method</a>, <a class="macro-reference" href="#macro-define-method-combination">define-method-combination</a>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd>When providing arguments to <a class="function-reference" href="#function-call-next-method">call-next-method</a>, 
the following rule must be satisfied or an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-9.xhtml#type-error">error</a> 
should be
signaled: 
the ordered set of <a class="glossary-reference" href="chapter-26.xhtml#glossary-applicable method">applicable methods</a> for a changed set of arguments
for <a class="function-reference" href="#function-call-next-method">call-next-method</a> must be the same as the ordered set of
<a class="glossary-reference" href="chapter-26.xhtml#glossary-applicable method">applicable methods</a> for the original arguments to the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a>.
Optimizations of the error checking are possible, but they must not change
the semantics of <a class="function-reference" href="#function-call-next-method">call-next-method</a>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="macro-reference" href="#macro-define-method-combination">define-method-combination</a>,
<a class="macro-reference" href="#macro-defmethod">defmethod</a>,
<a class="function-reference" href="#function-next-method-p">next-method-p</a>,
<a class="function-reference" href="#function-no-next-method">no-next-method</a>,
<a class="macro-reference" href="#macro-call-method">call-method</a>,
<a class="section-reference" href="#section-MethodSelectionAndCombination">Method Selection and Combination</a>,
<a class="section-reference" href="#section-StdMethComb">Standard Method Combination</a>,
<a class="section-reference" href="#section-BuiltInMethCombTypes">Built-in Method Combination Types</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd><span class="none">None</span>.<br/></dd></dl></div><br/><br/><br/><div class="component" id="function-compute-applicable-methods"><div class="header"><span class="left"><span class="name" id="function-compute-applicable-methods">compute-applicable-methods</span></span><span class="right"><span class="ftype">Standard Generic Function</span></span></div><br/> <br/><dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">compute-applicable-methods</span>&nbsp;<span class="lambda-list">generic-function function-arguments</span>&nbsp;â†’&nbsp;<span class="return-values">methods</span></span><br/><br/></dd></dl><dl><dt class="label">Method Signatures</dt><dd><span class="method"><span class="name">compute-applicable-methods</span>&nbsp;<span class="lambda-list"><span class="specialized-parameter">(<span class="name">generic-function</span>&nbsp;<a class="type-reference" href="chapter-4.xhtml#type-standard-generic-function">standard-generic-function</a>)</span></span></span><br/><br/></dd></dl> <br/><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">generic-function</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a>.<br/><span class="parameter">function-arguments</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> of arguments for the <span class="parameter">generic-function</span>.<br/><span class="parameter">methods</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>Given a <span class="parameter">generic-function</span> and a set of 
<span class="parameter">function-arguments</span>, the function
<a class="function-reference" href="#function-compute-applicable-methods">compute-applicable-methods</a> returns the set of <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a>
that are applicable for those arguments
sorted according to precedence order.
See <span class="section-reference error">section:MethodSelectionAndCombination.</span><br/></dd></dl><dl><dt class="label">Affected By</dt><dd><a class="macro-reference" href="#macro-defmethod">defmethod</a><br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="section-reference" href="#section-MethodSelectionAndCombination">Method Selection and Combination</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd><span class="none">None</span>.<br/></dd></dl></div><br/><br/><br/><div class="component" id="macro-define-method-combination"><div class="header"><span class="left"><span class="name" id="macro-define-method-combination">define-method-combination</span></span><span class="right"><span class="ftype">Macro</span></span></div><br/>
<dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">define-method-combination</span>&nbsp;<span class="lambda-list">name <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>[</mi><mi>[</mi></math> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">short-form-option</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>]</mi><mi>]</mi></math></span>&nbsp;â†’&nbsp;<span class="return-values">name</span></span><br/><br/><span class="function-definition"><span class="name">define-method-combination</span>&nbsp;<span class="lambda-list">name lambda-list
                                <span class="explicit-roman">(</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">method-group-specifier</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span><span class="explicit-roman">)</span>
                                <span class="explicit-roman">[</span><span class="explicit-roman">(</span><span class="keyword">:arguments</span> . args-lambda-list<span class="explicit-roman">)</span><span class="explicit-roman">]</span>
                                <span class="explicit-roman">[</span><span class="explicit-roman">(</span><span class="keyword">:generic-function</span> 
                                                   generic-function-symbol<span class="explicit-roman">)</span><span class="explicit-roman">]</span>
                                <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>[</mi><mi>[</mi></math> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">declaration</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>|</mi></math> <span class="parameter">documentation</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>]</mi><mi>]</mi></math>
                                <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">form</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span></span>&nbsp;â†’&nbsp;<span class="return-values">name</span></span><br/><br/><tr><td>short-form-option</td><td>::=</td><td><span class="keyword">:documentation</span> <span class="parameter">documentation</span> | <br/>
			   <span class="keyword">:identity-with-one-argument</span>
			   <span class="parameter">identity-with-one-argument</span> |<br/>
			   <span class="keyword">:operator</span> <span class="parameter">operator</span></td></tr>
<tr><td>method-group-specifier</td><td>::=</td><td><span class="explicit-roman">(</span>name 
				       <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><math xmlns="http://www.w3.org/1998/Math/MathML">\hbox<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">qualifier-pattern</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><msup><mrow/><mo>+</mo></msup></math> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>|</mi></math> predicate<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math>
			               <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>[</mi><mi>[</mi></math> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">long-form-option</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>]</mi><mi>]</mi></math><span class="explicit-roman">)</span></td></tr>
<tr><td>long-form-option</td><td>::=</td><td><span class="keyword">:description</span> <span class="parameter">description</span> |<br/>
			  <span class="keyword">:order</span> <span class="parameter">order</span> 		|<br/>
			  <span class="keyword">:required</span> <span class="parameter">required-p</span></td></tr><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">args-lambda-list</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-define-method-combination arguments lambda list">define-method-combination arguments lambda list</a>.<br/><span class="parameter">declaration</span>&mdash;a <a class="symbol-reference" href="chapter-3.xhtml#symbol-declare">declare</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-expression">expression</a>; not evaluated.<br/><span class="parameter">description</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-format control">format control</a>.<br/><span class="parameter">documentation</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-string">string</a>; not evaluated.<br/><span class="parameter">forms</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-implicit progn">implicit progn</a> 
  that must compute and return the <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> that specifies how
  the <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> are combined, that is, the <a class="glossary-reference" href="chapter-26.xhtml#glossary-effective method">effective method</a>.<br/><span class="parameter">generic-function-symbol</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>.<br/><span class="parameter">identity-with-one-argument</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generalized boolean">generalized boolean</a>.<br/><span class="parameter">lambda-list</span>&mdash;<a class="glossary-reference" href="chapter-26.xhtml#glossary-ordinary lambda list">ordinary lambda list</a>.<br/><span class="parameter">name</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>. 
  Non-<a class="glossary-reference" href="chapter-26.xhtml#glossary-keyword">keyword</a>, <a class="glossary-reference" href="chapter-26.xhtml#glossary-non-nil">non-nil</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbols</a> are usually used.<br/><span class="parameter">operator</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-operator">operator</a>.
  <span class="parameter">Name</span> and <span class="parameter">operator</span> are often the <a class="glossary-reference" href="chapter-26.xhtml#glossary-same">same</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>.
  This is the default, but it is not required.<br/><span class="parameter">order</span>&mdash;<span class="keyword">:most-specific-first</span> or <span class="keyword">:most-specific-last</span>; evaluated.<br/><span class="parameter">predicate</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> that names a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> of one argument
		    that returns a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generalized boolean">generalized boolean</a>.<br/><span class="parameter">qualifier-pattern</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a>,
			 or the <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> <span class="symbol-reference error">symbol:*</span>.<br/><span class="parameter">required-p</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generalized boolean">generalized boolean</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>The macro <a class="macro-reference" href="#macro-define-method-combination">define-method-combination</a> is used to define new types
of method combination.<br/>There are two forms of <a class="macro-reference" href="#macro-define-method-combination">define-method-combination</a>.  The short
form is a simple facility for the cases that are expected
to be most commonly needed.  The long form is more powerful but more
verbose.  It resembles <a class="macro-reference" href="chapter-3.xhtml#macro-defmacro">defmacro</a> in that the body is an
expression, usually using backquote, that computes a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>.  Thus
arbitrary control structures can be implemented.  The long form also
allows arbitrary processing of method <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifiers</a>.<br/> <br/><dl><dt><span class="explicit-bold"> Short Form</span></dt><dd>The short form syntax of <a class="macro-reference" href="#macro-define-method-combination">define-method-combination</a> is recognized
when the second <a class="glossary-reference" href="chapter-26.xhtml#glossary-subform">subform</a> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-non-nil">non-nil</a> symbol or is not present.
When the short form is used, <span class="parameter">name</span> is defined as a type of
method combination that produces a Lisp form
<pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="parameter">operator</span> <span class="parameter">method-call</span> <span class="parameter">method-call</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â€¦</mi></math>)</span>
</span></code></pre>.
The <span class="parameter">operator</span> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> that can be the <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> of a 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a>, <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a>, or <a class="glossary-reference" href="chapter-26.xhtml#glossary-special operator">special operator</a>.  
The <span class="parameter">operator</span> can be supplied by a keyword option;
it defaults to <span class="parameter">name</span>.<br/>Keyword options for the short form are the following:<br/><ul><li>The <span class="keyword">:documentation</span> option is used to document the method-combination type;
see description of long form below.<br/></li><li>The <span class="keyword">:identity-with-one-argument</span> option enables an optimization
when its value is <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a> (the default is <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>).  If there is
exactly one applicable method and it is a primary method, that method
serves as the effective method and <span class="parameter">operator</span> is not called.
This optimization avoids the need to create a new effective method and
avoids the overhead of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> call.  This option is designed to be
used with operators such as <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-progn">progn</a>, <a class="macro-reference" href="chapter-5.xhtml#macro-and">and</a>, <a class="function-reference" href="chapter-12.xhtml#function-+">+</a>, and
<a class="function-reference" href="chapter-12.xhtml#function-max">max</a>.<br/></li><li>The <span class="keyword">:operator</span> option specifies the <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> of the operator.  The
<span class="parameter">operator</span> argument is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> that can be the 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a>,
<a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a>, or 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-special form">special form</a>.  <br/></li></ul><br/> 
These types of method combination require exactly one <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifier</a> per
method.  An error is signaled if there are applicable methods with no
<a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifiers</a> or with <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifiers</a> that are not supported by 
the method combination type. <br/>A method combination procedure defined in this way recognizes two
roles for methods.  A method whose one <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifier</a> is the symbol naming
this type of method combination is defined to be a primary method.  At
least one primary method must be applicable or an error is signaled.
A method with <span class="keyword">:around</span> as its one <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifier</a> is an auxiliary
method that behaves the same as an <a class="glossary-reference" href="chapter-26.xhtml#glossary-around method">around method</a> in standard
method combination.  The <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="#function-call-next-method">call-next-method</a> can only be
used in <a class="glossary-reference" href="chapter-26.xhtml#glossary-around method">around methods</a>; it cannot be used in primary methods
defined by the short form of the <a class="macro-reference" href="#macro-define-method-combination">define-method-combination</a> macro.<br/>A method combination procedure defined in this way accepts an optional
argument named <span class="parameter">order</span>, which defaults to 
<span class="keyword">:most-specific-first</span>.  A value of <span class="keyword">:most-specific-last</span> reverses
the order of the primary methods without affecting the order of the
auxiliary methods.<br/>The short form automatically includes error checking and support for
<a class="glossary-reference" href="chapter-26.xhtml#glossary-around method">around methods</a>.<br/>For a discussion of built-in method combination types, 
see <span class="section-reference error">section:BuiltInMethCombTypes.</span><br/></dd><dt><span class="explicit-bold"> Long Form</span></dt><dd>The long form syntax of <a class="macro-reference" href="#macro-define-method-combination">define-method-combination</a> is recognized 
when the second <a class="glossary-reference" href="chapter-26.xhtml#glossary-subform">subform</a> is a list.  <br/>The <span class="parameter">lambda-list</span> 
receives any arguments provided after the <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> of the method
combination type in the <span class="keyword">:method-combination</span> option to
<a class="macro-reference" href="#macro-defgeneric">defgeneric</a>.<br/>A list of method group specifiers follows.  Each specifier selects a subset
of the applicable methods to play a particular role, either by matching
their <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifiers</a> against some patterns or by testing their <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifiers</a> with
a <span class="parameter">predicate</span>.   
These method group specifiers define all method <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifiers</a>
that can be used with this type of method combination.<br/> 
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-car">car</a> of each <span class="parameter">method-group-specifier</span> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>
which <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">names</a> a <a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variable</a>.
During the execution of
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a> in the body of <a class="macro-reference" href="#macro-define-method-combination">define-method-combination</a>, this
<a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variable</a> is bound to a list of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> in the method group.  The
<a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> in this list occur in the order specified by the 
<span class="keyword">:order</span> option.<br/>If <span class="parameter">qualifier-pattern</span> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> it must be <span class="symbol-reference error">symbol:*</span>.  
A method matches
a <span class="parameter">qualifier-pattern</span> if the method's 
list of <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifiers</a> is <a class="function-reference" href="chapter-5.xhtml#function-equal">equal</a>
to the <span class="parameter">qualifier-pattern</span> (except that the symbol <span class="symbol-reference error">symbol:*</span> in a 
<span class="parameter">qualifier-pattern</span> matches anything).  Thus 
a <span class="parameter">qualifier-pattern</span> can be one of the
following:
 the <a class="glossary-reference" href="chapter-26.xhtml#glossary-empty list">empty list</a>, which matches <a class="glossary-reference" href="chapter-26.xhtml#glossary-unqualified method">unqualified methods</a>;
 the symbol <span class="symbol-reference error">symbol:*</span>, which matches all methods;
 a true list, which matches methods with the same number of <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifiers</a> 
   as the length of the list when each <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifier</a> matches 
   the corresponding list element; or
 a dotted list that ends in the symbol <span class="symbol-reference error">symbol:*</span> 
   (the <span class="symbol-reference error">symbol:*</span> matches any number of additional <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifiers</a>).<br/> 
Each applicable method is tested against the <span class="parameter">qualifier-patterns</span> and
<span class="parameter">predicates</span> in left-to-right order.  
As soon as a <span class="parameter">qualifier-pattern</span> matches
or a <span class="parameter">predicate</span> returns true, the method becomes a member of the
corresponding method group and no further tests are made.  Thus if a method
could be a member of more than one method group, it joins only the first
such group.  If a method group has more than one 
<span class="parameter">qualifier-pattern</span>, a
method need only satisfy one of the <span class="parameter">qualifier-patterns</span> to be a member of
the group.<br/>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> of a <span class="parameter">predicate</span> function can appear instead of 
<span class="parameter">qualifier-patterns</span> in a method group specifier.  
The <span class="parameter">predicate</span> is called for
each method that has not been assigned to an earlier method group; it
is called with one argument, the method's <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifier</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a>.
The <span class="parameter">predicate</span> should return true if the method is to be a member of the
method group.  A <span class="parameter">predicate</span> can be distinguished from a 
<span class="parameter">qualifier-pattern</span>
because it is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> other than <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a> or <span class="symbol-reference error">symbol:*</span>.<br/> 
If there is an applicable method that does not fall into any method group,
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="chapter-9.xhtml#function-invalid-method-error">invalid-method-error</a> is called.<br/>Method group specifiers can have keyword options following the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifier</a> patterns or predicate.  Keyword options can be distinguished from
additional <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifier</a> patterns because they are neither lists nor the symbol
<span class="symbol-reference error">symbol:*</span>.  The keyword options are as follows:<br/><ul><li>The <span class="keyword">:description</span> option is used to provide a description of the
role of methods in the method group.  Programming environment tools
use
 <span class="explicit-mono">(apply #'format stream <span class="parameter">format-control</span> (method-qualifiers <span class="parameter">method</span>))</span>
to print this description, which
is expected to be concise.  This keyword
option allows the description of a method <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifier</a> to be defined in
the same module that defines the meaning of the 
method <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifier</a>.  In most cases, <span class="parameter">format-control</span> will not contain any
<a class="function-reference" href="chapter-22.xhtml#function-format">format</a> directives, but they are available for generality.  
If <span class="keyword">:description</span> is not supplied, a default description is generated
based on the variable name and the <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifier</a> patterns and on whether
this method group includes the <a class="glossary-reference" href="chapter-26.xhtml#glossary-unqualified method">unqualified methods</a>.  <br/></li><li>The <span class="keyword">:order</span> option specifies the order of methods.  The <span class="parameter">order</span>
argument is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> that evaluates to 
<span class="keyword">:most-specific-first</span> or <span class="keyword">:most-specific-last</span>.  If it evaluates
to any other value, an error is signaled.  
If <span class="keyword">:order</span> is not supplied, it defaults to 
<span class="keyword">:most-specific-first</span>.<br/></li><li>The <span class="keyword">:required</span> option specifies whether at least one method in
this method group is required.
If its value is <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a> and the method group is empty 
(that is, no applicable methods match the <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifier</a> patterns
or satisfy the predicate), 
an error is signaled.  
If <span class="keyword">:required</span> is not supplied,
it defaults to <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.  <br/></li></ul><br/>The use of method group specifiers provides a convenient syntax to
select methods, to divide them among the possible roles, and to perform the
necessary error checking.  It is possible to perform further filtering
of methods in the body <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a> by using normal list-processing operations
and the functions <a class="function-reference" href="#function-method-qualifiers">method-qualifiers</a> and 
<a class="function-reference" href="chapter-9.xhtml#function-invalid-method-error">invalid-method-error</a>.  It is permissible to use <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> on the
variables named in the method group specifiers and to bind additional
variables.  It is also possible to bypass the method group specifier
mechanism and do everything in the body <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a>.  This is accomplished
by writing a single method group with <span class="symbol-reference error">symbol:*</span> as its only 
<span class="parameter">qualifier-pattern</span>; 
the variable is then bound to a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> of all of the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-applicable method">applicable methods</a>, in most-specific-first order.<br/> 
The body <span class="parameter">forms</span> compute and return the <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> that specifies
how the methods are combined, that is, the effective method.
The effective method is evaluated in
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-null lexical environment">null lexical environment</a> augmented with a local macro definition
for <a class="macro-reference" href="#macro-call-method">call-method</a> and with bindings named by
symbols not <a class="glossary-reference" href="chapter-26.xhtml#glossary-accessible">accessible</a> from the <a class="package-reference" href="chapter-11.xhtml#package-common-lisp-user">common-lisp-user</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-package">package</a>.
Given a method object in one of the 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-list">lists</a> produced by the method group
specifiers and a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> of next methods,
<a class="macro-reference" href="#macro-call-method">call-method</a>
will invoke the method such that <a class="function-reference" href="#function-call-next-method">call-next-method</a> has available
the next methods.<br/>When an effective method has no effect other than to call a single
method, some implementations employ an optimization that uses the
single method directly as the effective method, thus avoiding the need
to create a new effective method.  This optimization is active when
the effective method form consists entirely of an invocation of
the <a class="macro-reference" href="#macro-call-method">call-method</a> macro whose first <a class="glossary-reference" href="chapter-26.xhtml#glossary-subform">subform</a> is a method object and
whose second <a class="glossary-reference" href="chapter-26.xhtml#glossary-subform">subform</a> is <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a> or unsupplied.  Each
<a class="macro-reference" href="#macro-define-method-combination">define-method-combination</a> body is responsible for stripping off
redundant invocations of <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-progn">progn</a>, <a class="macro-reference" href="chapter-5.xhtml#macro-and">and</a>,
<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-multiple-value-prog1">multiple-value-prog1</a>, and the like, if this optimization is desired.<br/> 
 
The list <span class="explicit-mono">(:arguments . <span class="parameter">lambda-list</span>)</span> can appear before
any declarations or <a class="glossary-reference" href="chapter-26.xhtml#glossary-documentation string">documentation string</a>.  This form is useful when
the method combination type performs some specific behavior as part of
the combined method and that behavior needs access to the arguments to
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a>.  Each parameter variable defined by 
<span class="parameter">lambda-list</span> is bound to a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> that can be inserted into the
effective method.  When this <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> is evaluated during execution of the
effective method, its value is the corresponding argument to the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a>; the consequences of using such a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> as
the <span class="parameter">place</span> in a <a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> are undefined.
Argument correspondence is computed by dividing the <span class="keyword">:arguments</span> <span class="parameter">lambda-list</span>
and the <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> <span class="parameter">lambda-list</span> into three sections:
     the <a class="glossary-reference" href="chapter-26.xhtml#glossary-required parameter">required parameters</a>,
     the <a class="glossary-reference" href="chapter-26.xhtml#glossary-optional parameter">optional parameters</a>,
 and the <a class="glossary-reference" href="chapter-26.xhtml#glossary-keyword">keyword</a> and <a class="glossary-reference" href="chapter-26.xhtml#glossary-rest parameter">rest parameters</a>.
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">arguments</a> supplied to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> for a particular <a class="glossary-reference" href="chapter-26.xhtml#glossary-call">call</a>
are also divided into three sections;
     the required <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">arguments</a> section contains as many <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">arguments</a>
      as the <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> has <a class="glossary-reference" href="chapter-26.xhtml#glossary-required parameter">required parameters</a>,
     the optional <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">arguments</a> section contains as many arguments
      as the <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> has <a class="glossary-reference" href="chapter-26.xhtml#glossary-optional parameter">optional parameters</a>,
     and the keyword/rest <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">arguments</a> section contains the remaining arguments.
Each <a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter">parameter</a> in the required and optional sections of the 
<span class="keyword">:arguments</span> <span class="parameter">lambda-list</span> accesses the argument at the same position
in the corresponding section of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">arguments</a>.
If the section of the <span class="keyword">:arguments</span> <span class="parameter">lambda-list</span> is shorter,
 extra <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">arguments</a> are ignored. 
If the section of the <span class="keyword">:arguments</span> <span class="parameter">lambda-list</span> is longer,
 excess <a class="glossary-reference" href="chapter-26.xhtml#glossary-required parameter">required parameters</a> are bound to forms that evaluate to <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a> 
 and excess <a class="glossary-reference" href="chapter-26.xhtml#glossary-optional parameter">optional parameters</a> are <a class="glossary-reference" href="chapter-26.xhtml#glossary-bound">bound</a> to their initforms.
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-keyword parameter">keyword parameters</a> and <a class="glossary-reference" href="chapter-26.xhtml#glossary-rest parameter">rest parameters</a> in the <span class="keyword">:arguments</span>
<span class="parameter">lambda-list</span> access the keyword/rest section of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">arguments</a>.
If the <span class="keyword">:arguments</span> <span class="parameter">lambda-list</span> contains <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-key">key</a>, it behaves as
if it also contained <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-allow-other-keys">allow-other-keys</a>.<br/>In addition, <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-whole">whole</a> <span class="parameter">var</span> can be placed first in the <span class="keyword">:arguments</span>
<span class="parameter">lambda-list</span>.  It causes <span class="parameter">var</span> to be <a class="glossary-reference" href="chapter-26.xhtml#glossary-bound">bound</a> to a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>
that <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluate">evaluates</a> to a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> of all of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">arguments</a> supplied
to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a>.  This is different from <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-rest">rest</a> because it
accesses all of the arguments, not just the keyword/rest <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">arguments</a>.<br/>
Erroneous conditions detected by the body should be reported with
<a class="function-reference" href="chapter-9.xhtml#function-method-combination-error">method-combination-error</a> or <a class="function-reference" href="chapter-9.xhtml#function-invalid-method-error">invalid-method-error</a>; these
<a class="glossary-reference" href="chapter-26.xhtml#glossary-function">functions</a>
add any necessary contextual information to the error message and will
signal the appropriate error.<br/>The body <span class="parameter">forms</span> are evaluated inside of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a> created by
the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a> and method group specifiers. 

Declarations at the head of
the body are positioned directly inside of <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a> created by the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a> and outside of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a> of the method group variables. 
Thus method group variables cannot be declared in this way.  <a class="special-operator-reference" href="chapter-3.xhtml#special-operator-locally">locally</a> may be used
around the body, however.<br/>Within the body <span class="parameter">forms</span>, <span class="parameter">generic-function-symbol</span>
is bound to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.<br/><span class="parameter">Documentation</span> is attached as a <a class="glossary-reference" href="chapter-26.xhtml#glossary-documentation string">documentation string</a> 
    to <span class="parameter">name</span> (as kind <span class="special-operator-reference error">special-operator:method-combination</span>)
and to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-method combination">method combination</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.
 
 
 
Note that two methods with identical specializers, but with different
<a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifiers</a>, are not ordered by the algorithm described in Step 2 of
the method selection and combination process described in 
<a class="section-reference" href="#section-MethodSelectionAndCombination">Method Selection and Combination</a>.  Normally the two methods play
different roles in the effective method because they have different
<a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifiers</a>, and no matter how they are ordered in the result of Step
2, the effective method is the same.  If the two methods play the same
role and their order matters, 

an error is signaled.  This happens as
part of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifier</a> pattern matching in
<a class="macro-reference" href="#macro-define-method-combination">define-method-combination</a>.<br/></dd></dl><br/>If a <a class="macro-reference" href="#macro-define-method-combination">define-method-combination</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> appears as a
<a class="glossary-reference" href="chapter-26.xhtml#glossary-top level form">top level form</a>, the <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler">compiler</a> must make the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-method combination">method combination</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> be recognized as a valid
<a class="glossary-reference" href="chapter-26.xhtml#glossary-method combination">method combination</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> in subsequent <a class="macro-reference" href="#macro-defgeneric">defgeneric</a>
<a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a>.  However, the <a class="glossary-reference" href="chapter-26.xhtml#glossary-method combination">method combination</a> is executed
no earlier than when the <a class="macro-reference" href="#macro-define-method-combination">define-method-combination</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>
is executed, and possibly as late as the time that <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic functions</a>
that use the <a class="glossary-reference" href="chapter-26.xhtml#glossary-method combination">method combination</a> are executed.

</dd></dl><dl><dt class="label">Examples</dt><dd>Most examples of the long form of <a class="macro-reference" href="#macro-define-method-combination">define-method-combination</a> also
illustrate the use of the related <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">functions</a> that are provided as part
of the declarative method combination facility.<br/><pre><code><span class="syntax-root">;;; Examples of the short form of define-method-combination
 
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-define-method-combination">define-method-combination</a> <a class="macro-reference" href="chapter-5.xhtml#macro-and">and</a> <span class="syntax-keyword-symbol">:identity-with-one-argument</span> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a>)</span> 
  
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-defmethod">defmethod</a> <span class="syntax-interned-symbol">func</span> <a class="macro-reference" href="chapter-5.xhtml#macro-and">and</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">class1</span>)</span> <span class="syntax-interned-symbol">y</span>)</span> <span class="syntax-interned-symbol">...</span>)</span>
 
;;; The equivalent of this example in the long form is:
 
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-define-method-combination">define-method-combination</a> <a class="macro-reference" href="chapter-5.xhtml#macro-and">and</a> 
         <span class="syntax-cons">(<a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-optional">&amp;OPTIONAL</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">order</span> <span class="syntax-keyword-symbol">:most-specific-first</span>)</span>)</span>
         <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">around</span> <span class="syntax-cons">(<span class="syntax-keyword-symbol">:around</span>)</span>)</span>
          <span class="syntax-cons">(<span class="syntax-interned-symbol">primary</span> <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-and">and</a>)</span> <span class="syntax-keyword-symbol">:order</span> <span class="syntax-interned-symbol">order</span> <span class="syntax-keyword-symbol">:required</span> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a>)</span>)</span>
   <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">form</span> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-rest">rest</a> <span class="syntax-interned-symbol">primary</span>)</span>
                   <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-and">and</a> <span class="syntax-unquote">,@<span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-mapcar">mapcar</a> <span class="syntax-function">#'<span class="syntax-cons">(<a class="macro-reference" href="chapter-3.xhtml#macro-lambda">lambda</a> <span class="syntax-cons">(<a class="type-reference" href="chapter-4.xhtml#type-method">method</a>)</span>
                                       <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="macro-reference" href="#macro-call-method">call-method</a> <span class="syntax-unquote">,<a class="type-reference" href="chapter-4.xhtml#type-method">method</a></span>)</span></span>)</span></span>
                                   <span class="syntax-interned-symbol">primary</span>)</span></span>)</span></span>
                   <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="macro-reference" href="#macro-call-method">call-method</a> <span class="syntax-unquote">,<span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-first">first</a> <span class="syntax-interned-symbol">primary</span>)</span></span>)</span></span>)</span>)</span>)</span>
     <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-interned-symbol">around</span>
         <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="macro-reference" href="#macro-call-method">call-method</a> <span class="syntax-unquote">,<span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-first">first</a> <span class="syntax-interned-symbol">around</span>)</span></span>
                       <span class="syntax-cons">(<span class="syntax-unquote">,@<span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-rest">rest</a> <span class="syntax-interned-symbol">around</span>)</span></span>
                        <span class="syntax-cons">(<a class="macro-reference" href="#macro-make-method">make-method</a> <span class="syntax-unquote">,<span class="syntax-interned-symbol">form</span></span>)</span>)</span>)</span></span>
         <span class="syntax-interned-symbol">form</span>)</span>)</span>)</span>
  
;;; Examples of the long form of define-method-combination
 
;The default method-combination technique
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-define-method-combination">define-method-combination</a> <a class="symbol-reference" href="#symbol-standard">standard</a> <span class="syntax-symbol">()</span>
         <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">around</span> <span class="syntax-cons">(<span class="syntax-keyword-symbol">:around</span>)</span>)</span>
          <span class="syntax-cons">(<span class="syntax-interned-symbol">before</span> <span class="syntax-cons">(<span class="syntax-keyword-symbol">:before</span>)</span>)</span>
          <span class="syntax-cons">(<span class="syntax-interned-symbol">primary</span> <span class="syntax-symbol">()</span> <span class="syntax-keyword-symbol">:required</span> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a>)</span>
          <span class="syntax-cons">(<span class="syntax-interned-symbol">after</span> <span class="syntax-cons">(<span class="syntax-keyword-symbol">:after</span>)</span>)</span>)</span>
   <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-flet">flet</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">call-methods</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">methods</span>)</span>
            <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-mapcar">mapcar</a> <span class="syntax-function">#'<span class="syntax-cons">(<a class="macro-reference" href="chapter-3.xhtml#macro-lambda">lambda</a> <span class="syntax-cons">(<a class="type-reference" href="chapter-4.xhtml#type-method">method</a>)</span>
                        <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="macro-reference" href="#macro-call-method">call-method</a> <span class="syntax-unquote">,<a class="type-reference" href="chapter-4.xhtml#type-method">method</a></span>)</span></span>)</span></span>
                    <span class="syntax-interned-symbol">methods</span>)</span>)</span>)</span>
     <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">form</span> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-or">or</a> <span class="syntax-interned-symbol">before</span> <span class="syntax-interned-symbol">after</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-rest">rest</a> <span class="syntax-interned-symbol">primary</span>)</span>)</span>
                     <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-multiple-value-prog1">multiple-value-prog1</a>
                        <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-progn">progn</a> <span class="syntax-unquote">,@<span class="syntax-cons">(<span class="syntax-interned-symbol">call-methods</span> <span class="syntax-interned-symbol">before</span>)</span></span>
                               <span class="syntax-cons">(<a class="macro-reference" href="#macro-call-method">call-method</a> <span class="syntax-unquote">,<span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-first">first</a> <span class="syntax-interned-symbol">primary</span>)</span></span>
                                            <span class="syntax-unquote">,<span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-rest">rest</a> <span class="syntax-interned-symbol">primary</span>)</span></span>)</span>)</span>
                        <span class="syntax-unquote">,@<span class="syntax-cons">(<span class="syntax-interned-symbol">call-methods</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-17.xhtml#function-reverse">reverse</a> <span class="syntax-interned-symbol">after</span>)</span>)</span></span>)</span></span>
                     <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="macro-reference" href="#macro-call-method">call-method</a> <span class="syntax-unquote">,<span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-first">first</a> <span class="syntax-interned-symbol">primary</span>)</span></span>)</span></span>)</span>)</span>)</span>
       <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-interned-symbol">around</span>
           <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="macro-reference" href="#macro-call-method">call-method</a> <span class="syntax-unquote">,<span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-first">first</a> <span class="syntax-interned-symbol">around</span>)</span></span>
                         <span class="syntax-cons">(<span class="syntax-unquote">,@<span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-rest">rest</a> <span class="syntax-interned-symbol">around</span>)</span></span>
                          <span class="syntax-cons">(<a class="macro-reference" href="#macro-make-method">make-method</a> <span class="syntax-unquote">,<span class="syntax-interned-symbol">form</span></span>)</span>)</span>)</span></span>
           <span class="syntax-interned-symbol">form</span>)</span>)</span>)</span>)</span>
  
;A simple way to try several methods until one returns non-nil
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-define-method-combination">define-method-combination</a> <a class="macro-reference" href="chapter-5.xhtml#macro-or">or</a> <span class="syntax-symbol">()</span>
         <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">methods</span> <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-or">or</a>)</span>)</span>)</span>
   <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-or">or</a> <span class="syntax-unquote">,@<span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-mapcar">mapcar</a> <span class="syntax-function">#'<span class="syntax-cons">(<a class="macro-reference" href="chapter-3.xhtml#macro-lambda">lambda</a> <span class="syntax-cons">(<a class="type-reference" href="chapter-4.xhtml#type-method">method</a>)</span>
                      <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="macro-reference" href="#macro-call-method">call-method</a> <span class="syntax-unquote">,<a class="type-reference" href="chapter-4.xhtml#type-method">method</a></span>)</span></span>)</span></span>
                  <span class="syntax-interned-symbol">methods</span>)</span></span>)</span></span>)</span>
  
;A more complete version of the preceding
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-define-method-combination">define-method-combination</a> <a class="macro-reference" href="chapter-5.xhtml#macro-or">or</a> 
         <span class="syntax-cons">(<a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-optional">&amp;OPTIONAL</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">order</span> <span class="syntax-quote">'<span class="syntax-keyword-symbol">:most-specific-first</span></span>)</span>)</span>
         <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">around</span> <span class="syntax-cons">(<span class="syntax-keyword-symbol">:around</span>)</span>)</span>
          <span class="syntax-cons">(<span class="syntax-interned-symbol">primary</span> <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-or">or</a>)</span>)</span>)</span>
   <span class="syntax-line-comment syntax-comment">;; Process the order argument
</span>   <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-case">case</a> <span class="syntax-interned-symbol">order</span>
     <span class="syntax-cons">(<span class="syntax-keyword-symbol">:most-specific-first</span>)</span>
     <span class="syntax-cons">(<span class="syntax-keyword-symbol">:most-specific-last</span> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">primary</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-17.xhtml#function-reverse">reverse</a> <span class="syntax-interned-symbol">primary</span>)</span>)</span>)</span>
     <span class="syntax-cons">(<a class="symbol-reference" href="chapter-5.xhtml#symbol-otherwise">otherwise</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-9.xhtml#function-method-combination-error">method-combination-error</a> <span class="syntax-string">"~S is an invalid order.~@
     :most-specific-first and :most-specific-last are the possible values."</span>
                                          <span class="syntax-interned-symbol">order</span>)</span>)</span>)</span>
   <span class="syntax-line-comment syntax-comment">;; Must have a primary method
</span>   <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-unless">unless</a> <span class="syntax-interned-symbol">primary</span>
     <span class="syntax-cons">(<a class="function-reference" href="chapter-9.xhtml#function-method-combination-error">method-combination-error</a> <span class="syntax-string">"A primary method is required."</span>)</span>)</span>
   <span class="syntax-line-comment syntax-comment">;; Construct the form that calls the primary methods
</span>   <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">form</span> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-rest">rest</a> <span class="syntax-interned-symbol">primary</span>)</span>
                   <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-or">or</a> <span class="syntax-unquote">,@<span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-mapcar">mapcar</a> <span class="syntax-function">#'<span class="syntax-cons">(<a class="macro-reference" href="chapter-3.xhtml#macro-lambda">lambda</a> <span class="syntax-cons">(<a class="type-reference" href="chapter-4.xhtml#type-method">method</a>)</span>
                                      <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="macro-reference" href="#macro-call-method">call-method</a> <span class="syntax-unquote">,<a class="type-reference" href="chapter-4.xhtml#type-method">method</a></span>)</span></span>)</span></span>
                                  <span class="syntax-interned-symbol">primary</span>)</span></span>)</span></span>
                   <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="macro-reference" href="#macro-call-method">call-method</a> <span class="syntax-unquote">,<span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-first">first</a> <span class="syntax-interned-symbol">primary</span>)</span></span>)</span></span>)</span>)</span>)</span>
     <span class="syntax-line-comment syntax-comment">;; Wrap the around methods around that form
</span>     <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-interned-symbol">around</span>
         <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="macro-reference" href="#macro-call-method">call-method</a> <span class="syntax-unquote">,<span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-first">first</a> <span class="syntax-interned-symbol">around</span>)</span></span>
                       <span class="syntax-cons">(<span class="syntax-unquote">,@<span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-rest">rest</a> <span class="syntax-interned-symbol">around</span>)</span></span>
                        <span class="syntax-cons">(<a class="macro-reference" href="#macro-make-method">make-method</a> <span class="syntax-unquote">,<span class="syntax-interned-symbol">form</span></span>)</span>)</span>)</span></span>
         <span class="syntax-interned-symbol">form</span>)</span>)</span>)</span>
  
;The same thing, using the :order and :required keyword options
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-define-method-combination">define-method-combination</a> <a class="macro-reference" href="chapter-5.xhtml#macro-or">or</a> 
         <span class="syntax-cons">(<a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-optional">&amp;OPTIONAL</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">order</span> <span class="syntax-quote">'<span class="syntax-keyword-symbol">:most-specific-first</span></span>)</span>)</span>
         <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">around</span> <span class="syntax-cons">(<span class="syntax-keyword-symbol">:around</span>)</span>)</span>
          <span class="syntax-cons">(<span class="syntax-interned-symbol">primary</span> <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-or">or</a>)</span> <span class="syntax-keyword-symbol">:order</span> <span class="syntax-interned-symbol">order</span> <span class="syntax-keyword-symbol">:required</span> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a>)</span>)</span>
   <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">form</span> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-rest">rest</a> <span class="syntax-interned-symbol">primary</span>)</span>
                   <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-or">or</a> <span class="syntax-unquote">,@<span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-mapcar">mapcar</a> <span class="syntax-function">#'<span class="syntax-cons">(<a class="macro-reference" href="chapter-3.xhtml#macro-lambda">lambda</a> <span class="syntax-cons">(<a class="type-reference" href="chapter-4.xhtml#type-method">method</a>)</span>
                                      <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="macro-reference" href="#macro-call-method">call-method</a> <span class="syntax-unquote">,<a class="type-reference" href="chapter-4.xhtml#type-method">method</a></span>)</span></span>)</span></span>
                                  <span class="syntax-interned-symbol">primary</span>)</span></span>)</span></span>
                   <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="macro-reference" href="#macro-call-method">call-method</a> <span class="syntax-unquote">,<span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-first">first</a> <span class="syntax-interned-symbol">primary</span>)</span></span>)</span></span>)</span>)</span>)</span>
     <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-interned-symbol">around</span>
         <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="macro-reference" href="#macro-call-method">call-method</a> <span class="syntax-unquote">,<span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-first">first</a> <span class="syntax-interned-symbol">around</span>)</span></span>
                       <span class="syntax-cons">(<span class="syntax-unquote">,@<span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-rest">rest</a> <span class="syntax-interned-symbol">around</span>)</span></span>
                        <span class="syntax-cons">(<a class="macro-reference" href="#macro-make-method">make-method</a> <span class="syntax-unquote">,<span class="syntax-interned-symbol">form</span></span>)</span>)</span>)</span></span>
         <span class="syntax-interned-symbol">form</span>)</span>)</span>)</span>
  
;This short-form call is behaviorally identical to the preceding
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-define-method-combination">define-method-combination</a> <a class="macro-reference" href="chapter-5.xhtml#macro-or">or</a> <span class="syntax-keyword-symbol">:identity-with-one-argument</span> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a>)</span>
 
;Order methods by positive integer qualifiers
;:around methods are disallowed to keep the example small
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-define-method-combination">define-method-combination</a> <span class="syntax-interned-symbol">example-method-combination</span> <span class="syntax-symbol">()</span>
         <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">methods</span> <span class="syntax-interned-symbol">positive-integer-qualifier-p</span>)</span>)</span>
   <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-progn">progn</a> <span class="syntax-unquote">,@<span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-mapcar">mapcar</a> <span class="syntax-function">#'<span class="syntax-cons">(<a class="macro-reference" href="chapter-3.xhtml#macro-lambda">lambda</a> <span class="syntax-cons">(<a class="type-reference" href="chapter-4.xhtml#type-method">method</a>)</span>
                         <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="macro-reference" href="#macro-call-method">call-method</a> <span class="syntax-unquote">,<a class="type-reference" href="chapter-4.xhtml#type-method">method</a></span>)</span></span>)</span></span>
                     <span class="syntax-cons">(<a class="function-reference" href="chapter-17.xhtml#function-stable-sort">stable-sort</a> <span class="syntax-interned-symbol">methods</span> <span class="syntax-function">#'<a class="function-reference" href="chapter-12.xhtml#function-&lt;">&lt;</a></span>
                       <span class="syntax-keyword-symbol">:key</span> <span class="syntax-function">#'<span class="syntax-cons">(<a class="macro-reference" href="chapter-3.xhtml#macro-lambda">lambda</a> <span class="syntax-cons">(<a class="type-reference" href="chapter-4.xhtml#type-method">method</a>)</span>
                                <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-first">first</a> <span class="syntax-cons">(<a class="function-reference" href="#function-method-qualifiers">method-qualifiers</a> <a class="type-reference" href="chapter-4.xhtml#type-method">method</a>)</span>)</span>)</span></span>)</span>)</span></span>)</span></span>)</span>
 
 <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">positive-integer-qualifier-p</span> <span class="syntax-cons">(<a class="function-reference" href="#function-method-qualifiers">method-qualifiers</a>)</span>
   <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-and">and</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-=">=</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-17.xhtml#function-length">length</a> <a class="function-reference" href="#function-method-qualifiers">method-qualifiers</a>)</span> <span class="syntax-number">1</span>)</span>
        <span class="syntax-cons">(<a class="function-reference" href="chapter-4.xhtml#function-typep">typep</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-first">first</a> <a class="function-reference" href="#function-method-qualifiers">method-qualifiers</a>)</span> <span class="syntax-quote">'<span class="syntax-cons">(<a class="type-reference" href="chapter-12.xhtml#type-integer">integer</a> <span class="syntax-number">0</span> <a class="function-reference" href="chapter-12.xhtml#function-*">*</a>)</span></span>)</span>)</span>)</span>
  
;;; Example of the use of :arguments
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-define-method-combination">define-method-combination</a> <span class="syntax-interned-symbol">progn-with-lock</span> <span class="syntax-symbol">()</span>
         <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">methods</span> <span class="syntax-symbol">()</span>)</span>)</span>
   <span class="syntax-cons">(<span class="syntax-keyword-symbol">:arguments</span> <span class="syntax-interned-symbol">object</span>)</span>
   <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-unwind-protect">unwind-protect</a>
        <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-progn">progn</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">lock</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">object-lock</span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">object</span></span>)</span>)</span>
               <span class="syntax-unquote">,@<span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-mapcar">mapcar</a> <span class="syntax-function">#'<span class="syntax-cons">(<a class="macro-reference" href="chapter-3.xhtml#macro-lambda">lambda</a> <span class="syntax-cons">(<a class="type-reference" href="chapter-4.xhtml#type-method">method</a>)</span>
                             <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="macro-reference" href="#macro-call-method">call-method</a> <span class="syntax-unquote">,<a class="type-reference" href="chapter-4.xhtml#type-method">method</a></span>)</span></span>)</span></span>
                         <span class="syntax-interned-symbol">methods</span>)</span></span>)</span>
      <span class="syntax-cons">(<span class="syntax-interned-symbol">unlock</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">object-lock</span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">object</span></span>)</span>)</span>)</span></span>)</span>
  
</span></code></pre><br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Side Effects</dt><dd>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler">compiler</a> is not required to perform any compile-time side-effects.

</dd></dl><dl><dt class="label">Exceptional Situations</dt><dd>Method combination types defined with the short form require exactly
one <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifier</a> per method.  
An error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-9.xhtml#type-error">error</a> is signaled if there are
applicable methods with no <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifiers</a> or with <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifiers</a> that are not
supported by the method combination type.
At least one primary method must be applicable or 
an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-9.xhtml#type-error">error</a> is signaled.<br/>If an applicable method does not fall into any method group, the
system signals an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-9.xhtml#type-error">error</a>
indicating that the method is invalid for the kind of
method combination in use.<br/>If the value of the <span class="keyword">:required</span> option is <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>
and the method group is empty (that is, no applicable
methods match the <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifier</a> patterns or satisfy the predicate), 
an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-9.xhtml#type-error">error</a> is signaled.<br/>If the <span class="keyword">:order</span> option evaluates to a value other than 
<span class="keyword">:most-specific-first</span> or <span class="keyword">:most-specific-last</span>, 
an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-9.xhtml#type-error">error</a> is signaled.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="macro-reference" href="#macro-call-method">call-method</a>,
<a class="function-reference" href="#function-call-next-method">call-next-method</a>,
<a class="function-reference" href="chapter-25.xhtml#function-documentation">documentation</a>,
<a class="function-reference" href="#function-method-qualifiers">method-qualifiers</a>,
<a class="function-reference" href="chapter-9.xhtml#function-method-combination-error">method-combination-error</a>,
<a class="function-reference" href="chapter-9.xhtml#function-invalid-method-error">invalid-method-error</a>,
<a class="macro-reference" href="#macro-defgeneric">defgeneric</a>,
<a class="section-reference" href="#section-MethodSelectionAndCombination">Method Selection and Combination</a>,
<a class="section-reference" href="#section-BuiltInMethCombTypes">Built-in Method Combination Types</a>,
<a class="section-reference" href="chapter-3.xhtml#section-DocVsDecls">Syntactic Interaction of Documentation Strings and Declarations</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd>The <span class="keyword">:method-combination</span> option of <a class="macro-reference" href="#macro-defgeneric">defgeneric</a> is used to
specify that a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> should use a particular method
combination type.  The first argument to the <span class="keyword">:method-combination</span>
option is the <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> of a method combination type and the remaining
arguments are options for that type.<br/></dd></dl>
</div><br/><br/><br/><div class="component" id="function-find-method"><div class="header"><span class="left"><span class="name" id="function-find-method">find-method</span></span><span class="right"><span class="ftype">Standard Generic Function</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">find-method</span>&nbsp;<span class="lambda-list">generic-function method-qualifiers specializers <span class="lambda-list-keyword">&amp;optional</span> errorp</span>&nbsp;â†’&nbsp;<span class="return-values">method</span></span><br/><br/></dd></dl><dl><dt class="label">Method Signatures</dt><dd><span class="method"><span class="name">find-method</span>&nbsp;<span class="lambda-list"><span class="specialized-parameter">(<span class="name">generic-function</span>&nbsp;<a class="type-reference" href="chapter-4.xhtml#type-standard-generic-function">standard-generic-function</a>)</span>
		method-qualifiers specializers <span class="lambda-list-keyword">&amp;optional</span> errorp</span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">generic-function</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a>.<br/><span class="parameter">method-qualifiers</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a>.<br/><span class="parameter">specializers</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a>.<br/><span class="parameter">errorp</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generalized boolean">generalized boolean</a>.
 The default is <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>.<br/><span class="parameter">method</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>, or <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> <a class="function-reference" href="#function-find-method">find-method</a> takes a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> 
and returns the <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> that agrees on <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifiers</a> 
and <a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter specializer">parameter specializers</a> with the <span class="parameter">method-qualifiers</span> and 
<span class="parameter">specializers</span> arguments of <a class="function-reference" href="#function-find-method">find-method</a>.  
<span class="parameter">Method-qualifiers</span>  contains the
method <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifiers</a> for the <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a>. 
The order of the method <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifiers</a>
is significant.                                
For a definition of agreement in this context,
see <span class="section-reference error">section:SpecializerQualifierAgreement.</span><br/>The <span class="parameter">specializers</span> argument contains the parameter
specializers for the <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a>. It must correspond in length to
the number of required arguments of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a>, or
an error is signaled.  This means that to obtain the
default <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> on a given <span class="parameter">generic-function</span>,
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> whose elements are the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> <a class="type-reference" href="chapter-4.xhtml#type-t">t</a> must be given.<br/>If there is no such <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> and <span class="parameter">errorp</span> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>,
<a class="function-reference" href="#function-find-method">find-method</a> signals an error.
If there is no such <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> and <span class="parameter">errorp</span> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>,
<a class="function-reference" href="#function-find-method">find-method</a> returns <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.<br/></dd></dl><dl><dt class="label">Examples</dt><dd><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="macro-reference" href="#macro-defmethod">defmethod</a> <span class="syntax-interned-symbol">some-operation</span> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <a class="type-reference" href="chapter-12.xhtml#type-integer">integer</a>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">b</span> <a class="function-reference" href="chapter-12.xhtml#function-float">float</a>)</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-verbatim">#&lt;STANDARD-METHOD SOME-OPERATION (INTEGER FLOAT) 26723357&gt;</span>
 <span class="syntax-cons">(<a class="function-reference" href="#function-find-method">find-method</a> <span class="syntax-function">#'<span class="syntax-interned-symbol">some-operation</span></span> <span class="syntax-quote">'<span class="syntax-symbol">()</span></span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-mapcar">mapcar</a> <span class="syntax-function">#'<a class="function-reference" href="#function-find-class">find-class</a></span> <span class="syntax-quote">'<span class="syntax-cons">(<a class="type-reference" href="chapter-12.xhtml#type-integer">integer</a> <a class="function-reference" href="chapter-12.xhtml#function-float">float</a>)</span></span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-verbatim">#&lt;STANDARD-METHOD SOME-OPERATION (INTEGER FLOAT) 26723357&gt;</span>
 <span class="syntax-cons">(<a class="function-reference" href="#function-find-method">find-method</a> <span class="syntax-function">#'<span class="syntax-interned-symbol">some-operation</span></span> <span class="syntax-quote">'<span class="syntax-symbol">()</span></span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-mapcar">mapcar</a> <span class="syntax-function">#'<a class="function-reference" href="#function-find-class">find-class</a></span> <span class="syntax-quote">'<span class="syntax-cons">(<a class="type-reference" href="chapter-12.xhtml#type-integer">integer</a> <a class="type-reference" href="chapter-12.xhtml#type-integer">integer</a>)</span></span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> Error: No matching method
 <span class="syntax-cons">(<a class="function-reference" href="#function-find-method">find-method</a> <span class="syntax-function">#'<span class="syntax-interned-symbol">some-operation</span></span> <span class="syntax-quote">'<span class="syntax-symbol">()</span></span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-mapcar">mapcar</a> <span class="syntax-function">#'<a class="function-reference" href="#function-find-class">find-class</a></span> <span class="syntax-quote">'<span class="syntax-cons">(<a class="type-reference" href="chapter-12.xhtml#type-integer">integer</a> <a class="type-reference" href="chapter-12.xhtml#type-integer">integer</a>)</span></span>)</span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>
</span></code></pre><br/></dd></dl><dl><dt class="label">Affected By</dt><dd><a class="function-reference" href="#function-add-method">add-method</a>,
<a class="macro-reference" href="#macro-defclass">defclass</a>,
<a class="macro-reference" href="#macro-defgeneric">defgeneric</a>,
<a class="macro-reference" href="#macro-defmethod">defmethod</a><br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd>If the <span class="parameter">specializers</span> argument does not correspond in length to
the number of required arguments of the <span class="parameter">generic-function</span>, an
an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-9.xhtml#type-error">error</a> is signaled.  <br/>If there is no such <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> and <span class="parameter">errorp</span> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>, 
<a class="function-reference" href="#function-find-method">find-method</a> signals an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-9.xhtml#type-error">error</a>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="section-reference" href="#section-SpecializerQualifierAgreement">Agreement on Parameter Specializers and Qualifiers</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd><span class="none">None</span>.<br/></dd></dl></div><br/><br/><br/><div class="component" id="function-add-method"><div class="header"><span class="left"><span class="name" id="function-add-method">add-method</span></span><span class="right"><span class="ftype">Standard Generic Function</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">add-method</span>&nbsp;<span class="lambda-list">generic-function method</span>&nbsp;â†’&nbsp;<span class="return-values">generic-function</span></span><br/><br/></dd></dl><dl><dt class="label">Method Signatures</dt><dd><span class="method"><span class="name">add-method</span>&nbsp;<span class="lambda-list"><span class="specialized-parameter">(<span class="name">generic-function</span>&nbsp;<a class="type-reference" href="chapter-4.xhtml#type-standard-generic-function">standard-generic-function</a>)</span>
			   <span class="specialized-parameter">(<span class="name">method</span>&nbsp;<a class="type-reference" href="chapter-4.xhtml#type-method">method</a>)</span></span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">generic-function</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.<br/><span class="parameter">method</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>The generic function <a class="function-reference" href="#function-add-method">add-method</a> adds a <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a>
to a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a>.<br/>If <span class="parameter">method</span> agrees with an existing <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> of <span class="parameter">generic-function</span>
on <a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter specializer">parameter specializers</a> and <a class="glossary-reference" href="chapter-26.xhtml#glossary-qualifier">qualifiers</a>, 
the existing <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> is replaced.<br/></dd></dl><dl><dt class="label">Examples</dt><dd><span class="none">None</span>.<br/>
</dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a> of the method function of <span class="parameter">method</span> must be
congruent with the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a> of <span class="parameter">generic-function</span>, 
or an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-9.xhtml#type-error">error</a> is signaled.<br/>If <span class="parameter">method</span> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> of
another <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a>, an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-9.xhtml#type-error">error</a> is signaled.<br/>                                     
</dd></dl><dl><dt class="label">See Also</dt><dd><a class="macro-reference" href="#macro-defmethod">defmethod</a>,
<a class="macro-reference" href="#macro-defgeneric">defgeneric</a>,
<a class="function-reference" href="#function-find-method">find-method</a>,
<a class="function-reference" href="#function-remove-method">remove-method</a>,
<a class="section-reference" href="#section-SpecializerQualifierAgreement">Agreement on Parameter Specializers and Qualifiers</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd><span class="none">None</span>.<br/></dd></dl></div><br/><br/>
<br/><div class="component" id="function-initialize-instance"><div class="header"><span class="left"><span class="name" id="function-initialize-instance">initialize-instance</span></span><span class="right"><span class="ftype">Standard Generic Function</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">initialize-instance</span>&nbsp;<span class="lambda-list">instance <span class="lambda-list-keyword">&amp;rest</span> initargs <span class="lambda-list-keyword">&amp;key</span> <span class="lambda-list-keyword">&amp;allow-other-keys</span></span>&nbsp;â†’&nbsp;<span class="return-values">instance</span></span><br/> 
</dd></dl><dl><dt class="label">Method Signatures</dt><dd><span class="method"><span class="name">initialize-instance</span>&nbsp;<span class="lambda-list"><span class="specialized-parameter">(<span class="name">instance</span>&nbsp;<a class="type-reference" href="chapter-4.xhtml#type-standard-object">standard-object</a>)</span> <span class="lambda-list-keyword">&amp;rest</span> initargs</span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">instance</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.<br/><span class="parameter">initargs</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-defaulted initialization argument list">defaulted initialization argument list</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>Called by <a class="function-reference" href="#function-make-instance">make-instance</a> to initialize a newly created <a class="glossary-reference" href="chapter-26.xhtml#glossary-instance">instance</a>.
The generic function is called with the new <span class="parameter">instance</span> 
and the <a class="glossary-reference" href="chapter-26.xhtml#glossary-defaulted initialization argument list">defaulted initialization argument list</a>.<br/>The system-supplied primary <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> on <a class="function-reference" href="#function-initialize-instance">initialize-instance</a>
initializes the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a> of the <span class="parameter">instance</span> with values according 
to the <span class="parameter">initargs</span> and the <span class="keyword">:initform</span> forms of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a>.
It does this by calling the generic function <a class="function-reference" href="#function-shared-initialize">shared-initialize</a>
with the following arguments: the <span class="parameter">instance</span>, <a class="symbol-reference" href="chapter-5.xhtml#symbol-t">t</a> (this indicates
that all <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slots</a> for which no initialization arguments are provided
should be initialized according to their <span class="keyword">:initform</span> forms), and
the <span class="parameter">initargs</span>.<br/>Programmers can define <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> for <a class="function-reference" href="#function-initialize-instance">initialize-instance</a> to
specify actions to be taken when an instance is initialized.  If only
<a class="glossary-reference" href="chapter-26.xhtml#glossary-after method">after methods</a> are defined, they will be run after the
system-supplied primary <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> for initialization and therefore will
not interfere with the default behavior of <a class="function-reference" href="#function-initialize-instance">initialize-instance</a>.<br/></dd></dl><dl><dt class="label">Examples</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="function-reference" href="#function-shared-initialize">shared-initialize</a>,
<a class="function-reference" href="#function-make-instance">make-instance</a>,
<a class="function-reference" href="#function-slot-boundp">slot-boundp</a>,
<a class="function-reference" href="#function-slot-makunbound">slot-makunbound</a>,
<a class="section-reference" href="#section-ObjectCreationAndInit">Object Creation and Initialization</a>,
<a class="section-reference" href="#section-InitargRules">Rules for Initialization Arguments</a>,
<a class="section-reference" href="#section-DeclaringInitargValidity">Declaring the Validity of Initialization Arguments</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd><span class="none">None</span>.<br/></dd></dl></div><br/><br/><br/><div class="component" id="function-class-name"><div class="header"><span class="left"><span class="name" id="function-class-name">class-name</span></span><span class="right"><span class="ftype">Standard Generic Function</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">class-name</span>&nbsp;<span class="lambda-list">class</span>&nbsp;â†’&nbsp;<span class="return-values">name</span></span><br/><br/></dd></dl><dl><dt class="label">Method Signatures</dt><dd><span class="method"><span class="name">class-name</span>&nbsp;<span class="lambda-list"><span class="specialized-parameter">(<span class="name">class</span>&nbsp;<a class="type-reference" href="chapter-4.xhtml#type-class">class</a>)</span></span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">class</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.<br/><span class="parameter">name</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>Returns the <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> of the given <span class="parameter">class</span>.<br/></dd></dl><dl><dt class="label">Examples</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="function-reference" href="#function-find-class">find-class</a>,
<a class="section-reference" href="chapter-4.xhtml#section-Classes">Classes</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd>If <math xmlns="http://www.w3.org/1998/Math/MathML">S</math> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> such that <math xmlns="http://www.w3.org/1998/Math/MathML">S =</math><span class="explicit-mono">(class-name <math xmlns="http://www.w3.org/1998/Math/MathML">C</math>)</span>
and <math xmlns="http://www.w3.org/1998/Math/MathML">C =</math><span class="explicit-mono">(find-class <math xmlns="http://www.w3.org/1998/Math/MathML">S</math>)</span>, then <math xmlns="http://www.w3.org/1998/Math/MathML">S</math> is the proper name of <math xmlns="http://www.w3.org/1998/Math/MathML">C</math>.
For further discussion, see <span class="section-reference error">section:Classes.</span><br/>The name of an anonymous <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> is <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.<br/></dd></dl></div><br/><br/><br/><div class="component" id="function-SETF:(class-name)"><div class="header"><span class="left"><span class="name" id="function-SETF:(class-name)">(setf&nbsp;class-name)</span></span><span class="right"><span class="ftype">Standard Generic Function</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">(setf&nbsp;class-name)</span>&nbsp;<span class="lambda-list">new-value class</span>&nbsp;â†’&nbsp;<span class="return-values">new-value</span></span><br/><br/></dd></dl><dl><dt class="label">Method Signatures</dt><dd><span class="method"><span class="name">(setf&nbsp;class-name)</span>&nbsp;<span class="lambda-list">new-value <span class="specialized-parameter">(<span class="name">class</span>&nbsp;<a class="type-reference" href="chapter-4.xhtml#type-class">class</a>)</span></span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">new-value</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>.<br/><span class="parameter">class</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>The generic function <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> <a class="function-reference" href="#function-class-name">class-name</a>)</span>
</span></code></pre> sets the name of 
a <span class="parameter">class</span> object.<br/> <br/></dd></dl><dl><dt class="label">Examples</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="function-reference" href="#function-find-class">find-class</a>,
<a class="glossary-reference" href="chapter-26.xhtml#glossary-proper name">proper name</a>,
<a class="section-reference" href="chapter-4.xhtml#section-Classes">Classes</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd><span class="none">None</span>.<br/> 
</dd></dl></div><br/><br/><br/><div class="component" id="function-class-of"><div class="header"><span class="left"><span class="name" id="function-class-of">class-of</span></span><span class="right"><span class="ftype">Function</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">class-of</span>&nbsp;<span class="lambda-list">object</span>&nbsp;â†’&nbsp;<span class="return-values">class</span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">object</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.<br/><span class="parameter">class</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>Returns the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> of which the <span class="parameter">object</span> is 
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-direct instance">direct instance</a>.<br/></dd></dl><dl><dt class="label">Examples</dt><dd><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="function-reference" href="#function-class-of">class-of</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">fred</span></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-verbatim">#&lt;BUILT-IN-CLASS SYMBOL 610327300&gt;</span>
 <span class="syntax-cons">(<a class="function-reference" href="#function-class-of">class-of</a> <span class="syntax-number">2/3</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-verbatim">#&lt;BUILT-IN-CLASS RATIO 610326642&gt;</span>
 
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-defclass">defclass</a> <span class="syntax-interned-symbol">book</span> <span class="syntax-symbol">()</span> <span class="syntax-symbol">()</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-verbatim">#&lt;STANDARD-CLASS BOOK 33424745&gt;</span>
 <span class="syntax-cons">(<a class="function-reference" href="#function-class-of">class-of</a> <span class="syntax-cons">(<a class="function-reference" href="#function-make-instance">make-instance</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">book</span></span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-verbatim">#&lt;STANDARD-CLASS BOOK 33424745&gt;</span>
 
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-defclass">defclass</a> <span class="syntax-interned-symbol">novel</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">book</span>)</span> <span class="syntax-symbol">()</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-verbatim">#&lt;STANDARD-CLASS NOVEL 33424764&gt;</span>
 <span class="syntax-cons">(<a class="function-reference" href="#function-class-of">class-of</a> <span class="syntax-cons">(<a class="function-reference" href="#function-make-instance">make-instance</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">novel</span></span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-verbatim">#&lt;STANDARD-CLASS NOVEL 33424764&gt;</span>

 <span class="syntax-cons">(<a class="macro-reference" href="chapter-8.xhtml#macro-defstruct">defstruct</a> <span class="syntax-interned-symbol">kons</span> <span class="syntax-interned-symbol">kar</span> <span class="syntax-interned-symbol">kdr</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">KONS</span>
 <span class="syntax-cons">(<a class="function-reference" href="#function-class-of">class-of</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">make-kons</span> <span class="syntax-keyword-symbol">:kar</span> <span class="syntax-number">3</span> <span class="syntax-keyword-symbol">:kdr</span> <span class="syntax-number">4</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-verbatim">#&lt;STRUCTURE-CLASS KONS 250020317&gt;</span>
</span></code></pre><br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>!<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd><span class="none">None</span>!<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="function-reference" href="#function-make-instance">make-instance</a>,
<a class="function-reference" href="chapter-4.xhtml#function-type-of">type-of</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd><span class="none">None</span>.<br/></dd></dl></div><br/><br/>
<br/><div class="component" id="type-unbound-slot"><div class="header"><span class="left"><span class="name" id="type-unbound-slot">unbound-slot</span></span><span class="right"><span class="ftype">Condition Type</span></span></div><br/>
<dl><dt class="label">Class Precedence List</dt><dd><a class="type-reference" href="#type-unbound-slot">unbound-slot</a>,
<a class="type-reference" href="chapter-9.xhtml#type-cell-error">cell-error</a>,
<a class="type-reference" href="chapter-9.xhtml#type-error">error</a>,
<a class="type-reference" href="chapter-9.xhtml#type-serious-condition">serious-condition</a>,
<a class="type-reference" href="chapter-9.xhtml#type-condition">condition</a>,
<a class="type-reference" href="chapter-4.xhtml#type-t">t</a><br/></dd></dl><dl><dt class="label">Description</dt><dd>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> having the unbound slot is initialized by 
the <span class="keyword">:instance</span> initialization argument to <a class="function-reference" href="chapter-9.xhtml#function-make-condition">make-condition</a>,
and is <a class="glossary-reference" href="chapter-26.xhtml#glossary-access">accessed</a> by the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="#function-unbound-slot-instance">unbound-slot-instance</a>.
</dd></dl>
The name of the cell (see <a class="type-reference" href="chapter-9.xhtml#type-cell-error">cell-error</a>) is the name of the slot.<br/><dl><dt class="label">See Also</dt><dd><a class="function-reference" href="chapter-9.xhtml#function-cell-error-name">cell-error-name</a>,
<a class="function-reference" href="#function-unbound-slot-instance">unbound-slot-instance</a>,
<a class="section-reference" href="chapter-9.xhtml#section-ConditionSystemConcepts">Condition System Concepts</a><br/></dd></dl></div><br/>
<br/><div class="component" id="function-unbound-slot-instance"><div class="header"><span class="left"><span class="name" id="function-unbound-slot-instance">unbound-slot-instance</span></span><span class="right"><span class="ftype">Function</span></span></div><br/>
<dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">unbound-slot-instance</span>&nbsp;<span class="lambda-list">condition</span>&nbsp;â†’&nbsp;<span class="return-values">instance</span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">condition</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-condition">condition</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="#type-unbound-slot">unbound-slot</a>.<br/><span class="parameter">instance</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>Returns the instance which had the unbound slot in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-situation">situation</a>
represented by the <span class="parameter">condition</span>.          <br/></dd></dl><dl><dt class="label">Examples</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="function-reference" href="chapter-9.xhtml#function-cell-error-name">cell-error-name</a>,
<a class="type-reference" href="#type-unbound-slot">unbound-slot</a>,
<a class="section-reference" href="chapter-9.xhtml#section-ConditionSystemConcepts">Condition System Concepts</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd><span class="none">None</span>.<br/>
</dd></dl></div><br/>
</section></section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>