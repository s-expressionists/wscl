<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="style.css"/><script src="permalink.js"/><script src="navigation.js"/><title>Well-specified Common Lisp â€” Printer</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">Printer</span><br/><ol class="local-toc"><li><a href="#section-TheLispPrinter">The Lisp Printer</a><ol> <li><a href="#section-OverviewofTheLispPrinter">Overview of The Lisp Printer</a><ol> <li><a href="#section-MultiplePossibleTextualRepresentations">Multiple Possible Textual Representations</a><ol> <li><a href="#section-PrinterEscaping">Printer Escaping</a><ol> </ol></li></ol></li></ol></li><li><a href="#section-PrinterDispatch">Printer Dispatching</a><ol> </ol></li><li><a href="#section-DefaultPrintObjMeths">Default Print-Object Methods</a><ol> <li><a href="#section-PrintingNumbers">Printing Numbers</a><ol> <li><a href="#section-PrintingIntegers">Printing Integers</a><ol> </ol></li><li><a href="#section-PrintingRatios">Printing Ratios</a><ol> </ol></li><li><a href="#section-PrintingFloats">Printing Floats</a><ol> </ol></li><li><a href="#section-PrintingComplexes">Printing Complexes</a><ol> </ol></li><li><a href="#section-NoteaboutPrintingNumbers">Note about Printing Numbers</a><ol> </ol></li></ol></li><li><a href="#section-PrintingCharacters">Printing Characters</a><ol> </ol></li><li><a href="#section-PrintingSymbols">Printing Symbols</a><ol> <li><a href="#section-PackagePrefixesforSymbols">Package Prefixes for Symbols</a><ol> </ol></li><li><a href="#section-ReadtableCasePrintEffect">Effect of Readtable Case on the Lisp Printer</a><ol> <li><a href="#section-ReadtableCasePrintExamples">Examples of Effect of Readtable Case on the Lisp Printer</a><ol> </ol></li></ol></li></ol></li><li><a href="#section-PrintingStrings">Printing Strings</a><ol> </ol></li><li><a href="#section-PrintingListsAndConses">Printing Lists and Conses</a><ol> </ol></li><li><a href="#section-PrintingBitVectors">Printing Bit Vectors</a><ol> </ol></li><li><a href="#section-PrintingOtherVectors">Printing Other Vectors</a><ol> </ol></li><li><a href="#section-PrintingOtherArrays">Printing Other Arrays</a><ol> <li><a href="#section-ExamplesofPrintingArrays">Examples of Printing Arrays</a><ol> </ol></li></ol></li><li><a href="#section-PrintingRandomStates">Printing Random States</a><ol> </ol></li><li><a href="#section-PrintingPathnames">Printing Pathnames</a><ol> </ol></li><li><a href="#section-PrintingStructures">Printing Structures</a><ol> </ol></li><li><a href="#section-PrintingOtherObjects">Printing Other Objects</a><ol> </ol></li></ol></li><li><a href="#section-ExamplesofPrinterBehavior">Examples of Printer Behavior</a><ol> </ol></li></ol></li><li><a href="#section-PPrinter">The Lisp Pretty Printer</a><ol> <li><a href="#section-PrettyPrinterConcepts">Pretty Printer Concepts</a><ol> <li><a href="#section-DynamicControlofOutput">Dynamic Control of the Arrangement of Output</a><ol> </ol></li><li><a href="#section-FormatDirectiveInterface">Format Directive Interface</a><ol> </ol></li><li><a href="#section-CompilingFormatStrings">Compiling Format Strings</a><ol> </ol></li><li><a href="#section-PPrintDispatchTables">Pretty Print Dispatch Tables</a><ol> </ol></li><li><a href="#section-PrettyPrinterMargins">Pretty Printer Margins</a><ol> </ol></li></ol></li><li><a href="#section-PrettyPrinterExamples">Examples of using the Pretty Printer</a><ol> </ol></li><li><a href="#section-NotesaboutthePrettyPrinter'sBackground">Notes about the Pretty Printer's Background</a><ol> </ol></li></ol></li><li><a href="#section-FormattedOutput">Formatted Output</a><ol> <li><a href="#section-FORMATBasicOutput">FORMAT Basic Output</a><ol> <li><a href="#section-TildeC:Character">Tilde C: Character</a><ol> </ol></li><li><a href="#section-TildePercent:Newline">Tilde Percent: Newline</a><ol> </ol></li><li><a href="#section-TildeAmpersand:Fresh-Line">Tilde Ampersand: Fresh-Line</a><ol> </ol></li><li><a href="#section-TildeVertical-Bar:Page">Tilde Vertical-Bar: Page</a><ol> </ol></li><li><a href="#section-TildeTilde:Tilde">Tilde Tilde: Tilde</a><ol> </ol></li></ol></li><li><a href="#section-FORMATRadixControl">FORMAT Radix Control</a><ol> <li><a href="#section-TildeR:Radix">Tilde R: Radix</a><ol> </ol></li><li><a href="#section-TildeD:Decimal">Tilde D: Decimal</a><ol> </ol></li><li><a href="#section-TildeB:Binary">Tilde B: Binary</a><ol> </ol></li><li><a href="#section-TildeO:Octal">Tilde O: Octal</a><ol> </ol></li><li><a href="#section-TildeX:Hexadecimal">Tilde X: Hexadecimal</a><ol> </ol></li></ol></li><li><a href="#section-FORMATFloating-PointPrinters">FORMAT Floating-Point Printers</a><ol> <li><a href="#section-TildeF:Fixed-FormatFloating-Point">Tilde F: Fixed-Format Floating-Point</a><ol> </ol></li><li><a href="#section-TildeE:ExponentialFloating-Point">Tilde E: Exponential Floating-Point</a><ol> </ol></li><li><a href="#section-TildeG:GeneralFloating-Point">Tilde G: General Floating-Point</a><ol> </ol></li><li><a href="#section-TildeDollarsign:MonetaryFloating-Point">Tilde Dollarsign: Monetary Floating-Point</a><ol> </ol></li></ol></li><li><a href="#section-FORMATPrinterOps">FORMAT Printer Operations</a><ol> <li><a href="#section-TildeA:Aesthetic">Tilde A: Aesthetic</a><ol> </ol></li><li><a href="#section-TildeS:Standard">Tilde S: Standard</a><ol> </ol></li><li><a href="#section-TildeW:Write">Tilde W: Write</a><ol> </ol></li></ol></li><li><a href="#section-FORMATPrettyPrinterOperations">FORMAT Pretty Printer Operations</a><ol> <li><a href="#section-TildeUnderscore">Tilde Underscore: Conditional Newline</a><ol> </ol></li><li><a href="#section-TildeLessThanLogicalBlock">Tilde Less-Than-Sign: Logical Block</a><ol> </ol></li><li><a href="#section-TildeI">Tilde I: Indent</a><ol> </ol></li><li><a href="#section-TildeSlash:CallFunction">Tilde Slash: Call Function</a><ol> </ol></li></ol></li><li><a href="#section-FORMATLayoutControl">FORMAT Layout Control</a><ol> <li><a href="#section-TildeT:Tabulate">Tilde T: Tabulate</a><ol> </ol></li><li><a href="#section-TildeLessThanJustification">Tilde Less-Than-Sign: Justification</a><ol> </ol></li><li><a href="#section-TildeGreater-Than-Sign:EndofJustification">Tilde Greater-Than-Sign: End of Justification</a><ol> </ol></li></ol></li><li><a href="#section-FORMATControl-FlowOperations">FORMAT Control-Flow Operations</a><ol> <li><a href="#section-TildeAsterisk:Go-To">Tilde Asterisk: Go-To</a><ol> </ol></li><li><a href="#section-TildeLeft-Bracket:ConditionalExpression">Tilde Left-Bracket: Conditional Expression</a><ol> </ol></li><li><a href="#section-TildeRight-Bracket:EndofConditionalExpression">Tilde Right-Bracket: End of Conditional Expression</a><ol> </ol></li><li><a href="#section-TildeLeft-Brace:Iteration">Tilde Left-Brace: Iteration</a><ol> </ol></li><li><a href="#section-TildeRight-Brace:EndofIteration">Tilde Right-Brace: End of Iteration</a><ol> </ol></li><li><a href="#section-TildeQuestion-Mark:RecursiveProcessing">Tilde Question-Mark: Recursive Processing</a><ol> </ol></li></ol></li><li><a href="#section-FORMATMiscellaneousOperations">FORMAT Miscellaneous Operations</a><ol> <li><a href="#section-TildeLeft-Paren:CaseConversion">Tilde Left-Paren: Case Conversion</a><ol> </ol></li><li><a href="#section-TildeRight-Paren:EndofCaseConversion">Tilde Right-Paren: End of Case Conversion</a><ol> </ol></li><li><a href="#section-TildeP:Plural">Tilde P: Plural</a><ol> </ol></li></ol></li><li><a href="#section-FORMATMiscellaneousPseudo-Operations">FORMAT Miscellaneous Pseudo-Operations</a><ol> <li><a href="#section-TildeSemicolon:ClauseSeparator">Tilde Semicolon: Clause Separator</a><ol> </ol></li><li><a href="#section-TildeCircumflex:EscapeUpward">Tilde Circumflex: Escape Upward</a><ol> </ol></li><li><a href="#section-TildeNewline:IgnoredNewline">Tilde Newline: Ignored Newline</a><ol> </ol></li></ol></li><li><a href="#section-AdditionalInformationaboutFORMATOperations">Additional Information about FORMAT Operations</a><ol> <li><a href="#section-NestingofFORMATOperations">Nesting of FORMAT Operations</a><ol> </ol></li><li><a href="#section-MissingandAdditionalFORMATArguments">Missing and Additional FORMAT Arguments</a><ol> </ol></li><li><a href="#section-AdditionalFORMATParameters">Additional FORMAT Parameters</a><ol> </ol></li><li><a href="#section-UndefinedFORMATModifierCombinations">Undefined FORMAT Modifier Combinations</a><ol> </ol></li></ol></li><li><a href="#section-ExamplesofFORMAT">Examples of FORMAT</a><ol> </ol></li><li><a href="#section-NotesaboutFORMAT">Notes about FORMAT</a><ol> </ol></li></ol></li><li><a href="#section-Dictionary">Dictionary</a><ol> <li><a href="#function-copy-pprint-dispatch">copy-pprint-dispatch</a></li><li><a href="#macro-formatter">formatter</a></li><li><a href="#function-pprint-dispatch">pprint-dispatch</a></li><li><a href="#macro-pprint-exit-if-list-exhausted">pprint-exit-if-list-exhausted</a></li><li><a href="#function-pprint-fill">pprint-fill, pprint-linear, pprint-tabular</a></li><li><a href="#function-pprint-indent">pprint-indent</a></li><li><a href="#macro-pprint-logical-block">pprint-logical-block</a></li><li><a href="#function-pprint-newline">pprint-newline</a></li><li><a href="#macro-pprint-pop">pprint-pop</a></li><li><a href="#function-pprint-tab">pprint-tab</a></li><li><a href="#function-print-object">print-object</a></li><li><a href="#macro-print-unreadable-object">print-unreadable-object</a></li><li><a href="#function-set-pprint-dispatch">set-pprint-dispatch</a></li><li><a href="#function-write">write, prin1, print, pprint, princ</a></li><li><a href="#function-write-to-string">write-to-string, prin1-to-string, princ-to-string</a></li><li><a href="#variable-*print-array*">*print-array*</a></li><li><a href="#variable-*print-base*">*print-base*, *print-radix*</a></li><li><a href="#variable-*print-case*">*print-case*</a></li><li><a href="#variable-*print-circle*">*print-circle*</a></li><li><a href="#variable-*print-escape*">*print-escape*</a></li><li><a href="#variable-*print-gensym*">*print-gensym*</a></li><li><a href="#variable-*print-level*">*print-level*, *print-length*</a></li><li><a href="#variable-*print-lines*">*print-lines*</a></li><li><a href="#variable-*print-miser-width*">*print-miser-width*</a></li><li><a href="#variable-*print-pprint-dispatch*">*print-pprint-dispatch*</a></li><li><a href="#variable-*print-pretty*">*print-pretty*</a></li><li><a href="#variable-*print-readably*">*print-readably*</a></li><li><a href="#variable-*print-right-margin*">*print-right-margin*</a></li><li><a href="#type-print-not-readable">print-not-readable</a></li><li><a href="#function-print-not-readable-object">print-not-readable-object</a></li><li><a href="#function-format">format</a></li></ol></li></ol></nav><div class="content"><section id="section-ChapTwentyTwo"><h1 class="section-title">22. Printer</h1><section id="section-TheLispPrinter"><h2 class="section-title">The Lisp Printer</h2>

<section id="section-OverviewofTheLispPrinter"><h3 class="section-title">Overview of The Lisp Printer</h3><span class="explicit-roman">Common Lisp</span> provides a representation of most <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a> in the form 
of printed text called the printed representation.
Functions such as <a class="function-reference" href="#function-print">print</a> take an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> 
and send the characters of its printed representation to a <a class="glossary-reference" href="chapter-26.xhtml#glossary-stream">stream</a>. 
The collection of routines that does this is known as the (<span class="explicit-roman">Common Lisp</span>) printer.  <br/>Reading a printed representation 
typically
produces an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> that is <a class="function-reference" href="chapter-5.xhtml#function-equal">equal</a> to the
originally printed <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.<br/><section id="section-MultiplePossibleTextualRepresentations"><h4 class="section-title">Multiple Possible Textual Representations</h4>Most <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a> have more than one possible textual representation.
For example, the positive <a class="glossary-reference" href="chapter-26.xhtml#glossary-integer">integer</a> with a magnitude of twenty-seven
can be textually expressed in any of these ways:<br/><pre><code><span class="syntax-root"><span class="syntax-number">27</span>    <span class="syntax-number">27.</span>    <span class="syntax-number">#o33</span>    <span class="syntax-number">#x1B</span>    <span class="syntax-number">#b11011</span>    <span class="syntax-number">#.<span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-*">*</a> <span class="syntax-number">3</span> <span class="syntax-number">3</span> <span class="syntax-number">3</span>)</span></span>    <span class="syntax-number">81/3</span>
</span></code></pre><br/>A list containing the two symbols <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">A</span>
</span></code></pre> and <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">B</span>
</span></code></pre> can also be textually
expressed in a variety of ways:<br/><pre><code><span class="syntax-root"> <span class="syntax-cons">(<span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">B</span>)</span>    <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span>)</span>    <span class="syntax-cons">(  <span class="syntax-interned-symbol">a</span>  <span class="syntax-interned-symbol">b</span> )</span>    <span class="syntax-cons">(\A <span class="syntax-interned-symbol">|B|</span>)</span> 
<span class="syntax-cons">(<span class="syntax-interned-symbol">|\\A|</span>
  <span class="syntax-interned-symbol">B</span>
)</span>
</span></code></pre><br/>In general,
from the point of view of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lisp reader">Lisp reader</a>,
wherever <a class="glossary-reference" href="chapter-26.xhtml#glossary-whitespace">whitespace</a> is permissible in a textual representation,
any number of <span class="glossary-reference error">glossary:spaces</span> and <span class="glossary-reference error">glossary:newlines</span> can appear in <a class="glossary-reference" href="chapter-26.xhtml#glossary-standard syntax">standard syntax</a>.<br/>When a function such as <a class="function-reference" href="#function-print">print</a> produces a printed representation,
it must choose 
from among many possible textual representations.
In most cases, it chooses a 
program readable representation,
but in certain cases it might use a more compact notation that is not 
program-readable.<br/>A number of option variables, called
<span class="newterm">printer control variables</span>,
are provided to permit control of individual aspects of the 
printed representation of <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a>.
Figure <span class="explicit-mono">()</span>&ndash; shows the <a class="glossary-reference" href="chapter-26.xhtml#glossary-standardized">standardized</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-printer control variable">printer control variables</a>;
there might also be <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-defined">implementation-defined</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-printer control variable">printer control variables</a>.<br/>
<span class="float" id="figure-StdPrinterControlVars"><table><tbody><tr><td><a class="variable-reference" href="#variable-*print-array*">*print-array*</a></td><td><a class="variable-reference" href="#variable-*print-gensym*">*print-gensym*</a></td><td><a class="variable-reference" href="#variable-*print-pprint-dispatch*">*print-pprint-dispatch*</a></td></tr><tr><td><a class="variable-reference" href="#variable-*print-base*">*print-base*</a></td><td><a class="variable-reference" href="#variable-*print-length*">*print-length*</a></td><td><a class="variable-reference" href="#variable-*print-pretty*">*print-pretty*</a></td></tr><tr><td><a class="variable-reference" href="#variable-*print-case*">*print-case*</a></td><td><a class="variable-reference" href="#variable-*print-level*">*print-level*</a></td><td><a class="variable-reference" href="#variable-*print-radix*">*print-radix*</a></td></tr><tr><td><a class="variable-reference" href="#variable-*print-circle*">*print-circle*</a></td><td><a class="variable-reference" href="#variable-*print-lines*">*print-lines*</a></td><td><a class="variable-reference" href="#variable-*print-readably*">*print-readably*</a></td></tr><tr><td><a class="variable-reference" href="#variable-*print-escape*">*print-escape*</a></td><td><a class="variable-reference" href="#variable-*print-miser-width*">*print-miser-width*</a></td><td><a class="variable-reference" href="#variable-*print-right-margin*">*print-right-margin*</a></td></tr></tbody></table><div class="caption">Standardized Printer Control Variables</div></span><br/>In addition to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-printer control variable">printer control variables</a>, 
the following additional <a class="glossary-reference" href="chapter-26.xhtml#glossary-defined name">defined names</a> 
relate to or affect the behavior of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lisp printer">Lisp printer</a>:<br/><span class="float" id="figure-Additional Influences on the Lisp printer."><table><tbody><tr><td><a class="variable-reference" href="chapter-11.xhtml#variable-*package*">*package*</a></td><td><a class="symbol-reference" href="chapter-2.xhtml#symbol-*read-eval*">*read-eval*</a></td><td><a class="function-reference" href="chapter-23.xhtml#function-readtable-case">readtable-case</a></td></tr><tr><td><a class="variable-reference" href="chapter-23.xhtml#variable-*read-default-float-format*">*read-default-float-format*</a></td><td><a class="variable-reference" href="chapter-23.xhtml#variable-*readtable*">*readtable*</a></td><td/></tr></tbody></table><div class="caption">Additional Influences on the Lisp printer.</div></span><br/><section id="section-PrinterEscaping"><h5 class="section-title">Printer Escaping</h5>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variable</a> <a class="variable-reference" href="#variable-*print-escape*">*print-escape*</a> controls whether the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lisp printer">Lisp printer</a>
tries to produce notations such as escape characters and package prefixes.<br/>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variable</a> <a class="variable-reference" href="#variable-*print-readably*">*print-readably*</a> can be used to override
many of the individual aspects controlled by the other 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-printer control variable">printer control variables</a> when program-readable output
is especially important.<br/>One of the many effects of making the <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a> of <a class="variable-reference" href="#variable-*print-readably*">*print-readably*</a> be <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>
is that the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lisp printer">Lisp printer</a> behaves as if <a class="variable-reference" href="#variable-*print-escape*">*print-escape*</a> were also <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>.
For notational convenience, we say that 
if the value of either <a class="variable-reference" href="#variable-*print-readably*">*print-readably*</a> or <a class="variable-reference" href="#variable-*print-escape*">*print-escape*</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>, 
then <span class="newterm">printer escaping</span> is ``enabled'';
and we say that
if the values of both <a class="variable-reference" href="#variable-*print-readably*">*print-readably*</a> and <a class="variable-reference" href="#variable-*print-escape*">*print-escape*</a> are <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>, 
then <a class="glossary-reference" href="chapter-26.xhtml#glossary-printer escaping">printer escaping</a> is ``disabled''.

</section></section></section><section id="section-PrinterDispatch"><h3 class="section-title">Printer Dispatching</h3><br/>
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-lisp printer">Lisp printer</a> makes its determination of how to print an
<a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> as follows:<br/>If the <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a> of <a class="variable-reference" href="#variable-*print-pretty*">*print-pretty*</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>, 
printing is controlled by the <a class="glossary-reference" href="chapter-26.xhtml#glossary-current pprint dispatch table">current pprint dispatch table</a>;
see <span class="section-reference error">section:PPrintDispatchTables.</span><br/>Otherwise (if the <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a> of <a class="variable-reference" href="#variable-*print-pretty*">*print-pretty*</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>),
the object's <a class="function-reference" href="#function-print-object">print-object</a> method is used;
see <span class="section-reference error">section:DefaultPrintObjMeths.</span>
</section><section id="section-DefaultPrintObjMeths"><h3 class="section-title">Default Print-Object Methods</h3><br/>This section describes the default behavior of 
<a class="function-reference" href="#function-print-object">print-object</a> methods for the <a class="glossary-reference" href="chapter-26.xhtml#glossary-standardized">standardized</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">types</a>.<br/><section id="section-PrintingNumbers"><h4 class="section-title">Printing Numbers</h4><section id="section-PrintingIntegers"><h5 class="section-title">Printing Integers</h5>

<a class="glossary-reference" href="chapter-26.xhtml#glossary-integer">Integers</a> are printed in the radix specified by the <a class="glossary-reference" href="chapter-26.xhtml#glossary-current output base">current output base</a>
in positional notation, most significant digit first.
If appropriate, a radix specifier can be printed; see <a class="variable-reference" href="#variable-*print-radix*">*print-radix*</a>.
If an <a class="glossary-reference" href="chapter-26.xhtml#glossary-integer">integer</a> is negative, a minus sign is printed and then the
absolute value of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-integer">integer</a> is printed.
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-integer">integer</a> zero is represented
by the single digit <pre><code><span class="syntax-root"><span class="syntax-number">0</span>
</span></code></pre> and never has a sign.
A decimal point might be printed, 
depending on the <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a> of <a class="variable-reference" href="#variable-*print-radix*">*print-radix*</a>.<br/>For related information about the syntax of an <a class="glossary-reference" href="chapter-26.xhtml#glossary-integer">integer</a>,
see <span class="section-reference error">section:SyntaxOfIntegers.</span><br/></section><section id="section-PrintingRatios"><h5 class="section-title">Printing Ratios</h5><a id="symbol-ratio"></a>

<a class="glossary-reference" href="chapter-26.xhtml#glossary-ratio">Ratios</a> are printed as follows:
the absolute value of the numerator is printed, as for an <a class="glossary-reference" href="chapter-26.xhtml#glossary-integer">integer</a>;
then a <pre><code><span class="syntax-root"><a class="function-reference" href="chapter-12.xhtml#function-/">/</a>
</span></code></pre>; then the denominator.  The numerator and denominator are
both printed in the radix specified by the <a class="glossary-reference" href="chapter-26.xhtml#glossary-current output base">current output base</a>; 
they are obtained as if by
<a class="function-reference" href="chapter-12.xhtml#function-numerator">numerator</a> and <a class="function-reference" href="chapter-12.xhtml#function-denominator">denominator</a>, and so <a class="glossary-reference" href="chapter-26.xhtml#glossary-ratio">ratios</a>
are printed in reduced form (lowest terms).
If appropriate, a radix specifier can be printed; see 
<a class="variable-reference" href="#variable-*print-radix*">*print-radix*</a>.
If the ratio is negative, a minus sign is printed before the numerator.<br/>For related information about the syntax of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-ratio">ratio</a>,
see <span class="section-reference error">section:SyntaxOfRatios.</span><br/></section><section id="section-PrintingFloats"><h5 class="section-title">Printing Floats</h5><a id="symbol-float"></a>

If the magnitude of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-float">float</a> is either zero or between <math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mrow>10</mrow><mo>-3</mo></msup></math> (inclusive)
and <math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mrow>10</mrow><mo>7</mo></msup></math> (exclusive), it is printed as the integer part of the number,
then a decimal point,
followed by the fractional part of the number;
there is always at least one
digit on each side of the decimal point.    
If the sign of the number
(as determined by <a class="function-reference" href="chapter-12.xhtml#function-float-sign">float-sign</a>)
is negative, then a minus sign is printed before the number.
If the format of the number
does not match that specified by
<a class="variable-reference" href="chapter-23.xhtml#variable-*read-default-float-format*">*read-default-float-format*</a>, then the <a class="glossary-reference" href="chapter-26.xhtml#glossary-exponent marker">exponent marker</a> for
that format and the digit <pre><code><span class="syntax-root"><span class="syntax-number">0</span>
</span></code></pre> are also printed.
For example, the base of the natural logarithms as a <a class="glossary-reference" href="chapter-26.xhtml#glossary-short float">short float</a>
might be printed as <pre><code><span class="syntax-root"><span class="syntax-number">2.71828S0</span>
</span></code></pre>.<br/>For non-zero magnitudes outside of the range <math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mrow>10</mrow><mo>-3</mo></msup></math> to <math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mrow>10</mrow><mo>7</mo></msup></math>,
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-float">float</a> is printed in computerized scientific notation.
The representation of the number is scaled to be between
1 (inclusive) and 10 (exclusive) and then printed, with one digit
before the decimal point and at least one digit after the decimal point.
Next the <a class="glossary-reference" href="chapter-26.xhtml#glossary-exponent marker">exponent marker</a> for the format is printed,
except that
if the format of the number matches that specified by 
<a class="variable-reference" href="chapter-23.xhtml#variable-*read-default-float-format*">*read-default-float-format*</a>, then the <a class="glossary-reference" href="chapter-26.xhtml#glossary-exponent marker">exponent marker</a> <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">E</span>
</span></code></pre>
is used.
Finally, the power of ten by which the fraction must be multiplied
to equal the original number is printed as a decimal integer.
For example, Avogadro's number as a <a class="glossary-reference" href="chapter-26.xhtml#glossary-short float">short float</a> 
is printed as <pre><code><span class="syntax-root"><span class="syntax-number">6.02S23</span>
</span></code></pre>.<br/>For related information about the syntax of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-float">float</a>,
see <span class="section-reference error">section:SyntaxOfFloats.</span><br/></section><section id="section-PrintingComplexes"><h5 class="section-title">Printing Complexes</h5><a id="symbol-complex"></a>

A <a class="glossary-reference" href="chapter-26.xhtml#glossary-complex">complex</a> is printed as <pre><code><span class="syntax-root">#C
</span></code></pre>, an open parenthesis,
the printed representation of its real part, a space,
the printed representation of its imaginary part, and finally
a close parenthesis.<br/>For related information about the syntax of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-complex">complex</a>,
see <a class="section-reference" href="chapter-2.xhtml#section-SyntaxOfComplexes">Syntax of a Complex</a> and <a class="section-reference" href="chapter-2.xhtml#section-SharpsignC">Sharpsign C</a>.<br/></section><section id="section-NoteaboutPrintingNumbers"><h5 class="section-title">Note about Printing Numbers</h5>The printed representation of a number must not contain <a class="glossary-reference" href="chapter-26.xhtml#glossary-escape">escape</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-character">characters</a>;
see <span class="section-reference error">section:EscCharsAndPotentialNums.</span><br/></section></section><section id="section-PrintingCharacters"><h4 class="section-title">Printing Characters</h4>

When <a class="glossary-reference" href="chapter-26.xhtml#glossary-printer escaping">printer escaping</a> is disabled,
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-character">character</a> prints as itself;
it is sent directly to the output <a class="glossary-reference" href="chapter-26.xhtml#glossary-stream">stream</a>.
When <a class="glossary-reference" href="chapter-26.xhtml#glossary-printer escaping">printer escaping</a> is enabled,
then <pre><code><span class="syntax-root">#\
</span></code></pre> syntax is used.<br/>When the printer types out the name of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-character">character</a>,
it uses the same table as the <pre><code><span class="syntax-root">#\
</span></code></pre> <a class="glossary-reference" href="chapter-26.xhtml#glossary-reader macro">reader macro</a> would use;
therefore any <a class="glossary-reference" href="chapter-26.xhtml#glossary-character">character</a> name that is typed out
is acceptable as input (in that <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation">implementation</a>).
If a <a class="glossary-reference" href="chapter-26.xhtml#glossary-non-graphic">non-graphic</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-character">character</a> has a <a class="glossary-reference" href="chapter-26.xhtml#glossary-standardized">standardized</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a><sub>5</sub>,
that <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> is preferred over non-standard <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">names</a>
for printing in <pre><code><span class="syntax-root">#\
</span></code></pre> notation.
For the <a class="glossary-reference" href="chapter-26.xhtml#glossary-graphic">graphic</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-standard character">standard characters</a>,
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-character">character</a> itself is always used
for printing in <pre><code><span class="syntax-root">#\
</span></code></pre> notation&mdash;even if 
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-character">character</a> also has a <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a><sub>5</sub>.<br/>For details about the <pre><code><span class="syntax-root">#\
</span></code></pre> <a class="glossary-reference" href="chapter-26.xhtml#glossary-reader macro">reader macro</a>, see <span class="section-reference error">section:SharpsignBackslash.</span><br/></section><section id="section-PrintingSymbols"><h4 class="section-title">Printing Symbols</h4>

When <a class="glossary-reference" href="chapter-26.xhtml#glossary-printer escaping">printer escaping</a> is disabled,
only the characters of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>'s <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> are output 
(but the case in which to print characters in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> is
controlled by <a class="variable-reference" href="#variable-*print-case*">*print-case*</a>;
see <a class="section-reference" href="#section-ReadtableCasePrintEffect">Effect of Readtable Case on the Lisp Printer</a>).

The remainder of this section applies only 
when <a class="glossary-reference" href="chapter-26.xhtml#glossary-printer escaping">printer escaping</a> is enabled.

When printing a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>, the printer inserts enough 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-single escape">single escape</a> and/or <a class="glossary-reference" href="chapter-26.xhtml#glossary-multiple escape">multiple escape</a>
characters (<a class="glossary-reference" href="chapter-26.xhtml#glossary-backslash">backslashes</a> and/or <a class="glossary-reference" href="chapter-26.xhtml#glossary-vertical-bar">vertical-bars</a>) so that if
<a class="function-reference" href="chapter-23.xhtml#function-read">read</a> were called with the same <a class="variable-reference" href="chapter-23.xhtml#variable-*readtable*">*readtable*</a> and
with <a class="variable-reference" href="chapter-23.xhtml#variable-*read-base*">*read-base*</a> bound to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-current output base">current output base</a>, it
would return the same <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> (if it is not 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-apparently uninterned">apparently uninterned</a>) or an <a class="glossary-reference" href="chapter-26.xhtml#glossary-uninterned">uninterned</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>
with the same <a class="glossary-reference" href="chapter-26.xhtml#glossary-print name">print name</a> (otherwise).<br/>For example, if the <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a> of <a class="variable-reference" href="#variable-*print-base*">*print-base*</a> were <pre><code><span class="syntax-root"><span class="syntax-number">16</span>
</span></code></pre> 
when printing the symbol <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">face</span>
</span></code></pre>, it would have to be printed as
<pre><code><span class="syntax-root">\FACE
</span></code></pre> or <pre><code><span class="syntax-root">\Face
</span></code></pre> or <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">|FACE|</span>
</span></code></pre>, 
because the token <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">face</span>
</span></code></pre> would be read as a hexadecimal
number (decimal value 64206) if the <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a> of <a class="variable-reference" href="chapter-23.xhtml#variable-*read-base*">*read-base*</a> were <pre><code><span class="syntax-root"><span class="syntax-number">16</span>
</span></code></pre>.<br/>For additional restrictions concerning characters with  nonstandard
<a class="glossary-reference" href="chapter-26.xhtml#glossary-syntax type">syntax types</a> in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-current readtable">current readtable</a>, see the <a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variable</a> <a class="variable-reference" href="#variable-*print-readably*">*print-readably*</a> 

For information about how the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lisp reader">Lisp reader</a> parses <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbols</a>,
see <a class="section-reference" href="chapter-2.xhtml#section-SymbolTokens">Symbols as Tokens</a> and <a class="section-reference" href="chapter-2.xhtml#section-SharpsignColon">Sharpsign Colon</a>.<br/><a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a> might be printed as <pre><code><span class="syntax-root"><span class="syntax-symbol">()</span>
</span></code></pre> 
when <a class="variable-reference" href="#variable-*print-pretty*">*print-pretty*</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>
and <a class="glossary-reference" href="chapter-26.xhtml#glossary-printer escaping">printer escaping</a> is enabled.

<section id="section-PackagePrefixesforSymbols"><h5 class="section-title">Package Prefixes for Symbols</h5><a class="glossary-reference" href="chapter-26.xhtml#glossary-package prefix">Package prefixes</a> are printed if necessary.
The rules for <a class="glossary-reference" href="chapter-26.xhtml#glossary-package prefix">package prefixes</a> are as follows.
When the <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> is printed, if it is in the <a class="package-reference" href="chapter-11.xhtml#package-keyword">keyword</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-package">package</a>, 
then it is printed with a preceding <a class="glossary-reference" href="chapter-26.xhtml#glossary-colon">colon</a>; otherwise, if
it is <a class="glossary-reference" href="chapter-26.xhtml#glossary-accessible">accessible</a> in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-current package">current package</a>, it is printed without any
<a class="glossary-reference" href="chapter-26.xhtml#glossary-package prefix">package prefix</a>; otherwise, it is printed with a <a class="glossary-reference" href="chapter-26.xhtml#glossary-package prefix">package prefix</a>.<br/>A <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> that is <a class="glossary-reference" href="chapter-26.xhtml#glossary-apparently uninterned">apparently uninterned</a> is printed
preceded by ``<pre><code><span class="syntax-root">#:
</span></code></pre>'' 
if <a class="variable-reference" href="#variable-*print-gensym*">*print-gensym*</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a> and <a class="glossary-reference" href="chapter-26.xhtml#glossary-printer escaping">printer escaping</a> is enabled;
if <a class="variable-reference" href="#variable-*print-gensym*">*print-gensym*</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a> or <a class="glossary-reference" href="chapter-26.xhtml#glossary-printer escaping">printer escaping</a> is disabled,
then the <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> is printed without a prefix,
as if it were in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-current package">current package</a>.<br/>Because the <pre><code><span class="syntax-root">#:
</span></code></pre> syntax does not intern the
following symbol, it is necessary to use circular-list syntax
if <a class="variable-reference" href="#variable-*print-circle*">*print-circle*</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a> and
the same uninterned symbol appears several times in an expression
to be printed.  For example, the result of<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-10.xhtml#function-make-symbol">make-symbol</a> <span class="syntax-string">"FOO"</span>)</span>)</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">x</span>)</span>)</span>
</span></code></pre>
would be printed as <pre><code><span class="syntax-root"><span class="syntax-cons">(#:foo #:foo)</span>
</span></code></pre> if <a class="variable-reference" href="#variable-*print-circle*">*print-circle*</a>
were <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>, but as <pre><code><span class="syntax-root"><span class="syntax-cons">(#1=#:foo #1#)</span>
</span></code></pre> if <a class="variable-reference" href="#variable-*print-circle*">*print-circle*</a>
were <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>.<br/>A summary of the preceding package prefix rules follows:<br/><dl><dt><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">foo:bar</span>
</span></code></pre></dt><dd><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">foo:bar</span>
</span></code></pre> is printed when <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">bar</span>
</span></code></pre> 
is external in its <a class="glossary-reference" href="chapter-26.xhtml#glossary-home package">home package</a> <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">foo</span>
</span></code></pre> 
and is not <a class="glossary-reference" href="chapter-26.xhtml#glossary-accessible">accessible</a> in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-current package">current package</a>.<br/></dd><dt><pre><code><span class="syntax-root"><span class="syntax-two-package-markers syntax-interned-symbol">foo::bar</span>
</span></code></pre></dt><dd><pre><code><span class="syntax-root"><span class="syntax-two-package-markers syntax-interned-symbol">foo::bar</span>
</span></code></pre> is printed when <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">bar</span>
</span></code></pre> is internal in its <a class="glossary-reference" href="chapter-26.xhtml#glossary-home package">home package</a>
<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">foo</span>
</span></code></pre> and is not <a class="glossary-reference" href="chapter-26.xhtml#glossary-accessible">accessible</a> in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-current package">current package</a>.<br/></dd><dt><pre><code><span class="syntax-root"><span class="syntax-keyword-symbol">:bar</span>
</span></code></pre></dt><dd><pre><code><span class="syntax-root"><span class="syntax-keyword-symbol">:bar</span>
</span></code></pre> is printed when the home package of <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">bar</span>
</span></code></pre> is the <a class="package-reference" href="chapter-11.xhtml#package-keyword">keyword</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-package">package</a>.<br/></dd><dt>	
 #:bar</dt><dd><pre><code><span class="syntax-root">#:bar
</span></code></pre> is printed when <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">bar</span>
</span></code></pre> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-apparently uninterned">apparently uninterned</a>,
even in the pathological case that <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">bar</span>
</span></code></pre> 
has no <a class="glossary-reference" href="chapter-26.xhtml#glossary-home package">home package</a> but is nevertheless somehow <a class="glossary-reference" href="chapter-26.xhtml#glossary-accessible">accessible</a> 
in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-current package">current package</a>.
</dd></dl><br/>
</section><section id="section-ReadtableCasePrintEffect"><h5 class="section-title">Effect of Readtable Case on the Lisp Printer</h5><br/>When 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-printer escaping">printer escaping</a> is disabled,
or the characters under consideration are not already 
quoted specifically by <a class="glossary-reference" href="chapter-26.xhtml#glossary-single escape">single escape</a> or <a class="glossary-reference" href="chapter-26.xhtml#glossary-multiple escape">multiple escape</a>
syntax,
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-readtable case">readtable case</a> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-current readtable">current readtable</a> 
affects the way the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lisp printer">Lisp printer</a> writes <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbols</a>
in the following ways:<br/><dl><dt><span class="keyword">:upcase</span></dt><dd>When the <a class="glossary-reference" href="chapter-26.xhtml#glossary-readtable case">readtable case</a> is <span class="keyword">:upcase</span>,
 <a class="glossary-reference" href="chapter-26.xhtml#glossary-uppercase">uppercase</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-character">characters</a>
 are printed in the case specified by <a class="variable-reference" href="#variable-*print-case*">*print-case*</a>, and
 <a class="glossary-reference" href="chapter-26.xhtml#glossary-lowercase">lowercase</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-character">characters</a> are printed in their own case.<br/></dd><dt><span class="keyword">:downcase</span></dt><dd>When the <a class="glossary-reference" href="chapter-26.xhtml#glossary-readtable case">readtable case</a> is <span class="keyword">:downcase</span>,
 <a class="glossary-reference" href="chapter-26.xhtml#glossary-uppercase">uppercase</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-character">characters</a> are printed in their own case, and
 <a class="glossary-reference" href="chapter-26.xhtml#glossary-lowercase">lowercase</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-character">characters</a>
 are printed in the case specified by <a class="variable-reference" href="#variable-*print-case*">*print-case*</a>.<br/></dd><dt><span class="keyword">:preserve</span></dt><dd>When the <a class="glossary-reference" href="chapter-26.xhtml#glossary-readtable case">readtable case</a> is <span class="keyword">:preserve</span>,
 all <a class="glossary-reference" href="chapter-26.xhtml#glossary-alphabetic">alphabetic</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-character">characters</a> are printed in their own case.<br/></dd><dt><span class="keyword">:invert</span></dt><dd>When the <a class="glossary-reference" href="chapter-26.xhtml#glossary-readtable case">readtable case</a> is <span class="keyword">:invert</span>,
 the case of all <a class="glossary-reference" href="chapter-26.xhtml#glossary-alphabetic">alphabetic</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-character">characters</a> 
 in single case symbol names is inverted.
 Mixed-case symbol names are printed as is.
</dd></dl> <br/>The rules for escaping <a class="glossary-reference" href="chapter-26.xhtml#glossary-alphabetic">alphabetic</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-character">characters</a> in symbol names are affected by
the <a class="function-reference" href="chapter-23.xhtml#function-readtable-case">readtable-case</a> 
if <a class="glossary-reference" href="chapter-26.xhtml#glossary-printer escaping">printer escaping</a> is enabled.
<a class="glossary-reference" href="chapter-26.xhtml#glossary-alphabetic">Alphabetic</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-character">characters</a> are escaped as follows:                
<dl><dt><span class="keyword">:upcase</span></dt><dd>When the <a class="glossary-reference" href="chapter-26.xhtml#glossary-readtable case">readtable case</a> is <span class="keyword">:upcase</span>,
all <a class="glossary-reference" href="chapter-26.xhtml#glossary-lowercase">lowercase</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-character">characters</a> must be escaped.<br/></dd><dt><span class="keyword">:downcase</span></dt><dd>When the <a class="glossary-reference" href="chapter-26.xhtml#glossary-readtable case">readtable case</a> is <span class="keyword">:downcase</span>,
all <a class="glossary-reference" href="chapter-26.xhtml#glossary-uppercase">uppercase</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-character">characters</a> must be escaped.<br/></dd><dt><span class="keyword">:preserve</span></dt><dd>When the <a class="glossary-reference" href="chapter-26.xhtml#glossary-readtable case">readtable case</a> is <span class="keyword">:preserve</span>, 
no <a class="glossary-reference" href="chapter-26.xhtml#glossary-alphabetic">alphabetic</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-character">characters</a> need be escaped.<br/></dd><dt><span class="keyword">:invert</span></dt><dd>When the <a class="glossary-reference" href="chapter-26.xhtml#glossary-readtable case">readtable case</a> is <span class="keyword">:invert</span>,
no <a class="glossary-reference" href="chapter-26.xhtml#glossary-alphabetic">alphabetic</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-character">characters</a> need be escaped.<br/></dd></dl>    <br/><section id="section-ReadtableCasePrintExamples"><h6 class="section-title">Examples of Effect of Readtable Case on the Lisp Printer</h6><br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">test-readtable-case-printing</span> <span class="syntax-symbol">()</span>
  <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<a class="variable-reference" href="chapter-23.xhtml#variable-*readtable*">*readtable*</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-23.xhtml#function-copy-readtable">copy-readtable</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span>)</span>
        <span class="syntax-cons">(<a class="variable-reference" href="#variable-*print-case*">*print-case*</a> <a class="variable-reference" href="#variable-*print-case*">*print-case*</a>)</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a> <span class="syntax-string">"READTABLE-CASE *PRINT-CASE*  Symbol-name  Output~
             ~%&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;~
             ~%"</span>)</span>
    <span class="syntax-cons">(<a class="macro-reference" href="chapter-6.xhtml#macro-dolist">dolist</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-23.xhtml#function-readtable-case">readtable-case</a> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-keyword-symbol">:upcase</span> <span class="syntax-keyword-symbol">:downcase</span> <span class="syntax-keyword-symbol">:preserve</span> <span class="syntax-keyword-symbol">:invert</span>)</span></span>)</span>
      <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-23.xhtml#function-readtable-case">readtable-case</a> <a class="variable-reference" href="chapter-23.xhtml#variable-*readtable*">*readtable*</a>)</span> <a class="function-reference" href="chapter-23.xhtml#function-readtable-case">readtable-case</a>)</span>
      <span class="syntax-cons">(<a class="macro-reference" href="chapter-6.xhtml#macro-dolist">dolist</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">print-case</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-keyword-symbol">:upcase</span> <span class="syntax-keyword-symbol">:downcase</span> <span class="syntax-keyword-symbol">:capitalize</span>)</span></span>)</span>
        <span class="syntax-cons">(<a class="macro-reference" href="chapter-6.xhtml#macro-dolist">dolist</a> <span class="syntax-cons">(<a class="symbol-reference" href="chapter-2.xhtml#symbol-symbol">symbol</a> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">|ZEBRA|</span> <span class="syntax-interned-symbol">|Zebra|</span> <span class="syntax-interned-symbol">|zebra|</span>)</span></span>)</span>
          <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <a class="variable-reference" href="#variable-*print-case*">*print-case*</a> <span class="syntax-interned-symbol">print-case</span>)</span>
          <span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a> <span class="syntax-string">"~&amp;:~A~15T:~A~29T~A~42T~A"</span>
                  <span class="syntax-cons">(<a class="function-reference" href="chapter-16.xhtml#function-string-upcase">string-upcase</a> <a class="function-reference" href="chapter-23.xhtml#function-readtable-case">readtable-case</a>)</span>
                  <span class="syntax-cons">(<a class="function-reference" href="chapter-16.xhtml#function-string-upcase">string-upcase</a> <span class="syntax-interned-symbol">print-case</span>)</span>
                  <span class="syntax-cons">(<a class="function-reference" href="chapter-10.xhtml#function-symbol-name">symbol-name</a> <a class="symbol-reference" href="chapter-2.xhtml#symbol-symbol">symbol</a>)</span>
                  <span class="syntax-cons">(<a class="function-reference" href="#function-prin1-to-string">prin1-to-string</a> <a class="symbol-reference" href="chapter-2.xhtml#symbol-symbol">symbol</a>)</span>)</span>)</span>)</span>)</span>)</span>)</span>
</span></code></pre>
  The output from <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">test-readtable-case-printing</span>)</span>
</span></code></pre> should be as follows:<br/><pre><code><span class="syntax-root"><a class="function-reference" href="chapter-23.xhtml#function-readtable-case">readtable-case</a> <a class="variable-reference" href="#variable-*print-case*">*print-case*</a>  <a class="function-reference" href="chapter-10.xhtml#function-symbol-name">symbol-name</a>  <span class="syntax-interned-symbol">Output</span>
<span class="syntax-interned-symbol">--------------------------------------------------</span>
<span class="syntax-keyword-symbol">:UPCASE</span>        <span class="syntax-keyword-symbol">:UPCASE</span>       <span class="syntax-interned-symbol">ZEBRA</span>        <span class="syntax-interned-symbol">ZEBRA</span>
<span class="syntax-keyword-symbol">:UPCASE</span>        <span class="syntax-keyword-symbol">:UPCASE</span>       <span class="syntax-interned-symbol">Zebra</span>        <span class="syntax-interned-symbol">|Zebra|</span>
<span class="syntax-keyword-symbol">:UPCASE</span>        <span class="syntax-keyword-symbol">:UPCASE</span>       <span class="syntax-interned-symbol">zebra</span>        <span class="syntax-interned-symbol">|zebra|</span>
<span class="syntax-keyword-symbol">:UPCASE</span>        <span class="syntax-keyword-symbol">:DOWNCASE</span>     <span class="syntax-interned-symbol">ZEBRA</span>        <span class="syntax-interned-symbol">zebra</span>
<span class="syntax-keyword-symbol">:UPCASE</span>        <span class="syntax-keyword-symbol">:DOWNCASE</span>     <span class="syntax-interned-symbol">Zebra</span>        <span class="syntax-interned-symbol">|Zebra|</span>
<span class="syntax-keyword-symbol">:UPCASE</span>        <span class="syntax-keyword-symbol">:DOWNCASE</span>     <span class="syntax-interned-symbol">zebra</span>        <span class="syntax-interned-symbol">|zebra|</span>
<span class="syntax-keyword-symbol">:UPCASE</span>        <span class="syntax-keyword-symbol">:CAPITALIZE</span>   <span class="syntax-interned-symbol">ZEBRA</span>        <span class="syntax-interned-symbol">Zebra</span>
<span class="syntax-keyword-symbol">:UPCASE</span>        <span class="syntax-keyword-symbol">:CAPITALIZE</span>   <span class="syntax-interned-symbol">Zebra</span>        <span class="syntax-interned-symbol">|Zebra|</span>
<span class="syntax-keyword-symbol">:UPCASE</span>        <span class="syntax-keyword-symbol">:CAPITALIZE</span>   <span class="syntax-interned-symbol">zebra</span>        <span class="syntax-interned-symbol">|zebra|</span>
<span class="syntax-keyword-symbol">:DOWNCASE</span>      <span class="syntax-keyword-symbol">:UPCASE</span>       <span class="syntax-interned-symbol">ZEBRA</span>        <span class="syntax-interned-symbol">|ZEBRA|</span>
<span class="syntax-keyword-symbol">:DOWNCASE</span>      <span class="syntax-keyword-symbol">:UPCASE</span>       <span class="syntax-interned-symbol">Zebra</span>        <span class="syntax-interned-symbol">|Zebra|</span>
<span class="syntax-keyword-symbol">:DOWNCASE</span>      <span class="syntax-keyword-symbol">:UPCASE</span>       <span class="syntax-interned-symbol">zebra</span>        <span class="syntax-interned-symbol">ZEBRA</span>
<span class="syntax-keyword-symbol">:DOWNCASE</span>      <span class="syntax-keyword-symbol">:DOWNCASE</span>     <span class="syntax-interned-symbol">ZEBRA</span>        <span class="syntax-interned-symbol">|ZEBRA|</span>
<span class="syntax-keyword-symbol">:DOWNCASE</span>      <span class="syntax-keyword-symbol">:DOWNCASE</span>     <span class="syntax-interned-symbol">Zebra</span>        <span class="syntax-interned-symbol">|Zebra|</span>
<span class="syntax-keyword-symbol">:DOWNCASE</span>      <span class="syntax-keyword-symbol">:DOWNCASE</span>     <span class="syntax-interned-symbol">zebra</span>        <span class="syntax-interned-symbol">zebra</span>
<span class="syntax-keyword-symbol">:DOWNCASE</span>      <span class="syntax-keyword-symbol">:CAPITALIZE</span>   <span class="syntax-interned-symbol">ZEBRA</span>        <span class="syntax-interned-symbol">|ZEBRA|</span>
<span class="syntax-keyword-symbol">:DOWNCASE</span>      <span class="syntax-keyword-symbol">:CAPITALIZE</span>   <span class="syntax-interned-symbol">Zebra</span>        <span class="syntax-interned-symbol">|Zebra|</span>
<span class="syntax-keyword-symbol">:DOWNCASE</span>      <span class="syntax-keyword-symbol">:CAPITALIZE</span>   <span class="syntax-interned-symbol">zebra</span>        <span class="syntax-interned-symbol">Zebra</span>
<span class="syntax-keyword-symbol">:PRESERVE</span>      <span class="syntax-keyword-symbol">:UPCASE</span>       <span class="syntax-interned-symbol">ZEBRA</span>        <span class="syntax-interned-symbol">ZEBRA</span>
<span class="syntax-keyword-symbol">:PRESERVE</span>      <span class="syntax-keyword-symbol">:UPCASE</span>       <span class="syntax-interned-symbol">Zebra</span>        <span class="syntax-interned-symbol">Zebra</span>
<span class="syntax-keyword-symbol">:PRESERVE</span>      <span class="syntax-keyword-symbol">:UPCASE</span>       <span class="syntax-interned-symbol">zebra</span>        <span class="syntax-interned-symbol">zebra</span>
<span class="syntax-keyword-symbol">:PRESERVE</span>      <span class="syntax-keyword-symbol">:DOWNCASE</span>     <span class="syntax-interned-symbol">ZEBRA</span>        <span class="syntax-interned-symbol">ZEBRA</span>
<span class="syntax-keyword-symbol">:PRESERVE</span>      <span class="syntax-keyword-symbol">:DOWNCASE</span>     <span class="syntax-interned-symbol">Zebra</span>        <span class="syntax-interned-symbol">Zebra</span>
<span class="syntax-keyword-symbol">:PRESERVE</span>      <span class="syntax-keyword-symbol">:DOWNCASE</span>     <span class="syntax-interned-symbol">zebra</span>        <span class="syntax-interned-symbol">zebra</span>
<span class="syntax-keyword-symbol">:PRESERVE</span>      <span class="syntax-keyword-symbol">:CAPITALIZE</span>   <span class="syntax-interned-symbol">ZEBRA</span>        <span class="syntax-interned-symbol">ZEBRA</span>
<span class="syntax-keyword-symbol">:PRESERVE</span>      <span class="syntax-keyword-symbol">:CAPITALIZE</span>   <span class="syntax-interned-symbol">Zebra</span>        <span class="syntax-interned-symbol">Zebra</span>
<span class="syntax-keyword-symbol">:PRESERVE</span>      <span class="syntax-keyword-symbol">:CAPITALIZE</span>   <span class="syntax-interned-symbol">zebra</span>        <span class="syntax-interned-symbol">zebra</span>
<span class="syntax-keyword-symbol">:INVERT</span>        <span class="syntax-keyword-symbol">:UPCASE</span>       <span class="syntax-interned-symbol">ZEBRA</span>        <span class="syntax-interned-symbol">zebra</span>
<span class="syntax-keyword-symbol">:INVERT</span>        <span class="syntax-keyword-symbol">:UPCASE</span>       <span class="syntax-interned-symbol">Zebra</span>        <span class="syntax-interned-symbol">Zebra</span>
<span class="syntax-keyword-symbol">:INVERT</span>        <span class="syntax-keyword-symbol">:UPCASE</span>       <span class="syntax-interned-symbol">zebra</span>        <span class="syntax-interned-symbol">ZEBRA</span>
<span class="syntax-keyword-symbol">:INVERT</span>        <span class="syntax-keyword-symbol">:DOWNCASE</span>     <span class="syntax-interned-symbol">ZEBRA</span>        <span class="syntax-interned-symbol">zebra</span>
<span class="syntax-keyword-symbol">:INVERT</span>        <span class="syntax-keyword-symbol">:DOWNCASE</span>     <span class="syntax-interned-symbol">Zebra</span>        <span class="syntax-interned-symbol">Zebra</span>
<span class="syntax-keyword-symbol">:INVERT</span>        <span class="syntax-keyword-symbol">:DOWNCASE</span>     <span class="syntax-interned-symbol">zebra</span>        <span class="syntax-interned-symbol">ZEBRA</span>
<span class="syntax-keyword-symbol">:INVERT</span>        <span class="syntax-keyword-symbol">:CAPITALIZE</span>   <span class="syntax-interned-symbol">ZEBRA</span>        <span class="syntax-interned-symbol">zebra</span>
<span class="syntax-keyword-symbol">:INVERT</span>        <span class="syntax-keyword-symbol">:CAPITALIZE</span>   <span class="syntax-interned-symbol">Zebra</span>        <span class="syntax-interned-symbol">Zebra</span>
<span class="syntax-keyword-symbol">:INVERT</span>        <span class="syntax-keyword-symbol">:CAPITALIZE</span>   <span class="syntax-interned-symbol">zebra</span>        <span class="syntax-interned-symbol">ZEBRA</span>
</span></code></pre><br/></section></section></section><section id="section-PrintingStrings"><h4 class="section-title">Printing Strings</h4>

The characters of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-string">string</a> are output in order.
If <a class="glossary-reference" href="chapter-26.xhtml#glossary-printer escaping">printer escaping</a> is enabled,
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-double-quote">double-quote</a> is output before and after, and all
<a class="glossary-reference" href="chapter-26.xhtml#glossary-double-quote">double-quotes</a> and <a class="glossary-reference" href="chapter-26.xhtml#glossary-single escape">single escapes</a> are preceded by <a class="glossary-reference" href="chapter-26.xhtml#glossary-backslash">backslash</a>.
The printing of <a class="glossary-reference" href="chapter-26.xhtml#glossary-string">strings</a> is not affected by <a class="variable-reference" href="#variable-*print-array*">*print-array*</a>.
Only the <a class="glossary-reference" href="chapter-26.xhtml#glossary-active">active</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-element">elements</a> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-string">string</a> are printed.<br/>For information on how the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lisp reader">Lisp reader</a> parses <a class="glossary-reference" href="chapter-26.xhtml#glossary-string">strings</a>,
see <span class="section-reference error">section:Doublequote.</span><br/></section><section id="section-PrintingListsAndConses"><h4 class="section-title">Printing Lists and Conses</h4>

Wherever possible, list notation is preferred over dot notation.  
Therefore the following algorithm is used to print a <a class="glossary-reference" href="chapter-26.xhtml#glossary-cons">cons</a> <math xmlns="http://www.w3.org/1998/Math/MathML">x</math>:<br/>
<ol><li>A <a class="glossary-reference" href="chapter-26.xhtml#glossary-left-parenthesis">left-parenthesis</a> is printed.<br/>
</li><li>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-car">car</a> of <math xmlns="http://www.w3.org/1998/Math/MathML">x</math> is printed. <br/>
</li><li>If the <a class="glossary-reference" href="chapter-26.xhtml#glossary-cdr">cdr</a> of <math xmlns="http://www.w3.org/1998/Math/MathML">x</math> is itself a <a class="glossary-reference" href="chapter-26.xhtml#glossary-cons">cons</a>,
          it is made to be the current <a class="glossary-reference" href="chapter-26.xhtml#glossary-cons">cons</a> 
	  (<span class="explicit-italic"> i.e.</span>,  <math xmlns="http://www.w3.org/1998/Math/MathML">x</math> becomes that <a class="glossary-reference" href="chapter-26.xhtml#glossary-cons">cons</a>), 
	  a <a class="glossary-reference" href="chapter-26.xhtml#glossary-space">space</a>
	  is printed,
          and step 2 is re-entered.<br/>
</li><li>If the <a class="glossary-reference" href="chapter-26.xhtml#glossary-cdr">cdr</a> of <math xmlns="http://www.w3.org/1998/Math/MathML">x</math> is not <a class="glossary-reference" href="chapter-26.xhtml#glossary-null">null</a>, 
	  a <a class="glossary-reference" href="chapter-26.xhtml#glossary-space">space</a>,
          a <a class="glossary-reference" href="chapter-26.xhtml#glossary-dot">dot</a>,
	  a <a class="glossary-reference" href="chapter-26.xhtml#glossary-space">space</a>,
          and the <a class="glossary-reference" href="chapter-26.xhtml#glossary-cdr">cdr</a> of <math xmlns="http://www.w3.org/1998/Math/MathML">x</math> are printed.<br/>
</li><li>A <a class="glossary-reference" href="chapter-26.xhtml#glossary-right-parenthesis">right-parenthesis</a> is printed.
</li></ol><br/>Actually, the above algorithm is only used when <a class="variable-reference" href="#variable-*print-pretty*">*print-pretty*</a>
is <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>.  When <a class="variable-reference" href="#variable-*print-pretty*">*print-pretty*</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a> (or 
when <a class="function-reference" href="#function-pprint">pprint</a> is used),
additional <a class="glossary-reference" href="chapter-26.xhtml#glossary-whitespace">whitespace</a><sub>1</sub> 
may replace the use of a single <a class="glossary-reference" href="chapter-26.xhtml#glossary-space">space</a>,
and a more elaborate algorithm with similar goals but more presentational 
flexibility is used; see <span class="section-reference error">section:PrinterDispatch.</span>
Although the two expressions below are equivalent,
and the reader accepts
either one and 
produces
the same <a class="glossary-reference" href="chapter-26.xhtml#glossary-cons">cons</a>, the printer
always prints such a <a class="glossary-reference" href="chapter-26.xhtml#glossary-cons">cons</a> in the second form.<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-symbol">.</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">b</span> <span class="syntax-symbol">.</span> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">c</span> <span class="syntax-symbol">.</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">d</span> <span class="syntax-symbol">.</span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span>)</span> <span class="syntax-symbol">.</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">e</span> <span class="syntax-symbol">.</span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span>)</span>)</span>)</span>
<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">d</span>)</span> <span class="syntax-interned-symbol">e</span>)</span>
</span></code></pre>
The printing of <a class="glossary-reference" href="chapter-26.xhtml#glossary-cons">conses</a> is affected by <a class="variable-reference" href="#variable-*print-level*">*print-level*</a>,
<a class="variable-reference" href="#variable-*print-length*">*print-length*</a>, and <a class="variable-reference" href="#variable-*print-circle*">*print-circle*</a>.<br/>
         
Following are examples of printed representations of <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">lists</a>:<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-symbol">.</span> <span class="syntax-interned-symbol">b</span>)</span>     ;A dotted pair of a and b
<span class="syntax-cons">(<span class="syntax-interned-symbol">a.b</span>)</span>       ;A list of one element, the symbol named a.b
<span class="syntax-cons">(<span class="syntax-interned-symbol">a.</span> <span class="syntax-interned-symbol">b</span>)</span>      ;A list of two elements a. and b
<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">.b</span>)</span>      ;A list of two elements a and .b
<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-symbol">.</span> <span class="syntax-interned-symbol">c</span>)</span>   ;A dotted list of a and b with c at the end; two conses
<span class="syntax-interned-symbol">.iot</span>        ;The symbol whose name is .iot
<span class="syntax-cons">(. <span class="syntax-interned-symbol">b</span>)</span>       ;Invalid -- an error is signaled if an attempt is made to read 
            ;this syntax.
<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-symbol">.</span>)</span>       ;Invalid -- an error is signaled.
<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">..</span> <span class="syntax-interned-symbol">b</span>)</span>    ;Invalid -- an error is signaled.
<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-symbol">.</span> . <span class="syntax-interned-symbol">b</span>)</span>   ;Invalid -- an error is signaled.
<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">...</span>)</span> ;Invalid -- an error is signaled.
<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> \. <span class="syntax-interned-symbol">b</span>)</span>    ;A list of three elements a, ., and b
<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">|.|</span> <span class="syntax-interned-symbol">b</span>)</span>   ;A list of three elements a, ., and b
<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> \... <span class="syntax-interned-symbol">b</span>)</span>  ;A list of three elements a, ..., and b
<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">|...|</span> <span class="syntax-interned-symbol">b</span>)</span> ;A list of three elements a, ..., and b
</span></code></pre><br/>For information on how the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lisp reader">Lisp reader</a> parses <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">lists</a> and <a class="glossary-reference" href="chapter-26.xhtml#glossary-cons">conses</a>,
see <span class="section-reference error">section:LeftParen.</span> <br/></section><section id="section-PrintingBitVectors"><h4 class="section-title">Printing Bit Vectors</h4>

A <a class="glossary-reference" href="chapter-26.xhtml#glossary-bit vector">bit vector</a> is printed as <pre><code><span class="syntax-root">#*
</span></code></pre> followed by the bits of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-bit vector">bit vector</a>
in order.  If <a class="variable-reference" href="#variable-*print-array*">*print-array*</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>, then the <a class="glossary-reference" href="chapter-26.xhtml#glossary-bit vector">bit vector</a> is
printed in a format (using <pre><code><span class="syntax-root">#&lt;
</span></code></pre>) that is concise but not readable.
Only the <a class="glossary-reference" href="chapter-26.xhtml#glossary-active">active</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-element">elements</a> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-bit vector">bit vector</a> are printed.<br/>
For information on <a class="glossary-reference" href="chapter-26.xhtml#glossary-lisp reader">Lisp reader</a> parsing of <a class="glossary-reference" href="chapter-26.xhtml#glossary-bit vector">bit vectors</a>,
see <span class="section-reference error">section:SharpsignStar.</span><br/></section><section id="section-PrintingOtherVectors"><h4 class="section-title">Printing Other Vectors</h4>

If <a class="variable-reference" href="#variable-*print-array*">*print-array*</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a> 
and <a class="variable-reference" href="#variable-*print-readably*">*print-readably*</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>,
any
<a class="glossary-reference" href="chapter-26.xhtml#glossary-vector">vector</a> 
other than a <a class="glossary-reference" href="chapter-26.xhtml#glossary-string">string</a> or <a class="glossary-reference" href="chapter-26.xhtml#glossary-bit vector">bit vector</a> is printed using
general-vector syntax; this means that information
about specialized vector representations does not appear.
The printed representation of a zero-length <a class="glossary-reference" href="chapter-26.xhtml#glossary-vector">vector</a> is <pre><code><span class="syntax-root">#<span class="syntax-symbol">()</span>
</span></code></pre>.
The printed representation of a non-zero-length <a class="glossary-reference" href="chapter-26.xhtml#glossary-vector">vector</a> begins with <pre><code><span class="syntax-root">#<span class="syntax-symbol">(
Â¶</span></span></code></pre>.
Following that, the first element of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-vector">vector</a> is printed.  
If there are any other elements, they are printed in turn, with 
each such additional element preceded by
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-space">space</a> if <a class="variable-reference" href="#variable-*print-pretty*">*print-pretty*</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>,
or <a class="glossary-reference" href="chapter-26.xhtml#glossary-whitespace">whitespace</a><sub>1</sub> if <a class="variable-reference" href="#variable-*print-pretty*">*print-pretty*</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>.
A <a class="glossary-reference" href="chapter-26.xhtml#glossary-right-parenthesis">right-parenthesis</a> after the last element
terminates the printed representation of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-vector">vector</a>. 
The printing of <a class="glossary-reference" href="chapter-26.xhtml#glossary-vector">vectors</a> 
is affected by <a class="variable-reference" href="#variable-*print-level*">*print-level*</a> and <a class="variable-reference" href="#variable-*print-length*">*print-length*</a>.
If the <a class="glossary-reference" href="chapter-26.xhtml#glossary-vector">vector</a> has a <a class="glossary-reference" href="chapter-26.xhtml#glossary-fill pointer">fill pointer</a>, 
then only those elements below
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-fill pointer">fill pointer</a> are printed.<br/>If both <a class="variable-reference" href="#variable-*print-array*">*print-array*</a> and <a class="variable-reference" href="#variable-*print-readably*">*print-readably*</a> are <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>,
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-vector">vector</a> is not printed as described above,
but in a format (using <pre><code><span class="syntax-root">#&lt;
</span></code></pre>) that is concise but not readable.<br/>If <a class="variable-reference" href="#variable-*print-readably*">*print-readably*</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>,
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-vector">vector</a> prints in an <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-defined">implementation-defined</a> manner;
see the <a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variable</a> <a class="variable-reference" href="#variable-*print-readably*">*print-readably*</a>.

For information on how the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lisp reader">Lisp reader</a> parses these ``other <a class="glossary-reference" href="chapter-26.xhtml#glossary-vector">vectors</a>,''
see <span class="section-reference error">section:SharpsignLeftParen.</span><br/></section><section id="section-PrintingOtherArrays"><h4 class="section-title">Printing Other Arrays</h4>

If  <a class="variable-reference" href="#variable-*print-array*">*print-array*</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a> 
and <a class="variable-reference" href="#variable-*print-readably*">*print-readably*</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>,
any
<a class="glossary-reference" href="chapter-26.xhtml#glossary-array">array</a> other than a <a class="glossary-reference" href="chapter-26.xhtml#glossary-vector">vector</a> is printed
using <pre><code><span class="syntax-root">#
</span></code></pre><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">n</span>
</span></code></pre><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">A</span>
</span></code></pre> format.
Let <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">n</span>
</span></code></pre> be the <a class="glossary-reference" href="chapter-26.xhtml#glossary-rank">rank</a> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-array">array</a>.
Then <pre><code><span class="syntax-root">#
</span></code></pre> is printed, then <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">n</span>
</span></code></pre> as a decimal integer,
then <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">A</span>
</span></code></pre>, then <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">n</span>
</span></code></pre> open parentheses.  
Next the <a class="glossary-reference" href="chapter-26.xhtml#glossary-element">elements</a> are scanned in row-major order,
using <a class="function-reference" href="#function-write">write</a> on each <a class="glossary-reference" href="chapter-26.xhtml#glossary-element">element</a>, 
and separating <a class="glossary-reference" href="chapter-26.xhtml#glossary-element">elements</a> from each other with <a class="glossary-reference" href="chapter-26.xhtml#glossary-whitespace">whitespace</a><sub>1</sub>.
The array's dimensions are numbered 0 to <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">n</span>
</span></code></pre>-1 from left to right,
and are enumerated with the rightmost index changing fastest.
Every time the index for dimension <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">j</span>
</span></code></pre> is incremented,
the following actions are taken:<br/><ul><li>If <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">j</span>
</span></code></pre> &lt; <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">n</span>
</span></code></pre>-1, then a close parenthesis is printed.<br/></li><li>If incrementing the index for dimension <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">j</span>
</span></code></pre> caused it to equal
dimension <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">j</span>
</span></code></pre>, that index is reset to zero and the
index for dimension <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">j</span>
</span></code></pre>-1 is incremented (thereby performing these three steps recursively),
unless <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">j</span>
</span></code></pre>=0, in which case the entire algorithm is terminated.
If incrementing the index for dimension <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">j</span>
</span></code></pre> did not cause it to
equal dimension <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">j</span>
</span></code></pre>, then a space is printed.<br/></li><li>If <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">j</span>
</span></code></pre> &lt; <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">n</span>
</span></code></pre>-1, then an open parenthesis is printed.
</li></ul><br/>This causes the contents to be printed in a format suitable for
<span class="keyword">:initial-contents</span> to <a class="function-reference" href="chapter-15.xhtml#function-make-array">make-array</a>.
The lists effectively printed by this procedure are subject to
truncation by <a class="variable-reference" href="#variable-*print-level*">*print-level*</a> and <a class="variable-reference" href="#variable-*print-length*">*print-length*</a>.<br/>If the <a class="glossary-reference" href="chapter-26.xhtml#glossary-array">array</a> 
is of a specialized <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a>, containing bits or characters,
then the innermost lists generated by the algorithm given above can instead
be printed using bit-vector or string syntax, provided that these innermost
lists would not be subject to truncation by <a class="variable-reference" href="#variable-*print-length*">*print-length*</a>.  

If both <a class="variable-reference" href="#variable-*print-array*">*print-array*</a> and <a class="variable-reference" href="#variable-*print-readably*">*print-readably*</a> are <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>,
then the <a class="glossary-reference" href="chapter-26.xhtml#glossary-array">array</a> is printed
in a format (using <pre><code><span class="syntax-root">#&lt;
</span></code></pre>) that is concise but not readable.<br/>If <a class="variable-reference" href="#variable-*print-readably*">*print-readably*</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>,
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-array">array</a> prints in an <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-defined">implementation-defined</a> manner; 
see the <a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variable</a> <a class="variable-reference" href="#variable-*print-readably*">*print-readably*</a>.
In particular,
this may be important for arrays having some dimension <pre><code><span class="syntax-root"><span class="syntax-number">0</span>
</span></code></pre>.<br/>For information on how the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lisp reader">Lisp reader</a> parses these ``other <a class="glossary-reference" href="chapter-26.xhtml#glossary-array">arrays</a>,''
see <a class="section-reference" href="chapter-2.xhtml#section-SharpsignA">Sharpsign A</a>.<br/><section id="section-ExamplesofPrintingArrays"><h4 class="section-title">Examples of Printing Arrays</h4><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-15.xhtml#function-make-array">make-array</a> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-number">3</span> <span class="syntax-number">3</span>)</span></span>)</span>)</span>
       <span class="syntax-cons">(<a class="variable-reference" href="#variable-*print-pretty*">*print-pretty*</a> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a>)</span>
       <span class="syntax-cons">(<a class="variable-reference" href="#variable-*print-array*">*print-array*</a> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a>)</span>)</span>
   <span class="syntax-cons">(<a class="macro-reference" href="chapter-6.xhtml#macro-dotimes">dotimes</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">i</span> <span class="syntax-number">3</span>)</span> <span class="syntax-cons">(<a class="macro-reference" href="chapter-6.xhtml#macro-dotimes">dotimes</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">j</span> <span class="syntax-number">3</span>)</span> <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-15.xhtml#function-aref">aref</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">j</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"&lt;~D,~D&gt;"</span> <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">j</span>)</span>)</span>)</span>)</span>
   <span class="syntax-cons">(<a class="function-reference" href="#function-print">print</a> <span class="syntax-interned-symbol">a</span>)</span>
   <span class="syntax-cons">(<a class="function-reference" href="#function-print">print</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-15.xhtml#function-make-array">make-array</a> <span class="syntax-number">9</span> <span class="syntax-keyword-symbol">:displaced-to</span> <span class="syntax-interned-symbol">a</span>)</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> #2A(("&lt;0,0&gt;" "&lt;0,1&gt;" "&lt;0,2&gt;") 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math>     ("&lt;1,0&gt;" "&lt;1,1&gt;" "&lt;1,2&gt;") 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math>     ("&lt;2,0&gt;" "&lt;2,1&gt;" "&lt;2,2&gt;")) 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> #("&lt;0,0&gt;" "&lt;0,1&gt;" "&lt;0,2&gt;" "&lt;1,0&gt;" "&lt;1,1&gt;" "&lt;1,2&gt;" "&lt;2,0&gt;" "&lt;2,1&gt;" "&lt;2,2&gt;") 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-verbatim">#&lt;ARRAY 9 indirect 36363476&gt;</span>
</span></code></pre><br/></section></section><section id="section-PrintingRandomStates"><h4 class="section-title">Printing Random States</h4>
                                                                       
A specific syntax for printing <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-12.xhtml#type-random-state">random-state</a> is
not specified. However, every <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation">implementation</a>
must arrange to print a <a class="glossary-reference" href="chapter-26.xhtml#glossary-random state">random state</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> in such a way that,
within the same implementation, <a class="function-reference" href="chapter-23.xhtml#function-read">read</a>
can construct from the printed representation a copy of the 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-random state">random state</a>
object as if the copy had been made by <a class="function-reference" href="chapter-12.xhtml#function-make-random-state">make-random-state</a>.<br/>If the type <a class="glossary-reference" href="chapter-26.xhtml#glossary-random state">random state</a> is effectively implemented 
by using the machinery for <a class="macro-reference" href="chapter-8.xhtml#macro-defstruct">defstruct</a>,
the usual structure syntax can then be used for printing 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-random state">random state</a>
objects; one might look something like<br/><pre><code><span class="syntax-root"><span class="syntax-structure">#S(<a class="type-reference" href="chapter-12.xhtml#type-random-state">random-state</a> <span class="syntax-keyword-symbol">:DATA</span> <span class="syntax-vector">#(<span class="syntax-number">14</span> <span class="syntax-number">49</span> <span class="syntax-number">98436589</span> <span class="syntax-number">786345</span> <span class="syntax-number">8734658324</span> <span class="syntax-interned-symbol">...</span> )</span>)</span>
</span></code></pre>
where the components are <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a>.<br/></section><section id="section-PrintingPathnames"><h4 class="section-title">Printing Pathnames</h4>

 
When <a class="glossary-reference" href="chapter-26.xhtml#glossary-printer escaping">printer escaping</a> is enabled,
the syntax <pre><code><span class="syntax-root">#P<span class="syntax-string">"..."</span>
</span></code></pre> is how a
<a class="glossary-reference" href="chapter-26.xhtml#glossary-pathname">pathname</a> is printed by <a class="function-reference" href="#function-write">write</a> and the other functions herein described.
The <pre><code><span class="syntax-root"><span class="syntax-string">"..."</span>
</span></code></pre> is the namestring representation of the pathname.<br/>
When <a class="glossary-reference" href="chapter-26.xhtml#glossary-printer escaping">printer escaping</a> is disabled,
<a class="function-reference" href="#function-write">write</a> writes a <a class="glossary-reference" href="chapter-26.xhtml#glossary-pathname">pathname</a> <span class="explicit-italic"> P</span>
by writing <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="chapter-19.xhtml#function-namestring">namestring</a> <span class="explicit-italic"> P</span>)</span>
</span></code></pre> instead.<br/>
For information on how the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lisp reader">Lisp reader</a> parses <a class="glossary-reference" href="chapter-26.xhtml#glossary-pathname">pathnames</a>,
see <a class="section-reference" href="chapter-2.xhtml#section-SharpsignP">Sharpsign P</a>.<br/>
</section><section id="section-PrintingStructures"><h4 class="section-title">Printing Structures</h4><br/>By default, a <a class="glossary-reference" href="chapter-26.xhtml#glossary-structure">structure</a> of type <math xmlns="http://www.w3.org/1998/Math/MathML">S</math> is printed using <pre><code><span class="syntax-root">#S
</span></code></pre> syntax.
This behavior can be customized by specifying a <span class="keyword">:print-function</span> 
or <span class="keyword">:print-object</span> option to the <a class="macro-reference" href="chapter-8.xhtml#macro-defstruct">defstruct</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> that defines <math xmlns="http://www.w3.org/1998/Math/MathML">S</math>,
or by writing a <a class="function-reference" href="#function-print-object">print-object</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> 
that is <a class="glossary-reference" href="chapter-26.xhtml#glossary-specialized">specialized</a> for <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a> of type <math xmlns="http://www.w3.org/1998/Math/MathML">S</math>.

Different structures might print out in different ways;
the default notation for structures is:<br/><pre><code><span class="syntax-root"><span class="syntax-feature-expression">#S(<span class="parameter">structure-name</span> \star{\curly{\param{slot-key} \param{slot-value}}})</span>
</span></code></pre>
where <pre><code><span class="syntax-root">#S
</span></code></pre> indicates structure syntax,
<span class="parameter">structure-name</span> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-structure name">structure name</a>,
each <span class="parameter">slot-key</span> is an initialization argument <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a>
for a <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-structure">structure</a>,
and each corresponding <span class="parameter">slot-value</span> is a representation
of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> in that <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>.

For information on how the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lisp reader">Lisp reader</a> parses <span class="glossary-reference error">glossary:structures</span>,
see <a class="section-reference" href="chapter-2.xhtml#section-SharpsignS">Sharpsign S</a>.<br/></section><section id="section-PrintingOtherObjects"><h4 class="section-title">Printing Other Objects</h4><br/>Other <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a> are printed in an <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a> manner.
It is not required that an <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation">implementation</a> print those <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a>
<a class="glossary-reference" href="chapter-26.xhtml#glossary-readably">readably</a>.<br/>For example, <a class="glossary-reference" href="chapter-26.xhtml#glossary-hash table">hash tables</a>, 
	     <a class="glossary-reference" href="chapter-26.xhtml#glossary-readtable">readtables</a>,
             <a class="glossary-reference" href="chapter-26.xhtml#glossary-package">packages</a>,
             <a class="glossary-reference" href="chapter-26.xhtml#glossary-stream">streams</a>,
         and <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">functions</a>
might not print <a class="glossary-reference" href="chapter-26.xhtml#glossary-readably">readably</a>.<br/>A common notation to use in this circumstance is <pre><code><span class="syntax-root">#&lt;...&gt;
</span></code></pre>.
Since <pre><code><span class="syntax-root">#&lt;
</span></code></pre> is not readable by the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lisp reader">Lisp reader</a>,
the precise format of the text which follows is not important,
but a common format to use is that provided by the <a class="macro-reference" href="#macro-print-unreadable-object">print-unreadable-object</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a>.<br/>For information on how the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lisp reader">Lisp reader</a> treats this notation,
see <span class="section-reference error">section:SharpsignLeftAngle.</span>
For information on how to notate <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a> that cannot be printed <a class="glossary-reference" href="chapter-26.xhtml#glossary-readably">readably</a>,
see <span class="section-reference error">section:SharpsignDot.</span><br/></section></section><section id="section-ExamplesofPrinterBehavior"><h3 class="section-title">Examples of Printer Behavior</h3><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<a class="variable-reference" href="#variable-*print-escape*">*print-escape*</a> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a>)</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-21.xhtml#function-fresh-line">fresh-line</a>)</span> <span class="syntax-cons">(<a class="function-reference" href="#function-write">write</a> <span class="syntax-character">#\a</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> #\a
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-character">#\a</span>
 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<a class="variable-reference" href="#variable-*print-escape*">*print-escape*</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span> <span class="syntax-cons">(<a class="variable-reference" href="#variable-*print-readably*">*print-readably*</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span>)</span>
   <span class="syntax-cons">(<a class="function-reference" href="chapter-21.xhtml#function-fresh-line">fresh-line</a>)</span>
   <span class="syntax-cons">(<a class="function-reference" href="#function-write">write</a> <span class="syntax-character">#\a</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> a
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-character">#\a</span>
 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-progn">progn</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-21.xhtml#function-fresh-line">fresh-line</a>)</span> <span class="syntax-cons">(<a class="function-reference" href="#function-prin1">prin1</a> <span class="syntax-character">#\a</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> #\a
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-character">#\a</span>
 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-progn">progn</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-21.xhtml#function-fresh-line">fresh-line</a>)</span> <span class="syntax-cons">(<a class="function-reference" href="#function-print">print</a> <span class="syntax-character">#\a</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> #\a
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-character">#\a</span>
 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-progn">progn</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-21.xhtml#function-fresh-line">fresh-line</a>)</span> <span class="syntax-cons">(<a class="function-reference" href="#function-princ">princ</a> <span class="syntax-character">#\a</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> a
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-character">#\a</span>

 <span class="syntax-cons">(<a class="macro-reference" href="chapter-6.xhtml#macro-dolist">dolist</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">val</span> <span class="syntax-quote">'<span class="syntax-cons">(<a class="section-reference" href="chapter-26.xhtml#section-T">T</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span></span>)</span>
   <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<a class="variable-reference" href="#variable-*print-escape*">*print-escape*</a> <span class="syntax-interned-symbol">val</span>)</span> <span class="syntax-cons">(<a class="variable-reference" href="#variable-*print-readably*">*print-readably*</a> <span class="syntax-interned-symbol">val</span>)</span>)</span>
     <span class="syntax-cons">(<a class="function-reference" href="#function-print">print</a> <span class="syntax-quote">'<span class="syntax-character">#\a</span></span>)</span> 
     <span class="syntax-cons">(<a class="function-reference" href="#function-prin1">prin1</a> <span class="syntax-character">#\a</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-21.xhtml#function-write-char">write-char</a> <span class="syntax-character">#\Space</span>)</span>
     <span class="syntax-cons">(<a class="function-reference" href="#function-princ">princ</a> <span class="syntax-character">#\a</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-21.xhtml#function-write-char">write-char</a> <span class="syntax-character">#\Space</span>)</span>
     <span class="syntax-cons">(<a class="function-reference" href="#function-write">write</a> <span class="syntax-character">#\a</span>)</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> #\a #\a a #\a
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> #\a #\a a a
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>

 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-progn">progn</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-21.xhtml#function-fresh-line">fresh-line</a>)</span> <span class="syntax-cons">(<a class="function-reference" href="#function-write">write</a> <span class="syntax-quote">'<span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-number">1</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">b</span> <span class="syntax-number">2</span>)</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span>)</span>)</span></span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> (LET ((A 1) (B 2)) (+ A B))
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">A</span> <span class="syntax-number">1</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">B</span> <span class="syntax-number">2</span>)</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">B</span>)</span>)</span>

 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-progn">progn</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-21.xhtml#function-fresh-line">fresh-line</a>)</span> <span class="syntax-cons">(<a class="function-reference" href="#function-pprint">pprint</a> <span class="syntax-quote">'<span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-number">1</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">b</span> <span class="syntax-number">2</span>)</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span>)</span>)</span></span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> (LET ((A 1)
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math>       (B 2))               
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math>   (+ A B))
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">A</span> <span class="syntax-number">1</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">B</span> <span class="syntax-number">2</span>)</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">B</span>)</span>)</span>

 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-progn">progn</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-21.xhtml#function-fresh-line">fresh-line</a>)</span> 
        <span class="syntax-cons">(<a class="function-reference" href="#function-write">write</a> <span class="syntax-quote">'<span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-number">1</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">b</span> <span class="syntax-number">2</span>)</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span>)</span>)</span></span> <span class="syntax-keyword-symbol">:pretty</span> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> (LET ((A 1)
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math>       (B 2))
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math>   (+ A B))                 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">A</span> <span class="syntax-number">1</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">B</span> <span class="syntax-number">2</span>)</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">B</span>)</span>)</span>

 <span class="syntax-cons">(<a class="macro-reference" href="chapter-21.xhtml#macro-with-output-to-string">with-output-to-string</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">s</span>)</span>  
    <span class="syntax-cons">(<a class="function-reference" href="#function-write">write</a> <span class="syntax-quote">'<a class="function-reference" href="#function-write">write</a></span> <span class="syntax-keyword-symbol">:stream</span> <span class="syntax-interned-symbol">s</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="#function-prin1">prin1</a> <span class="syntax-quote">'<a class="function-reference" href="#function-prin1">prin1</a></span> <span class="syntax-interned-symbol">s</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"WRITEPRIN1"</span>
</span></code></pre><br/></section>
</section><section id="section-PPrinter"><h2 class="section-title">The Lisp Pretty Printer</h2>


<section id="section-PrettyPrinterConcepts"><h3 class="section-title">Pretty Printer Concepts</h3>The facilities provided by the <span class="newterm">pretty printer</span> permit
<a class="glossary-reference" href="chapter-26.xhtml#glossary-program">programs</a> to redefine the way in which <a class="glossary-reference" href="chapter-26.xhtml#glossary-code">code</a> is displayed, 
and allow the full power of <a class="glossary-reference" href="chapter-26.xhtml#glossary-pretty print">pretty printing</a> to be applied 
to complex combinations of data structures.<br/>Whether any given style of output is in fact ``pretty'' is inherently a
somewhat subjective issue.  However, since the effect of the 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-pretty printer">pretty printer</a> can be customized by <a class="glossary-reference" href="chapter-26.xhtml#glossary-conforming program">conforming programs</a>,
the necessary flexibility is provided for individual <a class="glossary-reference" href="chapter-26.xhtml#glossary-program">programs</a>
to achieve an arbitrary degree of aesthetic control.<br/>By providing direct access to the mechanisms within the pretty printer
that make dynamic decisions about layout, the macros and functions
<a class="macro-reference" href="#macro-pprint-logical-block">pprint-logical-block</a>, <a class="function-reference" href="#function-pprint-newline">pprint-newline</a>, and
<a class="function-reference" href="#function-pprint-indent">pprint-indent</a> make it possible to specify pretty printing
layout rules as a part of any function that produces output.  They also
make it very easy for the detection of circularity and sharing, and
abbreviation based on length and nesting depth to be supported by the
function.<br/>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-pretty printer">pretty printer</a> is driven entirely by dispatch based on
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a> of <a class="variable-reference" href="#variable-*print-pprint-dispatch*">*print-pprint-dispatch*</a>.
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="#function-set-pprint-dispatch">set-pprint-dispatch</a> makes it possible
for <a class="glossary-reference" href="chapter-26.xhtml#glossary-conforming program">conforming programs</a> to associate new pretty printing 
functions with a <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a>.<br/><section id="section-DynamicControlofOutput"><h4 class="section-title">Dynamic Control of the Arrangement of Output</h4><br/>The actions of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-pretty printer">pretty printer</a> when a piece of output is too
large to fit in the space available can be precisely controlled.
Three concepts underlie 
the way these operations work&mdash;<span class="newterm">logical blocks</span>,
			        <span class="newterm">conditional newlines</span>,
			    and <span class="newterm">sections</span>.
Before proceeding further, it is important to define these terms.<br/>The first line of Figure <span class="explicit-mono">()</span>&ndash; shows a schematic piece of output.  Each of
the characters in the output is represented by ``<pre><code><span class="syntax-root"><a class="function-reference" href="chapter-12.xhtml#function--">-</a>
</span></code></pre>''.  The positions of
conditional newlines are indicated by digits.  The beginnings and ends of
logical blocks are indicated by ``<pre><code><span class="syntax-root"><a class="function-reference" href="chapter-12.xhtml#function-&lt;">&lt;</a>
</span></code></pre>'' and ``<pre><code><span class="syntax-root"><a class="function-reference" href="chapter-12.xhtml#function-&gt;">&gt;</a>
</span></code></pre>'' respectively.<br/>The output as a whole is a logical block and the outermost section.  This
section is indicated by the <pre><code><span class="syntax-root"><span class="syntax-number">0</span>
</span></code></pre>'s on the second line of Figure 1.  Logical
blocks nested within the output are specified by the macro
<a class="macro-reference" href="#macro-pprint-logical-block">pprint-logical-block</a>.  Conditional newline positions are specified 
by calls to <a class="function-reference" href="#function-pprint-newline">pprint-newline</a>.  Each conditional newline defines 
two sections (one before it and one after it) and is associated with a 
third (the section immediately containing it).<br/>The section after a conditional newline consists of: all the output up to,
but not including, (a) the next conditional newline immediately contained
in the same logical block; or if (a) is not applicable, (b) the next
newline that is at a lesser level of nesting in logical blocks; or if (b)
is not applicable, (c) the end of the output.<br/>The section before a conditional newline consists of: all the output back
to, but not including, (a) the previous conditional newline that is
immediately contained in the same logical block; or if (a) is not
applicable, (b) the beginning of the immediately containing logical block.
The last four lines in Figure 1 indicate the sections before and after the
four conditional newlines.<br/>The section immediately containing a conditional newline is the shortest
section that contains the conditional newline in question.  In Figure <span class="explicit-mono">()</span>&ndash;,
the first conditional newline is immediately contained in the section
marked with <pre><code><span class="syntax-root"><span class="syntax-number">0</span>
</span></code></pre>'s, the second and third conditional newlines are immediately
contained in the section before the fourth conditional newline, and the
fourth conditional newline is immediately contained in the section after
the first conditional newline.<br/><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">&lt;-1---&lt;--&lt;--2---3-&gt;--4--&gt;-&gt;</span>
<span class="syntax-number">000000000000000000000000000</span>
<span class="syntax-number">11</span> <span class="syntax-number">111111111111111111111111</span>
          <span class="syntax-number">22</span> <span class="syntax-number">222</span>
             <span class="syntax-number">333</span> <span class="syntax-number">3333</span>
       <span class="syntax-number">44444444444444</span> <span class="syntax-number">44444</span>
</span></code></pre>

<span class="error">unexpanded macro: (:OTHER-COMMAND-APPLICATION (# #) :OUTPUT-FILE "chapter-22"
                   :NAME "moveright" :BOUNDS (22198 . 22217))</span> Figure <span class="explicit-mono">()</span>!2<span class="explicit-mono">()</span>!!<span class="error">unexpanded macro: (:OTHER-COMMAND-APPLICATION (# #) :OUTPUT-FILE "chapter-22"
                   :NAME "noexpand" :BOUNDS (22329 . 22349))</span>
<br/>

<br/>Whenever possible, the pretty printer displays the entire contents of a
section on a single line.  However, if the section is too long to fit in
the space available, line breaks are inserted at conditional newline
positions within the section.<br/></section><section id="section-FormatDirectiveInterface"><h4 class="section-title">Format Directive Interface</h4>The primary interface to operations for dynamically determining the
arrangement of output is provided through the functions and macros of the
pretty printer.  Figure <span class="explicit-mono">()</span>&ndash; shows the defined names related to <a class="glossary-reference" href="chapter-26.xhtml#glossary-pretty print">pretty printing</a>.<br/><span class="float" id="figure-Defined names related to pretty printing."><table><tbody><tr><td><a class="variable-reference" href="#variable-*print-lines*">*print-lines*</a></td><td><a class="function-reference" href="#function-pprint-dispatch">pprint-dispatch</a></td><td><a class="macro-reference" href="#macro-pprint-pop">pprint-pop</a></td></tr><tr><td><a class="variable-reference" href="#variable-*print-miser-width*">*print-miser-width*</a></td><td><a class="macro-reference" href="#macro-pprint-exit-if-list-exhausted">pprint-exit-if-list-exhausted</a></td><td><a class="function-reference" href="#function-pprint-tab">pprint-tab</a></td></tr><tr><td><a class="variable-reference" href="#variable-*print-pprint-dispatch*">*print-pprint-dispatch*</a></td><td><a class="function-reference" href="#function-pprint-fill">pprint-fill</a></td><td><a class="function-reference" href="#function-pprint-tabular">pprint-tabular</a></td></tr><tr><td><a class="variable-reference" href="#variable-*print-right-margin*">*print-right-margin*</a></td><td><a class="function-reference" href="#function-pprint-indent">pprint-indent</a></td><td><a class="function-reference" href="#function-set-pprint-dispatch">set-pprint-dispatch</a></td></tr><tr><td><a class="function-reference" href="#function-copy-pprint-dispatch">copy-pprint-dispatch</a></td><td><a class="function-reference" href="#function-pprint-linear">pprint-linear</a></td><td><a class="function-reference" href="#function-write">write</a></td></tr><tr><td><a class="function-reference" href="#function-format">format</a></td><td><a class="macro-reference" href="#macro-pprint-logical-block">pprint-logical-block</a></td><td/></tr><tr><td><a class="macro-reference" href="#macro-formatter">formatter</a></td><td><a class="function-reference" href="#function-pprint-newline">pprint-newline</a></td><td/></tr></tbody></table><div class="caption">Defined names related to pretty printing.</div></span><br/>Figure <span class="explicit-mono">()</span>&ndash; identifies a set of <span class="glossary-reference error">glossary:format directives</span> which serve
as an alternate interface to the same pretty printing operations in a 
more textually compact form.<br/> 
<span class="float" id="figure-Format directives related to Pretty Printing"><table><tbody><tr><td><a class="section-reference" href="chapter-26.xhtml#section-I">I</a></td><td><a class="section-reference" href="chapter-26.xhtml#section-W">W</a></td><td><span class="?-reference error">?:&lt;...:&gt;</span></td></tr><tr><td><span class="?-reference error">?::T</span></td><td><span class="?-reference error">?:/.../</span></td><td><span class="?-reference error">?:_</span></td></tr></tbody></table><div class="caption">Format directives related to Pretty Printing</div></span><br/></section><section id="section-CompilingFormatStrings"><h4 class="section-title">Compiling Format Strings</h4><br/>A <a class="glossary-reference" href="chapter-26.xhtml#glossary-format string">format string</a> is essentially a program in a special-purpose language
that performs printing, and that is interpreted by the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="#function-format">format</a>.
The <a class="macro-reference" href="#macro-formatter">formatter</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a> provides the efficiency of using a <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiled function">compiled function</a> 
to do that same printing but without losing the textual compactness of <a class="glossary-reference" href="chapter-26.xhtml#glossary-format string">format strings</a>.<br/>A <span class="newterm">format control</span> is either a <a class="glossary-reference" href="chapter-26.xhtml#glossary-format string">format string</a> or a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a>
that was returned by the the <a class="macro-reference" href="#macro-formatter">formatter</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a>.

</section><section id="section-PPrintDispatchTables"><h4 class="section-title">Pretty Print Dispatch Tables</h4><br/>
A <span class="newterm">pprint dispatch table</span> is a mapping from keys to pairs of values.  
Each key is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-type specifier">type specifier</a>.  
The values associated with a key are
     a ``function'' (specifically, a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function designator">function designator</a> or <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>)
 and a ``numerical priority'' (specifically, a <span class="glossary-reference error">glossary:real</span>).
Basic insertion and retrieval is done based on the keys with the equality
of keys being tested by <a class="function-reference" href="chapter-5.xhtml#function-equal">equal</a>.<br/>When <a class="variable-reference" href="#variable-*print-pretty*">*print-pretty*</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>, 
the <span class="newterm">current pprint dispatch table</span> (in <a class="variable-reference" href="#variable-*print-pprint-dispatch*">*print-pprint-dispatch*</a>)
controls how <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a> are printed.
The information in this table takes precedence over
all other mechanisms for specifying how to print <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a>.
In particular, it 
has priority over
user-defined <a class="function-reference" href="#function-print-object">print-object</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> 
because the <a class="glossary-reference" href="chapter-26.xhtml#glossary-current pprint dispatch table">current pprint dispatch table</a> is consulted first.<br/>The function is chosen from the <a class="glossary-reference" href="chapter-26.xhtml#glossary-current pprint dispatch table">current pprint dispatch table</a>
by finding the highest priority function 
that is associated with a <a class="glossary-reference" href="chapter-26.xhtml#glossary-type specifier">type specifier</a> that matches the <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>;
if there is more than one such function, 
it is <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a> which is used.<br/>However, if there is no 
information in the table
about how to <a class="glossary-reference" href="chapter-26.xhtml#glossary-pretty print">pretty print</a> a particular kind of <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>, 
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> is invoked which uses <a class="function-reference" href="#function-print-object">print-object</a> to print the <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.
The value of <a class="variable-reference" href="#variable-*print-pretty*">*print-pretty*</a> is still <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a> 
when this function is <a class="glossary-reference" href="chapter-26.xhtml#glossary-call">called</a>,
and individual methods for <a class="function-reference" href="#function-print-object">print-object</a> might still elect to
produce output in a special format conditional on the <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a> of <a class="variable-reference" href="#variable-*print-pretty*">*print-pretty*</a>.

</section><section id="section-PrettyPrinterMargins"><h4 class="section-title">Pretty Printer Margins</h4>A primary goal of pretty printing is to keep the output between a pair of
margins. 
The column where the output begins is taken as the left margin.
If the current column cannot be determined at the time output begins,
the left margin is assumed to be zero.
The right margin is controlled by <a class="variable-reference" href="#variable-*print-right-margin*">*print-right-margin*</a>.<br/></section></section><section id="section-PrettyPrinterExamples"><h3 class="section-title">Examples of using the Pretty Printer</h3><br/>As an example of the interaction of logical blocks, conditional newlines,
and indentation, consider the function <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">simple-pprint-defun</span>
</span></code></pre> below.  This
function prints out lists whose <a class="glossary-reference" href="chapter-26.xhtml#glossary-car">cars</a> are <a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> in the 
standard way assuming that the list has exactly length <pre><code><span class="syntax-root"><span class="syntax-number">4</span>
</span></code></pre>.<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">simple-pprint-defun</span> <span class="syntax-cons">(<a class="variable-reference" href="chapter-21.xhtml#variable-*standard-output*">*standard-output*</a> <a class="function-reference" href="chapter-14.xhtml#function-list">list</a>)</span>
  <span class="syntax-cons">(<a class="macro-reference" href="#macro-pprint-logical-block">pprint-logical-block</a> <span class="syntax-cons">(<a class="variable-reference" href="chapter-21.xhtml#variable-*standard-output*">*standard-output*</a> <a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-keyword-symbol">:prefix</span> <span class="syntax-string">"("</span> <span class="syntax-keyword-symbol">:suffix</span> <span class="syntax-string">")"</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="#function-write">write</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-first">first</a> <a class="function-reference" href="chapter-14.xhtml#function-list">list</a>)</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="chapter-21.xhtml#function-write-char">write-char</a> <span class="syntax-character">#\Space</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="#function-pprint-newline">pprint-newline</a> <span class="syntax-keyword-symbol">:miser</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="#function-pprint-indent">pprint-indent</a> <span class="syntax-keyword-symbol">:current</span> <span class="syntax-number">0</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="#function-write">write</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-second">second</a> <a class="function-reference" href="chapter-14.xhtml#function-list">list</a>)</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="chapter-21.xhtml#function-write-char">write-char</a> <span class="syntax-character">#\Space</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="#function-pprint-newline">pprint-newline</a> <span class="syntax-keyword-symbol">:fill</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="#function-write">write</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-third">third</a> <a class="function-reference" href="chapter-14.xhtml#function-list">list</a>)</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="#function-pprint-indent">pprint-indent</a> <span class="syntax-keyword-symbol">:block</span> <span class="syntax-number">1</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="chapter-21.xhtml#function-write-char">write-char</a> <span class="syntax-character">#\Space</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="#function-pprint-newline">pprint-newline</a> <span class="syntax-keyword-symbol">:linear</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="#function-write">write</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-fourth">fourth</a> <a class="function-reference" href="chapter-14.xhtml#function-list">list</a>)</span>)</span>)</span>)</span>
</span></code></pre><br/>Suppose that one evaluates the following:<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">simple-pprint-defun</span> <a class="variable-reference" href="chapter-21.xhtml#variable-*standard-output*">*standard-output*</a> <span class="syntax-quote">'<span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">prod</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-*">*</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span>)</span></span>)</span>
</span></code></pre><br/>If the line width available is greater than or equal to <pre><code><span class="syntax-root"><span class="syntax-number">26</span>
</span></code></pre>, then all of the
output appears on one line.  If the line width available is reduced to <pre><code><span class="syntax-root"><span class="syntax-number">25</span>
</span></code></pre>,
a line break is inserted at the 
linear-style conditional newline<a id="index/text-linear-style conditional newline"></a>
before the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-expression">expression</a> <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-*">*</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span>
</span></code></pre>, producing the output shown.  The
<pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="#function-pprint-indent">pprint-indent</a> <span class="syntax-keyword-symbol">:block</span> <span class="syntax-number">1</span>)</span>
</span></code></pre> causes <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-*">*</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span>
</span></code></pre> to be printed at a relative
indentation of <pre><code><span class="syntax-root"><span class="syntax-number">1</span>
</span></code></pre> in the logical block.<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">PROD</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">X</span> <span class="syntax-interned-symbol">Y</span>)</span> 
  <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-*">*</a> <span class="syntax-interned-symbol">X</span> <span class="syntax-interned-symbol">Y</span>)</span>)</span>
</span></code></pre> <br/>If the line width available is <pre><code><span class="syntax-root"><span class="syntax-number">15</span>
</span></code></pre>, a line break is also inserted at the
fill style conditional newline before the argument list.  The call on
<pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="#function-pprint-indent">pprint-indent</a> <span class="syntax-keyword-symbol">:current</span> <span class="syntax-number">0</span>)</span>
</span></code></pre> causes the argument list to line up under the
function name.<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">PROD</span>
       <span class="syntax-cons">(<span class="syntax-interned-symbol">X</span> <span class="syntax-interned-symbol">Y</span>)</span>
  <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-*">*</a> <span class="syntax-interned-symbol">X</span> <span class="syntax-interned-symbol">Y</span>)</span>)</span>
</span></code></pre><br/>If <a class="variable-reference" href="#variable-*print-miser-width*">*print-miser-width*</a> were greater than or equal to 14, the example 
output above would have been as follows, because all indentation changes 
are ignored in miser mode and line breaks are inserted at 
miser-style conditional newlines.<a id="index/text-miser-style conditional newline"></a><br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a>
 <span class="syntax-interned-symbol">PROD</span>
 <span class="syntax-cons">(<span class="syntax-interned-symbol">X</span> <span class="syntax-interned-symbol">Y</span>)</span>
 <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-*">*</a> <span class="syntax-interned-symbol">X</span> <span class="syntax-interned-symbol">Y</span>)</span>)</span>
</span></code></pre> <br/>As an example of a per-line prefix, consider that evaluating the following
produces the output shown with a line width of <pre><code><span class="syntax-root"><span class="syntax-number">20</span>
</span></code></pre> and
<a class="variable-reference" href="#variable-*print-miser-width*">*print-miser-width*</a> of <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.<br/><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="macro-reference" href="#macro-pprint-logical-block">pprint-logical-block</a> <span class="syntax-cons">(<a class="variable-reference" href="chapter-21.xhtml#variable-*standard-output*">*standard-output*</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-keyword-symbol">:per-line-prefix</span> <span class="syntax-string">";;; "</span>)</span>
   <span class="syntax-cons">(<span class="syntax-interned-symbol">simple-pprint-defun</span> <a class="variable-reference" href="chapter-21.xhtml#variable-*standard-output*">*standard-output*</a> <span class="syntax-quote">'<span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">prod</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-*">*</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span>)</span></span>)</span>)</span>
 
 ;;; (DEFUN PROD
 ;;;        (X Y)
 ;;;   (* X Y))
</span></code></pre><br/>As a more complex (and realistic) example, consider the function <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">pprint-let</span>
</span></code></pre>
below.  This specifies how to print a <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> in the traditional
style.  It is more complex than the example above, because it has to deal with
nested structure.  Also, unlike the example above it contains complete code to 
readably print any possible list that begins with the <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a>.
The outermost <a class="macro-reference" href="#macro-pprint-logical-block">pprint-logical-block</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> handles the printing of
the input list as a whole and specifies that parentheses should be printed in the
output.  The second <a class="macro-reference" href="#macro-pprint-logical-block">pprint-logical-block</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> handles the list 
of binding pairs.  Each pair in the list is itself printed by the innermost
<a class="macro-reference" href="#macro-pprint-logical-block">pprint-logical-block</a>.  (A <a class="macro-reference" href="chapter-6.xhtml#macro-loop">loop</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> is used instead of
merely decomposing the pair into two <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a> so that readable output will
be produced no matter whether the list corresponding to the pair has one element,
two elements, or (being malformed) has more than two elements.)   
A space and a 
fill-style conditional newline<a id="index/text-fill-style conditional newline"></a>
are placed after
each pair except the last.  The loop at the end of the topmost
<a class="macro-reference" href="#macro-pprint-logical-block">pprint-logical-block</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> prints out the forms in the body
of the <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> separated by spaces and 
linear-style conditional newlines.<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">pprint-let</span> <span class="syntax-cons">(<a class="variable-reference" href="chapter-21.xhtml#variable-*standard-output*">*standard-output*</a> <a class="function-reference" href="chapter-14.xhtml#function-list">list</a>)</span>
  <span class="syntax-cons">(<a class="macro-reference" href="#macro-pprint-logical-block">pprint-logical-block</a> <span class="syntax-cons">(<a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-keyword-symbol">:prefix</span> <span class="syntax-string">"("</span> <span class="syntax-keyword-symbol">:suffix</span> <span class="syntax-string">")"</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="#function-write">write</a> <span class="syntax-cons">(<a class="macro-reference" href="#macro-pprint-pop">pprint-pop</a>)</span>)</span>
    <span class="syntax-cons">(<a class="macro-reference" href="#macro-pprint-exit-if-list-exhausted">pprint-exit-if-list-exhausted</a>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="chapter-21.xhtml#function-write-char">write-char</a> <span class="syntax-character">#\Space</span>)</span>
    <span class="syntax-cons">(<a class="macro-reference" href="#macro-pprint-logical-block">pprint-logical-block</a> <span class="syntax-cons">(<a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-cons">(<a class="macro-reference" href="#macro-pprint-pop">pprint-pop</a>)</span> <span class="syntax-keyword-symbol">:prefix</span> <span class="syntax-string">"("</span> <span class="syntax-keyword-symbol">:suffix</span> <span class="syntax-string">")"</span>)</span>
      <span class="syntax-cons">(<a class="macro-reference" href="#macro-pprint-exit-if-list-exhausted">pprint-exit-if-list-exhausted</a>)</span>
      <span class="syntax-cons">(<a class="macro-reference" href="chapter-6.xhtml#macro-loop">loop</a> <span class="syntax-cons">(<a class="macro-reference" href="#macro-pprint-logical-block">pprint-logical-block</a> <span class="syntax-cons">(<a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-cons">(<a class="macro-reference" href="#macro-pprint-pop">pprint-pop</a>)</span> <span class="syntax-keyword-symbol">:prefix</span> <span class="syntax-string">"("</span> <span class="syntax-keyword-symbol">:suffix</span> <span class="syntax-string">")"</span>)</span>
              <span class="syntax-cons">(<a class="macro-reference" href="#macro-pprint-exit-if-list-exhausted">pprint-exit-if-list-exhausted</a>)</span>
              <span class="syntax-cons">(<a class="macro-reference" href="chapter-6.xhtml#macro-loop">loop</a> <span class="syntax-cons">(<a class="function-reference" href="#function-write">write</a> <span class="syntax-cons">(<a class="macro-reference" href="#macro-pprint-pop">pprint-pop</a>)</span>)</span>
                    <span class="syntax-cons">(<a class="macro-reference" href="#macro-pprint-exit-if-list-exhausted">pprint-exit-if-list-exhausted</a>)</span>
                    <span class="syntax-cons">(<a class="function-reference" href="chapter-21.xhtml#function-write-char">write-char</a> <span class="syntax-character">#\Space</span>)</span>
                    <span class="syntax-cons">(<a class="function-reference" href="#function-pprint-newline">pprint-newline</a> <span class="syntax-keyword-symbol">:linear</span>)</span>)</span>)</span>
            <span class="syntax-cons">(<a class="macro-reference" href="#macro-pprint-exit-if-list-exhausted">pprint-exit-if-list-exhausted</a>)</span>
            <span class="syntax-cons">(<a class="function-reference" href="chapter-21.xhtml#function-write-char">write-char</a> <span class="syntax-character">#\Space</span>)</span>
            <span class="syntax-cons">(<a class="function-reference" href="#function-pprint-newline">pprint-newline</a> <span class="syntax-keyword-symbol">:fill</span>)</span>)</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="#function-pprint-indent">pprint-indent</a> <span class="syntax-keyword-symbol">:block</span> <span class="syntax-number">1</span>)</span>
    <span class="syntax-cons">(<a class="macro-reference" href="chapter-6.xhtml#macro-loop">loop</a> <span class="syntax-cons">(<a class="macro-reference" href="#macro-pprint-exit-if-list-exhausted">pprint-exit-if-list-exhausted</a>)</span>
          <span class="syntax-cons">(<a class="function-reference" href="chapter-21.xhtml#function-write-char">write-char</a> <span class="syntax-character">#\Space</span>)</span>
          <span class="syntax-cons">(<a class="function-reference" href="#function-pprint-newline">pprint-newline</a> <span class="syntax-keyword-symbol">:linear</span>)</span>
          <span class="syntax-cons">(<a class="function-reference" href="#function-write">write</a> <span class="syntax-cons">(<a class="macro-reference" href="#macro-pprint-pop">pprint-pop</a>)</span>)</span>)</span>)</span>)</span>
</span></code></pre><br/>Suppose that one evaluates the following with <a class="variable-reference" href="#variable-*print-level*">*print-level*</a> being 4, 
and <a class="variable-reference" href="#variable-*print-circle*">*print-circle*</a> being <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>.<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">pprint-let</span> <a class="variable-reference" href="chapter-21.xhtml#variable-*standard-output*">*standard-output*</a>
            <span class="syntax-quote">'<span class="syntax-feature-expression">#1=(let (x (*print-length* (f (g 3))) 
                      (z . 2) (k (car y)))
                  (setq x (sqrt z)) #1#)</span></span>)</span>
</span></code></pre><br/>If the line length is greater than or equal to <pre><code><span class="syntax-root"><span class="syntax-number">77</span>
</span></code></pre>, the output produced
appears on one line.  However, if the line length is <pre><code><span class="syntax-root"><span class="syntax-number">76</span>
</span></code></pre>, line breaks are
inserted at the linear-style conditional newlines separating the forms in
the body and the output below is produced.  Note that, the degenerate
binding pair <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">x</span>
</span></code></pre> is printed readably even though it fails to be a list; a
depth abbreviation marker is printed in place of <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">g</span> <span class="syntax-number">3</span>)</span>
</span></code></pre>; the binding pair
<pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">z</span> <span class="syntax-symbol">.</span> <span class="syntax-number">2</span>)</span>
</span></code></pre> is printed readably even though it is not a proper list; and
appropriate circularity markers are printed.<br/><pre><code><span class="syntax-root"><span class="syntax-feature-expression">#1=(LET (X (*PRINT-LENGTH* (F #)) (Z . 2) (K (CAR Y))) 
     (SETQ X (SQRT Z))
     #1#)
Â¶</span></span></code></pre><br/>If the line length is reduced to <pre><code><span class="syntax-root"><span class="syntax-number">35</span>
</span></code></pre>, a line break is inserted at one of the
fill-style conditional newlines separating the binding pairs.<br/><pre><code><span class="syntax-root"><span class="syntax-feature-expression">#1=(LET (X (*PRINT-PRETTY* (F #))
         (Z . 2) (K (CAR Y)))
     (SETQ X (SQRT Z))
     #1#)
Â¶</span></span></code></pre><br/>Suppose that the line length is further reduced to <pre><code><span class="syntax-root"><span class="syntax-number">22</span>
</span></code></pre> and <a class="variable-reference" href="#variable-*print-length*">*print-length*</a> is
set to <pre><code><span class="syntax-root"><span class="syntax-number">3</span>
</span></code></pre>. In this situation, line breaks are inserted after both the first
and second binding pairs.  In addition, the second binding pair is itself
broken across two lines.  Clause (b) of the description of fill-style
conditional newlines (see the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="#function-pprint-newline">pprint-newline</a>) 
prevents the binding pair <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">z</span> <span class="syntax-symbol">.</span> <span class="syntax-number">2</span>)</span>
</span></code></pre> from being printed
at the end of the third line.  Note that the length abbreviation hides the
circularity from view and therefore the printing of circularity markers
disappears.<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">X</span>
      <span class="syntax-cons">(<a class="variable-reference" href="#variable-*print-length*">*print-length*</a>
       <span class="syntax-cons">(<span class="syntax-interned-symbol">F</span> <span class="syntax-symbol">#)</span>)</span>
      <span class="syntax-cons">(<span class="syntax-interned-symbol">Z</span> <span class="syntax-symbol">.</span> <span class="syntax-number">2</span>)</span> <span class="syntax-interned-symbol">...</span>)</span>
  <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">X</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-sqrt">sqrt</a> <span class="syntax-interned-symbol">Z</span>)</span>)</span>
  <span class="syntax-interned-symbol">...</span>)</span>
Â¶</span></span></code></pre><br/>The next function prints a vector using ``<pre><code><span class="syntax-root">#<span class="syntax-cons">(<span class="syntax-interned-symbol">...</span>)</span>
</span></code></pre>'' notation.<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">pprint-vector</span> <span class="syntax-cons">(<a class="variable-reference" href="chapter-21.xhtml#variable-*standard-output*">*standard-output*</a> <span class="syntax-interned-symbol">v</span>)</span>
  <span class="syntax-cons">(<a class="macro-reference" href="#macro-pprint-logical-block">pprint-logical-block</a> <span class="syntax-cons">(<a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-keyword-symbol">:prefix</span> <span class="syntax-string">"#("</span> <span class="syntax-keyword-symbol">:suffix</span> <span class="syntax-string">")"</span>)</span>
    <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">end</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-17.xhtml#function-length">length</a> <span class="syntax-interned-symbol">v</span>)</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">i</span> <span class="syntax-number">0</span>)</span>)</span>
      <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-when">when</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-plusp">plusp</a> <span class="syntax-interned-symbol">end</span>)</span>
        <span class="syntax-cons">(<a class="macro-reference" href="chapter-6.xhtml#macro-loop">loop</a> <span class="syntax-cons">(<a class="macro-reference" href="#macro-pprint-pop">pprint-pop</a>)</span>
              <span class="syntax-cons">(<a class="function-reference" href="#function-write">write</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-15.xhtml#function-aref">aref</a> <span class="syntax-interned-symbol">v</span> <span class="syntax-interned-symbol">i</span>)</span>)</span>
              <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-=">=</a> <span class="syntax-cons">(<a class="macro-reference" href="chapter-12.xhtml#macro-incf">incf</a> <span class="syntax-interned-symbol">i</span>)</span> <span class="syntax-interned-symbol">end</span>)</span> <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-return">return</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span>)</span>
              <span class="syntax-cons">(<a class="function-reference" href="chapter-21.xhtml#function-write-char">write-char</a> <span class="syntax-character">#\Space</span>)</span>
              <span class="syntax-cons">(<a class="function-reference" href="#function-pprint-newline">pprint-newline</a> <span class="syntax-keyword-symbol">:fill</span>)</span>)</span>)</span>)</span>)</span>)</span>
</span></code></pre><br/>Evaluating the following with a line length of 15 produces the output shown.<br/><pre><code><span class="syntax-root"> <span class="syntax-cons">(<span class="syntax-interned-symbol">pprint-vector</span> <a class="variable-reference" href="chapter-21.xhtml#variable-*standard-output*">*standard-output*</a> <span class="syntax-quote">'<span class="syntax-vector">#(<span class="syntax-number">12</span> <span class="syntax-number">34</span> <span class="syntax-number">567</span> <span class="syntax-number">8</span> <span class="syntax-number">9012</span> <span class="syntax-number">34</span> <span class="syntax-number">567</span> <span class="syntax-number">89</span> <span class="syntax-number">0</span> <span class="syntax-number">1</span> <span class="syntax-number">23</span>)</span></span>)</span>
 
 <span class="syntax-vector">#(<span class="syntax-number">12</span> <span class="syntax-number">34</span> <span class="syntax-number">567</span> <span class="syntax-number">8</span> 
   <span class="syntax-number">9012</span> <span class="syntax-number">34</span> <span class="syntax-number">567</span> 
   <span class="syntax-number">89</span> <span class="syntax-number">0</span> <span class="syntax-number">1</span> <span class="syntax-number">23</span>)</span>
</span></code></pre><br/>As examples of the convenience of specifying pretty printing with 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-format string">format strings</a>, consider that the functions <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">simple-pprint-defun</span>
</span></code></pre>
and <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">pprint-let</span>
</span></code></pre> used as examples above can be compactly defined as follows.
(The function <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">pprint-vector</span>
</span></code></pre> cannot be defined using <a class="function-reference" href="#function-format">format</a>
because the data structure it traverses is not a list.)<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">simple-pprint-defun</span> <span class="syntax-cons">(<a class="variable-reference" href="chapter-21.xhtml#variable-*standard-output*">*standard-output*</a> <a class="function-reference" href="chapter-14.xhtml#function-list">list</a>)</span>
  <span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a> <span class="syntax-string">"~:&lt;~W ~@_~:I~W ~:_~W~1I ~_~W~:&gt;"</span> <a class="function-reference" href="chapter-14.xhtml#function-list">list</a>)</span>)</span>

<span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">pprint-let</span> <span class="syntax-cons">(<a class="variable-reference" href="chapter-21.xhtml#variable-*standard-output*">*standard-output*</a> <a class="function-reference" href="chapter-14.xhtml#function-list">list</a>)</span>
  <span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a> <span class="syntax-string">"~:&lt;~W~^~:&lt;~@{~:&lt;~@{~W~^~_~}~:&gt;~^~:_~}~:&gt;~1I~@{~^~_~W~}~:&gt;"</span> <a class="function-reference" href="chapter-14.xhtml#function-list">list</a>)</span>)</span> 
</span></code></pre><br/>In the following example, the first <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> restores
<a class="variable-reference" href="#variable-*print-pprint-dispatch*">*print-pprint-dispatch*</a> to the equivalent of its initial value.
The next two forms then set up a special way to pretty print ratios.
Note that the more specific <a class="glossary-reference" href="chapter-26.xhtml#glossary-type specifier">type specifier</a> has to be associated
with a higher priority.<br/><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <a class="variable-reference" href="#variable-*print-pprint-dispatch*">*print-pprint-dispatch*</a> <span class="syntax-cons">(<a class="function-reference" href="#function-copy-pprint-dispatch">copy-pprint-dispatch</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span>)</span>

 <span class="syntax-cons">(<a class="function-reference" href="#function-set-pprint-dispatch">set-pprint-dispatch</a> <span class="syntax-quote">'<a class="symbol-reference" href="#symbol-ratio">ratio</a></span>
   <span class="syntax-function">#'<span class="syntax-cons">(<a class="macro-reference" href="chapter-3.xhtml#macro-lambda">lambda</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">s</span> <span class="syntax-interned-symbol">obj</span>)</span>
       <span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <span class="syntax-interned-symbol">s</span> <span class="syntax-string">"#.(/ ~W ~W)"</span> 
                 <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-numerator">numerator</a> <span class="syntax-interned-symbol">obj</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-denominator">denominator</a> <span class="syntax-interned-symbol">obj</span>)</span>)</span>)</span></span>)</span>

 <span class="syntax-cons">(<a class="function-reference" href="#function-set-pprint-dispatch">set-pprint-dispatch</a> <span class="syntax-quote">'<span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-and">and</a> <a class="symbol-reference" href="#symbol-ratio">ratio</a> <span class="syntax-cons">(<a class="type-reference" href="chapter-4.xhtml#type-satisfies">satisfies</a> <a class="function-reference" href="chapter-12.xhtml#function-minusp">minusp</a>)</span>)</span></span>
   <span class="syntax-function">#'<span class="syntax-cons">(<a class="macro-reference" href="chapter-3.xhtml#macro-lambda">lambda</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">s</span> <span class="syntax-interned-symbol">obj</span>)</span>
       <span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <span class="syntax-interned-symbol">s</span> <span class="syntax-string">"#.(- (/ ~W ~W))"</span> 
               <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function--">-</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-numerator">numerator</a> <span class="syntax-interned-symbol">obj</span>)</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-denominator">denominator</a> <span class="syntax-interned-symbol">obj</span>)</span>)</span>)</span></span>
   <span class="syntax-number">5</span>)</span>

 <span class="syntax-cons">(<a class="function-reference" href="#function-pprint">pprint</a> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-number">1/3</span> <span class="syntax-number">-2/3</span>)</span></span>)</span>
 <span class="syntax-cons">(<span class="syntax-number">#.<span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-/">/</a> <span class="syntax-number">1</span> <span class="syntax-number">3</span>)</span></span> #.<span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function--">-</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-/">/</a> <span class="syntax-number">2</span> <span class="syntax-number">3</span>)</span>)</span>)</span>
</span></code></pre><br/>The following two <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a> illustrate the definition of 
pretty printing functions for types of <a class="glossary-reference" href="chapter-26.xhtml#glossary-code">code</a>.  The first
<a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> illustrates how to specify the traditional method 
for printing quoted objects using <a class="glossary-reference" href="chapter-26.xhtml#glossary-single-quote">single-quote</a>.  Note
the care taken to ensure that data lists that happen to begin
with <a class="symbol-reference" href="chapter-2.xhtml#symbol-quote">quote</a> will be printed readably.  The second form 
specifies that lists beginning with the symbol <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">my-let</span>
</span></code></pre>
should print the same way that lists beginning with <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a>
print when the initial <a class="glossary-reference" href="chapter-26.xhtml#glossary-pprint dispatch table">pprint dispatch table</a> is in effect.<br/><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="function-reference" href="#function-set-pprint-dispatch">set-pprint-dispatch</a> <span class="syntax-quote">'<span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-cons">cons</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-member">member</a> <a class="special-operator-reference" href="chapter-3.xhtml#special-operator-quote">quote</a>)</span>)</span></span> <span class="syntax-symbol">()</span> 
   <span class="syntax-function">#'<span class="syntax-cons">(<a class="macro-reference" href="chapter-3.xhtml#macro-lambda">lambda</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">s</span> <a class="function-reference" href="chapter-14.xhtml#function-list">list</a>)</span>
       <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-and">and</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-consp">consp</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-cdr">cdr</a> <a class="function-reference" href="chapter-14.xhtml#function-list">list</a>)</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-null">null</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-cddr">cddr</a> <a class="function-reference" href="chapter-14.xhtml#function-list">list</a>)</span>)</span>)</span>
          <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-funcall">funcall</a> <span class="syntax-cons">(<a class="macro-reference" href="#macro-formatter">formatter</a> <span class="syntax-string">"'~W"</span>)</span> <span class="syntax-interned-symbol">s</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-cadr">cadr</a> <a class="function-reference" href="chapter-14.xhtml#function-list">list</a>)</span>)</span>
          <span class="syntax-cons">(<a class="function-reference" href="#function-pprint-fill">pprint-fill</a> <span class="syntax-interned-symbol">s</span> <a class="function-reference" href="chapter-14.xhtml#function-list">list</a>)</span>)</span>)</span></span>)</span>
 
 <span class="syntax-cons">(<a class="function-reference" href="#function-set-pprint-dispatch">set-pprint-dispatch</a> <span class="syntax-quote">'<span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-cons">cons</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-member">member</a> <span class="syntax-interned-symbol">my-let</span>)</span>)</span></span> 
                      <span class="syntax-cons">(<a class="function-reference" href="#function-pprint-dispatch">pprint-dispatch</a> <span class="syntax-quote">'<span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a>)</span></span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span>)</span>
</span></code></pre><br/>The next example specifies a default method for printing lists that do not
correspond to function calls.  Note that the functions <a class="function-reference" href="#function-pprint-linear">pprint-linear</a>,
<a class="function-reference" href="#function-pprint-fill">pprint-fill</a>, and <a class="function-reference" href="#function-pprint-tabular">pprint-tabular</a> are all defined with
optional <span class="parameter">colon-p</span> and <span class="parameter">at-sign-p</span> arguments so that they can 
be used as <span class="function-reference error">function:pprint dispatch functions</span> as well as <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">/.../</span> 
functions.<br/><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="function-reference" href="#function-set-pprint-dispatch">set-pprint-dispatch</a> <span class="syntax-quote">'<span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-cons">cons</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-not">not</a> <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-and">and</a> <a class="symbol-reference" href="chapter-2.xhtml#symbol-symbol">symbol</a> <span class="syntax-cons">(<a class="type-reference" href="chapter-4.xhtml#type-satisfies">satisfies</a> <a class="function-reference" href="chapter-5.xhtml#function-fboundp">fboundp</a>)</span>)</span>)</span>)</span></span>
                      <span class="syntax-function">#'<a class="function-reference" href="#function-pprint-fill">pprint-fill</a></span> <span class="syntax-number">-5</span>)</span>
 
 ;; Assume a line length of 9
 <span class="syntax-cons">(<a class="function-reference" href="#function-pprint">pprint</a> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-number">0</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">d</span> <span class="syntax-interned-symbol">e</span> <span class="syntax-interned-symbol">f</span> <span class="syntax-interned-symbol">g</span> <span class="syntax-interned-symbol">h</span> <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">j</span> <span class="syntax-interned-symbol">k</span>)</span></span>)</span>
 <span class="syntax-cons">(<span class="syntax-number">0</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">d</span>
  <span class="syntax-interned-symbol">e</span> <span class="syntax-interned-symbol">f</span> <span class="syntax-interned-symbol">g</span> <span class="syntax-interned-symbol">h</span>
  <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">j</span> <span class="syntax-interned-symbol">k</span>)</span>
</span></code></pre> <br/>This final example shows how to define a pretty printing function for a
user defined data structure.<br/><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="macro-reference" href="chapter-8.xhtml#macro-defstruct">defstruct</a> <span class="syntax-interned-symbol">family</span> <span class="syntax-interned-symbol">mom</span> <span class="syntax-interned-symbol">kids</span>)</span>
 
 <span class="syntax-cons">(<a class="function-reference" href="#function-set-pprint-dispatch">set-pprint-dispatch</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">family</span></span>
   <span class="syntax-function">#'<span class="syntax-cons">(<a class="macro-reference" href="chapter-3.xhtml#macro-lambda">lambda</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">s</span> <span class="syntax-interned-symbol">f</span>)</span>
       <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-funcall">funcall</a> <span class="syntax-cons">(<a class="macro-reference" href="#macro-formatter">formatter</a> <span class="syntax-string">"~@&lt;#&lt;~;~W and ~2I~_~/pprint-fill/~;&gt;~:&gt;"</span>)</span>
               <span class="syntax-interned-symbol">s</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">family-mom</span> <span class="syntax-interned-symbol">f</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">family-kids</span> <span class="syntax-interned-symbol">f</span>)</span>)</span>)</span></span>)</span>
</span></code></pre><br/>The pretty printing function for the structure <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">family</span>
</span></code></pre> specifies how to
adjust the layout of the output so that it can fit aesthetically into
a variety of line widths.  In addition, it obeys 
the printer control variables <a class="variable-reference" href="#variable-*print-level*">*print-level*</a>,
<a class="variable-reference" href="#variable-*print-length*">*print-length*</a>, <a class="variable-reference" href="#variable-*print-lines*">*print-lines*</a>,
<a class="variable-reference" href="#variable-*print-circle*">*print-circle*</a>
and <a class="variable-reference" href="#variable-*print-escape*">*print-escape*</a>,
and can tolerate several different kinds of malformity in the data structure.
The output below shows what is printed out with a right margin of <pre><code><span class="syntax-root"><span class="syntax-number">25</span>
</span></code></pre>,
<a class="variable-reference" href="#variable-*print-pretty*">*print-pretty*</a> being <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>, <a class="variable-reference" href="#variable-*print-escape*">*print-escape*</a> being <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>,
and a malformed <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">kids</span>
</span></code></pre> list.<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="#function-write">write</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">principal-family</span></span>
             <span class="syntax-cons">(<span class="syntax-interned-symbol">make-family</span> <span class="syntax-keyword-symbol">:mom</span> <span class="syntax-string">"Lucy"</span>
                          <span class="syntax-keyword-symbol">:kids</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-string">"Mark"</span> <span class="syntax-string">"Bob"</span> <span class="syntax-symbol">.</span> <span class="syntax-string">"Dan"</span>)</span></span>)</span>)</span>
       <span class="syntax-keyword-symbol">:right-margin</span> <span class="syntax-number">25</span> <span class="syntax-keyword-symbol">:pretty</span> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a> <span class="syntax-keyword-symbol">:escape</span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-keyword-symbol">:miser-width</span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span>
<span class="syntax-cons">(<span class="syntax-interned-symbol">PRINCIPAL-FAMILY</span>
 <span class="syntax-verbatim">#&lt;Lucy and
     Mark Bob . Dan&gt;</span>)</span>
</span></code></pre><br/>Note that a pretty printing function for a structure is different from
the structure's <a class="function-reference" href="#function-print-object">print-object</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a>.
While
<a class="function-reference" href="#function-print-object">print-object</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a>
are permanently associated with a structure,
pretty printing functions are stored in 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-pprint dispatch table">pprint dispatch tables</a> and can be rapidly changed to reflect 
different printing needs.  If there is no pretty printing function for 
a structure in the current <a class="glossary-reference" href="chapter-26.xhtml#glossary-pprint dispatch table">pprint dispatch table</a>,
its <a class="function-reference" href="#function-print-object">print-object</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a>
is used instead.

</section><section id="section-NotesaboutthePrettyPrinter'sBackground"><h3 class="section-title">Notes about the Pretty Printer's Background</h3>For a background reference to the abstract concepts detailed in this
section, see <span class="explicit-italic"> XP: A Common Lisp Pretty Printing System</span>.  The details of that paper are not binding on
this document, but may be helpful in establishing a conceptual basis for
understanding this material.<br/></section>
</section><section id="section-FormattedOutput"><h2 class="section-title">Formatted Output</h2>

<br/><a class="function-reference" href="#function-format">format</a> is useful for producing nicely formatted text, producing
good-looking messages, and so on.  <a class="function-reference" href="#function-format">format</a> can generate and return
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-string">string</a> or output to <span class="parameter">destination</span>.<br/>The <span class="parameter">control-string</span> argument to <a class="function-reference" href="#function-format">format</a> is actually a <a class="glossary-reference" href="chapter-26.xhtml#glossary-format control">format control</a>.
That is, it can be either a <a class="glossary-reference" href="chapter-26.xhtml#glossary-format string">format string</a> or a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a>,
for example a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> returned
by the <a class="macro-reference" href="#macro-formatter">formatter</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a>.<br/>If it is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a>, the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> is called with the appropriate
output stream as its first argument and the data arguments to <a class="function-reference" href="#function-format">format</a>
as its remaining arguments.  The function should perform whatever output is 
necessary and return the unused tail of the arguments (if any).<br/>The compilation process performed by <a class="macro-reference" href="#macro-formatter">formatter</a> produces a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a>
that would do with its <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">arguments</a> as the <a class="function-reference" href="#function-format">format</a> interpreter
would do with those <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">arguments</a>.<br/>The remainder of this section describes what happens if the <span class="parameter">control-string</span>
is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-format string">format string</a>.  
<br/>
<span class="parameter">Control-string</span> is composed of simple text (<a class="glossary-reference" href="chapter-26.xhtml#glossary-character">characters</a>) 
and embedded directives.<br/><a class="function-reference" href="#function-format">format</a> writes the simple text as is;
each embedded directive specifies further text output 
that is to appear at the corresponding point within the simple text.  
Most directives use one or more elements of <span class="parameter">args</span> to
create their output.<br/>A directive consists of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-tilde">tilde</a>,
optional prefix parameters
separated by commas, optional <a class="glossary-reference" href="chapter-26.xhtml#glossary-colon">colon</a> and <a class="glossary-reference" href="chapter-26.xhtml#glossary-at-sign">at-sign</a> modifiers,
and a single character indicating what kind of directive this is.
There is no required ordering between the <a class="glossary-reference" href="chapter-26.xhtml#glossary-at-sign">at-sign</a> and <a class="glossary-reference" href="chapter-26.xhtml#glossary-colon">colon</a> modifier.
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-case">case</a> of the directive character is ignored.
Prefix parameters are notated as signed (sign is optional) decimal numbers,
or as a <a class="glossary-reference" href="chapter-26.xhtml#glossary-single-quote">single-quote</a> followed by a character.
For example, <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~5</span><span class="syntax-verbatim">,</span><span class="syntax-quote">'<span class="syntax-interned-symbol">0d</span></span>
</span></code></pre> can be used
to print an <a class="glossary-reference" href="chapter-26.xhtml#glossary-integer">integer</a> 
in decimal radix in five columns with leading zeros,
or <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~5</span><span class="syntax-verbatim">,</span><span class="syntax-quote">'<span class="syntax-interned-symbol">*d</span></span>
</span></code></pre> to get leading asterisks.<br/>In place of a prefix parameter to a directive, <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">V</span>
</span></code></pre> (or <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">v</span>
</span></code></pre>) can be used. 
In this case, <a class="function-reference" href="#function-format">format</a> takes an argument from <span class="parameter">args</span> as a parameter to
the directive.  The argument should be an <a class="glossary-reference" href="chapter-26.xhtml#glossary-integer">integer</a> or <a class="glossary-reference" href="chapter-26.xhtml#glossary-character">character</a>.
If the <span class="parameter">arg</span> used by a <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">V</span>
</span></code></pre> parameter is <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>,
the effect is as if the parameter had been omitted.
<pre><code><span class="syntax-root">#
</span></code></pre> can be used in place of a prefix parameter; it
represents the number of <span class="parameter">args</span> remaining to be processed.
When used within a recursive format, in the context of <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~?</span>
</span></code></pre> or <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\{</span>
</span></code></pre>,
the <pre><code><span class="syntax-root">#
</span></code></pre> prefix parameter represents the number of <a class="glossary-reference" href="chapter-26.xhtml#glossary-format argument">format arguments</a>
remaining within the recursive call.<br/>Examples of <a class="glossary-reference" href="chapter-26.xhtml#glossary-format string">format strings</a>:<br/><span class="float" id="figure-Examples of format control strings"><table><tbody><tr><td><pre><code><span class="syntax-root"><span class="syntax-string">"~S"</span>
</span></code></pre>       </td><td> ;This is an S directive with no parameters or modifiers.       </td></tr><tr><td><pre><code><span class="syntax-root"><span class="syntax-string">"~3,-4:@s"</span>
</span></code></pre> </td><td> ;This is an S directive with two parameters, <pre><code><span class="syntax-root"><span class="syntax-number">3</span>
</span></code></pre> and <pre><code><span class="syntax-root"><span class="syntax-number">-4</span>
</span></code></pre>, </td></tr><tr><td/><td> ; and both the <a class="glossary-reference" href="chapter-26.xhtml#glossary-colon">colon</a> and <a class="glossary-reference" href="chapter-26.xhtml#glossary-at-sign">at-sign</a> flags.          </td></tr><tr><td><pre><code><span class="syntax-root"><span class="syntax-string">"~,+4S"</span>
</span></code></pre>    </td><td> ;Here the first prefix parameter is omitted and takes          </td></tr><tr><td/><td> ; on its default value, while the second parameter is <pre><code><span class="syntax-root"><span class="syntax-number">4</span>
</span></code></pre>.   </td></tr></tbody></table><div class="caption">Examples of format control strings</div></span><br/><a class="function-reference" href="#function-format">format</a> sends the output to <span class="parameter">destination</span>.
If <span class="parameter">destination</span> is <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>,
<a class="function-reference" href="#function-format">format</a> creates and returns a <a class="glossary-reference" href="chapter-26.xhtml#glossary-string">string</a> 
containing the output from <span class="parameter">control-string</span>.
If <span class="parameter">destination</span> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-non-nil">non-nil</a>, 
it must be a <a class="glossary-reference" href="chapter-26.xhtml#glossary-string">string</a> with a <a class="glossary-reference" href="chapter-26.xhtml#glossary-fill pointer">fill pointer</a>, 
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-stream">stream</a>, or the symbol <a class="symbol-reference" href="chapter-5.xhtml#symbol-t">t</a>.
If <span class="parameter">destination</span> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-string">string</a> with a <a class="glossary-reference" href="chapter-26.xhtml#glossary-fill pointer">fill pointer</a>, 
the output is added to the end of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-string">string</a>. 
If <span class="parameter">destination</span> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-stream">stream</a>, 
the output is sent to that <a class="glossary-reference" href="chapter-26.xhtml#glossary-stream">stream</a>. 
If <span class="parameter">destination</span> is <a class="symbol-reference" href="chapter-5.xhtml#symbol-t">t</a>,
the output is sent to <a class="glossary-reference" href="chapter-26.xhtml#glossary-standard output">standard output</a>.<br/><br/>In the description of the directives that follows,
the term <span class="explicit-italic"> arg</span> in general
refers to the next item of the set of <span class="parameter">args</span> to be processed.
The word or phrase at the beginning of each description is a mnemonic
for the directive.
<a class="function-reference" href="#function-format">format</a> directives do not bind any of the printer control
variables (<span class="variable-reference error">variable:*print-...*</span>) except as specified in the following
descriptions.
   Implementations may specify the binding of new, implementation-specific 
printer control variables for each <a class="function-reference" href="#function-format">format</a> directive, but they
    may neither bind any standard printer control variables not
    specified in description of a <a class="function-reference" href="#function-format">format</a> 
directive nor fail to bind
    any standard printer control variables as specified in the
    description.


<section id="section-FORMATBasicOutput"><h3 class="section-title">FORMAT Basic Output</h3><section id="section-TildeC:Character"><h4 class="section-title">Tilde C: Character</h4><a id="index/text-c (format directive)"></a><a id="index/text-tilde c (format directive)"></a><br/>
               
The next <span class="explicit-italic"> arg</span> should be a <a class="glossary-reference" href="chapter-26.xhtml#glossary-character">character</a>; 
it is printed
according to the modifier flags.<br/>
<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~C</span>
</span></code></pre> prints the <a class="glossary-reference" href="chapter-26.xhtml#glossary-character">character</a> 
as if by using <a class="function-reference" href="chapter-21.xhtml#function-write-char">write-char</a> if it is a <span class="glossary-reference error">glossary:simple character</span>.
<a class="glossary-reference" href="chapter-26.xhtml#glossary-character">Characters</a> that are not <a class="glossary-reference" href="chapter-26.xhtml#glossary-simple">simple</a>
are not necessarily printed as if by <a class="function-reference" href="chapter-21.xhtml#function-write-char">write-char</a>,
but are displayed in an <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-defined">implementation-defined</a>, abbreviated format.
For example,<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"~C"</span> <span class="syntax-character">#\A</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"A"</span>
<span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"~C"</span> <span class="syntax-character">#\Space</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">" "</span>
</span></code></pre>
<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~:C</span>
</span></code></pre> is the same as <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~C</span>
</span></code></pre> for <a class="glossary-reference" href="chapter-26.xhtml#glossary-printing">printing</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-character">characters</a>,
but other <a class="glossary-reference" href="chapter-26.xhtml#glossary-character">characters</a> are ``spelled out.''  The intent is that this
is a ``pretty'' format for printing characters.
For <a class="glossary-reference" href="chapter-26.xhtml#glossary-simple">simple</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-character">characters</a> that are not <a class="glossary-reference" href="chapter-26.xhtml#glossary-printing">printing</a>,
what is spelled out is the <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-character">character</a> (see <a class="function-reference" href="chapter-13.xhtml#function-char-name">char-name</a>).
For <a class="glossary-reference" href="chapter-26.xhtml#glossary-character">characters</a> that are not <a class="glossary-reference" href="chapter-26.xhtml#glossary-simple">simple</a> and not <a class="glossary-reference" href="chapter-26.xhtml#glossary-printing">printing</a>,
what is spelled out is <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-defined">implementation-defined</a>.
For example, <br/><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"~:C"</span> <span class="syntax-character">#\A</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"A"</span>
 <span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"~:C"</span> <span class="syntax-character">#\Space</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"Space"</span>
;; This next example assumes an implementation-defined "Control" attribute.
 <span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"~:C"</span> <span class="syntax-character">#\Control-Space</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"Control-Space"</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mover>or<mi>â†’</mi></mover></math> <span class="syntax-string">"c-Space"</span>
</span></code></pre><br/><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~:@C</span>
</span></code></pre> prints what <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~:C</span>
</span></code></pre> would, and then
if the <a class="glossary-reference" href="chapter-26.xhtml#glossary-character">character</a> requires unusual shift keys on the keyboard to type it,
this fact is mentioned.  For example,<br/><span class="error">unexpanded macro: (:OTHER-COMMAND-APPLICATION NIL :OUTPUT-FILE "chapter-22"
                   :NAME "begingroup" :BOUNDS (7507 . 7518))</span>

<pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"~:@C"</span> <span class="syntax-character">#\Control-Partial</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"Control-<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>âˆ‚</mi></math> (Top-F)"</span>  
</span></code></pre>
<span class="error">unexpanded macro: (:OTHER-COMMAND-APPLICATION NIL :OUTPUT-FILE "chapter-22"
                   :NAME "endgroup" :BOUNDS (7634 . 7643))</span><br/>This is the format used for telling the user about a key he is expected to type,
in prompts, for instance.  The precise output may depend not only
on the implementation, but on the particular I/O devices in use.<br/><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~@C</span>
</span></code></pre> 
prints the <a class="glossary-reference" href="chapter-26.xhtml#glossary-character">character</a> in a way that the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lisp reader">Lisp reader</a> can understand,
using <pre><code><span class="syntax-root">#\
</span></code></pre> syntax.<br/><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~@C</span>
</span></code></pre>  binds <a class="variable-reference" href="#variable-*print-escape*">*print-escape*</a> to <a class="symbol-reference" href="chapter-5.xhtml#symbol-t">t</a>.

</section><section id="section-TildePercent:Newline"><h4 class="section-title">Tilde Percent: Newline</h4><a id="index/text-percent (format directive)"></a><a id="index/text-tilde percent (format directive)"></a><br/>
This outputs a <pre><code><span class="syntax-root">#\Newline
</span></code></pre> character, thereby terminating the current
output line and beginning a new one.
<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\j{n}\%</span>
</span></code></pre> outputs <span class="explicit-italic"> n</span> newlines.
No <span class="explicit-italic"> arg</span> is used.  <br/></section><section id="section-TildeAmpersand:Fresh-Line"><h4 class="section-title">Tilde Ampersand: Fresh-Line</h4><a id="index/text-ampersand (format directive)"></a><a id="index/text-tilde ampersand (format directive)"></a><br/>
Unless it can be determined that the output stream
is already at the beginning of a line,
this outputs a newline.
<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\j{n}\&amp;</span>
</span></code></pre> calls <a class="function-reference" href="chapter-21.xhtml#function-fresh-line">fresh-line</a>
and then outputs <span class="explicit-italic"> n</span><math xmlns="http://www.w3.org/1998/Math/MathML">-</math> 1 newlines.
<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~0\&amp;</span>
</span></code></pre> does nothing.<br/></section><section id="section-TildeVertical-Bar:Page"><h4 class="section-title">Tilde Vertical-Bar: Page</h4><a id="index/text-vertical-bar (format directive)"></a><a id="index/text-tilde vertical-bar (format directive)"></a><br/>
This outputs a page separator character, if possible.
<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\j{n}|
Â¶</span></span></code></pre> does this <span class="explicit-italic"> n</span> times.<br/></section><section id="section-TildeTilde:Tilde"><h4 class="section-title">Tilde Tilde: Tilde</h4><a id="index/text-tilde (format directive)"></a><a id="index/text-tilde tilde (format directive)"></a><br/>This outputs a <a class="glossary-reference" href="chapter-26.xhtml#glossary-tilde">tilde</a>.  <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\j{n}~</span>
</span></code></pre> outputs <span class="explicit-italic"> n</span> tildes.<br/></section></section><section id="section-FORMATRadixControl"><h3 class="section-title">FORMAT Radix Control</h3><section id="section-TildeR:Radix"><h4 class="section-title">Tilde R: Radix</h4><a id="index/text-r (format directive)"></a><a id="index/text-tilde r (format directive)"></a><br/>
<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\j{n}R</span>
</span></code></pre> prints <span class="explicit-italic"> arg</span> in radix <span class="explicit-italic"> n</span>.
The modifier flags and any remaining parameters are used as for
the <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~D</span>
</span></code></pre> directive.
<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~D</span>
</span></code></pre> is the same as <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~10R</span>
</span></code></pre>.  
The full form is 
<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\j{radix}</span><span class="syntax-verbatim">,</span><span class="explicit-italic"> mincol</span><span class="syntax-verbatim">,</span><span class="explicit-italic"> padchar</span><span class="syntax-verbatim">,</span><span class="explicit-italic"> commachar</span><span class="syntax-verbatim">,</span><span class="explicit-italic"> comma-interval</span>R
</span></code></pre>.<br/>If no prefix parameters are given to <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~R</span>
</span></code></pre>, then a different
interpretation is given.  The argument should be an <a class="glossary-reference" href="chapter-26.xhtml#glossary-integer">integer</a>.
For example, if <span class="explicit-italic"> arg</span> is 4:<br/><ul><li><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~R</span>
</span></code></pre> prints <span class="explicit-italic"> arg</span> as a cardinal English number: <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">four</span>
</span></code></pre>.<br/></li><li><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~:R</span>
</span></code></pre> prints <span class="explicit-italic"> arg</span> as an ordinal English number: <pre><code><span class="syntax-root"><a class="function-reference" href="chapter-14.xhtml#function-fourth">fourth</a>
</span></code></pre>.<br/></li><li><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~@R</span>
</span></code></pre> prints <span class="explicit-italic"> arg</span> as a Roman numeral: <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">IV</span>
</span></code></pre>.<br/></li><li><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~:@R</span>
</span></code></pre> prints <span class="explicit-italic"> arg</span> as an old Roman numeral: <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">IIII</span>
</span></code></pre>.
</li></ul><br/>For example:<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"~,,' ,4:B"</span> <span class="syntax-number">13</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"1101"</span>
<span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"~,,' ,4:B"</span> <span class="syntax-number">17</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"1 0001"</span>
<span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"~19,0,' ,4:B"</span> <span class="syntax-number">3333</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"0000 1101 0000 0101"</span>
<span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"~3,,,' ,2:R"</span> <span class="syntax-number">17</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"1 22"</span>
<span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"~,,'|,2:D"</span> <span class="syntax-number">#xFFFF</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math>  <span class="syntax-string">"6|55|35"</span>
</span></code></pre>
If and only if the first parameter, <span class="explicit-italic"> n</span>, is supplied,
<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~R</span>
</span></code></pre> binds
     <a class="variable-reference" href="#variable-*print-escape*">*print-escape*</a> to <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>,
     <a class="variable-reference" href="#variable-*print-radix*">*print-radix*</a> to <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>, 
     <a class="variable-reference" href="#variable-*print-base*">*print-base*</a> to <span class="explicit-italic"> n</span>,
 and <a class="variable-reference" href="#variable-*print-readably*">*print-readably*</a> to <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>.

If and only if no parameters are supplied,
<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~R</span>
</span></code></pre> binds <a class="variable-reference" href="#variable-*print-base*">*print-base*</a> to <pre><code><span class="syntax-root"><span class="syntax-number">10</span>
</span></code></pre>.

</section><section id="section-TildeD:Decimal"><h4 class="section-title">Tilde D: Decimal</h4><a id="index/text-d (format directive)"></a><a id="index/text-tilde d (format directive)"></a><br/>
An <span class="explicit-italic"> arg</span>, which should be an <a class="glossary-reference" href="chapter-26.xhtml#glossary-integer">integer</a>, 
is printed in decimal radix.
<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~D</span>
</span></code></pre> will never put a decimal point after the number.<br/><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\j{mincol}D</span>
</span></code></pre> uses 
a column width of <span class="explicit-italic"> mincol</span>; spaces are inserted on
the left if the number requires fewer than <span class="explicit-italic"> mincol</span> columns for its digits
and sign.  If the number doesn't fit in <span class="explicit-italic"> mincol</span> columns, additional columns
are used as needed.<br/><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\j{mincol}</span><span class="syntax-verbatim">,</span><span class="explicit-italic"> padchar</span>D
</span></code></pre> uses <span class="explicit-italic"> padchar</span> as the pad character
instead of space.<br/>If <span class="explicit-italic"> arg</span> is not an <a class="glossary-reference" href="chapter-26.xhtml#glossary-integer">integer</a>, it is printed in <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~A</span>
</span></code></pre> format and decimal base.<br/>The <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">@</span>
</span></code></pre> modifier causes the number's sign to be printed always; the default
is to print it only if the number is negative.
The <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">:</span>
</span></code></pre> modifier causes commas to be printed between groups of digits;
<span class="explicit-italic"> commachar</span> may be used to change the character used as the comma.
<span class="explicit-italic"> comma-interval</span> 
must be an <a class="glossary-reference" href="chapter-26.xhtml#glossary-integer">integer</a> and defaults to 3.  When the <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">:</span>
</span></code></pre> 
modifier is given to any of
these directives, the <span class="explicit-italic"> commachar</span> 
is printed between groups of <span class="explicit-italic"> comma-interval</span>
digits.

Thus the most general form of <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~D</span>
</span></code></pre> is
<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\j{mincol}</span><span class="syntax-verbatim">,</span><span class="explicit-italic"> padchar</span><span class="syntax-verbatim">,</span><span class="explicit-italic"> commachar</span><span class="syntax-verbatim">,</span><span class="explicit-italic"> comma-interval</span>D
</span></code></pre>.<br/><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~D</span>
</span></code></pre> binds
     <a class="variable-reference" href="#variable-*print-escape*">*print-escape*</a> to <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>,
     <a class="variable-reference" href="#variable-*print-radix*">*print-radix*</a> to <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>,
     <a class="variable-reference" href="#variable-*print-base*">*print-base*</a> to <pre><code><span class="syntax-root"><span class="syntax-number">10</span>
</span></code></pre>,
 and <a class="variable-reference" href="#variable-*print-readably*">*print-readably*</a> to <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>.

</section><section id="section-TildeB:Binary"><h4 class="section-title">Tilde B: Binary</h4><a id="index/text-b (format directive)"></a><a id="index/text-tilde b (format directive)"></a><br/>
This is just like <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~D</span>
</span></code></pre> but prints in binary radix (radix 2)
instead of decimal.  The full form is therefore
<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\j{mincol}</span><span class="syntax-verbatim">,</span><span class="explicit-italic"> padchar</span><span class="syntax-verbatim">,</span><span class="explicit-italic"> commachar</span><span class="syntax-verbatim">,</span><span class="explicit-italic"> comma-interval</span>B
</span></code></pre>.<br/><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~B</span>
</span></code></pre> binds
     <a class="variable-reference" href="#variable-*print-escape*">*print-escape*</a> to <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>,
     <a class="variable-reference" href="#variable-*print-radix*">*print-radix*</a> to <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>,
     <a class="variable-reference" href="#variable-*print-base*">*print-base*</a> to <pre><code><span class="syntax-root"><span class="syntax-number">2</span>
</span></code></pre>,
 and <a class="variable-reference" href="#variable-*print-readably*">*print-readably*</a> to <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>.

</section><section id="section-TildeO:Octal"><h4 class="section-title">Tilde O: Octal</h4><a id="index/text-o (format directive)"></a><a id="index/text-tilde o (format directive)"></a><br/>
This is just like <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~D</span>
</span></code></pre> but prints in octal radix (radix 8)
instead of decimal.  The full form is therefore
<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\j{mincol}</span><span class="syntax-verbatim">,</span><span class="explicit-italic"> padchar</span><span class="syntax-verbatim">,</span><span class="explicit-italic"> commachar</span><span class="syntax-verbatim">,</span><span class="explicit-italic"> comma-interval</span>O
</span></code></pre>.<br/><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~O</span>
</span></code></pre> binds
     <a class="variable-reference" href="#variable-*print-escape*">*print-escape*</a> to <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>,
     <a class="variable-reference" href="#variable-*print-radix*">*print-radix*</a> to <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>,
     <a class="variable-reference" href="#variable-*print-base*">*print-base*</a> to <pre><code><span class="syntax-root"><span class="syntax-number">8</span>
</span></code></pre>,
 and <a class="variable-reference" href="#variable-*print-readably*">*print-readably*</a> to <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>.

</section><section id="section-TildeX:Hexadecimal"><h4 class="section-title">Tilde X: Hexadecimal</h4><a id="index/text-x (format directive)"></a><a id="index/text-tilde x (format directive)"></a><br/>
This is just like <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~D</span>
</span></code></pre> but prints in hexadecimal radix
(radix 16) instead of decimal.  The full form is therefore
<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\j{mincol}</span><span class="syntax-verbatim">,</span><span class="explicit-italic"> padchar</span><span class="syntax-verbatim">,</span><span class="explicit-italic"> commachar</span><span class="syntax-verbatim">,</span><span class="explicit-italic"> comma-interval</span>X
</span></code></pre>.<br/><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~X</span>
</span></code></pre> binds
     <a class="variable-reference" href="#variable-*print-escape*">*print-escape*</a> to <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>,
     <a class="variable-reference" href="#variable-*print-radix*">*print-radix*</a> to <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>,
     <a class="variable-reference" href="#variable-*print-base*">*print-base*</a> to <pre><code><span class="syntax-root"><span class="syntax-number">16</span>
</span></code></pre>,
 and <a class="variable-reference" href="#variable-*print-readably*">*print-readably*</a> to <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>.

</section></section><section id="section-FORMATFloating-PointPrinters"><h3 class="section-title">FORMAT Floating-Point Printers</h3><section id="section-TildeF:Fixed-FormatFloating-Point"><h4 class="section-title">Tilde F: Fixed-Format Floating-Point</h4><a id="index/text-f (format directive)"></a><a id="index/text-tilde f (format directive)"></a><br/>
The next <span class="explicit-italic"> arg</span> is printed as a <a class="glossary-reference" href="chapter-26.xhtml#glossary-float">float</a>.<br/>The full form is <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\j{w}</span><span class="syntax-verbatim">,</span><span class="explicit-italic"> d</span><span class="syntax-verbatim">,</span><span class="explicit-italic"> k</span><span class="syntax-verbatim">,</span><span class="explicit-italic"> overflowchar</span><span class="syntax-verbatim">,</span><span class="explicit-italic"> padchar</span>F
</span></code></pre>.
The parameter <span class="explicit-italic"> w</span>
is the width of the field to be printed; <span class="explicit-italic"> d</span> is the number
of digits to print after the decimal point; <span class="explicit-italic"> k</span> is a scale factor
that defaults to zero.<br/>Exactly <span class="explicit-italic"> w</span> characters will
be output.  First, leading copies of the character <span class="explicit-italic"> padchar</span>
(which defaults to a space) are printed, if necessary, to pad the
field on the left.
If the <span class="explicit-italic"> arg</span> is negative, then a minus sign is printed;
if the <span class="explicit-italic"> arg</span> is not negative, then a plus sign is printed
if and only if the <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">@</span>
</span></code></pre>
modifier was supplied.  Then a sequence
of digits, containing a single embedded decimal point, is printed;
this represents the magnitude of the value of <span class="explicit-italic"> arg</span> times <math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mrow>10</mrow><mo><span class="explicit-italic"> k</span></mo></msup></math>,
rounded to <span class="explicit-italic"> d</span> fractional digits.                         
When rounding up and rounding down would produce printed values
equidistant from the scaled value of <span class="explicit-italic"> arg</span>, then the implementation
is free to use either one.  For example, printing the argument
<pre><code><span class="syntax-root"><span class="syntax-number">6.375</span>
</span></code></pre> using the format <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~4</span><span class="syntax-verbatim">,</span><span class="syntax-interned-symbol">2F</span>
</span></code></pre> may correctly produce
either <pre><code><span class="syntax-root"><span class="syntax-number">6.37</span>
</span></code></pre> or <pre><code><span class="syntax-root"><span class="syntax-number">6.38</span>
</span></code></pre>.
Leading zeros are not permitted, except that a single
zero digit is output before the decimal point if the printed value
is less than one, and this single zero digit is not output
at all if <span class="explicit-italic"> w</span>=<span class="explicit-italic"> d</span>+1.<br/>If it is impossible to print the value in the required format in a field
of width <span class="explicit-italic"> w</span>, then one of two actions is taken.  If the
parameter <span class="explicit-italic"> overflowchar</span> is supplied, then <span class="explicit-italic"> w</span> copies of that
parameter are printed instead of the scaled value of <span class="explicit-italic"> arg</span>.
If the <span class="explicit-italic"> overflowchar</span> parameter is omitted, then the scaled value
is printed using more than <span class="explicit-italic"> w</span> characters, as many more as may be
needed.<br/>If the <span class="explicit-italic"> w</span> parameter is omitted, then the field is of variable width.
In effect, a value is chosen
for <span class="explicit-italic"> w</span> in such a way that no leading pad characters need to be printed
and exactly <span class="explicit-italic"> d</span> characters will follow the decimal point.
For example, the directive <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~</span><span class="syntax-verbatim">,</span><span class="syntax-interned-symbol">2F</span>
</span></code></pre> will print exactly
two digits after the decimal point and as many as necessary before the
decimal point.<br/>If the parameter <span class="explicit-italic"> d</span> is omitted, then there is no constraint
on the number of digits to appear after the decimal point.
A value is chosen for <span class="explicit-italic"> d</span> in such a way that as many digits
as possible may be printed subject to the width constraint
imposed by the parameter <span class="explicit-italic"> w</span> and the constraint that no trailing
zero digits may appear in the fraction, except that if the
fraction to be printed is zero, then a single zero digit should
appear after the decimal point if permitted by the width constraint.<br/>If both <span class="explicit-italic"> w</span> and <span class="explicit-italic"> d</span> are omitted, then the effect is to print
the value using ordinary free-format output; <a class="function-reference" href="#function-prin1">prin1</a> uses this format
for any number whose magnitude is either zero or between
<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mrow>10</mrow><mo>-3</mo></msup></math> (inclusive) and <math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mrow>10</mrow><mo>7</mo></msup></math> (exclusive).<br/>If <span class="explicit-italic"> w</span> is omitted, then if the magnitude of <span class="explicit-italic"> arg</span> is so large (or, if
<span class="explicit-italic"> d</span> is also omitted, so small) that more than 100 digits would have to
be printed, then an implementation is free, at its discretion, to print
the number using exponential notation instead, as if by the directive
<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~E</span>
</span></code></pre> (with all parameters to <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~E</span>
</span></code></pre> defaulted, not
taking their values from the <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~F</span>
</span></code></pre> directive).<br/>If <span class="explicit-italic"> arg</span> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-rational">rational</a> 
number, then it is coerced to be a <a class="glossary-reference" href="chapter-26.xhtml#glossary-single float">single float</a>
and then printed.  Alternatively, an implementation is permitted to
process a <a class="glossary-reference" href="chapter-26.xhtml#glossary-rational">rational</a> 
number by any other method that has essentially the
same behavior but avoids loss of precision or overflow
because of the coercion.  If <span class="explicit-italic"> w</span> and <span class="explicit-italic"> d</span> are
not supplied and the number has no exact decimal representation,
for example <pre><code><span class="syntax-root"><span class="syntax-number">1/3</span>
</span></code></pre>, some precision cutoff must be chosen
by the implementation since only a finite number of digits may be printed.<br/>If <span class="explicit-italic"> arg</span> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-complex">complex</a> number or some non-numeric
<a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>, 
then it is printed using the format directive <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\j{w}D</span>
</span></code></pre>,
thereby printing it in decimal radix and a minimum field width of <span class="explicit-italic"> w</span>.<br/><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~F</span>
</span></code></pre> binds
    <a class="variable-reference" href="#variable-*print-escape*">*print-escape*</a> to <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>
 and <a class="variable-reference" href="#variable-*print-readably*">*print-readably*</a> to <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>.

</section><section id="section-TildeE:ExponentialFloating-Point"><h4 class="section-title">Tilde E: Exponential Floating-Point</h4><a id="index/text-e (format directive)"></a><a id="index/text-tilde e (format directive)"></a><br/>
The next <span class="explicit-italic"> arg</span> is printed as a <a class="glossary-reference" href="chapter-26.xhtml#glossary-float">float</a> in exponential notation.<br/>The full form is
<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\j{w}</span><span class="syntax-verbatim">,</span><span class="explicit-italic"> d</span><span class="syntax-verbatim">,</span><span class="explicit-italic"> e</span><span class="syntax-verbatim">,</span><span class="explicit-italic"> k</span><span class="syntax-verbatim">,</span><span class="explicit-italic"> overflowchar</span><span class="syntax-verbatim">,</span><span class="explicit-italic"> padchar</span><span class="syntax-verbatim">,</span><span class="explicit-italic"> exponentchar</span>E
</span></code></pre>.
The parameter <span class="explicit-italic"> w</span>
is the width of the field to be printed; <span class="explicit-italic"> d</span> is the number
of digits to print after the decimal point; <span class="explicit-italic"> e</span> is the number
of digits to use when printing the exponent;
<span class="explicit-italic"> k</span> is a scale factor that defaults to one (not zero).<br/>Exactly <span class="explicit-italic"> w</span> characters will
be output.  First, leading copies of the character <span class="explicit-italic"> padchar</span>
(which defaults to a space) are printed, if necessary, to pad the
field on the left.
If the <span class="explicit-italic"> arg</span> is negative, then a minus sign is printed;
if the <span class="explicit-italic"> arg</span> is not negative, then a plus sign is printed
if and only if the <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">@</span>
</span></code></pre>
modifier was supplied.  Then a sequence
of digits containing a single embedded decimal point is printed.
The form of this sequence of digits depends on the scale factor <span class="explicit-italic"> k</span>.
If <span class="explicit-italic"> k</span> is zero, then <span class="explicit-italic"> d</span> digits are printed after the decimal
point, and a single zero digit appears before the decimal point if
the total field width will permit it.  If <span class="explicit-italic"> k</span> is positive,
then it must be strictly less than <span class="explicit-italic"> d</span>+2;  <span class="explicit-italic"> k</span> significant digits
are printed before the decimal point, and <span class="explicit-italic"> d</span><math xmlns="http://www.w3.org/1998/Math/MathML">-</math> <span class="explicit-italic"> k</span>+1
digits are printed after the decimal point.  If <span class="explicit-italic"> k</span> is negative,
then it must be strictly greater than <math xmlns="http://www.w3.org/1998/Math/MathML">-</math> <span class="explicit-italic"> d</span>;
a single zero digit appears before the decimal point if
the total field width will permit it, and after the decimal point
are printed first
<math xmlns="http://www.w3.org/1998/Math/MathML">-</math> <span class="explicit-italic"> k</span> zeros and then <span class="explicit-italic"> d</span>+<span class="explicit-italic"> k</span> significant digits.
The printed fraction must be properly rounded.         
When rounding up and rounding down would produce printed values
equidistant from the scaled value of <span class="explicit-italic"> arg</span>, then the implementation
is free to use either one.  For example, printing the argument
<pre><code><span class="syntax-root"><span class="syntax-number">637.5</span>
</span></code></pre> using the format <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~8</span><span class="syntax-verbatim">,</span><span class="syntax-interned-symbol">2E</span>
</span></code></pre> may correctly produce
either <pre><code><span class="syntax-root"><span class="syntax-number">6.37E+2</span>
</span></code></pre> or <pre><code><span class="syntax-root"><span class="syntax-number">6.38E+2</span>
</span></code></pre>.<br/>Following the digit sequence, the exponent is printed.
First the character parameter <span class="explicit-italic"> exponentchar</span> is printed; if this
parameter is omitted, then the <a class="glossary-reference" href="chapter-26.xhtml#glossary-exponent marker">exponent marker</a> that
<a class="function-reference" href="#function-prin1">prin1</a> would use is printed, as determined from the
type of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-float">float</a> and the current value of
<a class="variable-reference" href="chapter-23.xhtml#variable-*read-default-float-format*">*read-default-float-format*</a>.
Next, either a plus sign or a minus sign
is printed, followed by <span class="explicit-italic"> e</span> digits representing the power of
ten by which the printed fraction must be multiplied
to properly represent the rounded value of <span class="explicit-italic"> arg</span>.<br/>If it is impossible to print the value in the required format in a field
of width <span class="explicit-italic"> w</span>, possibly because <span class="explicit-italic"> k</span> is too large or too small
or because the exponent cannot be printed in <span class="explicit-italic"> e</span> character positions,
then one of two actions is taken.  If the
parameter <span class="explicit-italic"> overflowchar</span> is supplied, then <span class="explicit-italic"> w</span> copies of that
parameter are printed instead of the scaled value of <span class="explicit-italic"> arg</span>.
If the <span class="explicit-italic"> overflowchar</span> parameter is omitted, then the scaled value
is printed using more than <span class="explicit-italic"> w</span> characters, as many more as may be
needed; if the problem is that <span class="explicit-italic"> d</span> is too small for the supplied <span class="explicit-italic"> k</span>
or that <span class="explicit-italic"> e</span> is too small, then a larger value is used for <span class="explicit-italic"> d</span> or <span class="explicit-italic"> e</span>
as may be needed.<br/>If the <span class="explicit-italic"> w</span> parameter is omitted, then the field is of variable width.
In effect a value is chosen
for <span class="explicit-italic"> w</span> in such a way that no leading pad characters need to be printed.<br/>If the parameter <span class="explicit-italic"> d</span> is omitted, then there is no constraint
on the number of digits to appear.
A value is chosen for <span class="explicit-italic"> d</span> in such a way that as many digits
as possible may be printed subject to the width constraint
imposed by the parameter <span class="explicit-italic"> w</span>, the constraint of the scale factor <span class="explicit-italic"> k</span>,
and the constraint that no trailing
zero digits may appear in the fraction, except that if the
fraction to be printed is zero then a single zero digit should
appear after the decimal point.<br/>If the parameter <span class="explicit-italic"> e</span> is omitted, then the exponent is printed
using the smallest number of digits necessary to represent its value.<br/>If all of <span class="explicit-italic"> w</span>, <span class="explicit-italic"> d</span>, and <span class="explicit-italic"> e</span> are omitted, then the effect is to print
the value using ordinary free-format exponential-notation output;
<a class="function-reference" href="#function-prin1">prin1</a> uses 
a similar
format for any non-zero number whose magnitude
is less than <math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mrow>10</mrow><mo>-3</mo></msup></math> or greater than or equal to <math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mrow>10</mrow><mo>7</mo></msup></math>.
The only difference is that the <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~E</span>
</span></code></pre> 
directive always prints a plus or minus sign in front of the
    exponent, while <a class="function-reference" href="#function-prin1">prin1</a> omits the plus sign if the exponent is
    non-negative.

If <span class="explicit-italic"> arg</span> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-rational">rational</a> 
number, then it is coerced to be a <a class="glossary-reference" href="chapter-26.xhtml#glossary-single float">single float</a>
and then printed.  Alternatively, an implementation is permitted to
process a <a class="glossary-reference" href="chapter-26.xhtml#glossary-rational">rational</a> 
number by any other method that has essentially the
same behavior but avoids loss of precision or overflow
because of the coercion.  If <span class="explicit-italic"> w</span> and <span class="explicit-italic"> d</span> are
unsupplied and the number has no exact decimal representation,
for example <pre><code><span class="syntax-root"><span class="syntax-number">1/3</span>
</span></code></pre>, some precision cutoff must be chosen
by the implementation since only a finite number of digits may be printed.<br/>If <span class="explicit-italic"> arg</span> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-complex">complex</a> number or some non-numeric
<a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>, 
then it is printed using the format directive <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\j{w}D</span>
</span></code></pre>,
thereby printing it in decimal radix and a minimum field width of <span class="explicit-italic"> w</span>.<br/><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~E</span>
</span></code></pre> binds
     <a class="variable-reference" href="#variable-*print-escape*">*print-escape*</a> to <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>
 and <a class="variable-reference" href="#variable-*print-readably*">*print-readably*</a> to <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>.

</section><section id="section-TildeG:GeneralFloating-Point"><h4 class="section-title">Tilde G: General Floating-Point</h4><a id="index/text-g (format directive)"></a><a id="index/text-tilde g (format directive)"></a><br/>
The next <span class="explicit-italic"> arg</span> is printed as a <a class="glossary-reference" href="chapter-26.xhtml#glossary-float">float</a> 
in either fixed-format or exponential notation as appropriate.<br/>The full form is <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\j{w}</span><span class="syntax-verbatim">,</span><span class="explicit-italic"> d</span><span class="syntax-verbatim">,</span><span class="explicit-italic"> e</span><span class="syntax-verbatim">,</span><span class="explicit-italic"> k</span><span class="syntax-verbatim">,</span><span class="explicit-italic"> overflowchar</span><span class="syntax-verbatim">,</span><span class="explicit-italic"> padchar</span><span class="syntax-verbatim">,</span><span class="explicit-italic"> exponentchar</span>G
</span></code></pre>.
The format in which to print <span class="explicit-italic"> arg</span> depends on the magnitude (absolute
value) of the <span class="explicit-italic"> arg</span>.  Let <span class="explicit-italic"> n</span> be an integer such that
<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mrow>10</mrow><mo><span class="explicit-italic"> n</span>-1</mo></msup></math> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>&lt;</mo></math> |<span class="explicit-italic"> arg</span>| &lt; <math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mrow>10</mrow><mo><span class="explicit-italic"> n</span></mo></msup></math>.
Let <span class="explicit-italic"> ee</span> equal <span class="explicit-italic"> e</span>+2, or 4 if <span class="explicit-italic"> e</span> is omitted.
Let <span class="explicit-italic"> ww</span> equal <span class="explicit-italic"> w</span><math xmlns="http://www.w3.org/1998/Math/MathML">-</math> <span class="explicit-italic"> ee</span>,
or <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a> if <span class="explicit-italic"> w</span> is omitted.  If <span class="explicit-italic"> d</span> is omitted, first let <span class="explicit-italic"> q</span>
be the number of digits needed to print <span class="explicit-italic"> arg</span> with no loss
of information and without leading or trailing zeros;
then let <span class="explicit-italic"> d</span> equal <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-max">max</a> <span class="explicit-italic"> q</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-min">min</a> <span class="explicit-italic"> n</span> <span class="syntax-number">7</span>)</span>)</span>
</span></code></pre>.
Let <span class="explicit-italic"> dd</span> equal <span class="explicit-italic"> d</span><math xmlns="http://www.w3.org/1998/Math/MathML">-</math> <span class="explicit-italic"> n</span>.<br/>If 0 <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>&lt;</mo></math> <span class="explicit-italic"> dd</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>&lt;</mo></math> <span class="explicit-italic"> d</span>, then <span class="explicit-italic"> arg</span> is printed
as if by the format directives<br/><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\j{ww}</span><span class="syntax-verbatim">,</span><span class="explicit-italic"> dd</span><span class="syntax-verbatim">,</span><span class="syntax-verbatim">,</span><span class="explicit-italic"> overflowchar</span><span class="syntax-verbatim">,</span><span class="explicit-italic"> padchar</span>F~<span class="explicit-italic"> ee</span>@T
</span></code></pre><br/>Note that the scale factor <span class="explicit-italic"> k</span> is not passed to the <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~F</span>
</span></code></pre>
directive.  For all other values of <span class="explicit-italic"> dd</span>, <span class="explicit-italic"> arg</span> is printed as if
by the format directive<br/><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\j{w}</span><span class="syntax-verbatim">,</span><span class="explicit-italic"> d</span><span class="syntax-verbatim">,</span><span class="explicit-italic"> e</span><span class="syntax-verbatim">,</span><span class="explicit-italic"> k</span><span class="syntax-verbatim">,</span><span class="explicit-italic"> overflowchar</span><span class="syntax-verbatim">,</span><span class="explicit-italic"> padchar</span><span class="syntax-verbatim">,</span><span class="explicit-italic"> exponentchar</span>E
</span></code></pre><br/>In either case, an <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">@</span>
</span></code></pre>
modifier is supplied to the <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~F</span>
</span></code></pre>
or <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~E</span>
</span></code></pre> directive if and only if one was supplied to the
<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~G</span>
</span></code></pre> directive.<br/><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~G</span>
</span></code></pre> binds
     <a class="variable-reference" href="#variable-*print-escape*">*print-escape*</a> to <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>
 and <a class="variable-reference" href="#variable-*print-readably*">*print-readably*</a> to <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>.

</section><section id="section-TildeDollarsign:MonetaryFloating-Point"><h4 class="section-title">Tilde Dollarsign: Monetary Floating-Point</h4><a id="index/text-dollarsign (format directive)"></a><a id="index/text-tilde dollarsign (format directive)"></a><br/>
The next <span class="explicit-italic"> arg</span> is printed as a <a class="glossary-reference" href="chapter-26.xhtml#glossary-float">float</a> in fixed-format notation.  <br/>The full form is <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\j{d}</span><span class="syntax-verbatim">,</span><span class="explicit-italic"> n</span><span class="syntax-verbatim">,</span><span class="explicit-italic"> w</span><span class="syntax-verbatim">,</span><span class="explicit-italic"> padchar</span>$
</span></code></pre>.
The parameter <span class="explicit-italic"> d</span> is the number
of digits to print after the decimal point (default value 2);
<span class="explicit-italic"> n</span> is the minimum number of digits to print before the decimal
point (default value 1);
<span class="explicit-italic"> w</span> is the minimum total width of the field to be printed (default
value 0).<br/>First padding and the sign are output.
If the <span class="explicit-italic"> arg</span> is negative, then a minus sign is printed;
if the <span class="explicit-italic"> arg</span> is not negative, then a plus sign is printed
if and only if the <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">@</span>
</span></code></pre> modifier was supplied.  
If the <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">:</span>
</span></code></pre> modifier is used, the sign appears before any padding,
and otherwise after the padding.
If <span class="explicit-italic"> w</span> is supplied and the number of other characters to be output
is less than <span class="explicit-italic"> w</span>, then copies of <span class="explicit-italic"> padchar</span> (which defaults
to a space) are output to
make the total field width equal <span class="explicit-italic"> w</span>.
Then <span class="explicit-italic"> n</span> digits are printed for the integer part of <span class="explicit-italic"> arg</span>,
with leading zeros if necessary; then a decimal point;
then <span class="explicit-italic"> d</span> digits of fraction, properly rounded.<br/>If the magnitude of <span class="explicit-italic"> arg</span> is so large that more than <span class="explicit-italic"> m</span> digits would
have to be printed, where <span class="explicit-italic"> m</span> is the larger of <span class="explicit-italic"> w</span> and 100, then an
implementation is free, at its discretion, to print the number using
exponential notation instead, as if by the directive
<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\j{w}</span><span class="syntax-verbatim">,</span><span class="explicit-italic"> q</span><span class="syntax-verbatim">,</span><span class="syntax-verbatim">,</span><span class="syntax-verbatim">,</span><span class="syntax-verbatim">,</span><span class="explicit-italic"> padchar</span>E
</span></code></pre>, where <span class="explicit-italic"> w</span> and <span class="explicit-italic"> padchar</span> are
present or omitted according to whether they were present or omitted in
the <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\$</span>
</span></code></pre> directive, and where <span class="explicit-italic"> q</span>=<span class="explicit-italic"> d</span>+<span class="explicit-italic"> n</span><math xmlns="http://www.w3.org/1998/Math/MathML">-</math> 1,
where <span class="explicit-italic"> d</span> and <span class="explicit-italic"> n</span> are the (possibly default) values given to the
<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\$</span>
</span></code></pre> directive.<br/>If <span class="explicit-italic"> arg</span> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-rational">rational</a> 
number, then it is coerced to be a <a class="glossary-reference" href="chapter-26.xhtml#glossary-single float">single float</a>
and then printed.  Alternatively, an implementation is permitted to
process a <a class="glossary-reference" href="chapter-26.xhtml#glossary-rational">rational</a> number by any 
other method that has essentially the
same behavior but avoids loss of precision or overflow
because of the coercion.<br/>If <span class="explicit-italic"> arg</span> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-complex">complex</a> number or some non-numeric
<a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>,
then it is printed using the format directive <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\j{w}D</span>
</span></code></pre>,
thereby printing it in decimal radix and a minimum field width of <span class="explicit-italic"> w</span>.<br/><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\$</span>
</span></code></pre> binds <a class="variable-reference" href="#variable-*print-escape*">*print-escape*</a> to <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>
 and <a class="variable-reference" href="#variable-*print-readably*">*print-readably*</a> to <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>.

</section></section><section id="section-FORMATPrinterOps"><h3 class="section-title">FORMAT Printer Operations</h3><br/><section id="section-TildeA:Aesthetic"><h4 class="section-title">Tilde A: Aesthetic</h4><a id="index/text-a (format directive)"></a><a id="index/text-tilde a (format directive)"></a><br/>

An <span class="explicit-italic"> arg</span>, any <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>, 
is printed without escape characters
(as by <a class="function-reference" href="#function-princ">princ</a>).  If <span class="explicit-italic"> arg</span> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-string">string</a>, 
its <a class="glossary-reference" href="chapter-26.xhtml#glossary-character">characters</a>
will be output verbatim.
If <span class="explicit-italic"> arg</span> is <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a> it will be printed as <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>;
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-colon">colon</a> modifier (<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~:A</span>
</span></code></pre>) will cause an <span class="explicit-italic"> arg</span> of <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a> to be printed as <span class="explicit-mono">()</span>,
but if <span class="explicit-italic"> arg</span> is a composite structure, such as a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> or <a class="glossary-reference" href="chapter-26.xhtml#glossary-vector">vector</a>,
any contained occurrences of <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a> will still be printed as <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.<br/><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\j{mincol}A</span>
</span></code></pre> inserts spaces on the right, if necessary, to make the
width at least <span class="explicit-italic"> mincol</span> columns.  The <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">@</span>
</span></code></pre>
modifier causes the spaces
to be inserted on the left rather than the right.<br/><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\j{mincol}</span><span class="syntax-verbatim">,</span><span class="explicit-italic"> colinc</span><span class="syntax-verbatim">,</span><span class="explicit-italic"> minpad</span><span class="syntax-verbatim">,</span><span class="explicit-italic"> padchar</span>A
</span></code></pre> 
is the full form of <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~A</span>
</span></code></pre>,
which allows control of the padding.
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-string">string</a> is padded on the right (or on the left if the
<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">@</span>
</span></code></pre> modifier is used) with at least <span class="explicit-italic"> minpad</span> copies
of <span class="explicit-italic"> padchar</span>; padding characters are then inserted <span class="explicit-italic"> colinc</span> characters
at a time until the total width is at least <span class="explicit-italic"> mincol</span>.
The defaults are <pre><code><span class="syntax-root"><span class="syntax-number">0</span>
</span></code></pre> for <span class="explicit-italic"> mincol</span> and <span class="explicit-italic"> minpad</span>, <pre><code><span class="syntax-root"><span class="syntax-number">1</span>
</span></code></pre> for <span class="explicit-italic"> colinc</span>,
and the space character for <span class="explicit-italic"> padchar</span>.<br/><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~A</span>
</span></code></pre> binds <a class="variable-reference" href="#variable-*print-escape*">*print-escape*</a> to <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>,
and <a class="variable-reference" href="#variable-*print-readably*">*print-readably*</a> to <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>.

</section><section id="section-TildeS:Standard"><h4 class="section-title">Tilde S: Standard</h4><a id="index/text-s (format directive)"></a><a id="index/text-tilde s (format directive)"></a><br/>

This is just like <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~A</span>
</span></code></pre>, but <span class="explicit-italic"> arg</span> is printed with escape
characters (as by <a class="function-reference" href="#function-prin1">prin1</a> rather than <pre><code><span class="syntax-root"><a class="function-reference" href="#function-princ">princ</a>
</span></code></pre>).  The output is
therefore suitable for input to <a class="function-reference" href="chapter-23.xhtml#function-read">read</a>.  <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~S</span>
</span></code></pre> accepts
all the arguments and modifiers that <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~A</span>
</span></code></pre> does.<br/><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~S</span>
</span></code></pre> binds <a class="variable-reference" href="#variable-*print-escape*">*print-escape*</a> to <a class="symbol-reference" href="chapter-5.xhtml#symbol-t">t</a>.

</section><section id="section-TildeW:Write"><h4 class="section-title">Tilde W: Write</h4><a id="index/text-w (format directive)"></a><a id="index/text-tilde w (format directive)"></a><br/>An argument, any <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>, is printed obeying every printer control
variable (as by <a class="function-reference" href="#function-write">write</a>).  In addition, <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~W</span>
</span></code></pre> interacts correctly with depth
abbreviation, by not resetting the depth counter to zero.  <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~W</span>
</span></code></pre> does not
accept parameters.  If given the <a class="glossary-reference" href="chapter-26.xhtml#glossary-colon">colon</a> modifier, <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~W</span>
</span></code></pre> binds <a class="variable-reference" href="#variable-*print-pretty*">*print-pretty*</a>
to <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>.  If given the <a class="glossary-reference" href="chapter-26.xhtml#glossary-at-sign">at-sign</a> modifier, <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~W</span>
</span></code></pre> binds <a class="variable-reference" href="#variable-*print-level*">*print-level*</a>
and <a class="variable-reference" href="#variable-*print-length*">*print-length*</a> to <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.<br/><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~W</span>
</span></code></pre> provides automatic support for the detection of circularity and
sharing.  If the <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a> of <a class="variable-reference" href="#variable-*print-circle*">*print-circle*</a> is not <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a> and <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~W</span>
</span></code></pre> is applied
to an argument that is a circular (or shared) reference, an appropriate 
<pre><code><span class="syntax-root">#<span class="parameter">n</span>#
</span></code></pre> marker is inserted in the output instead of printing the argument.<br/></section>
</section><section id="section-FORMATPrettyPrinterOperations"><h3 class="section-title">FORMAT Pretty Printer Operations</h3>
The following constructs provide access to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-pretty printer">pretty printer</a>:<br/><section id="section-TildeUnderscore"><h4 class="section-title">Tilde Underscore: Conditional Newline</h4>
<a id="index/text-underscore (format directive)"></a><a id="index/text-tilde underscore (format directive)"></a><br/>Without any modifiers, <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~_</span>
</span></code></pre> is the same as <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="#function-pprint-newline">pprint-newline</a> <span class="syntax-keyword-symbol">:linear</span>)</span>
</span></code></pre>.
<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~@_</span>
</span></code></pre>  is the same as <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="#function-pprint-newline">pprint-newline</a> <span class="syntax-keyword-symbol">:miser</span>)</span>
</span></code></pre>.
<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~:_</span>
</span></code></pre>  is the same as <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="#function-pprint-newline">pprint-newline</a> <span class="syntax-keyword-symbol">:fill</span>)</span>
</span></code></pre>.
<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~:@_</span>
</span></code></pre> is the same as <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="#function-pprint-newline">pprint-newline</a> <span class="syntax-keyword-symbol">:mandatory</span>)</span>
</span></code></pre>.<br/></section><section id="section-TildeLessThanLogicalBlock"><h4 class="section-title">Tilde Less-Than-Sign: Logical Block</h4>
<a id="index/text-less-than-sign (format directive)"></a><a id="index/text-tilde less-than-sign (format directive)"></a><br/><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~&lt;...~:&gt;</span>
</span></code></pre><br/>If <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~:&gt;</span>
</span></code></pre> is used to terminate a <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~&lt;...~&gt;</span>
</span></code></pre>,
the directive is equivalent to a call to <a class="macro-reference" href="#macro-pprint-logical-block">pprint-logical-block</a>.
The argument corresponding to the <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~&lt;...~:&gt;</span>
</span></code></pre> directive is treated in
the same way as the <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> argument to <a class="macro-reference" href="#macro-pprint-logical-block">pprint-logical-block</a>,
thereby providing automatic support for non-<a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> arguments and
the detection of circularity, sharing, and depth abbreviation.  
The portion of the <span class="parameter">control-string</span> nested within the <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~&lt;...~:&gt;</span>
</span></code></pre>
specifies the <span class="keyword">:prefix</span> (or <span class="keyword">:per-line-prefix</span>), <span class="keyword">:suffix</span>,
and body of the <a class="macro-reference" href="#macro-pprint-logical-block">pprint-logical-block</a>.<br/>The <span class="parameter">control-string</span> portion enclosed by <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~&lt;...~:&gt;</span>
</span></code></pre> can be divided
into segments <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~&lt;\param{prefix}~</span>;\param{body}~;\param{suffix}~:&gt;
</span></code></pre>
by <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~</span>;
</span></code></pre> directives.  If the first section is terminated by <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~@</span>;
</span></code></pre>, 
it specifies a per-line prefix rather than a simple prefix.  
The <span class="parameter">prefix</span> and <span class="parameter">suffix</span> cannot contain format directives.  
An error is signaled if either the prefix or suffix fails to be a
constant string or if the enclosed portion is divided into more than three segments.<br/>If the enclosed portion is divided into only two segments, the <span class="parameter">suffix</span>
defaults to the null string.  If the enclosed portion consists of only
a single segment, both the <span class="parameter">prefix</span> and the <span class="parameter">suffix</span> default to 
the null string.  If the <a class="glossary-reference" href="chapter-26.xhtml#glossary-colon">colon</a> modifier is used (<span class="explicit-italic"> i.e.</span>,  <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~:&lt;...~:&gt;</span>
</span></code></pre>),
the <span class="parameter">prefix</span> and <span class="parameter">suffix</span> default to <pre><code><span class="syntax-root"><span class="syntax-string">"("</span>
</span></code></pre> and <pre><code><span class="syntax-root"><span class="syntax-string">")"</span>
</span></code></pre>
(respectively) instead of the null string.<br/>The body segment can be any arbitrary <a class="glossary-reference" href="chapter-26.xhtml#glossary-format string">format string</a>.
This <a class="glossary-reference" href="chapter-26.xhtml#glossary-format string">format string</a> is applied to the elements of the list
corresponding to the <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~&lt;...~:&gt;</span>
</span></code></pre> directive as a whole.
Elements are extracted from this list using <a class="macro-reference" href="#macro-pprint-pop">pprint-pop</a>,
thereby providing automatic support for malformed lists, and the detection
of circularity, sharing, and length abbreviation.
Within the body segment, <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~{\hat}</span>
</span></code></pre> acts like <a class="macro-reference" href="#macro-pprint-exit-if-list-exhausted">pprint-exit-if-list-exhausted</a>.<br/><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~&lt;...~:&gt;</span>
</span></code></pre> supports a feature not supported by <a class="macro-reference" href="#macro-pprint-logical-block">pprint-logical-block</a>.
If <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~:@&gt;</span>
</span></code></pre> is used to terminate the directive (<span class="explicit-italic"> i.e.</span>,  <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~&lt;...~:@&gt;</span>
</span></code></pre>), 
then a fill-style conditional newline is automatically inserted after each
group of blanks immediately contained in the body (except for blanks
after a <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>âŸ¨</mi></math><span class="explicit-italic"> Newline</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>âŸ©</mi></math> directive).  This makes it easy to achieve the
equivalent of paragraph filling.<br/>If the <a class="glossary-reference" href="chapter-26.xhtml#glossary-at-sign">at-sign</a> modifier is used with <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~&lt;...~:&gt;</span>
</span></code></pre>, the entire remaining argument
list is passed to the directive as its argument.  All of the remaining
arguments are always consumed by <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~@&lt;...~:&gt;</span>
</span></code></pre>, even if they are not all used
by the <a class="glossary-reference" href="chapter-26.xhtml#glossary-format string">format string</a> nested in the directive.  Other than the difference in
its argument, <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~@&lt;...~:&gt;</span>
</span></code></pre> is exactly the same as <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~&lt;...~:&gt;</span>
</span></code></pre> except that
circularity detection is not applied if <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~@&lt;...~:&gt;</span>
</span></code></pre> is encountered at top
level in a <a class="glossary-reference" href="chapter-26.xhtml#glossary-format string">format string</a>.  This ensures that circularity detection is
applied only to data lists, not to <a class="glossary-reference" href="chapter-26.xhtml#glossary-format argument">format argument</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">lists</a>.<br/><pre><code><span class="syntax-root"><span class="syntax-string">" . #<span class="parameter">n</span>#"</span>
</span></code></pre> is printed if circularity or sharing has to be indicated
for its argument as a whole.<br/>To a considerable extent, the basic form of the directive <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~&lt;...~&gt;</span>
</span></code></pre> is
incompatible with the dynamic control of the arrangement of output by
<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~W</span>
</span></code></pre>, <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~_</span>
</span></code></pre>, <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~&lt;...~:&gt;</span>
</span></code></pre>, <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~I</span>
</span></code></pre>, and <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~:T</span>
</span></code></pre>.  As a result, an error 
is signaled if any of these directives is nested within <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~&lt;...~&gt;</span>
</span></code></pre>.  
Beyond this, an error is also signaled if the <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~&lt;...~:</span>;...~&gt;
</span></code></pre> form of
<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~&lt;...~&gt;</span>
</span></code></pre> is used in the same <a class="glossary-reference" href="chapter-26.xhtml#glossary-format string">format string</a> with 
<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~W</span>
</span></code></pre>, <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~_</span>
</span></code></pre>, <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~&lt;...~:&gt;</span>
</span></code></pre>, <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~I</span>
</span></code></pre>, or <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~:T</span>
</span></code></pre>.<br/>See also <a class="section-reference" href="#section-TildeLessThanJustification">Tilde Less-Than-Sign: Justification</a>.<br/></section><section id="section-TildeI"><h4 class="section-title">Tilde I: Indent</h4>
<a id="index/text-i (format directive)"></a><a id="index/text-tilde i (format directive)"></a><br/><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\param{n}I</span>
</span></code></pre>  is the same as <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="#function-pprint-indent">pprint-indent</a> <span class="syntax-keyword-symbol">:block</span> <span class="syntax-interned-symbol">n</span>)</span>
</span></code></pre>.<br/><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\param{n}:I</span>
</span></code></pre> is the same as <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="#function-pprint-indent">pprint-indent</a> <span class="syntax-keyword-symbol">:current</span> <span class="syntax-interned-symbol">n</span>)</span>
</span></code></pre>.
In both cases, <span class="parameter">n</span> defaults to zero, if it is omitted.<br/></section><section id="section-TildeSlash:CallFunction"><h4 class="section-title">Tilde Slash: Call Function</h4><a id="index/text-slash (format directive)"></a><a id="index/text-tilde slash (format directive)"></a><br/><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~/\param{name}/</span>
</span></code></pre><br/>User defined functions can be called from within a format
string by using the directive <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~/\param{name}/</span>
</span></code></pre>.
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-colon">colon</a> modifier, the <a class="glossary-reference" href="chapter-26.xhtml#glossary-at-sign">at-sign</a> modifier, and arbitrarily many parameters 
can be specified with the <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~/\param{name}/</span>
</span></code></pre> directive.
<span class="parameter">name</span> can be any arbitrary string that does not contain a "/".
All of the characters in <span class="parameter">name</span> are treated as if they were upper case.
If <span class="parameter">name</span> contains a single <a class="glossary-reference" href="chapter-26.xhtml#glossary-colon">colon</a> (<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">:</span>
</span></code></pre>) or double <a class="glossary-reference" href="chapter-26.xhtml#glossary-colon">colon</a> (<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">::</span>
</span></code></pre>),
then everything up to but not including the first <pre><code><span class="syntax-root"><span class="syntax-string">":"</span>
</span></code></pre> or <pre><code><span class="syntax-root"><span class="syntax-string">"::"</span>
</span></code></pre>
is taken to be a <a class="glossary-reference" href="chapter-26.xhtml#glossary-string">string</a> that names a <a class="glossary-reference" href="chapter-26.xhtml#glossary-package">package</a>.
Everything after the first <pre><code><span class="syntax-root"><span class="syntax-string">":"</span>
</span></code></pre> or <pre><code><span class="syntax-root"><span class="syntax-string">"::"</span>
</span></code></pre> (if any) is taken to be a 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-string">string</a> that names a <pre><code><span class="syntax-root"><a class="symbol-reference" href="chapter-2.xhtml#symbol-symbol">symbol</a>
</span></code></pre>.  The function corresponding to a 
<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~/name/</span>
</span></code></pre> directive is obtained by looking up the <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>
that has the indicated name in the indicated <a class="glossary-reference" href="chapter-26.xhtml#glossary-package">package</a>.
If <span class="parameter">name</span> does not contain a <pre><code><span class="syntax-root"><span class="syntax-string">":"</span>
</span></code></pre> or <pre><code><span class="syntax-root"><span class="syntax-string">"::"</span>
</span></code></pre>,
then the whole <span class="parameter">name</span> string is looked up in the <a class="package-reference" href="chapter-11.xhtml#package-common-lisp-user">common-lisp-user</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-package">package</a>. <br/>When a <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~/name/</span>
</span></code></pre> directive is encountered,
the indicated function is called with four or more arguments.
The first four arguments are:
     the output stream,
     the <a class="glossary-reference" href="chapter-26.xhtml#glossary-format argument">format argument</a> corresponding to the directive,
     a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generalized boolean">generalized boolean</a> that is <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a> if the <a class="glossary-reference" href="chapter-26.xhtml#glossary-colon">colon</a> modifier was used,
 and a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generalized boolean">generalized boolean</a> that is <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a> if the <a class="glossary-reference" href="chapter-26.xhtml#glossary-at-sign">at-sign</a> modifier was used.
The remaining arguments consist of any parameters specified with the directive.
The function should print the argument appropriately.
Any values returned by the function are ignored.<br/>The three <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">functions</a> 
      <a class="function-reference" href="#function-pprint-linear">pprint-linear</a>,
      <a class="function-reference" href="#function-pprint-fill">pprint-fill</a>,
  and <a class="function-reference" href="#function-pprint-tabular">pprint-tabular</a>
are specifically designed so that they can be called by <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~/.../</span>
</span></code></pre>
(<span class="explicit-italic"> i.e.</span>,  <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~/pprint-linear/</span>
</span></code></pre>, <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~/pprint-fill/</span>
</span></code></pre>, and <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~/pprint-tabular/</span>
</span></code></pre>).
In particular they take <a class="glossary-reference" href="chapter-26.xhtml#glossary-colon">colon</a> and <a class="glossary-reference" href="chapter-26.xhtml#glossary-at-sign">at-sign</a> arguments.<br/></section>
</section><section id="section-FORMATLayoutControl"><h3 class="section-title">FORMAT Layout Control</h3><section id="section-TildeT:Tabulate"><h4 class="section-title">Tilde T: Tabulate</h4><a id="index/text-t (format directive)"></a><a id="index/text-tilde t (format directive)"></a><br/>
This spaces over to a given column.
<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\j{colnum}</span><span class="syntax-verbatim">,</span><span class="explicit-italic"> colinc</span>T
</span></code></pre> will output
sufficient spaces to move the cursor to column <span class="explicit-italic"> colnum</span>.  If the cursor
is already at or beyond column <span class="explicit-italic"> colnum</span>, it will output spaces to move it to
column <span class="explicit-italic"> colnum</span>+<span class="explicit-italic"> k</span>*<span class="explicit-italic"> colinc</span> for the smallest positive integer
<span class="explicit-italic"> k</span> possible, unless <span class="explicit-italic"> colinc</span> is zero, in which case no spaces
are output if the cursor is already at or beyond column <span class="explicit-italic"> colnum</span>.
<span class="explicit-italic"> colnum</span> and <span class="explicit-italic"> colinc</span> default to <pre><code><span class="syntax-root"><span class="syntax-number">1</span>
</span></code></pre>.<br/>If for some reason the current absolute column position cannot be determined
by direct inquiry,
<a class="function-reference" href="#function-format">format</a> 
may be able to deduce the current column position by noting         
that certain directives (such as <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\%</span>
</span></code></pre>, or <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\&amp;</span>
</span></code></pre>,
or <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~A</span>
</span></code></pre> 
with the argument being a string containing a newline) cause
the column position to be reset to zero, and counting the number of characters
emitted since that point.  If that fails, <a class="function-reference" href="#function-format">format</a> 
may attempt a
similar deduction on the riskier assumption that the destination was
at column zero when <a class="function-reference" href="#function-format">format</a> 
was invoked.  If even this heuristic fails
or is implementationally inconvenient, at worst
the <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~T</span>
</span></code></pre> operation will simply output two spaces.<br/><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~@T</span>
</span></code></pre> performs relative tabulation.
<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\j{colrel}</span><span class="syntax-verbatim">,</span><span class="explicit-italic"> colinc</span>@T
</span></code></pre> outputs <span class="explicit-italic"> colrel</span> spaces
and then outputs the smallest non-negative
number of additional spaces necessary to move the cursor
to a column that is a multiple                                       
of <span class="explicit-italic"> colinc</span>.  For example, the directive 
<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~3</span><span class="syntax-verbatim">,</span><span class="syntax-interned-symbol">8@T</span>
</span></code></pre> outputs
three spaces and then moves the cursor to a ``standard multiple-of-eight
tab stop'' if not at one already.
If the current output column cannot be determined, however,
then <span class="explicit-italic"> colinc</span> is ignored, and exactly <span class="explicit-italic"> colrel</span> spaces are output.<br/>If the <a class="glossary-reference" href="chapter-26.xhtml#glossary-colon">colon</a> modifier is used with the <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~T</span>
</span></code></pre> directive,
the tabbing computation is done relative to the horizontal position where the
section immediately containing the directive begins, rather than with
respect to a horizontal position of zero.  The numerical parameters are
both interpreted as being in units of <a class="glossary-reference" href="chapter-26.xhtml#glossary-em">ems</a> and both default to <pre><code><span class="syntax-root"><span class="syntax-number">1</span>
</span></code></pre>.
<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\param{n}</span><span class="syntax-verbatim">,</span><span class="parameter">m</span>:T
</span></code></pre> is the same as 
  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="#function-pprint-tab">pprint-tab</a> <span class="syntax-keyword-symbol">:section</span> <span class="parameter">n</span> <span class="parameter">m</span>)</span>
</span></code></pre>.
<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\param{n}</span><span class="syntax-verbatim">,</span><span class="parameter">m</span>:@T
</span></code></pre> is the same as
  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="#function-pprint-tab">pprint-tab</a> <span class="syntax-keyword-symbol">:section-relative</span> <span class="parameter">n</span> <span class="parameter">m</span>)</span>
</span></code></pre>.<br/></section><section id="section-TildeLessThanJustification"><h4 class="section-title">Tilde Less-Than-Sign: Justification</h4>
<a id="index/text-less-than-sign (format directive)"></a><a id="index/text-tilde less-than-sign (format directive)"></a><br/><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\j{mincol}</span><span class="syntax-verbatim">,</span><span class="explicit-italic"> colinc</span><span class="syntax-verbatim">,</span><span class="explicit-italic"> minpad</span><span class="syntax-verbatim">,</span><span class="explicit-italic"> padchar</span>&lt;<span class="explicit-italic"> str</span>~&gt;
</span></code></pre><br/>This justifies the text produced by processing <span class="explicit-italic"> str</span>
within a field at least <span class="explicit-italic"> mincol</span> columns wide.  <span class="explicit-italic"> str</span>
may be divided up into segments with <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~</span>;
</span></code></pre>, in which case the
spacing is evenly divided between the text segments.<br/>With no modifiers, the leftmost text segment is left justified in the
field, and the rightmost text segment is right justified.  If there is
only one text element, as a special case, it is right justified.
The <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">:</span>
</span></code></pre> modifier causes                                            
spacing to be introduced before the first text segment;  the 
<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">@</span>
</span></code></pre> modifier causes spacing to be added after the last.
The <span class="explicit-italic"> minpad</span> parameter (default <pre><code><span class="syntax-root"><span class="syntax-number">0</span>
</span></code></pre>) is the minimum number of
padding characters to be output between each segment.
The padding character is supplied by <span class="explicit-italic"> padchar</span>,
which defaults to the space character.
If the total width needed to satisfy these constraints is greater
than <span class="explicit-italic"> mincol</span>, then the width used is <span class="explicit-italic"> mincol</span>+<span class="explicit-italic"> k</span>*<span class="explicit-italic"> colinc</span>
for the smallest possible non-negative integer value <span class="explicit-italic"> k</span>.
<span class="explicit-italic"> colinc</span> defaults to <pre><code><span class="syntax-root"><span class="syntax-number">1</span>
</span></code></pre>, and <span class="explicit-italic"> mincol</span> defaults to <pre><code><span class="syntax-root"><span class="syntax-number">0</span>
</span></code></pre>.<br/>Note that <span class="explicit-italic"> str</span> may include <a class="function-reference" href="#function-format">format</a> directives.
All the clauses in <span class="explicit-italic"> str</span> are processed in order;
it is the resulting pieces of text that are justified.<br/>The <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\hat</span> 
</span></code></pre> directive may be used to terminate processing of the
clauses prematurely, in which case only the completely processed clauses
are justified.<br/>If the first clause of a <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~&lt;</span>
</span></code></pre> 
is terminated with <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~:</span>;
</span></code></pre> instead of
<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~</span>;
</span></code></pre>, then it is used in a special way.  All of the clauses are
processed (subject to <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\hat</span> 
</span></code></pre>, of course), but the 
first one is not used
in performing the spacing and padding.  When the padded result has been
determined, then if it will fit on the current line of output, it is
output, and the text for the first clause is discarded.  If, however, the
padded text will not fit on the current line, then the text segment for
the first clause is output before the padded text.  The first clause
ought to contain a newline (such as a <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\%</span>
</span></code></pre> directive).  The first
clause is always processed, and so any arguments it refers to will be
used; the decision is whether to use the resulting segment of text, not
whether to process the first clause.  If the <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~:</span>;
</span></code></pre> has a prefix
parameter <span class="explicit-italic"> n</span>, then the padded text must fit on the current line with
<span class="explicit-italic"> n</span> character positions to spare to avoid outputting the first clause's
text.  For example, the control string<br/><pre><code><span class="syntax-root"><span class="syntax-string">"~%;; ~<span class="explicit-mono">{</span> ~&lt;~%;; ~1:; ~S~&gt;~^ ,~<span class="explicit-mono">}</span> .~%"</span>
</span></code></pre><br/>can be used to print a list of items separated by commas without
breaking items over line boundaries, beginning each line with
<pre><code><span class="syntax-root">;; 
</span></code></pre>.  The prefix parameter 
<pre><code><span class="syntax-root"><span class="syntax-number">1</span>
</span></code></pre> in <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~1:</span>;
</span></code></pre> accounts for the width of the
comma that will follow the justified item if it is not the last
element in the list, or the period 
if it is.  If <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~:</span>;
</span></code></pre> has a second
prefix parameter, then it is used as the width of the line,
thus overriding the natural line width of the output stream.  To make
the preceding example use a line width of 50, one would write<br/><pre><code><span class="syntax-root"><span class="syntax-string">"~%;; ~<span class="explicit-mono">{</span> ~&lt;~%;; ~1,50:; ~S~&gt;~^ ,~<span class="explicit-mono">}</span>  .~%"</span>
</span></code></pre>
If the second argument is not supplied, then <a class="function-reference" href="#function-format">format</a> uses the
line width of the <span class="parameter">destination</span> output stream.
If this cannot be determined (for example, when producing a 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-string">string</a> result), then <a class="function-reference" href="#function-format">format</a> uses <pre><code><span class="syntax-root"><span class="syntax-number">72</span>
</span></code></pre> as the line length.<br/>See also <a class="section-reference" href="#section-TildeLessThanLogicalBlock">Tilde Less-Than-Sign: Logical Block</a>.<br/></section><section id="section-TildeGreater-Than-Sign:EndofJustification"><h4 class="section-title">Tilde Greater-Than-Sign: End of Justification</h4><a id="index/text-greater-than-sign (format directive)"></a><a id="index/text-tilde greater-than-sign (format directive)"></a><br/>
<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~&gt;</span>
</span></code></pre> terminates a <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~&lt;</span>
</span></code></pre>.
The consequences of using it elsewhere are undefined.<br/></section></section><section id="section-FORMATControl-FlowOperations"><h3 class="section-title">FORMAT Control-Flow Operations</h3><section id="section-TildeAsterisk:Go-To"><h4 class="section-title">Tilde Asterisk: Go-To</h4><a id="index/text-asterisk (format directive)"></a><a id="index/text-tilde asterisk (format directive)"></a><br/>                                                
The next <span class="explicit-italic"> arg</span> is ignored.
<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\j{n}*</span>
</span></code></pre> ignores the next <span class="explicit-italic"> n</span> arguments.<br/><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~:*</span>
</span></code></pre> backs up in the list of
arguments so that the argument last processed will be processed again.
<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\j{n}:*</span>
</span></code></pre> backs up <span class="explicit-italic"> n</span> arguments.<br/>When within a <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\{</span>
</span></code></pre> construct
(see below), the ignoring (in either direction) is relative to the list
of arguments being processed by the iteration.<br/><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\j{n}@*</span>
</span></code></pre> 
goes to the <span class="explicit-italic"> n</span>th <span class="explicit-italic"> arg</span>, where 0 means the first one;
<span class="explicit-italic"> n</span> defaults to 0, so <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~@*</span>
</span></code></pre> goes back to the first <span class="explicit-italic"> arg</span>.      
Directives after a <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\j{n}@*</span>
</span></code></pre>
will take arguments in sequence beginning with the one gone to.
When within a <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\{</span>
</span></code></pre> construct, the ``goto''
is relative to the list of arguments being processed by the iteration.<br/></section><section id="section-TildeLeft-Bracket:ConditionalExpression"><h4 class="section-title">Tilde Left-Bracket: Conditional Expression</h4><a id="index/text-left-bracket (format directive)"></a><a id="index/text-tilde left-bracket (format directive)"></a><br/><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~[\j{str0}~</span>;\j{str1}~;\j{...}~;\j{strn}~]
</span></code></pre><br/>This is a set of control strings, called <span class="explicit-italic"> clauses</span>, one of which is
chosen and used.  The clauses are separated by <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~</span>;
</span></code></pre>
and the construct is terminated by <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~]</span>
</span></code></pre>.  For example,<br/><pre><code><span class="syntax-root"><span class="syntax-string">"~[Siamese~;Manx~;Persian~] Cat"</span>
</span></code></pre><br/>The <span class="explicit-italic"> arg</span>th
clause is selected, where the first clause is number 0.
If a prefix parameter is given (as <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\j{n}[</span>
</span></code></pre>),
then the parameter is used instead of an argument.    
If <span class="explicit-italic"> arg</span> is out of range then no clause is selected
and no error is signaled.
After the selected alternative has been processed, the control string
continues after the <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~]</span>
</span></code></pre>.<br/><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~[\j{str0}~</span>;\j{str1}~;\j{...}~;\j{strn}~:;\j{default}~]
</span></code></pre>
has a default case.
If the <span class="explicit-italic"> last</span> <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~</span>;
</span></code></pre> used to separate clauses
is <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~:</span>;
</span></code></pre> instead, then the last clause is an else clause
that is performed if no other clause is selected.
For example:<br/><pre><code><span class="syntax-root"><span class="syntax-string">"~[Siamese~;Manx~;Persian~:;Alley~] Cat"</span>
</span></code></pre><br/><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~:[\param{alternative}~</span>;\param{consequent}~]
</span></code></pre> 
selects the <span class="parameter">alternative</span> control string if <span class="explicit-italic"> arg</span> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>,
and selects the <span class="parameter">consequent</span> control string otherwise.<br/><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~@[\param{consequent}~]</span>
</span></code></pre> 
tests the argument.  If it is <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>,           
then the argument is not used up by the <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~[</span>
</span></code></pre> command
but remains as the next one to be processed,
and the one clause <span class="parameter">consequent</span> is processed.
If the <span class="explicit-italic"> arg</span> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>, then the argument is used up,
and the clause is not processed.
The clause therefore should normally use exactly one argument,
and may expect it to be <a class="glossary-reference" href="chapter-26.xhtml#glossary-non-nil">non-nil</a>.
For example:<br/><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <a class="variable-reference" href="#variable-*print-level*">*print-level*</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <a class="variable-reference" href="#variable-*print-length*">*print-length*</a> <span class="syntax-number">5</span>)</span>
 <span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>
        <span class="syntax-string">"~@[ print level = ~D~]~@[ print length = ~D~]"</span>
        <a class="variable-reference" href="#variable-*print-level*">*print-level*</a> <a class="variable-reference" href="#variable-*print-length*">*print-length*</a>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math>  <span class="syntax-string">" print length = 5"</span>
</span></code></pre><br/>Note also that<br/><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <span class="parameter">stream</span> <span class="syntax-string">"...~@[<span class="parameter">str</span>~]..."</span> <span class="syntax-interned-symbol">...</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>â‰¡</mo></math> <span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <span class="parameter">stream</span> <span class="syntax-string">"...~:[~;~:*<span class="parameter">str</span>~]..."</span> <span class="syntax-interned-symbol">...</span>)</span>
</span></code></pre><br/>The combination of <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~[</span>
</span></code></pre> and <pre><code><span class="syntax-root">#
</span></code></pre> is useful, for
example, for dealing with English conventions for printing lists:<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">foo</span> <span class="syntax-string">"Items:~#[ none~; ~S~; ~S and ~S~
          ~:;~@{~#[~; and~] ~S~^ ,~}~]."</span>)</span>
<span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-interned-symbol">foo</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math>  <span class="syntax-string">"Items: none."</span>
<span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-interned-symbol">foo</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">foo</span></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math>  <span class="syntax-string">"Items: FOO."</span>
<span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-interned-symbol">foo</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">foo</span></span> <span class="syntax-quote">'<span class="syntax-interned-symbol">bar</span></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math>  <span class="syntax-string">"Items: FOO and BAR."</span>
<span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-interned-symbol">foo</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">foo</span></span> <span class="syntax-quote">'<span class="syntax-interned-symbol">bar</span></span> <span class="syntax-quote">'<span class="syntax-interned-symbol">baz</span></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math>  <span class="syntax-string">"Items: FOO, BAR, and BAZ."</span>
<span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-interned-symbol">foo</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">foo</span></span> <span class="syntax-quote">'<span class="syntax-interned-symbol">bar</span></span> <span class="syntax-quote">'<span class="syntax-interned-symbol">baz</span></span> <span class="syntax-quote">'<span class="syntax-interned-symbol">quux</span></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math>  <span class="syntax-string">"Items: FOO, BAR, BAZ, and QUUX."</span>
</span></code></pre><br/></section><section id="section-TildeRight-Bracket:EndofConditionalExpression"><h4 class="section-title">Tilde Right-Bracket: End of Conditional Expression</h4><a id="index/text-right-bracket (format directive)"></a><a id="index/text-tilde right-bracket (format directive)"></a><br/>
<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~]</span>
</span></code></pre> terminates a <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~[</span>
</span></code></pre>.
The consequences of using it elsewhere are undefined.<br/></section><section id="section-TildeLeft-Brace:Iteration"><h4 class="section-title">Tilde Left-Brace: Iteration</h4><a id="index/text-left-brace (format directive)"></a><a id="index/text-tilde left-brace (format directive)"></a><br/><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\{\j{str}~\}</span>
</span></code></pre><br/>This is an iteration construct.  The argument should be a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a>,
which is used as a set of arguments 
as if for a recursive call to <a class="function-reference" href="#function-format">format</a>.
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-string">string</a> <span class="explicit-italic"> str</span> is used repeatedly as the control string.
Each iteration can absorb as many elements of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> as it likes
as arguments;
if <span class="explicit-italic"> str</span> uses up two arguments by itself, then two elements of the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> will get used up each time around the loop.
If before any iteration step the <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> 
is empty, then the iteration is terminated.
Also, if a prefix parameter <span class="explicit-italic"> n</span> is given, then there will be at most <span class="explicit-italic"> n</span>
repetitions of processing of <span class="explicit-italic"> str</span>.  
Finally, the <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\hat</span> 
</span></code></pre> directive can be
used to terminate the iteration prematurely.<br/>For example:<br/><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"The winners are:~{ ~S~}."</span> 
         <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">fred</span> <span class="syntax-interned-symbol">harry</span> <span class="syntax-interned-symbol">jill</span>)</span></span>)</span> 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"The winners are: FRED HARRY JILL."</span>                           
 <span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"Pairs:~{ &lt;~S,~S&gt;~}."</span> 
         <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-number">1</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-number">2</span> <span class="syntax-interned-symbol">c</span> <span class="syntax-number">3</span>)</span></span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"Pairs: &lt;A,1&gt; &lt;B,2&gt; &lt;C,3&gt;."</span>
</span></code></pre><br/><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~:\lbr</span> <span class="explicit-italic"> str</span>~<span class="explicit-mono">}</span>  
</span></code></pre> is similar, 
but the argument should be a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> of sublists.
At each repetition step, one sublist 
is used as the set of arguments for
processing <span class="explicit-italic"> str</span>; on the next repetition, a new sublist 
is used, whether
or not all of the last sublist had been processed.  
For example:<br/>                                                                               <br/><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"Pairs:~:<span class="explicit-mono">{</span> &lt;~S,~S&gt;~<span class="explicit-mono">}</span> ."</span> 
                 <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-number">1</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">b</span> <span class="syntax-number">2</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">c</span> <span class="syntax-number">3</span>)</span>)</span></span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"Pairs: &lt;A,1&gt; &lt;B,2&gt; &lt;C,3&gt;."</span>
</span></code></pre><br/><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~@\lbr</span> <span class="explicit-italic"> str</span>~<span class="explicit-mono">}</span> 
</span></code></pre>
is similar to <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\lbr</span> <span class="explicit-italic"> str</span>~<span class="explicit-mono">}</span>  
</span></code></pre>, but instead of
using one argument that is a list, all the remaining arguments
are used as the list of arguments for the iteration.
Example:<br/><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"Pairs:~@<span class="explicit-mono">{</span> &lt;~S,~S&gt;~<span class="explicit-mono">}</span> ."</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">a</span></span> <span class="syntax-number">1</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">b</span></span> <span class="syntax-number">2</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">c</span></span> <span class="syntax-number">3</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"Pairs: &lt;A,1&gt; &lt;B,2&gt; &lt;C,3&gt;."</span>
</span></code></pre>
If the iteration is terminated before all the remaining arguments are
consumed, then any arguments not processed by the iteration remain to be
processed by any directives following the iteration construct.<br/><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~:@\lbr</span> <span class="explicit-italic"> str</span>~<span class="explicit-mono">}</span>  
</span></code></pre> 
combines the features                              
of <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~:\lbr</span> <span class="explicit-italic"> str</span>~<span class="explicit-mono">}</span>  
</span></code></pre>
and <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~@\lbr</span> <span class="explicit-italic"> str</span>~<span class="explicit-mono">}</span>  
</span></code></pre>.
All the remaining arguments
are used, and each one must be a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a>.
On each iteration, the next argument is 
used as a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> of arguments to <span class="explicit-italic"> str</span>.
Example:<br/><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"Pairs:~:@<span class="explicit-mono">{</span> &lt;~S,~S&gt;~<span class="explicit-mono">}</span> ."</span> 
              <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-number">1</span>)</span></span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">b</span> <span class="syntax-number">2</span>)</span></span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">c</span> <span class="syntax-number">3</span>)</span></span>)</span> 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"Pairs: &lt;A,1&gt; &lt;B,2&gt; &lt;C,3&gt;."</span>
</span></code></pre>
Terminating the repetition construct with <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~:\rbr</span> 
</span></code></pre> 
instead of <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\rbr</span>  
</span></code></pre>
forces <span class="explicit-italic"> str</span> to be processed at least once, even if the initial
list of arguments is null. However, this will not override an explicit
prefix parameter of zero.<br/>If <span class="explicit-italic"> str</span> is empty, then an argument is used as <span class="explicit-italic"> str</span>.  
It must be a <a class="glossary-reference" href="chapter-26.xhtml#glossary-format control">format control</a>
and precede any arguments processed by the iteration.  As an example,
the following are equivalent:<br/><pre><code><span class="syntax-root">   <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-apply">apply</a> <span class="syntax-function">#'<a class="function-reference" href="#function-format">format</a></span> <a class="type-reference" href="chapter-21.xhtml#type-stream">stream</a> <a class="function-reference" href="chapter-16.xhtml#function-string">string</a> <span class="syntax-interned-symbol">arguments</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>â‰¡</mo></math> <span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="type-reference" href="chapter-21.xhtml#type-stream">stream</a> <span class="syntax-string">"~1{~:}"</span> <a class="function-reference" href="chapter-16.xhtml#function-string">string</a> <span class="syntax-interned-symbol">arguments</span>)</span>
</span></code></pre><br/>This will use <pre><code><span class="syntax-root"><a class="function-reference" href="chapter-16.xhtml#function-string">string</a>
</span></code></pre> as a formatting string.  
The <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~1\lbr</span> 
</span></code></pre> says it will                 
be processed at most once, and the <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~:\rbr</span> 
</span></code></pre> 
says it will be processed at least once.
Therefore it is processed exactly once, using <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">arguments</span>
</span></code></pre> as the arguments.
This case may be handled more clearly by the <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~?</span>
</span></code></pre> directive,
but this general feature of <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\lbr</span>  
</span></code></pre>
is more powerful than <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~?</span>
</span></code></pre>.<br/></section><section id="section-TildeRight-Brace:EndofIteration"><h4 class="section-title">Tilde Right-Brace: End of Iteration</h4><a id="index/text-right-brace (format directive)"></a><a id="index/text-tilde right-brace (format directive)"></a><br/>                               
<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\}</span>
</span></code></pre> terminates a <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\{</span>
</span></code></pre>.
The consequences of using it elsewhere are undefined.<br/></section><section id="section-TildeQuestion-Mark:RecursiveProcessing"><h4 class="section-title">Tilde Question-Mark: Recursive Processing</h4><a id="index/text-question-mark (format directive)"></a><a id="index/text-tilde question-mark (format directive)"></a><br/>

The next <span class="explicit-italic"> arg</span> must be a <a class="glossary-reference" href="chapter-26.xhtml#glossary-format control">format control</a>, and the one after it a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a>;
both are consumed by the <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~?</span>
</span></code></pre> directive.
The two are processed as a <span class="parameter">control-string</span>, with the elements of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> 
as the arguments.  Once the recursive processing
has been finished, the processing of the control
string containing the <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~?</span>
</span></code></pre> directive is resumed.
Example:<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"~? ~D"</span> <span class="syntax-string">"&lt;~A ~D&gt;"</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-string">"Foo"</span> <span class="syntax-number">5</span>)</span></span> <span class="syntax-number">7</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"&lt;Foo 5&gt; 7"</span>
<span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"~? ~D"</span> <span class="syntax-string">"&lt;~A ~D&gt;"</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-string">"Foo"</span> <span class="syntax-number">5</span> <span class="syntax-number">14</span>)</span></span> <span class="syntax-number">7</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"&lt;Foo 5&gt; 7"</span>
</span></code></pre>
Note that in the second example three arguments are supplied
to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-format string">format string</a> <pre><code><span class="syntax-root"><span class="syntax-string">"&lt;~A ~D&gt;"</span>
</span></code></pre>, but only two are processed
and the third is therefore ignored.<br/>With the <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">@</span>
</span></code></pre>
modifier, only one <span class="explicit-italic"> arg</span> is directly consumed.
The <span class="explicit-italic"> arg</span> must be a <a class="glossary-reference" href="chapter-26.xhtml#glossary-string">string</a>; 
it is processed as part of the control
string as if it had appeared in place of the <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~@?</span>
</span></code></pre> construct,
and any directives in the recursively processed control string may      
consume arguments of the control string containing the <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~@?</span>
</span></code></pre>
directive.
Example:<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"~@? ~D"</span> <span class="syntax-string">"&lt;~A ~D&gt;"</span> <span class="syntax-string">"Foo"</span> <span class="syntax-number">5</span> <span class="syntax-number">7</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"&lt;Foo 5&gt; 7"</span>
<span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"~@? ~D"</span> <span class="syntax-string">"&lt;~A ~D&gt;"</span> <span class="syntax-string">"Foo"</span> <span class="syntax-number">5</span> <span class="syntax-number">14</span> <span class="syntax-number">7</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"&lt;Foo 5&gt; 14"</span>
</span></code></pre><br/></section></section><section id="section-FORMATMiscellaneousOperations"><h3 class="section-title">FORMAT Miscellaneous Operations</h3><section id="section-TildeLeft-Paren:CaseConversion"><h4 class="section-title">Tilde Left-Paren: Case Conversion</h4><a id="index/text-left-paren (format directive)"></a><a id="index/text-tilde left-paren (format directive)"></a><br/><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~</span><span class="syntax-cons">(<span class="explicit-italic"> str</span>~)</span>
</span></code></pre><br/>The contained control string <span class="explicit-italic"> str</span> is processed, and what it produces
is subject to case conversion.<br/>With no flags, every <a class="glossary-reference" href="chapter-26.xhtml#glossary-uppercase">uppercase</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-character">character</a>
is converted to the corresponding <a class="glossary-reference" href="chapter-26.xhtml#glossary-lowercase">lowercase</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-character">character</a>.<br/><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~:</span><span class="syntax-symbol">(
Â¶</span></span></code></pre> capitalizes all words, as if by <a class="function-reference" href="chapter-16.xhtml#function-string-capitalize">string-capitalize</a>.<br/><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~@</span><span class="syntax-symbol">(
Â¶</span></span></code></pre> 
capitalizes just the first word and forces the rest to lower
case.<br/><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~:@</span><span class="syntax-symbol">(
Â¶</span></span></code></pre> converts every lowercase character
to the corresponding uppercase character.<br/>In this example <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~@</span><span class="syntax-symbol">(
Â¶</span></span></code></pre> is used to cause the first word
produced by <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~@R</span>
</span></code></pre> to be capitalized:<br/><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"~@R ~(~@R~)"</span> <span class="syntax-number">14</span> <span class="syntax-number">14</span>)</span> 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"XIV xiv"</span>
 <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">f</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">n</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"~@(~R~) error~:P detected."</span> <span class="syntax-interned-symbol">n</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">F</span>
 <span class="syntax-cons">(<span class="syntax-interned-symbol">f</span> <span class="syntax-number">0</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"Zero errors detected."</span>
 <span class="syntax-cons">(<span class="syntax-interned-symbol">f</span> <span class="syntax-number">1</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"One error detected."</span>
 <span class="syntax-cons">(<span class="syntax-interned-symbol">f</span> <span class="syntax-number">23</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"Twenty-three errors detected."</span>
</span></code></pre><br/>When case conversions appear nested, the outer conversion dominates,
as illustrated in the following example:<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"~@(how is ~:(BOB SMITH~)?~)"</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"How is bob smith?"</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mover>not<mi>â†’</mi></mover></math> <span class="syntax-string">"How is Bob Smith?"</span>
</span></code></pre><br/></section><section id="section-TildeRight-Paren:EndofCaseConversion"><h4 class="section-title">Tilde Right-Paren: End of Case Conversion</h4><a id="index/text-right-paren (format directive)"></a><a id="index/text-tilde right-paren (format directive)"></a><br/>
<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~</span>)
</span></code></pre> terminates a <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~</span><span class="syntax-symbol">(
Â¶</span></span></code></pre>.
The consequences of using it elsewhere are undefined.<br/></section><section id="section-TildeP:Plural"><h4 class="section-title">Tilde P: Plural</h4><a id="index/text-p (format directive)"></a><a id="index/text-tilde p (format directive)"></a><br/>
If <span class="explicit-italic"> arg</span> is not <a class="function-reference" href="chapter-5.xhtml#function-eql">eql</a> 
to the integer <pre><code><span class="syntax-root"><span class="syntax-number">1</span>
</span></code></pre>, a lowercase <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">s</span>
</span></code></pre> is
printed; if <span class="explicit-italic"> arg</span> is <a class="function-reference" href="chapter-5.xhtml#function-eql">eql</a> to <pre><code><span class="syntax-root"><span class="syntax-number">1</span>
</span></code></pre>, nothing is printed.  
If <span class="explicit-italic"> arg</span> is a floating-point <pre><code><span class="syntax-root"><span class="syntax-number">1.0</span>
</span></code></pre>, the <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">s</span>
</span></code></pre> is
printed.<br/><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~:P</span>
</span></code></pre> does the same thing, 
after doing a <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~:*</span>
</span></code></pre> to back up one argument;
that is, it prints a lowercase <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">s</span>
</span></code></pre> if the previous argument was not
<pre><code><span class="syntax-root"><span class="syntax-number">1</span>
</span></code></pre>.  <br/><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~@P</span>
</span></code></pre> 
prints <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">y</span>
</span></code></pre> if the argument is <pre><code><span class="syntax-root"><span class="syntax-number">1</span>
</span></code></pre>, or <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">ies</span>
</span></code></pre> if it is
not.  <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~:@P</span>
</span></code></pre> does the same thing, but backs up first.<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"~D tr~:@P/~D win~:P"</span> <span class="syntax-number">7</span> <span class="syntax-number">1</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"7 tries/1 win"</span>
<span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"~D tr~:@P/~D win~:P"</span> <span class="syntax-number">1</span> <span class="syntax-number">0</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"1 try/0 wins"</span>
<span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"~D tr~:@P/~D win~:P"</span> <span class="syntax-number">1</span> <span class="syntax-number">3</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"1 try/3 wins"</span>
</span></code></pre><br/></section></section><section id="section-FORMATMiscellaneousPseudo-Operations"><h3 class="section-title">FORMAT Miscellaneous Pseudo-Operations</h3><section id="section-TildeSemicolon:ClauseSeparator"><h4 class="section-title">Tilde Semicolon: Clause Separator</h4><a id="index/text-semicolon (format directive)"></a><a id="index/text-tilde semicolon (format directive)"></a><br/>
This separates clauses in <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~[</span>
</span></code></pre> and <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~&lt;</span>
</span></code></pre> constructs.
The consequences of using it elsewhere are undefined.<br/></section><section id="section-TildeCircumflex:EscapeUpward"><h4 class="section-title">Tilde Circumflex: Escape Upward</h4><a id="index/text-circumflex (format directive)"></a><a id="index/text-tilde circumflex (format directive)"></a><br/><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\hat</span> 
</span></code></pre><br/>This is an escape construct.  If there are no more arguments remaining to
be processed, then the immediately           
enclosing <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\lbr</span>  
</span></code></pre> or <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~&lt;</span>
</span></code></pre> construct
is terminated.  If there is no such enclosing construct, then the entire
formatting operation is terminated.  
In the <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~&lt;</span>
</span></code></pre> case, the formatting
is performed, but no more segments are processed before doing the
justification.     
<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\hat</span> 
</span></code></pre> may appear anywhere in a <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\lbr</span>  
</span></code></pre>
construct.<br/><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">donestr</span> <span class="syntax-string">"Done.~^ ~D warning~:P.~^ ~D error~:P."</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"Done.~^ ~D warning~:P.~^ ~D error~:P."</span>
 <span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-interned-symbol">donestr</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"Done."</span>
 <span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-interned-symbol">donestr</span> <span class="syntax-number">3</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"Done. 3 warnings."</span>
 <span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-interned-symbol">donestr</span> <span class="syntax-number">1</span> <span class="syntax-number">5</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"Done. 1 warning. 5 errors."</span>
</span></code></pre><br/>If a prefix parameter is given, then termination occurs if the parameter
is zero.  (Hence <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~{\hat}</span>
</span></code></pre> is equivalent to 
<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\#{\hat}</span>
</span></code></pre>.)  If two
parameters are given, termination occurs if they are equal.
  If three
parameters are given, termination occurs if the first is less than or
equal to the second and the second is less than or equal to the third.
Of course, this is useless if all the prefix parameters are constants; at
least one of them should be a <pre><code><span class="syntax-root">#
</span></code></pre> or a <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">V</span>
</span></code></pre> parameter.<br/>If <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~{\hat}</span>
</span></code></pre> is used within a <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~:\lbr</span>  
</span></code></pre> 
construct, then it terminates
the current iteration step because in the standard case it tests for
remaining arguments of the current step only; the next iteration step
commences immediately.  <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~:{\hat}</span>
</span></code></pre> is used to terminate
the iteration process.
<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~:{\hat}</span>
</span></code></pre> 
may be used only if the command it would terminate is 
<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~:\lbr</span>  
</span></code></pre> or <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~:@\lbr</span>  
</span></code></pre>.
The entire iteration process is terminated if and only if the sublist that is
supplying the arguments for the current iteration step is the last sublist in
the case of <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~:\lbr</span> 
</span></code></pre>, 
or the last <a class="function-reference" href="#function-format">format</a>        
argument in the case of <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~:@\lbr</span>  
</span></code></pre>. 
<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~:{\hat}</span>
</span></code></pre> is not
equivalent to <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\#:{\hat}</span>
</span></code></pre>; 
the latter terminates the entire iteration if and only if no
arguments remain for the current iteration step.
For example:<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"~:<span class="explicit-mono">{</span> ~@?~:^ ...~<span class="explicit-mono">}</span> "</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-string">"a"</span>)</span> <span class="syntax-cons">(<span class="syntax-string">"b"</span>)</span>)</span></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"a...b"</span>
</span></code></pre>
If <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~{\hat}</span>
</span></code></pre> appears within a control string being processed
under the control of a <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~?</span>
</span></code></pre> directive, but not within
any <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\lbr</span>  
</span></code></pre> or <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~&lt;</span>
</span></code></pre> construct within that string,
then the string being
processed will be terminated, thereby ending processing
of the <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~?</span>
</span></code></pre> directive.  Processing then
continues within the string   
containing the <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~?</span>
</span></code></pre> directive at the point following that directive.<br/>If <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~{\hat}</span>
</span></code></pre>                                          
appears within a <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~[</span>
</span></code></pre> or <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~</span><span class="syntax-symbol">(
Â¶</span></span></code></pre> construct,
then all the commands up to the <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~{\hat}</span>
</span></code></pre> are properly selected
or case-converted,                   
the <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~[</span>
</span></code></pre> or <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~</span><span class="syntax-symbol">(
Â¶</span></span></code></pre> processing is terminated,
and the outward search continues         
for a <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\lbr</span>  
</span></code></pre> or <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~&lt;</span>
</span></code></pre> construct
to be terminated.  For example:<br/><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">tellstr</span> <span class="syntax-string">"~@(~@[~R~]~^ ~A!~)"</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"~@(~@[~R~]~^ ~A!~)"</span>
 <span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-interned-symbol">tellstr</span> <span class="syntax-number">23</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"Twenty-three!"</span>
 <span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-interned-symbol">tellstr</span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"losers"</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">" Losers!"</span>
 <span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-interned-symbol">tellstr</span> <span class="syntax-number">23</span> <span class="syntax-string">"losers"</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"Twenty-three losers!"</span>
</span></code></pre><br/>Following are examples of the use of <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~{\hat}</span>
</span></code></pre> 
within a <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~&lt;</span>
</span></code></pre> construct.<br/><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"~15&lt;~S~;~^~S~;~^~S~&gt;"</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">foo</span></span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math>  <span class="syntax-string">"            FOO"</span>
 <span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"~15&lt;~S~;~^~S~;~^~S~&gt;"</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">foo</span></span> <span class="syntax-quote">'<span class="syntax-interned-symbol">bar</span></span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math>  <span class="syntax-string">"FOO         BAR"</span>
 <span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"~15&lt;~S~;~^~S~;~^~S~&gt;"</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">foo</span></span> <span class="syntax-quote">'<span class="syntax-interned-symbol">bar</span></span> <span class="syntax-quote">'<span class="syntax-interned-symbol">baz</span></span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math>  <span class="syntax-string">"FOO   BAR   BAZ"</span>
</span></code></pre><br/></section><section id="section-TildeNewline:IgnoredNewline"><h4 class="section-title">Tilde Newline: Ignored Newline</h4><a id="index/text-newline (format directive)"></a><a id="index/text-tilde newline (format directive)"></a><br/>
<a class="glossary-reference" href="chapter-26.xhtml#glossary-tilde">Tilde</a> immediately followed by a <a class="glossary-reference" href="chapter-26.xhtml#glossary-newline">newline</a> ignores the <a class="glossary-reference" href="chapter-26.xhtml#glossary-newline">newline</a>
and any following non-newline <a class="glossary-reference" href="chapter-26.xhtml#glossary-whitespace">whitespace</a><sub>1</sub> characters.
With a <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">:</span>
</span></code></pre>,
 the <a class="glossary-reference" href="chapter-26.xhtml#glossary-newline">newline</a> is ignored, 
 but any following <a class="glossary-reference" href="chapter-26.xhtml#glossary-whitespace">whitespace</a><sub>1</sub> is left in place.
With an <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">@</span>
</span></code></pre>,
 the <a class="glossary-reference" href="chapter-26.xhtml#glossary-newline">newline</a> is left in place,
 but any following <a class="glossary-reference" href="chapter-26.xhtml#glossary-whitespace">whitespace</a><sub>1</sub> is ignored.
For example:<br/><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">type-clash-error</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">fn</span> <span class="syntax-interned-symbol">nargs</span> <span class="syntax-interned-symbol">argnum</span> <span class="syntax-interned-symbol">right-type</span> <span class="syntax-interned-symbol">wrong-type</span>)</span>
   <span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="variable-reference" href="chapter-21.xhtml#variable-*error-output*">*error-output*</a>
           <span class="syntax-string">"~&amp;~S requires its ~:[~:R~;~*~]~ 
           argument to be of type ~S,~%but it was called ~
           with an argument of type ~S.~%"</span>
           <span class="syntax-interned-symbol">fn</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-eql">eql</a> <span class="syntax-interned-symbol">nargs</span> <span class="syntax-number">1</span>)</span> <span class="syntax-interned-symbol">argnum</span> <span class="syntax-interned-symbol">right-type</span> <span class="syntax-interned-symbol">wrong-type</span>)</span>)</span>
 <span class="syntax-cons">(<span class="syntax-interned-symbol">type-clash-error</span> <span class="syntax-quote">'<a class="function-reference" href="chapter-15.xhtml#function-aref">aref</a></span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-number">2</span> <span class="syntax-quote">'<a class="type-reference" href="chapter-12.xhtml#type-integer">integer</a></span> <span class="syntax-quote">'<a class="function-reference" href="chapter-15.xhtml#function-vector">vector</a></span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> AREF requires its second argument to be of type INTEGER,
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> but it was called with an argument of type VECTOR.
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>
 <span class="syntax-cons">(<span class="syntax-interned-symbol">type-clash-error</span> <span class="syntax-quote">'<a class="function-reference" href="chapter-14.xhtml#function-car">car</a></span> <span class="syntax-number">1</span> <span class="syntax-number">1</span> <span class="syntax-quote">'<a class="function-reference" href="chapter-14.xhtml#function-list">list</a></span> <span class="syntax-quote">'<a class="type-reference" href="chapter-12.xhtml#type-short-float">short-float</a></span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> CAR requires its argument to be of type LIST,
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> but it was called with an argument of type SHORT-FLOAT.
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>
</span></code></pre>
Note that in this example newlines appear in the output only as specified
by the <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\&amp;</span>
</span></code></pre> and <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~\%</span>
</span></code></pre> directives; the 
actual newline characters
in the control string are suppressed because each is preceded by a tilde.<br/></section></section><section id="section-AdditionalInformationaboutFORMATOperations"><h3 class="section-title">Additional Information about FORMAT Operations</h3><section id="section-NestingofFORMATOperations"><h4 class="section-title">Nesting of FORMAT Operations</h4>The case-conversion, conditional, iteration, and justification
constructs can contain other formatting constructs by bracketing them.
These constructs must nest properly with respect to each other.
For example, it is not legitimate to put the start of a case-conversion
construct in each arm of a conditional and the
end of the case-conversion construct outside the conditional:<br/><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"~:[abc~:@(def~;ghi~
:@(jkl~]mno~)"</span> <span class="syntax-interned-symbol">x</span>)</span> ;Invalid!
</span></code></pre>
This notation is invalid because the <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~[...~</span>;...~]
</span></code></pre>
and <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~</span><span class="syntax-cons">(<span class="syntax-interned-symbol">...~</span>)</span>
</span></code></pre> constructs are not properly nested.<br/>The processing indirection caused by the <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~?</span>
</span></code></pre> directive
is also a kind of nesting for the purposes of this rule of proper nesting.
It is not permitted to
start a bracketing construct within a string processed
under control of a <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~?</span>
</span></code></pre>                                      
directive and end the construct at some point after the <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~?</span>
</span></code></pre> construct
in the string containing that construct, or vice versa.
For example, this situation is invalid:<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"~@?ghi~)"</span> <span class="syntax-string">"abc~@(def"</span>)</span> ;Invalid!
</span></code></pre>
This notation
is invalid because the <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~?</span>
</span></code></pre>
and <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~</span><span class="syntax-cons">(<span class="syntax-interned-symbol">...~</span>)</span>
</span></code></pre> constructs are not properly nested.<br/></section><section id="section-MissingandAdditionalFORMATArguments"><h4 class="section-title">Missing and Additional FORMAT Arguments</h4>The consequences are undefined if no <span class="parameter">arg</span> remains for a directive 
requiring an argument.  However, it is permissible for one or more <span class="parameter">args</span> 
to remain unprocessed by a directive; such <span class="parameter">args</span> are ignored.<br/></section><section id="section-AdditionalFORMATParameters"><h4 class="section-title">Additional FORMAT Parameters</h4>The consequences are undefined if a format directive is given more parameters 
than it is described here as accepting.<br/></section><section id="section-UndefinedFORMATModifierCombinations"><h4 class="section-title">Undefined FORMAT Modifier Combinations</h4>The consequences are undefined if <a class="glossary-reference" href="chapter-26.xhtml#glossary-colon">colon</a> or <a class="glossary-reference" href="chapter-26.xhtml#glossary-at-sign">at-sign</a> modifiers
are given to a directive in a combination not specifically described
here as being meaningful.<br/></section></section><section id="section-ExamplesofFORMAT"><h3 class="section-title">Examples of FORMAT</h3><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"foo"</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"foo"</span>
 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-number">5</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">5</span>
 <span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"The answer is ~D."</span> <span class="syntax-interned-symbol">x</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"The answer is 5."</span>
 <span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"The answer is ~3D."</span> <span class="syntax-interned-symbol">x</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"The answer is   5."</span>
 <span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"The answer is ~3,'0D."</span> <span class="syntax-interned-symbol">x</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"The answer is 005."</span>
 <span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"The answer is ~:D."</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-expt">expt</a> <span class="syntax-number">47</span> <span class="syntax-interned-symbol">x</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"The answer is 229,345,007."</span>
 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">y</span> <span class="syntax-string">"elephant"</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"elephant"</span>
 <span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"Look at the ~A!"</span> <span class="syntax-interned-symbol">y</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"Look at the elephant!"</span>
 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">n</span> <span class="syntax-number">3</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">3</span>
 <span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"~D item~:P found."</span> <span class="syntax-interned-symbol">n</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"3 items found."</span>
 <span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"~R dog~:[s are~; is~] here."</span> <span class="syntax-interned-symbol">n</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-=">=</a> <span class="syntax-interned-symbol">n</span> <span class="syntax-number">1</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"three dogs are here."</span>
 <span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"~R dog~:*~[s are~; is~:;s are~] here."</span> <span class="syntax-interned-symbol">n</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"three dogs are here."</span>
 <span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"Here ~[are~;is~:;are~] ~:*~R pupp~:@P."</span> <span class="syntax-interned-symbol">n</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"Here are three puppies."</span>
</span></code></pre>
<pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">foo</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span>)</span>
  <span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"~6,2F|~6,2,1,'*F|~6,2,,'?F|~6F|~,2F|~F"</span>
          <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">x</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">FOO</span>
<span class="syntax-cons">(<span class="syntax-interned-symbol">foo</span> <span class="syntax-number">3.14159</span>)</span>  <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"  3.14| 31.42|  3.14|3.1416|3.14|3.14159"</span>
<span class="syntax-cons">(<span class="syntax-interned-symbol">foo</span> <span class="syntax-number">-3.14159</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">" -3.14|-31.42| -3.14|-3.142|-3.14|-3.14159"</span>
<span class="syntax-cons">(<span class="syntax-interned-symbol">foo</span> <span class="syntax-number">100.0</span>)</span>    <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"100.00|******|100.00| 100.0|100.00|100.0"</span>
<span class="syntax-cons">(<span class="syntax-interned-symbol">foo</span> <span class="syntax-number">1234.0</span>)</span>   <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"1234.00|******|??????|1234.0|1234.00|1234.0"</span>
<span class="syntax-cons">(<span class="syntax-interned-symbol">foo</span> <span class="syntax-number">0.006</span>)</span>    <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"  0.01|  0.06|  0.01| 0.006|0.01|0.006"</span>
</span></code></pre>
<pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">foo</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span>)</span>  
   <span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>
          <span class="syntax-string">"~9,2,1,,'*E|~10,3,2,2,'?,,'$E|~
           ~9,3,2,-2,'%@E|~9,2E"</span>
          <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">x</span>)</span>)</span>
<span class="syntax-cons">(<span class="syntax-interned-symbol">foo</span> <span class="syntax-number">3.14159</span>)</span>  <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"  3.14E+0| 31.42$-01|+.003E+03|  3.14E+0"</span>
<span class="syntax-cons">(<span class="syntax-interned-symbol">foo</span> <span class="syntax-number">-3.14159</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">" -3.14E+0|-31.42$-01|-.003E+03| -3.14E+0"</span>
<span class="syntax-cons">(<span class="syntax-interned-symbol">foo</span> <span class="syntax-number">1100.0</span>)</span>   <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"  1.10E+3| 11.00$+02|+.001E+06|  1.10E+3"</span>
<span class="syntax-cons">(<span class="syntax-interned-symbol">foo</span> <span class="syntax-number">1100.0L0</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"  1.10L+3| 11.00$+02|+.001L+06|  1.10L+3"</span>
<span class="syntax-cons">(<span class="syntax-interned-symbol">foo</span> <span class="syntax-number">1.1E13</span>)</span>   <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"*********| 11.00$+12|+.001E+16| 1.10E+13"</span>
<span class="syntax-cons">(<span class="syntax-interned-symbol">foo</span> <span class="syntax-number">1.1L120</span>)</span>  <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"*********|??????????|%%%%%%%%%|1.10L+120"</span>
; (foo 1.1L1200) \EV "*********|??????????|%%%%%%%%%|1.10L+1200"
</span></code></pre>
As an example of the effects of varying the scale factor, the code<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-6.xhtml#macro-dotimes">dotimes</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">k</span> <span class="syntax-number">13</span>)</span>
  <span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a> <span class="syntax-string">"~%Scale factor ~2D: |~13,6,2,VE|"</span>
          <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function--">-</a> <span class="syntax-interned-symbol">k</span> <span class="syntax-number">5</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function--">-</a> <span class="syntax-interned-symbol">k</span> <span class="syntax-number">5</span>)</span> <span class="syntax-number">3.14159</span>)</span>)</span>
</span></code></pre>
produces the following output:<br/><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">Scale</span> <span class="syntax-interned-symbol">factor</span> <span class="syntax-interned-symbol">-5:</span> <span class="syntax-interned-symbol">| 0.000003E+06|</span>
<span class="syntax-interned-symbol">Scale</span> <span class="syntax-interned-symbol">factor</span> <span class="syntax-interned-symbol">-4:</span> <span class="syntax-interned-symbol">| 0.000031E+05|</span>
<span class="syntax-interned-symbol">Scale</span> <span class="syntax-interned-symbol">factor</span> <span class="syntax-interned-symbol">-3:</span> <span class="syntax-interned-symbol">| 0.000314E+04|</span>
<span class="syntax-interned-symbol">Scale</span> <span class="syntax-interned-symbol">factor</span> <span class="syntax-interned-symbol">-2:</span> <span class="syntax-interned-symbol">| 0.003142E+03|</span>
<span class="syntax-interned-symbol">Scale</span> <span class="syntax-interned-symbol">factor</span> <span class="syntax-interned-symbol">-1:</span> <span class="syntax-interned-symbol">| 0.031416E+02|</span>
<span class="syntax-interned-symbol">Scale</span> <span class="syntax-interned-symbol">factor</span>  <span class="syntax-interned-symbol">0:</span> <span class="syntax-interned-symbol">| 0.314159E+01|</span>
<span class="syntax-interned-symbol">Scale</span> <span class="syntax-interned-symbol">factor</span>  <span class="syntax-interned-symbol">1:</span> <span class="syntax-interned-symbol">| 3.141590E+00|</span>
<span class="syntax-interned-symbol">Scale</span> <span class="syntax-interned-symbol">factor</span>  <span class="syntax-interned-symbol">2:</span> <span class="syntax-interned-symbol">| 31.41590E-01|</span>
<span class="syntax-interned-symbol">Scale</span> <span class="syntax-interned-symbol">factor</span>  <span class="syntax-interned-symbol">3:</span> <span class="syntax-interned-symbol">| 314.1590E-02|</span>
<span class="syntax-interned-symbol">Scale</span> <span class="syntax-interned-symbol">factor</span>  <span class="syntax-interned-symbol">4:</span> <span class="syntax-interned-symbol">| 3141.590E-03|</span>
<span class="syntax-interned-symbol">Scale</span> <span class="syntax-interned-symbol">factor</span>  <span class="syntax-interned-symbol">5:</span> <span class="syntax-interned-symbol">| 31415.90E-04|</span>
<span class="syntax-interned-symbol">Scale</span> <span class="syntax-interned-symbol">factor</span>  <span class="syntax-interned-symbol">6:</span> <span class="syntax-interned-symbol">| 314159.0E-05|</span>
<span class="syntax-interned-symbol">Scale</span> <span class="syntax-interned-symbol">factor</span>  <span class="syntax-interned-symbol">7:</span> <span class="syntax-interned-symbol">| 3141590.E-06|</span>
</span></code></pre><br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">foo</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span>)</span>
  <span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"~9,2,1,,'*G|~9,3,2,3,'?,,'$G|~9,3,2,0,'%G|~9,2G"</span>
         <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">x</span>)</span>)</span>                                     
<span class="syntax-cons">(<span class="syntax-interned-symbol">foo</span> <span class="syntax-number">0.0314159</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"  3.14E-2|314.2$-04|0.314E-01|  3.14E-2"</span>
<span class="syntax-cons">(<span class="syntax-interned-symbol">foo</span> <span class="syntax-number">0.314159</span>)</span>  <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"  0.31   |0.314    |0.314    | 0.31    "</span>
<span class="syntax-cons">(<span class="syntax-interned-symbol">foo</span> <span class="syntax-number">3.14159</span>)</span>   <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"   3.1   | 3.14    | 3.14    |  3.1    "</span>
<span class="syntax-cons">(<span class="syntax-interned-symbol">foo</span> <span class="syntax-number">31.4159</span>)</span>   <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"   31.   | 31.4    | 31.4    |  31.    "</span>
<span class="syntax-cons">(<span class="syntax-interned-symbol">foo</span> <span class="syntax-number">314.159</span>)</span>   <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"  3.14E+2| 314.    | 314.    |  3.14E+2"</span>
<span class="syntax-cons">(<span class="syntax-interned-symbol">foo</span> <span class="syntax-number">3141.59</span>)</span>   <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"  3.14E+3|314.2$+01|0.314E+04|  3.14E+3"</span>
<span class="syntax-cons">(<span class="syntax-interned-symbol">foo</span> <span class="syntax-number">3141.59L0</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"  3.14L+3|314.2$+01|0.314L+04|  3.14L+3"</span>
<span class="syntax-cons">(<span class="syntax-interned-symbol">foo</span> <span class="syntax-number">3.14E12</span>)</span>   <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"*********|314.0$+10|0.314E+13| 3.14E+12"</span>
; (foo 3.14L120)  \EV "*********|?????????|%%%%%%%%%|3.14L+120"
; (foo 3.14L1200) \EV "*********|?????????|%%%%%%%%%|3.14L+1200"
</span></code></pre><br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"~10&lt;foo~;bar~&gt;"</span>)</span>   <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"foo    bar"</span>
<span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"~10:&lt;foo~;bar~&gt;"</span>)</span>  <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"  foo  bar"</span>
<span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"~10&lt;foobar~&gt;"</span>)</span>     <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"    foobar"</span>
<span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"~10:&lt;foobar~&gt;"</span>)</span>    <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"    foobar"</span>
<span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"~10:@&lt;foo~;bar~&gt;"</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"  foo bar "</span>
<span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"~10@&lt;foobar~&gt;"</span>)</span>    <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"foobar    "</span>
<span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"~10:@&lt;foobar~&gt;"</span>)</span>   <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"  foobar  "</span>
</span></code></pre><br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"Written to ~A."</span> <span class="syntax-pathname">#P<span class="syntax-string">"foo.bin"</span></span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"Written to foo.bin."</span>
</span></code></pre>
</section><section id="section-NotesaboutFORMAT"><h3 class="section-title">Notes about FORMAT</h3>Formatted output is performed not only by <a class="function-reference" href="#function-format">format</a>,
but by certain other functions that accept a <a class="glossary-reference" href="chapter-26.xhtml#glossary-format control">format control</a>
the way <a class="function-reference" href="#function-format">format</a> does.  For example, error-signaling functions
such as <a class="function-reference" href="chapter-9.xhtml#function-cerror">cerror</a> accept <a class="glossary-reference" href="chapter-26.xhtml#glossary-format control">format controls</a>.

Note that the meaning of <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a> and <a class="symbol-reference" href="chapter-5.xhtml#symbol-t">t</a> as destinations to <a class="function-reference" href="#function-format">format</a> 
are different than those of <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a> and <a class="symbol-reference" href="chapter-5.xhtml#symbol-t">t</a> as <a class="glossary-reference" href="chapter-26.xhtml#glossary-stream designator">stream designators</a>.<br/>The <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~{\hat}</span>
</span></code></pre> should appear only at the beginning of a <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">~&lt;</span>
</span></code></pre> clause,
because it aborts the entire clause in which it appears (as well as
all following clauses).                                     <br/></section>
</section><br/><section id="section-Dictionary"><h2 class="section-title">Dictionary</h2>

<br/><br/>


<br/><div class="component" id="function-copy-pprint-dispatch"><div class="header"><span class="left"><span class="name" id="function-copy-pprint-dispatch">copy-pprint-dispatch</span></span><span class="right"><span class="ftype">Function</span></span></div><br/>

<dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">copy-pprint-dispatch</span>&nbsp;<span class="lambda-list"><span class="lambda-list-keyword">&amp;optional</span> table</span>&nbsp;â†’&nbsp;<span class="return-values">new-table</span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">table</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-pprint dispatch table">pprint dispatch table</a>, or <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.<br/><span class="parameter">new-table</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-fresh">fresh</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-pprint dispatch table">pprint dispatch table</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>Creates and returns a copy of the specified <span class="parameter">table</span>, 
or of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a> of <a class="variable-reference" href="#variable-*print-pprint-dispatch*">*print-pprint-dispatch*</a> if no <span class="parameter">table</span> is specified,
or of the initial <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a> of <a class="variable-reference" href="#variable-*print-pprint-dispatch*">*print-pprint-dispatch*</a> if <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a> is specified.<br/></dd></dl><dl><dt class="label">Examples</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Side Effects</dt><dd><span class="none">None</span>.<br/>
</dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd>Should signal an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-4.xhtml#type-type-error">type-error</a> if <span class="parameter">table</span> 
is not a <a class="glossary-reference" href="chapter-26.xhtml#glossary-pprint dispatch table">pprint dispatch table</a>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Notes</dt><dd><span class="none">None</span>.<br/></dd></dl>
</div><br/><br/><br/><div class="component" id="macro-formatter"><div class="header"><span class="left"><span class="name" id="macro-formatter">formatter</span></span><span class="right"><span class="ftype">Macro</span></span></div><br/>
<dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">formatter</span>&nbsp;<span class="lambda-list">control-string</span>&nbsp;â†’&nbsp;<span class="return-values">function</span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">control-string</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-format string">format string</a>; not evaluated.<br/><span class="parameter">function</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>Returns a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> which has behavior equivalent to:<br/><pre><code><span class="syntax-root"><span class="syntax-function">#'<span class="syntax-cons">(<a class="macro-reference" href="chapter-3.xhtml#macro-lambda">lambda</a> <span class="syntax-cons">(<a class="variable-reference" href="chapter-21.xhtml#variable-*standard-output*">*standard-output*</a> <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-rest">&amp;REST</a> <span class="syntax-interned-symbol">arguments</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-apply">apply</a> <span class="syntax-function">#'<a class="function-reference" href="#function-format">format</a></span> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a> <span class="explicit-italic"> control-string</span> <span class="syntax-interned-symbol">arguments</span>)</span>
    <span class="explicit-italic"> arguments-tail</span>)</span></span>
</span></code></pre><br/>where <span class="explicit-italic"> arguments-tail</span> is either the tail of <span class="explicit-italic"> arguments</span> 
which has as its <a class="glossary-reference" href="chapter-26.xhtml#glossary-car">car</a> the argument that would be processed next 
if there were more format directives in the <span class="parameter">control-string</span>, 
or else <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a> if no more <span class="explicit-italic"> arguments</span> follow the most recently
processed argument.<br/></dd></dl><dl><dt class="label">Examples</dt><dd><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-funcall">funcall</a> <span class="syntax-cons">(<a class="macro-reference" href="#macro-formatter">formatter</a> <span class="syntax-string">"~&amp;~A~A"</span>)</span> <a class="variable-reference" href="chapter-21.xhtml#variable-*standard-output*">*standard-output*</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">a</span></span> <span class="syntax-quote">'<span class="syntax-interned-symbol">b</span></span> <span class="syntax-quote">'<span class="syntax-interned-symbol">c</span></span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> AB
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-interned-symbol">C</span>)</span>

<span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a> <span class="syntax-cons">(<a class="macro-reference" href="#macro-formatter">formatter</a> <span class="syntax-string">"~&amp;~A~A"</span>)</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">a</span></span> <span class="syntax-quote">'<span class="syntax-interned-symbol">b</span></span> <span class="syntax-quote">'<span class="syntax-interned-symbol">c</span></span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> AB
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>
</span></code></pre><br/></dd></dl><dl><dt class="label">Side Effects</dt><dd><span class="none">None</span>.<br/>
</dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd>Might signal an error (at macro expansion time or at run time) if the argument
is not a valid <a class="glossary-reference" href="chapter-26.xhtml#glossary-format string">format string</a>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="function-reference" href="#function-format">format</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd><span class="none">None</span>.<br/></dd></dl>
</div><br/><br/>
<br/><div class="component" id="function-pprint-dispatch"><div class="header"><span class="left"><span class="name" id="function-pprint-dispatch">pprint-dispatch</span></span><span class="right"><span class="ftype">Function</span></span></div><br/>
<dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">pprint-dispatch</span>&nbsp;<span class="lambda-list">object <span class="lambda-list-keyword">&amp;optional</span> table</span>&nbsp;â†’&nbsp;<span class="return-values">function, found-p</span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">object</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.<br/><span class="parameter">table</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-pprint dispatch table">pprint dispatch table</a>, or <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.
 The default is the <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a> of <a class="variable-reference" href="#variable-*print-pprint-dispatch*">*print-pprint-dispatch*</a>.<br/><span class="parameter">function</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function designator">function designator</a>.<br/><span class="parameter">found-p</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generalized boolean">generalized boolean</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>Retrieves the highest priority function in <span class="parameter">table</span> that is
associated with a <a class="glossary-reference" href="chapter-26.xhtml#glossary-type specifier">type specifier</a> that matches <span class="parameter">object</span>.
The function is chosen by finding all of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-type specifier">type specifiers</a> in <span class="parameter">table</span>
that match the <span class="parameter">object</span> and 
selecting the highest priority function associated with any of these
<a class="glossary-reference" href="chapter-26.xhtml#glossary-type specifier">type specifiers</a>.  If there is more than one highest priority function,
an arbitrary choice is made.  If no <a class="glossary-reference" href="chapter-26.xhtml#glossary-type specifier">type specifiers</a> match the 
<span class="parameter">object</span>, a function is returned that prints <span class="parameter">object</span> 
using <a class="function-reference" href="#function-print-object">print-object</a>.

The <a class="glossary-reference" href="chapter-26.xhtml#glossary-secondary value">secondary value</a>, <span class="parameter">found-p</span>, is <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a> if a matching
<a class="glossary-reference" href="chapter-26.xhtml#glossary-type specifier">type specifier</a> was found in <span class="parameter">table</span>, or <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a> otherwise.<br/>If <span class="parameter">table</span> is <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>,
retrieval is done in the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-initial pprint dispatch table">initial pprint dispatch table</a>.<br/></dd></dl><dl><dt class="label">Examples</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Side Effects</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Affected By</dt><dd>The state of the <span class="parameter">table</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd>Should signal an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-4.xhtml#type-type-error">type-error</a> if <span class="glossary-reference error">glossary:table</span> is neither a
<span class="glossary-reference error">glossary:pprint-dispatch-table</span> nor <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Notes</dt><dd><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<a class="variable-reference" href="#variable-*print-pretty*">*print-pretty*</a> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a>)</span>)</span>
  <span class="syntax-cons">(<a class="function-reference" href="#function-write">write</a> <span class="syntax-interned-symbol">object</span> <span class="syntax-keyword-symbol">:stream</span> <span class="syntax-interned-symbol">s</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>â‰¡</mo></math> <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-funcall">funcall</a> <span class="syntax-cons">(<a class="function-reference" href="#function-pprint-dispatch">pprint-dispatch</a> <span class="syntax-interned-symbol">object</span>)</span> <span class="syntax-interned-symbol">s</span> <span class="syntax-interned-symbol">object</span>)</span>
</span></code></pre><br/></dd></dl>
</div><br/><br/><br/><div class="component" id="macro-pprint-exit-if-list-exhausted"><div class="header"><span class="left"><span class="name" id="macro-pprint-exit-if-list-exhausted">pprint-exit-if-list-exhausted</span></span><span class="right"><span class="ftype">Local Macro</span></span></div><br/>
<dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">pprint-exit-if-list-exhausted</span>&nbsp;<span class="lambda-list"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>âŸ¨</mi></math><span class="explicit-italic"> no <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">arguments</a></span><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>âŸ©</mi></math></span>&nbsp;â†’&nbsp;<span class="return-values"><a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a></span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>Tests whether or not the <span class="parameter">list</span> passed to 
the <span class="glossary-reference error">glossary:lexically current logical block</span>
has been exhausted; see <span class="section-reference error">section:DynamicControlofOutput.</span>
If this <span class="parameter">list</span> has been
reduced to <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>, <a class="macro-reference" href="#macro-pprint-exit-if-list-exhausted">pprint-exit-if-list-exhausted</a> terminates the execution
of the <span class="glossary-reference error">glossary:lexically current logical block</span> except for the printing
of the suffix.  Otherwise <a class="macro-reference" href="#macro-pprint-exit-if-list-exhausted">pprint-exit-if-list-exhausted</a> returns <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.<br/>Whether or not <a class="macro-reference" href="#macro-pprint-exit-if-list-exhausted">pprint-exit-if-list-exhausted</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-fbound">fbound</a> in the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-global environment">global environment</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a>;
however, the restrictions on redefinition and <a class="glossary-reference" href="chapter-26.xhtml#glossary-shadow">shadowing</a> of
<a class="macro-reference" href="#macro-pprint-exit-if-list-exhausted">pprint-exit-if-list-exhausted</a> are the same as for <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbols</a> in the <a class="package-reference" href="chapter-1.xhtml#package-common-lisp">common-lisp</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-package">package</a>
which are <a class="glossary-reference" href="chapter-26.xhtml#glossary-fbound">fbound</a> in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-global environment">global environment</a>.
The consequences of attempting to use <a class="macro-reference" href="#macro-pprint-exit-if-list-exhausted">pprint-exit-if-list-exhausted</a> outside
of <a class="macro-reference" href="#macro-pprint-logical-block">pprint-logical-block</a> are undefined.

</dd></dl><dl><dt class="label">Examples</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Side Effects</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd>An error is signaled (at macro expansion time or at run time) if
<a class="macro-reference" href="#macro-pprint-exit-if-list-exhausted">pprint-exit-if-list-exhausted</a> is used anywhere other than
lexically within a call on <a class="macro-reference" href="#macro-pprint-logical-block">pprint-logical-block</a>.  
Also, the consequences of executing <a class="macro-reference" href="#macro-pprint-exit-if-list-exhausted">pprint-exit-if-list-exhausted</a> outside
of the dynamic extent of the <a class="macro-reference" href="#macro-pprint-logical-block">pprint-logical-block</a> which lexically
contains it are undefined.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="macro-reference" href="#macro-pprint-logical-block">pprint-logical-block</a>, <a class="macro-reference" href="#macro-pprint-pop">pprint-pop</a>.<br/></dd></dl><dl><dt class="label">Notes</dt><dd><span class="none">None</span>.<br/></dd></dl>
</div><br/><br/>
<br/><div class="component" id="function-pprint-fill"><div class="header"><span class="left"><span class="name" id="function-pprint-fill">pprint-fill</span>, <span class="name" id="function-pprint-linear">pprint-linear</span>, <span class="name" id="function-pprint-tabular">pprint-tabular</span></span><span class="right"><span class="ftype">Function</span></span></div><br/>
<dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">pprint-fill</span>&nbsp;<span class="lambda-list">stream object <span class="lambda-list-keyword">&amp;optional</span> colon-p at-sign-p</span>&nbsp;â†’&nbsp;<span class="return-values"><a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a></span></span><br/>
<span class="function-definition"><span class="name">pprint-linear</span>&nbsp;<span class="lambda-list">stream object <span class="lambda-list-keyword">&amp;optional</span> colon-p at-sign-p</span>&nbsp;â†’&nbsp;<span class="return-values"><a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a></span></span><br/>
<span class="function-definition"><span class="name">pprint-tabular</span>&nbsp;<span class="lambda-list">stream object <span class="lambda-list-keyword">&amp;optional</span> colon-p at-sign-p tabsize</span>&nbsp;â†’&nbsp;<span class="return-values"><a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a></span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">stream</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-output">output</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-stream designator">stream designator</a>.<br/><span class="parameter">object</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.<br/><span class="parameter">colon-p</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generalized boolean">generalized boolean</a>.
  The default is <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>.<br/><span class="parameter">at-sign-p</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generalized boolean">generalized boolean</a>.
  The default is <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a>.<br/><span class="parameter">tabsize</span>&mdash;a non-negative <a class="glossary-reference" href="chapter-26.xhtml#glossary-integer">integer</a>.
  The default is <pre><code><span class="syntax-root"><span class="syntax-number">16</span>
</span></code></pre>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>The functions <a class="function-reference" href="#function-pprint-fill">pprint-fill</a>, <a class="function-reference" href="#function-pprint-linear">pprint-linear</a>, and
<a class="function-reference" href="#function-pprint-tabular">pprint-tabular</a> specify particular ways of <a class="glossary-reference" href="chapter-26.xhtml#glossary-pretty print">pretty printing</a>
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> to <span class="parameter">stream</span>. 
Each function prints parentheses around the output if and only
if <span class="parameter">colon-p</span> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>.
Each function ignores its <span class="parameter">at-sign-p</span> argument.
(Both arguments are included even though only one is needed
so that these functions can be used via <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">/.../</span>
and as <a class="function-reference" href="#function-set-pprint-dispatch">set-pprint-dispatch</a> functions, as well as directly.)
Each function handles abbreviation and the detection of circularity
and sharing correctly, and uses <a class="function-reference" href="#function-write">write</a> to print <span class="parameter">object</span>
when it is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-non-list">non-list</a>.

If <span class="parameter">object</span> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> and 
if the <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a> of <a class="variable-reference" href="#variable-*print-pretty*">*print-pretty*</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>,
each of these functions prints <span class="parameter">object</span>
using a minimum of <a class="glossary-reference" href="chapter-26.xhtml#glossary-whitespace">whitespace</a>,
as described in <a class="section-reference" href="#section-PrintingListsAndConses">Printing Lists and Conses</a>.
Otherwise (if <span class="parameter">object</span> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> and 
	   if the <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a> of <a class="variable-reference" href="#variable-*print-pretty*">*print-pretty*</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>):<br/><ul><li>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="#function-pprint-linear">pprint-linear</a> prints a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> either all on one line, 
or with each <a class="glossary-reference" href="chapter-26.xhtml#glossary-element">element</a> on a separate line.  <br/></li><li>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="#function-pprint-fill">pprint-fill</a> prints a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> with as many <a class="glossary-reference" href="chapter-26.xhtml#glossary-element">elements</a>
as possible on each line.<br/></li><li>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="#function-pprint-tabular">pprint-tabular</a> is the same as <a class="function-reference" href="#function-pprint-fill">pprint-fill</a>
except that it prints the <a class="glossary-reference" href="chapter-26.xhtml#glossary-element">elements</a> so that they line up in columns.
The <span class="parameter">tabsize</span> specifies the column spacing in <a class="glossary-reference" href="chapter-26.xhtml#glossary-em">ems</a>,
which is the total spacing from the leading edge of one column to
the leading edge of the next.
</li></ul><br/>
</dd></dl><dl><dt class="label">Examples</dt><dd>Evaluating the following with a line length of <pre><code><span class="syntax-root"><span class="syntax-number">25</span>
</span></code></pre> produces the output shown.<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-progn">progn</a> <span class="syntax-cons">(<a class="function-reference" href="#function-princ">princ</a> <span class="syntax-string">"Roads "</span>)</span> 
       <span class="syntax-cons">(<a class="function-reference" href="#function-pprint-tabular">pprint-tabular</a> <a class="variable-reference" href="chapter-21.xhtml#variable-*standard-output*">*standard-output*</a> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">elm</span> <span class="syntax-interned-symbol">main</span> <span class="syntax-interned-symbol">maple</span> <span class="syntax-interned-symbol">center</span>)</span></span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-number">8</span>)</span>)</span>
<span class="syntax-interned-symbol">Roads</span> <span class="syntax-interned-symbol">ELM</span>     <span class="syntax-interned-symbol">MAIN</span>
      <span class="syntax-interned-symbol">MAPLE</span>   <span class="syntax-interned-symbol">CENTER</span>
</span></code></pre><br/></dd></dl><dl><dt class="label">Side Effects</dt><dd>Performs output to the indicated <a class="glossary-reference" href="chapter-26.xhtml#glossary-stream">stream</a>.<br/></dd></dl><dl><dt class="label">Affected By</dt><dd>The cursor position on the indicated <a class="glossary-reference" href="chapter-26.xhtml#glossary-stream">stream</a>, if it can be determined.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Notes</dt><dd>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="#function-pprint-tabular">pprint-tabular</a> could be defined as follows:<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <a class="function-reference" href="#function-pprint-tabular">pprint-tabular</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">s</span> <a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <a class="lambda-list-keyword-reference" href="chapter-3.xhtml#lambda-list-keyword-optional">&amp;OPTIONAL</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">colon-p</span> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a>)</span> <span class="syntax-interned-symbol">at-sign-p</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">tabsize</span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span>)</span>
  <span class="syntax-cons">(<a class="symbol-reference" href="chapter-3.xhtml#symbol-declare">declare</a> <span class="syntax-cons">(<a class="declaration-reference" href="chapter-3.xhtml#declaration-ignore">ignore</a> <span class="syntax-interned-symbol">at-sign-p</span>)</span>)</span>
  <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-when">when</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-null">null</a> <span class="syntax-interned-symbol">tabsize</span>)</span> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">tabsize</span> <span class="syntax-number">16</span>)</span>)</span>
  <span class="syntax-cons">(<a class="macro-reference" href="#macro-pprint-logical-block">pprint-logical-block</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">s</span> <a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-keyword-symbol">:prefix</span> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-interned-symbol">colon-p</span> <span class="syntax-string">"("</span> <span class="syntax-string">""</span>)</span>
                                <span class="syntax-keyword-symbol">:suffix</span> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-interned-symbol">colon-p</span> <span class="syntax-string">")"</span> <span class="syntax-string">""</span>)</span>)</span>
    <span class="syntax-cons">(<a class="macro-reference" href="#macro-pprint-exit-if-list-exhausted">pprint-exit-if-list-exhausted</a>)</span>
    <span class="syntax-cons">(<a class="macro-reference" href="chapter-6.xhtml#macro-loop">loop</a> <span class="syntax-cons">(<a class="function-reference" href="#function-write">write</a> <span class="syntax-cons">(<a class="macro-reference" href="#macro-pprint-pop">pprint-pop</a>)</span> <span class="syntax-keyword-symbol">:stream</span> <span class="syntax-interned-symbol">s</span>)</span>
          <span class="syntax-cons">(<a class="macro-reference" href="#macro-pprint-exit-if-list-exhausted">pprint-exit-if-list-exhausted</a>)</span>
          <span class="syntax-cons">(<a class="function-reference" href="chapter-21.xhtml#function-write-char">write-char</a> <span class="syntax-character">#\Space</span> <span class="syntax-interned-symbol">s</span>)</span>
          <span class="syntax-cons">(<a class="function-reference" href="#function-pprint-tab">pprint-tab</a> <span class="syntax-keyword-symbol">:section-relative</span> <span class="syntax-number">0</span> <span class="syntax-interned-symbol">tabsize</span> <span class="syntax-interned-symbol">s</span>)</span>
          <span class="syntax-cons">(<a class="function-reference" href="#function-pprint-newline">pprint-newline</a> <span class="syntax-keyword-symbol">:fill</span> <span class="syntax-interned-symbol">s</span>)</span>)</span>)</span>)</span>
</span></code></pre><br/>Note that it would have been inconvenient to specify this function
using <a class="function-reference" href="#function-format">format</a>, because of the need to pass its <span class="parameter">tabsize</span> argument
through to a <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">:T</span> format directive nested within an iteration over a list.<br/></dd></dl>
</div><br/><br/>
<br/><div class="component" id="function-pprint-indent"><div class="header"><span class="left"><span class="name" id="function-pprint-indent">pprint-indent</span></span><span class="right"><span class="ftype">Function</span></span></div><br/>
<dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">pprint-indent</span>&nbsp;<span class="lambda-list">relative-to n <span class="lambda-list-keyword">&amp;optional</span> stream</span>&nbsp;â†’&nbsp;<span class="return-values"><a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a></span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">relative-to</span>&mdash;either <span class="keyword">:block</span> or <span class="keyword">:current</span>.<br/><span class="parameter">n</span>&mdash;a <span class="glossary-reference error">glossary:real</span>.<br/><span class="parameter">stream</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-output">output</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-stream designator">stream designator</a>.
  The default is <a class="glossary-reference" href="chapter-26.xhtml#glossary-standard output">standard output</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd><a class="function-reference" href="#function-pprint-indent">pprint-indent</a> specifies the indentation to use in a logical block on <a class="glossary-reference" href="chapter-26.xhtml#glossary-stream">stream</a>.
If <span class="parameter">stream</span> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-pretty printing stream">pretty printing stream</a>
   and the <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a> of <a class="variable-reference" href="#variable-*print-pretty*">*print-pretty*</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>,
<a class="function-reference" href="#function-pprint-indent">pprint-indent</a> sets the indentation in the innermost 
dynamically enclosing logical block;
otherwise, <a class="function-reference" href="#function-pprint-indent">pprint-indent</a> has no effect.

<span class="parameter">N</span> specifies the indentation in
<a class="glossary-reference" href="chapter-26.xhtml#glossary-em">ems</a>.  If <span class="parameter">relative-to</span> is <span class="keyword">:block</span>, the indentation is set
to the horizontal position of the first character in the <span class="glossary-reference error">glossary:dynamically current logical block</span> plus <span class="parameter">n</span> 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-em">ems</a>. If <span class="parameter">relative-to</span> is <span class="keyword">:current</span>, the indentation is set
to the current output position plus <span class="parameter">n</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-em">ems</a>. (For robustness
in the face of variable-width fonts, it is advisable to use <span class="keyword">:current</span>
with an <span class="parameter">n</span> of zero whenever possible.)<br/><span class="parameter">N</span> can be negative;
however, the total indentation cannot be moved 
left of the beginning of the line 
or left of the end of the rightmost per-line prefix&mdash;an attempt to move beyond
one of these limits is treated
the same as an attempt to move to that limit.
Changes in indentation caused by <span class="parameter">pprint-indent</span>
do not take effect until after the next line break.  In addition, in 
miser mode all calls to <a class="function-reference" href="#function-pprint-indent">pprint-indent</a> are ignored, forcing the lines 
corresponding to the logical block to line up under the first character in
the block.<br/></dd></dl><dl><dt class="label">Examples</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Side Effects</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd>An error is signaled if <span class="parameter">relative-to</span> is any <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> other
than <span class="keyword">:block</span> or <span class="keyword">:current</span>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="section-reference" href="#section-TildeI">Tilde I: Indent</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd><span class="none">None</span>.<br/></dd></dl>
</div><br/><br/>
<br/><div class="component" id="macro-pprint-logical-block"><div class="header"><span class="left"><span class="name" id="macro-pprint-logical-block">pprint-logical-block</span></span><span class="right"><span class="ftype">Macro</span></span></div><br/>

<dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">pprint-logical-block</span>&nbsp;<span class="lambda-list"><span class="explicit-roman">(</span>stream-symbol object 
					     <span class="lambda-list-keyword">&amp;key</span> prefix per-line-prefix suffix<span class="explicit-roman">)</span>
				<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">declaration</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">form</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span></span>&nbsp;â†’&nbsp;<span class="return-values"><a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a></span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">stream-symbol</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-stream variable designator">stream variable designator</a>.<br/><span class="parameter">object</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>; evaluated.<br/><span class="keyword">:prefix</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-string">string</a>; evaluated.
	       Complicated defaulting behavior; see below.<br/><span class="keyword">:per-line-prefix</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-string">string</a>; evaluated.
		        Complicated defaulting behavior; see below.<br/><span class="keyword">:suffix</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-string">string</a>; evaluated.
	       The default is the <a class="glossary-reference" href="chapter-26.xhtml#glossary-null">null</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-string">string</a>.<br/><span class="parameter">declaration</span>&mdash;a <a class="symbol-reference" href="chapter-3.xhtml#symbol-declare">declare</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-expression">expression</a>; not evaluated.<br/><span class="parameter">forms</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-implicit progn">implicit progn</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>Causes printing to be grouped into a logical block.<br/>The logical block is printed to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-stream">stream</a> that is the <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a>
of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variable</a> denoted by <span class="parameter">stream-symbol</span>.
During the execution of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a>,
that <a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variable</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-bound">bound</a> to a <a class="glossary-reference" href="chapter-26.xhtml#glossary-pretty printing stream">pretty printing stream</a>
that supports decisions about the arrangement of output
and then forwards the output to the destination stream.
All the standard printing functions 
  (<span class="explicit-italic"> e.g.</span>,  <a class="function-reference" href="#function-write">write</a>,
       <a class="function-reference" href="#function-princ">princ</a>,
   and <a class="function-reference" href="chapter-21.xhtml#function-terpri">terpri</a>)
can be used to print output to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-pretty printing stream">pretty printing stream</a>.
All and only the output sent to this <a class="glossary-reference" href="chapter-26.xhtml#glossary-pretty printing stream">pretty printing stream</a>
is treated as being in the logical block.<br/>The <span class="parameter">prefix</span> specifies a prefix to be printed before the beginning of
the logical block.
The <span class="parameter">per-line-prefix</span> specifies a prefix that is printed before the block
and at the beginning of each new line in the block.
The <span class="keyword">:prefix</span> and <span class="keyword">:pre-line-prefix</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">arguments</a> are mutually exclusive.
If neither <span class="keyword">:prefix</span> nor <span class="keyword">:per-line-prefix</span> is specified,
a <span class="parameter">prefix</span> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-null">null</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-string">string</a> is assumed.<br/>The <span class="parameter">suffix</span> specifies a suffix that is printed just after the logical block.<br/>The <span class="parameter">object</span> is 
normally 
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> that the body <span class="parameter">forms</span> are responsible for printing.
If <span class="parameter">object</span> is not a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a>,
it is printed using <a class="function-reference" href="#function-write">write</a>.
(This makes it easier to write printing functions that are robust
 in the face of malformed arguments.)
If <a class="variable-reference" href="#variable-*print-circle*">*print-circle*</a>
is <a class="glossary-reference" href="chapter-26.xhtml#glossary-non-nil">non-nil</a> and <span class="parameter">object</span> is a circular (or shared) reference to a <a class="glossary-reference" href="chapter-26.xhtml#glossary-cons">cons</a>,
then an appropriate ``<pre><code><span class="syntax-root">#<span class="explicit-italic"> n</span>#
</span></code></pre>'' marker is printed.  (This
makes it easy to write printing functions that provide full support
for circularity and sharing abbreviation.)  If <a class="variable-reference" href="#variable-*print-level*">*print-level*</a> is not
<a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a> and the logical block is at a dynamic nesting depth of greater
than <a class="variable-reference" href="#variable-*print-level*">*print-level*</a> in logical blocks, ``<pre><code><span class="syntax-root">#
</span></code></pre>'' is printed.
(This makes easy to write printing functions that provide full support for depth
abbreviation.)<br/>If either of the three conditions above occurs, the indicated output is
printed on <span class="parameter">stream-symbol</span> and the body <span class="parameter">forms</span> are skipped 
along with the printing of the <span class="keyword">:prefix</span> and <span class="keyword">:suffix</span>.
(If the body <span class="parameter">forms</span> are not to be responsible for printing a list,
then the first two tests above can be turned off by supplying <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a> for
the <span class="parameter">object</span> argument.)<br/>In addition to the <span class="parameter">object</span> argument of <a class="macro-reference" href="#macro-pprint-logical-block">pprint-logical-block</a>,
the arguments of the standard printing functions (such as <a class="function-reference" href="#function-write">write</a>, 
<a class="function-reference" href="#function-print">print</a>, <a class="function-reference" href="#function-prin1">prin1</a>, and <a class="function-reference" href="#function-pprint">pprint</a>, as well as the arguments
of the standard <span class="glossary-reference error">glossary:format directives</span> such as <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">A</span>, <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">S</span>,
(and <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">W</span>) are all checked (when necessary) for circularity and sharing.
However, such checking is not applied to the arguments of the
functions <a class="function-reference" href="chapter-21.xhtml#function-write-line">write-line</a>, <a class="function-reference" href="chapter-21.xhtml#function-write-string">write-string</a>, and <a class="function-reference" href="chapter-21.xhtml#function-write-char">write-char</a>
or to the literal text output by <a class="function-reference" href="#function-format">format</a>.  A consequence of this is
that you must use one of the latter functions if you want to print some 
literal text in the output that is not supposed to be checked for circularity
or sharing.

The body <span class="parameter">forms</span> of a <a class="macro-reference" href="#macro-pprint-logical-block">pprint-logical-block</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>
must not perform any side-effects on the surrounding environment; for 
example, no <a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variables</a> must be assigned which have not been
<a class="glossary-reference" href="chapter-26.xhtml#glossary-bound">bound</a> within its scope.  

The <a class="macro-reference" href="#macro-pprint-logical-block">pprint-logical-block</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a> may be used regardless of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a> of <a class="variable-reference" href="#variable-*print-pretty*">*print-pretty*</a>.

</dd></dl><dl><dt class="label">Examples</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Side Effects</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Affected By</dt><dd><a class="variable-reference" href="#variable-*print-circle*">*print-circle*</a>, <a class="variable-reference" href="#variable-*print-level*">*print-level*</a>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd>An error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-4.xhtml#type-type-error">type-error</a> is signaled if any of the <span class="keyword">:suffix</span>, 
<span class="keyword">:prefix</span>, or <span class="keyword">:per-line-prefix</span> is supplied but does not evaluate 
to a <a class="glossary-reference" href="chapter-26.xhtml#glossary-string">string</a>.<br/>An error is signaled if <span class="keyword">:prefix</span> and <span class="keyword">:pre-line-prefix</span> are both used.<br/><a class="macro-reference" href="#macro-pprint-logical-block">pprint-logical-block</a> and the <a class="glossary-reference" href="chapter-26.xhtml#glossary-pretty printing stream">pretty printing stream</a> it creates 
have <a class="glossary-reference" href="chapter-26.xhtml#glossary-dynamic extent">dynamic extent</a>.  The consequences are undefined if, outside
of this extent, output is attempted to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-pretty printing stream">pretty printing stream</a> it creates.<br/>It is also unspecified what happens if, within this extent, any output is 
sent directly to the underlying destination stream.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="macro-reference" href="#macro-pprint-pop">pprint-pop</a>,
<a class="macro-reference" href="#macro-pprint-exit-if-list-exhausted">pprint-exit-if-list-exhausted</a>,
<a class="section-reference" href="#section-TildeLessThanLogicalBlock">Tilde Less-Than-Sign: Logical Block</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd>One reason for using the <a class="macro-reference" href="#macro-pprint-logical-block">pprint-logical-block</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a> when the <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a> of <a class="variable-reference" href="#variable-*print-pretty*">*print-pretty*</a>
is <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a> would be to allow it to perform checking for <a class="glossary-reference" href="chapter-26.xhtml#glossary-dotted list">dotted lists</a>, 
as well as (in conjunction with <a class="macro-reference" href="#macro-pprint-pop">pprint-pop</a>) 
checking for <a class="variable-reference" href="#variable-*print-level*">*print-level*</a> or <a class="variable-reference" href="#variable-*print-length*">*print-length*</a> being exceeded.

Detection of circularity and sharing is supported by the <a class="glossary-reference" href="chapter-26.xhtml#glossary-pretty printer">pretty printer</a>
by in essence performing requested output twice.  On the first pass,
circularities and sharing are detected and the actual outputting of characters
is suppressed.  On the second pass, the appropriate ``<pre><code><span class="syntax-root">#<span class="parameter">n</span>=
</span></code></pre>'' 
and ``<pre><code><span class="syntax-root">#<span class="parameter">n</span>#
</span></code></pre>'' markers are inserted and characters are output.
This is why the restriction on side-effects is necessary.
Obeying this restriction is facilitated by using <a class="macro-reference" href="#macro-pprint-pop">pprint-pop</a>,
instead of an ordinary <a class="macro-reference" href="chapter-14.xhtml#macro-pop">pop</a> when traversing a list being printed by 
the body <span class="parameter">forms</span> of the <a class="macro-reference" href="#macro-pprint-logical-block">pprint-logical-block</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>.)<br/></dd></dl>
</div><br/><br/>
<br/><div class="component" id="function-pprint-newline"><div class="header"><span class="left"><span class="name" id="function-pprint-newline">pprint-newline</span></span><span class="right"><span class="ftype">Function</span></span></div><br/>
<dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">pprint-newline</span>&nbsp;<span class="lambda-list">kind <span class="lambda-list-keyword">&amp;optional</span> stream</span>&nbsp;â†’&nbsp;<span class="return-values"><a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a></span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">kind</span>&mdash;one of <span class="keyword">:linear</span>, <span class="keyword">:fill</span>, <span class="keyword">:miser</span>, or <span class="keyword">:mandatory</span>.<br/><span class="parameter">stream</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-stream designator">stream designator</a>.
 The default is <a class="glossary-reference" href="chapter-26.xhtml#glossary-standard output">standard output</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>If <span class="parameter">stream</span> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-pretty printing stream">pretty printing stream</a>
   and the <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a> of <a class="variable-reference" href="#variable-*print-pretty*">*print-pretty*</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>,
a line break is inserted in the output 
when the appropriate condition below is satisfied;
otherwise, <a class="function-reference" href="#function-pprint-newline">pprint-newline</a> has no effect.

<span class="parameter">Kind</span> specifies the style of conditional newline.
This <a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter">parameter</a> is treated as follows:<br/><dl><dt><span class="keyword">:linear</span></dt><dd>This specifies a
``linear-style'' <a class="glossary-reference" href="chapter-26.xhtml#glossary-conditional newline">conditional newline</a>.<a id="index/text-linear-style conditional newline"></a>
A line break is inserted 
if and only if the immediately containing <a class="glossary-reference" href="chapter-26.xhtml#glossary-section">section</a>
cannot be printed on one line.
The effect of this is that line breaks are
either inserted at every linear-style conditional newline in a logical block
or at none of them.<br/></dd><dt><span class="keyword">:miser</span></dt><dd>This specifies a 
``miser-style'' <a class="glossary-reference" href="chapter-26.xhtml#glossary-conditional newline">conditional newline</a>.<a id="index/text-miser-style conditional newline"></a>
A line break is inserted
if and only if the immediately containing <a class="glossary-reference" href="chapter-26.xhtml#glossary-section">section</a>
cannot be printed on one line
and miser style is in effect in the immediately containing logical block.
The effect of this is that miser-style conditional newlines
act like linear-style conditional newlines,
but only when miser style is in effect.
Miser style is in effect for a logical block if and only if 
the starting position of the logical block
is less than or equal to
<a class="variable-reference" href="#variable-*print-miser-width*">*print-miser-width*</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-em">ems</a> from the right margin.<br/></dd><dt><span class="keyword">:fill</span></dt><dd>This specifies a
``fill-style'' <a class="glossary-reference" href="chapter-26.xhtml#glossary-conditional newline">conditional newline</a>.<a id="index/text-fill-style conditional newline"></a>
A line break is inserted if and only if
either (a) the following <a class="glossary-reference" href="chapter-26.xhtml#glossary-section">section</a> cannot be printed 
	   on the end of the current line,
       (b) the preceding <a class="glossary-reference" href="chapter-26.xhtml#glossary-section">section</a> was not printed on a single line,
    or (c) the immediately containing <a class="glossary-reference" href="chapter-26.xhtml#glossary-section">section</a> cannot
	   be printed on one line and miser style is in effect
	   in the immediately containing logical block.
If a logical block is broken up into a number of subsections
by fill-style conditional newlines,
the basic effect is that the logical block
is printed with as many subsections as possible on each line.
However, if miser style is in effect,
fill-style conditional newlines act like linear-style conditional newlines.<br/></dd><dt><span class="keyword">:mandatory</span></dt><dd>This specifies a
``mandatory-style'' <a class="glossary-reference" href="chapter-26.xhtml#glossary-conditional newline">conditional newline</a>.<a id="index/text-mandatory-style conditional newline"></a>
A line break is always inserted.
This implies that  none of the containing <a class="glossary-reference" href="chapter-26.xhtml#glossary-section">sections</a>
can be printed on a single line and 
will therefore trigger the insertion of line breaks 
at linear-style conditional newlines in these <a class="glossary-reference" href="chapter-26.xhtml#glossary-section">sections</a>.<br/></dd></dl><br/>When a line break is inserted by any type of conditional newline, 
any blanks that immediately precede the conditional newline are omitted 
from the output and indentation is introduced at the beginning of the next line.
By default, the indentation causes the following line to begin 
in the same horizontal position 
as the first character in the immediately containing logical block.
(The indentation can be changed via <a class="function-reference" href="#function-pprint-indent">pprint-indent</a>.)<br/>There are a variety of ways unconditional newlines can be introduced into
the output (<span class="explicit-italic"> i.e.</span>,  via <a class="function-reference" href="chapter-21.xhtml#function-terpri">terpri</a> or by printing a string containing a newline
character).  As with mandatory conditional newlines, this prevents any of
the containing <a class="glossary-reference" href="chapter-26.xhtml#glossary-section">sections</a> from being printed on one line.  In general, when
an unconditional newline is encountered, it is printed out without
suppression of the preceding blanks and without any indentation following
it.  However, if a per-line prefix has been specified (see
<a class="macro-reference" href="#macro-pprint-logical-block">pprint-logical-block</a>), this prefix will always be printed no matter 
how a newline originates.<br/></dd></dl><dl><dt class="label">Examples</dt><dd>See <span class="section-reference error">section:PrettyPrinterExamples.</span><br/></dd></dl><dl><dt class="label">Side Effects</dt><dd>Output to <span class="parameter">stream</span>.<br/></dd></dl><dl><dt class="label">Affected By</dt><dd><a class="variable-reference" href="#variable-*print-pretty*">*print-pretty*</a>, <a class="variable-reference" href="#variable-*print-miser-width*">*print-miser-width*</a>.
The presence of containing logical blocks.
The placement of newlines and conditional newlines.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd>An error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-4.xhtml#type-type-error">type-error</a> is signaled if <span class="parameter">kind</span> 
is not one of <span class="keyword">:linear</span>, <span class="keyword">:fill</span>, <span class="keyword">:miser</span>, or <span class="keyword">:mandatory</span>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="section-reference" href="#section-TildeUnderscore">Tilde Underscore: Conditional Newline</a>,
<a class="section-reference" href="#section-PrettyPrinterExamples">Examples of using the Pretty Printer</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd><span class="none">None</span>.<br/></dd></dl>
</div><br/><br/>
<br/><div class="component" id="macro-pprint-pop"><div class="header"><span class="left"><span class="name" id="macro-pprint-pop">pprint-pop</span></span><span class="right"><span class="ftype">Local Macro</span></span></div><br/>
<dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">pprint-pop</span>&nbsp;<span class="lambda-list"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>âŸ¨</mi></math><span class="explicit-italic"> no <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">arguments</a></span><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>âŸ©</mi></math></span>&nbsp;â†’&nbsp;<span class="return-values">object</span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">object</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-element">element</a> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> 
		 being printed in the <span class="glossary-reference error">glossary:lexically current logical block</span>,
		 or <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>Pops one <a class="glossary-reference" href="chapter-26.xhtml#glossary-element">element</a> from the <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> being printed
in the <span class="glossary-reference error">glossary:lexically current logical block</span>, obeying <a class="variable-reference" href="#variable-*print-length*">*print-length*</a>
and <a class="variable-reference" href="#variable-*print-circle*">*print-circle*</a> as described below.<br/>Each time <a class="macro-reference" href="#macro-pprint-pop">pprint-pop</a> is called, it pops the next value off the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> passed to the <span class="glossary-reference error">glossary:lexically current logical block</span> and returns it.
However, before doing this, it performs three tests:<br/><ul><li>If the remaining `list' is not a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a>, 
    ``<pre><code><span class="syntax-root">. 
</span></code></pre>''<a id="index/term-dot"></a> is printed followed by the remaining `list.' 
    (This makes it easier to write printing functions that 
    are robust in the face of malformed arguments.)<br/> </li><li>If <a class="variable-reference" href="#variable-*print-length*">*print-length*</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-non-nil">non-nil</a>,
    and <a class="macro-reference" href="#macro-pprint-pop">pprint-pop</a> has already been called <a class="variable-reference" href="#variable-*print-length*">*print-length*</a> times 
    within the immediately containing logical block,
    ``<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">...</span>
</span></code></pre>''<a id="index/text-dot dot dot"></a><a id="index/code-..."></a> is printed.
    (This makes it easy to write printing functions that properly handle
    <a class="variable-reference" href="#variable-*print-length*">*print-length*</a>.)<br/> </li><li>If <a class="variable-reference" href="#variable-*print-circle*">*print-circle*</a> is
    <a class="glossary-reference" href="chapter-26.xhtml#glossary-non-nil">non-nil</a>, and the remaining list is a circular (or shared) reference,
    then ``<pre><code><span class="syntax-root">. 
</span></code></pre>'' is printed followed by an appropriate
    ``<pre><code><span class="syntax-root">#<span class="explicit-italic"> n</span>#
</span></code></pre>''<a id="index/text-sharpsign sharpsign (reader macro)"></a> marker.
    (This catches instances of <a class="glossary-reference" href="chapter-26.xhtml#glossary-cdr">cdr</a> circularity and sharing in lists.)
</li></ul><br/>If either of the three conditions above occurs, the indicated output is
printed on the <a class="glossary-reference" href="chapter-26.xhtml#glossary-pretty printing stream">pretty printing stream</a> created by the immediately containing
<a class="macro-reference" href="#macro-pprint-logical-block">pprint-logical-block</a> and the execution of the immediately containing
<a class="macro-reference" href="#macro-pprint-logical-block">pprint-logical-block</a> is terminated except for the printing of the suffix.<br/>If <a class="macro-reference" href="#macro-pprint-logical-block">pprint-logical-block</a> is given a `list' argument of <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>&mdash;because
it is not processing a list&mdash;<a class="macro-reference" href="#macro-pprint-pop">pprint-pop</a> can still be used to obtain 
support for <a class="variable-reference" href="#variable-*print-length*">*print-length*</a>.  
In this situation, the first and third tests above are disabled and
<a class="macro-reference" href="#macro-pprint-pop">pprint-pop</a> always returns <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.
See <a class="section-reference" href="#section-PrettyPrinterExamples">Examples of using the Pretty Printer</a>&mdash;specifically, the <span class="function-reference error">function:pprint-vector</span> example.<br/>Whether or not <a class="macro-reference" href="#macro-pprint-pop">pprint-pop</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-fbound">fbound</a> in the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-global environment">global environment</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a>;
however, the restrictions on redefinition and <a class="glossary-reference" href="chapter-26.xhtml#glossary-shadow">shadowing</a> of
<a class="macro-reference" href="#macro-pprint-pop">pprint-pop</a> are the same as for <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbols</a> in the <a class="package-reference" href="chapter-1.xhtml#package-common-lisp">common-lisp</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-package">package</a>
which are <a class="glossary-reference" href="chapter-26.xhtml#glossary-fbound">fbound</a> in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-global environment">global environment</a>.
The consequences of attempting to use <a class="macro-reference" href="#macro-pprint-pop">pprint-pop</a> outside
of <a class="macro-reference" href="#macro-pprint-logical-block">pprint-logical-block</a> are undefined.
<br/></dd></dl><dl><dt class="label">Examples</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Side Effects</dt><dd>Might cause output
to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-pretty printing stream">pretty printing stream</a> associated with the lexically current logical block.<br/></dd></dl><dl><dt class="label">Affected By</dt><dd><a class="variable-reference" href="#variable-*print-length*">*print-length*</a>, <a class="variable-reference" href="#variable-*print-circle*">*print-circle*</a>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd>An error is signaled (either at macro expansion time or at run time)
if a usage of <a class="macro-reference" href="#macro-pprint-pop">pprint-pop</a> occurs where there is no lexically
containing <a class="macro-reference" href="#macro-pprint-logical-block">pprint-logical-block</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>.<br/>The consequences are undefined if <a class="macro-reference" href="#macro-pprint-pop">pprint-pop</a> is executed outside
of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-dynamic extent">dynamic extent</a> of this <a class="macro-reference" href="#macro-pprint-logical-block">pprint-logical-block</a>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="macro-reference" href="#macro-pprint-exit-if-list-exhausted">pprint-exit-if-list-exhausted</a>, <a class="macro-reference" href="#macro-pprint-logical-block">pprint-logical-block</a>.<br/></dd></dl><dl><dt class="label">Notes</dt><dd>It is frequently a good idea to call <a class="macro-reference" href="#macro-pprint-exit-if-list-exhausted">pprint-exit-if-list-exhausted</a> 
before calling <a class="macro-reference" href="#macro-pprint-pop">pprint-pop</a>.<br/></dd></dl>
</div><br/><br/>
<br/><div class="component" id="function-pprint-tab"><div class="header"><span class="left"><span class="name" id="function-pprint-tab">pprint-tab</span></span><span class="right"><span class="ftype">Function</span></span></div><br/>
<dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">pprint-tab</span>&nbsp;<span class="lambda-list">kind colnum colinc <span class="lambda-list-keyword">&amp;optional</span> stream</span>&nbsp;â†’&nbsp;<span class="return-values"><a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a></span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">kind</span>&mdash;one of <span class="keyword">:line</span>, <span class="keyword">:section</span>, <span class="keyword">:line-relative</span>,
	       or <span class="keyword">:section-relative</span>.<br/><span class="parameter">colnum</span>&mdash;a non-negative <a class="glossary-reference" href="chapter-26.xhtml#glossary-integer">integer</a>.<br/><span class="parameter">colinc</span>&mdash;a non-negative <a class="glossary-reference" href="chapter-26.xhtml#glossary-integer">integer</a>.<br/><span class="parameter">stream</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-output">output</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-stream designator">stream designator</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>Specifies tabbing to <span class="parameter">stream</span> as performed by the standard <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">T</span> format directive.
If <span class="parameter">stream</span> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-pretty printing stream">pretty printing stream</a> and
   the <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a> of <a class="variable-reference" href="#variable-*print-pretty*">*print-pretty*</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>,
tabbing is performed;
otherwise, <a class="function-reference" href="#function-pprint-tab">pprint-tab</a> has no effect.<br/>The arguments <span class="parameter">colnum</span> and <span class="parameter">colinc</span> correspond to the two 
<span class="parameter">parameters</span> to <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">T</span> and are in terms of <a class="glossary-reference" href="chapter-26.xhtml#glossary-em">ems</a>.
The <span class="parameter">kind</span> argument specifies the style of tabbing.  It must be one of
  <span class="keyword">:line</span> (tab as by <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">T</span>),
  <span class="keyword">:section</span> (tab as by <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">:T</span>, 
		 but measuring horizontal positions relative to 
		 the start of the dynamically enclosing section),
  <span class="keyword">:line-relative</span> (tab as by <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">@T</span>), or
  <span class="keyword">:section-relative</span> (tab as by <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">:@T</span>, 
			  but measuring horizontal positions relative to
			  the start of the dynamically enclosing section).<br/></dd></dl><dl><dt class="label">Examples</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Side Effects</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd>An error is signaled if <span class="parameter">kind</span> is not one of <span class="keyword">:line</span>,
<span class="keyword">:section</span>, <span class="keyword">:line-relative</span>, or <span class="keyword">:section-relative</span>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="macro-reference" href="#macro-pprint-logical-block">pprint-logical-block</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd><span class="none">None</span>.<br/></dd></dl>
</div><br/><br/><br/><div class="component" id="function-print-object"><div class="header"><span class="left"><span class="name" id="function-print-object">print-object</span></span><span class="right"><span class="ftype">Standard Generic Function</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">print-object</span>&nbsp;<span class="lambda-list">object stream</span>&nbsp;â†’&nbsp;<span class="return-values">object</span></span><br/><br/></dd></dl><dl><dt class="label">Method Signatures</dt><dd><span class="method"><span class="name">print-object</span>&nbsp;<span class="lambda-list"><span class="explicit-roman">(</span><span class="parameter">object</span> standard-object<span class="explicit-roman">)</span> <span class="parameter">stream</span></span></span><br/>
<span class="method"><span class="name">print-object</span>&nbsp;<span class="lambda-list"><span class="explicit-roman">(</span><span class="parameter">object</span> structure-object<span class="explicit-roman">)</span> <span class="parameter">stream</span></span></span><br/>
</dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">object</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.<br/><span class="parameter">stream</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-stream">stream</a>.
 
</dd></dl><dl><dt class="label">Description</dt><dd>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> <a class="function-reference" href="#function-print-object">print-object</a> writes the printed representation of <span class="parameter">object</span>
to <span class="parameter">stream</span>.
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="#function-print-object">print-object</a> is called by the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lisp printer">Lisp printer</a>; 
it should not be called by the user.<br/>Each implementation is required to provide a <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> on
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> <a class="type-reference" href="chapter-4.xhtml#type-standard-object">standard-object</a> and on the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> <a class="type-reference" href="chapter-4.xhtml#type-structure-object">structure-object</a>.
In addition, each <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation">implementation</a> must provide 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> on enough other <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">classes</a> 
so as to ensure that there is always an applicable <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a>.
Implementations are free to add <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> for other <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">classes</a>.
Users may write <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> for <a class="function-reference" href="#function-print-object">print-object</a> for their own
<a class="glossary-reference" href="chapter-26.xhtml#glossary-class">classes</a> if they do not wish to inherit an 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a>.<br/>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> on the <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> <a class="type-reference" href="chapter-4.xhtml#type-structure-object">structure-object</a> prints the object in the
default <pre><code><span class="syntax-root">#S
</span></code></pre> notation; see <span class="section-reference error">section:PrintingStructures.</span>

<a class="glossary-reference" href="chapter-26.xhtml#glossary-method">Methods</a> on <a class="function-reference" href="#function-print-object">print-object</a> are responsible for implementing
their part of the semantics of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-printer control variable">printer control variables</a>, as follows:<br/><dl>
<dt><a class="variable-reference" href="#variable-*print-readably*">*print-readably*</a></dt><dd>All methods for <a class="function-reference" href="#function-print-object">print-object</a> must obey <a class="variable-reference" href="#variable-*print-readably*">*print-readably*</a>.
This includes both user-defined methods and <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-defined">implementation-defined</a> methods.
Readable printing of <span class="glossary-reference error">glossary:structures</span> and <a class="glossary-reference" href="chapter-26.xhtml#glossary-standard object">standard objects</a> 
is controlled by their <a class="function-reference" href="#function-print-object">print-object</a> method, 
not by their <a class="function-reference" href="chapter-7.xhtml#function-make-load-form">make-load-form</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a>.
<a class="glossary-reference" href="chapter-26.xhtml#glossary-similarity">Similarity</a> for these <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a> is application dependent
and hence is defined to be whatever these <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> do; 
see <span class="section-reference error">section:Similarity.</span><br/></dd><dt><a class="variable-reference" href="#variable-*print-escape*">*print-escape*</a></dt><dd>Each <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> must implement <a class="variable-reference" href="#variable-*print-escape*">*print-escape*</a>. <br/></dd><dt><a class="variable-reference" href="#variable-*print-pretty*">*print-pretty*</a></dt><dd>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> may wish to perform specialized line breaking
or other output conditional on the <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a> of <a class="variable-reference" href="#variable-*print-pretty*">*print-pretty*</a>.
For further information,
see (for example) the <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a> <a class="function-reference" href="#function-pprint-fill">pprint-fill</a>.
See also <a class="section-reference" href="#section-PPrintDispatchTables">Pretty Print Dispatch Tables</a> and <a class="section-reference" href="#section-PrettyPrinterExamples">Examples of using the Pretty Printer</a>.
 
</dd><dt><a class="variable-reference" href="#variable-*print-length*">*print-length*</a></dt><dd><a class="glossary-reference" href="chapter-26.xhtml#glossary-method">Methods</a> that produce output of indefinite length must obey
<a class="variable-reference" href="#variable-*print-length*">*print-length*</a>.
For further information,
see (for example) the <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macros</a> <a class="macro-reference" href="#macro-pprint-logical-block">pprint-logical-block</a>
and <a class="macro-reference" href="#macro-pprint-pop">pprint-pop</a>.
See also <a class="section-reference" href="#section-PPrintDispatchTables">Pretty Print Dispatch Tables</a> and <a class="section-reference" href="#section-PrettyPrinterExamples">Examples of using the Pretty Printer</a>.
 <br/></dd><dt><a class="variable-reference" href="#variable-*print-level*">*print-level*</a></dt><dd>The printer takes care of <a class="variable-reference" href="#variable-*print-level*">*print-level*</a> automatically,
provided that each <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> handles exactly one level of structure and
calls <a class="function-reference" href="#function-write">write</a> (or an equivalent <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a>) recursively if
there are more structural levels.  The printer's decision of whether an
<a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> has components (and therefore should not be printed when the
printing depth is not less than <a class="variable-reference" href="#variable-*print-level*">*print-level*</a>) is
<a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a>.  In some implementations its 
<a class="function-reference" href="#function-print-object">print-object</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> is not called; 
in others the <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> is called, 
and the determination that the <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> has components is based on what
it tries to write to the <span class="parameter">stream</span>.<br/></dd><dt><a class="variable-reference" href="#variable-*print-circle*">*print-circle*</a></dt><dd>When the <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a> of <a class="variable-reference" href="#variable-*print-circle*">*print-circle*</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>,
a user-defined 
<a class="function-reference" href="#function-print-object">print-object</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a>can print <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a> to the supplied <a class="glossary-reference" href="chapter-26.xhtml#glossary-stream">stream</a> 
using <a class="function-reference" href="#function-write">write</a>,
      <a class="function-reference" href="#function-prin1">prin1</a>,
      <a class="function-reference" href="#function-princ">princ</a>,
   or <a class="function-reference" href="#function-format">format</a>
and expect circularities to be detected 
and printed using the <pre><code><span class="syntax-root">#<span class="explicit-italic"> n</span>#
</span></code></pre> syntax.
If a user-defined
<a class="function-reference" href="#function-print-object">print-object</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a>prints to a <a class="glossary-reference" href="chapter-26.xhtml#glossary-stream">stream</a> other than the one
that was supplied, then circularity detection starts over for that
<a class="glossary-reference" href="chapter-26.xhtml#glossary-stream">stream</a>.  See <a class="variable-reference" href="#variable-*print-circle*">*print-circle*</a>.

</dd><dt><a class="variable-reference" href="#variable-*print-base*">*print-base*</a>,
      <a class="variable-reference" href="#variable-*print-radix*">*print-radix*</a>,
      <a class="variable-reference" href="#variable-*print-case*">*print-case*</a>, 
      <a class="variable-reference" href="#variable-*print-gensym*">*print-gensym*</a>,
  and <a class="variable-reference" href="#variable-*print-array*">*print-array*</a></dt><dd>These <a class="glossary-reference" href="chapter-26.xhtml#glossary-printer control variable">printer control variables</a> apply to specific types of <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a>
and are handled by the <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> for those <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a>.<br/></dd></dl><br/>If these rules are not obeyed, the results are undefined.<br/>In general, the printer and the <a class="function-reference" href="#function-print-object">print-object</a> methods should not
rebind the print control variables as they operate recursively through the
structure, but this is <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a>.<br/>In some implementations the <span class="parameter">stream</span> argument passed to a 
<a class="function-reference" href="#function-print-object">print-object</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> is not the original <a class="glossary-reference" href="chapter-26.xhtml#glossary-stream">stream</a>, 
but is an intermediate <a class="glossary-reference" href="chapter-26.xhtml#glossary-stream">stream</a> that implements part of the printer.
<a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> should therefore not depend on the identity of this <a class="glossary-reference" href="chapter-26.xhtml#glossary-stream">stream</a>.<br/> 
</dd></dl><dl><dt class="label">Examples</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="function-reference" href="#function-pprint-fill">pprint-fill</a>,
<a class="macro-reference" href="#macro-pprint-logical-block">pprint-logical-block</a>,
<a class="macro-reference" href="#macro-pprint-pop">pprint-pop</a>,
<a class="function-reference" href="#function-write">write</a>,
<a class="variable-reference" href="#variable-*print-readably*">*print-readably*</a>,
<a class="variable-reference" href="#variable-*print-escape*">*print-escape*</a>,
<a class="variable-reference" href="#variable-*print-pretty*">*print-pretty*</a>,
<a class="variable-reference" href="#variable-*print-length*">*print-length*</a>,
<a class="section-reference" href="#section-DefaultPrintObjMeths">Default Print-Object Methods</a>,
<a class="section-reference" href="#section-PrintingStructures">Printing Structures</a>,
<a class="section-reference" href="#section-PPrintDispatchTables">Pretty Print Dispatch Tables</a>,
<a class="section-reference" href="#section-PrettyPrinterExamples">Examples of using the Pretty Printer</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd><span class="none">None</span>.<br/></dd></dl></div><br/><br/><br/><div class="component" id="macro-print-unreadable-object"><div class="header"><span class="left"><span class="name" id="macro-print-unreadable-object">print-unreadable-object</span></span><span class="right"><span class="ftype">Macro</span></span></div>

<dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">print-unreadable-object</span>&nbsp;<span class="lambda-list"><span class="explicit-roman">(</span>object stream <span class="lambda-list-keyword">&amp;key</span> type identity<span class="explicit-roman">)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">form</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span></span>&nbsp;â†’&nbsp;<span class="return-values"><a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a></span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">object</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>; evaluated.<br/><span class="parameter">stream</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-stream designator">stream designator</a>; evaluated.<br/><span class="parameter">type</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generalized boolean">generalized boolean</a>; evaluated.<br/><span class="parameter">identity</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generalized boolean">generalized boolean</a>; evaluated.<br/><span class="parameter">forms</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-implicit progn">implicit progn</a>.

</dd></dl><dl><dt class="label">Description</dt><dd>Outputs a printed representation of <span class="parameter">object</span> on <span class="parameter">stream</span>,
beginning with ``<pre><code><span class="syntax-root">#&lt;
</span></code></pre>'' and ending with ``<pre><code><span class="syntax-root"><a class="function-reference" href="chapter-12.xhtml#function-&gt;">&gt;</a>
</span></code></pre>''.  
Everything output to <span class="parameter">stream</span> by the body <span class="parameter">forms</span>
is enclosed in the the angle brackets.
If <span class="parameter">type</span> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>, the output from <span class="parameter">forms</span>
is preceded by a brief description of the <span class="parameter">object</span>'s
<a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> and a space character.
If <span class="parameter">identity</span> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>,
the output from <span class="parameter">forms</span> is followed by a space character
and a representation of the <span class="parameter">object</span>'s identity, 
typically a storage address.<br/>If either <span class="parameter">type</span> or <span class="parameter">identity</span> is not supplied, 
its value is <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>.  It is valid to omit the body <span class="parameter">forms</span>.  
If <span class="parameter">type</span> and <span class="parameter">identity</span> are both true and there are no
body <span class="parameter">forms</span>, only one space character separates the type 
and the identity.<br/></dd></dl><dl><dt class="label">Examples</dt><dd>;; Note that in this example, the precise form of the output
;; is <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a>.<br/><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="macro-reference" href="chapter-7.xhtml#macro-defmethod">defmethod</a> <a class="function-reference" href="#function-print-object">print-object</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">obj</span> <span class="syntax-interned-symbol">airplane</span>)</span> <a class="type-reference" href="chapter-21.xhtml#type-stream">stream</a>)</span>
   <span class="syntax-cons">(<a class="macro-reference" href="#macro-print-unreadable-object">print-unreadable-object</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">obj</span> <a class="type-reference" href="chapter-21.xhtml#type-stream">stream</a> <span class="syntax-keyword-symbol">:type</span> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a> <span class="syntax-keyword-symbol">:identity</span> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a>)</span>
     <span class="syntax-cons">(<a class="function-reference" href="#function-princ">princ</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">tail-number</span> <span class="syntax-interned-symbol">obj</span>)</span> <a class="type-reference" href="chapter-21.xhtml#type-stream">stream</a>)</span>)</span>)</span>

 <span class="syntax-cons">(<a class="function-reference" href="#function-prin1-to-string">prin1-to-string</a> <span class="syntax-interned-symbol">my-airplane</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"#&lt;Airplane NW0773 36000123135&gt;"</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mover>or<mi>â†’</mi></mover></math> <span class="syntax-string">"#&lt;FAA:AIRPLANE NW0773 17&gt;"</span>
</span></code></pre><br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd>If <a class="variable-reference" href="#variable-*print-readably*">*print-readably*</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>, <a class="macro-reference" href="#macro-print-unreadable-object">print-unreadable-object</a>
signals an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="#type-print-not-readable">print-not-readable</a> without printing anything.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Notes</dt><dd><span class="none">None</span>.<br/></dd></dl>
</div><br/><br/><br/><div class="component" id="function-set-pprint-dispatch"><div class="header"><span class="left"><span class="name" id="function-set-pprint-dispatch">set-pprint-dispatch</span></span><span class="right"><span class="ftype">Function</span></span></div><br/>
<dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">set-pprint-dispatch</span>&nbsp;<span class="lambda-list">type-specifier function <span class="lambda-list-keyword">&amp;optional</span> priority table</span>&nbsp;â†’&nbsp;<span class="return-values"><a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a></span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">type-specifier</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-type specifier">type specifier</a>.

<span class="parameter">function</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a>, a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function name">function name</a>, or <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.<br/><span class="parameter">priority</span>&mdash;a <span class="glossary-reference error">glossary:real</span>.
 The default is <pre><code><span class="syntax-root"><span class="syntax-number">0</span>
</span></code></pre>.<br/><span class="parameter">table</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-pprint dispatch table">pprint dispatch table</a>.
 The default is the <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a> of <a class="variable-reference" href="#variable-*print-pprint-dispatch*">*print-pprint-dispatch*</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>Installs an entry into the <a class="glossary-reference" href="chapter-26.xhtml#glossary-pprint dispatch table">pprint dispatch table</a> which is <span class="parameter">table</span>.<br/><span class="parameter">Type-specifier</span> 
is the <a class="glossary-reference" href="chapter-26.xhtml#glossary-key">key</a>
of the entry.  The first action of <a class="function-reference" href="#function-set-pprint-dispatch">set-pprint-dispatch</a> is to remove any
pre-existing entry associated with <span class="parameter">type-specifier</span>.  This guarantees that
there will never be two entries associated with the same <a class="glossary-reference" href="chapter-26.xhtml#glossary-type specifier">type specifier</a> 
in a given <a class="glossary-reference" href="chapter-26.xhtml#glossary-pprint dispatch table">pprint dispatch table</a>.  Equality of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type specifier">type specifiers</a> is
tested by <a class="function-reference" href="chapter-5.xhtml#function-equal">equal</a>.<br/>Two values are associated with each <a class="glossary-reference" href="chapter-26.xhtml#glossary-type specifier">type specifier</a> in a 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-pprint dispatch table">pprint dispatch table</a>: a <span class="parameter">function</span> and a <span class="parameter">priority</span>.
The <span class="parameter">function</span> must accept two arguments: the <a class="glossary-reference" href="chapter-26.xhtml#glossary-stream">stream</a> to which output
is sent and the <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> to be printed.  The <span class="parameter">function</span> should
<a class="glossary-reference" href="chapter-26.xhtml#glossary-pretty print">pretty print</a> the <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> to the <span class="parameter">stream</span>.  The <span class="parameter">function</span>
can assume that object satisfies the <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> given by <span class="glossary-reference error">glossary:type-specifier</span>.
The <span class="parameter">function</span> must obey <a class="variable-reference" href="#variable-*print-readably*">*print-readably*</a>.
Any values returned by the <span class="parameter">function</span> are ignored.<br/><span class="parameter">Priority</span> is a priority to resolve conflicts
when an object matches more than one entry.<br/>It is permissible for <span class="parameter">function</span> to be <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.  In this situation, 
there will be no <span class="parameter">type-specifier</span> entry in <span class="parameter">table</span> after
<a class="function-reference" href="#function-set-pprint-dispatch">set-pprint-dispatch</a> returns.<br/></dd></dl><dl><dt class="label">Examples</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Side Effects</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd>An error is signaled if <span class="parameter">priority</span> is not a <span class="glossary-reference error">glossary:real</span>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Notes</dt><dd>Since <a class="glossary-reference" href="chapter-26.xhtml#glossary-pprint dispatch table">pprint dispatch tables</a> are often used to control the pretty
printing of Lisp code, it is common for the <span class="parameter">type-specifier</span> to be
an <a class="glossary-reference" href="chapter-26.xhtml#glossary-expression">expression</a> of the form <br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-cons">cons</a> <span class="parameter">car-type</span> <span class="parameter">cdr-type</span>)</span>
</span></code></pre><br/>This signifies that the corresponding object must be a cons cell 
whose <a class="glossary-reference" href="chapter-26.xhtml#glossary-car">car</a> matches the <a class="glossary-reference" href="chapter-26.xhtml#glossary-type specifier">type specifier</a> <span class="parameter">car-type</span> 
and whose <a class="glossary-reference" href="chapter-26.xhtml#glossary-cdr">cdr</a> matches the <a class="glossary-reference" href="chapter-26.xhtml#glossary-type specifier">type specifier</a> <span class="parameter">cdr-type</span>.
The <span class="parameter">cdr-type</span> can be omitted in which case it defaults to <a class="symbol-reference" href="chapter-5.xhtml#symbol-t">t</a>.<br/><br/></dd></dl>
</div><br/><br/><br/><div class="component" id="function-write"><div class="header"><span class="left"><span class="name" id="function-write">write</span>, <span class="name" id="function-prin1">prin1</span>, <span class="name" id="function-print">print</span>, <span class="name" id="function-pprint">pprint</span>, <span class="name" id="function-princ">princ</span></span><span class="right"><span class="ftype">Function</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">write</span>&nbsp;<span class="lambda-list"><span class="parameter">object</span> <span class="lambda-list-keyword">&amp;key</span> array base case circle escape gensym
		       length level lines miser-width pprint-dispatch
		       pretty radix readably right-margin stream</span>&nbsp;â†’&nbsp;<span class="return-values">object</span></span><br/><br/><span class="function-definition"><span class="name">prin1</span>&nbsp;<span class="lambda-list">object <span class="lambda-list-keyword">&amp;optional</span> output-stream</span>&nbsp;â†’&nbsp;<span class="return-values">object</span></span><br/>
<span class="function-definition"><span class="name">princ</span>&nbsp;<span class="lambda-list">object <span class="lambda-list-keyword">&amp;optional</span> output-stream</span>&nbsp;â†’&nbsp;<span class="return-values">object</span></span><br/>
<span class="function-definition"><span class="name">print</span>&nbsp;<span class="lambda-list">object <span class="lambda-list-keyword">&amp;optional</span> output-stream</span>&nbsp;â†’&nbsp;<span class="return-values">object</span></span><br/>
<span class="function-definition"><span class="name">pprint</span>&nbsp;<span class="lambda-list">object <span class="lambda-list-keyword">&amp;optional</span> output-stream</span>&nbsp;â†’&nbsp;<span class="return-values"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>âŸ¨</mi></math><span class="explicit-italic"> no <span class="glossary-reference error">glossary:values</span></span><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>âŸ©</mi></math></span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">object</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.<br/><span class="parameter">output-stream</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-output">output</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-stream designator">stream designator</a>.
		        The default is <a class="glossary-reference" href="chapter-26.xhtml#glossary-standard output">standard output</a>.<br/><span class="parameter">array</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generalized boolean">generalized boolean</a>.<br/><span class="parameter">base</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-radix">radix</a>.<br/><span class="parameter">case</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-member">member</a> <span class="syntax-keyword-symbol">:upcase</span> <span class="syntax-keyword-symbol">:downcase</span> <span class="syntax-keyword-symbol">:capitalize</span>)</span>
</span></code></pre>.<br/><span class="parameter">circle</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generalized boolean">generalized boolean</a>.<br/><span class="parameter">escape</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generalized boolean">generalized boolean</a>.<br/><span class="parameter">gensym</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generalized boolean">generalized boolean</a>.<br/><span class="parameter">length</span>&mdash;a non-negative <a class="glossary-reference" href="chapter-26.xhtml#glossary-integer">integer</a>, or <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.<br/><span class="parameter">level</span>&mdash;a non-negative <a class="glossary-reference" href="chapter-26.xhtml#glossary-integer">integer</a>, or <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.<br/><span class="parameter">lines</span>&mdash;a non-negative <a class="glossary-reference" href="chapter-26.xhtml#glossary-integer">integer</a>, or <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.<br/><span class="parameter">miser-width</span>&mdash;a non-negative <a class="glossary-reference" href="chapter-26.xhtml#glossary-integer">integer</a>, or <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.<br/><span class="parameter">pprint-dispatch</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-pprint dispatch table">pprint dispatch table</a>.<br/><span class="parameter">pretty</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generalized boolean">generalized boolean</a>.<br/><span class="parameter">radix</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generalized boolean">generalized boolean</a>.<br/><span class="parameter">readably</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generalized boolean">generalized boolean</a>.<br/><span class="parameter">right-margin</span>&mdash;a non-negative <a class="glossary-reference" href="chapter-26.xhtml#glossary-integer">integer</a>, or <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.<br/><span class="parameter">stream</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-output">output</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-stream designator">stream designator</a>.
The default is <a class="glossary-reference" href="chapter-26.xhtml#glossary-standard output">standard output</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd><a class="function-reference" href="#function-write">write</a>, <a class="function-reference" href="#function-prin1">prin1</a>, <a class="function-reference" href="#function-princ">princ</a>, <a class="function-reference" href="#function-print">print</a>, and <a class="function-reference" href="#function-pprint">pprint</a>
write the printed representation of <span class="parameter">object</span> to <span class="parameter">output-stream</span>.<br/><a class="function-reference" href="#function-write">write</a> is the general entry point to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lisp printer">Lisp printer</a>.
For each explicitly supplied <a class="glossary-reference" href="chapter-26.xhtml#glossary-keyword parameter">keyword parameter</a> named in Figure <span class="explicit-mono">()</span>&ndash;,
the corresponding <a class="glossary-reference" href="chapter-26.xhtml#glossary-printer control variable">printer control variable</a> is dynamically bound to its <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a>
while printing goes on;
for each <a class="glossary-reference" href="chapter-26.xhtml#glossary-keyword parameter">keyword parameter</a> in Figure <span class="explicit-mono">()</span>&ndash; that is not explicitly supplied,
the value of the corresponding <a class="glossary-reference" href="chapter-26.xhtml#glossary-printer control variable">printer control variable</a> is the same as it was
at the time <a class="function-reference" href="#function-write">write</a> was invoked.
Once the appropriate <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a> are <a class="glossary-reference" href="chapter-26.xhtml#glossary-establish">established</a>,
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> is output by the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lisp printer">Lisp printer</a>.<br/><span class="float" id="figure-Argument correspondences for the WRITE function."><table><thead><th>Parameter</th><th>Corresponding Dynamic Variable</th></thead><tbody><tr><td><span class="parameter">array</span> </td><td> <a class="variable-reference" href="#variable-*print-array*">*print-array*</a> </td></tr><tr><td><span class="parameter">base</span> </td><td> <a class="variable-reference" href="#variable-*print-base*">*print-base*</a> </td></tr><tr><td><span class="parameter">case</span> </td><td> <a class="variable-reference" href="#variable-*print-case*">*print-case*</a> </td></tr><tr><td><span class="parameter">circle</span> </td><td> <a class="variable-reference" href="#variable-*print-circle*">*print-circle*</a> </td></tr><tr><td><span class="parameter">escape</span> </td><td> <a class="variable-reference" href="#variable-*print-escape*">*print-escape*</a> </td></tr><tr><td><span class="parameter">gensym</span> </td><td> <a class="variable-reference" href="#variable-*print-gensym*">*print-gensym*</a> </td></tr><tr><td><span class="parameter">length</span> </td><td> <a class="variable-reference" href="#variable-*print-length*">*print-length*</a> </td></tr><tr><td><span class="parameter">level</span> </td><td> <a class="variable-reference" href="#variable-*print-level*">*print-level*</a> </td></tr><tr><td><span class="parameter">lines</span> </td><td> <a class="variable-reference" href="#variable-*print-lines*">*print-lines*</a> </td></tr><tr><td><span class="parameter">miser-width</span> </td><td> <a class="variable-reference" href="#variable-*print-miser-width*">*print-miser-width*</a> </td></tr><tr><td><span class="parameter">pprint-dispatch</span> </td><td> <a class="variable-reference" href="#variable-*print-pprint-dispatch*">*print-pprint-dispatch*</a> </td></tr><tr><td><span class="parameter">pretty</span> </td><td> <a class="variable-reference" href="#variable-*print-pretty*">*print-pretty*</a> </td></tr><tr><td><span class="parameter">radix</span> </td><td> <a class="variable-reference" href="#variable-*print-radix*">*print-radix*</a> </td></tr><tr><td><span class="parameter">readably</span> </td><td> <a class="variable-reference" href="#variable-*print-readably*">*print-readably*</a> </td></tr><tr><td><span class="parameter">right-margin</span> </td><td> <a class="variable-reference" href="#variable-*print-right-margin*">*print-right-margin*</a> </td></tr></tbody></table><div class="caption">Argument correspondences for the WRITE function.</div></span><br/><a class="function-reference" href="#function-prin1">prin1</a>, <a class="function-reference" href="#function-princ">princ</a>, <a class="function-reference" href="#function-print">print</a>, and <a class="function-reference" href="#function-pprint">pprint</a> implicitly 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-bind">bind</a> certain print parameters to particular values.  The remaining parameter
values are taken from 
     <a class="variable-reference" href="#variable-*print-array*">*print-array*</a>,
     <a class="variable-reference" href="#variable-*print-base*">*print-base*</a>,
     <a class="variable-reference" href="#variable-*print-case*">*print-case*</a>, 
     <a class="variable-reference" href="#variable-*print-circle*">*print-circle*</a>,
     <a class="variable-reference" href="#variable-*print-escape*">*print-escape*</a>,
     <a class="variable-reference" href="#variable-*print-gensym*">*print-gensym*</a>,
     <a class="variable-reference" href="#variable-*print-length*">*print-length*</a>,
     <a class="variable-reference" href="#variable-*print-level*">*print-level*</a>,
     <a class="variable-reference" href="#variable-*print-lines*">*print-lines*</a>,
     <a class="variable-reference" href="#variable-*print-miser-width*">*print-miser-width*</a>,
     <a class="variable-reference" href="#variable-*print-pprint-dispatch*">*print-pprint-dispatch*</a>,
     <a class="variable-reference" href="#variable-*print-pretty*">*print-pretty*</a>, 
     <a class="variable-reference" href="#variable-*print-radix*">*print-radix*</a>, 
 and <a class="variable-reference" href="#variable-*print-right-margin*">*print-right-margin*</a>.

<a class="function-reference" href="#function-prin1">prin1</a> produces output suitable for input to <a class="function-reference" href="chapter-23.xhtml#function-read">read</a>.  
It binds <a class="variable-reference" href="#variable-*print-escape*">*print-escape*</a> to <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>.

<a class="function-reference" href="#function-princ">princ</a> is just like <a class="function-reference" href="#function-prin1">prin1</a> except that the
output has no <a class="glossary-reference" href="chapter-26.xhtml#glossary-escape">escape</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-character">characters</a>.
It binds <a class="variable-reference" href="#variable-*print-escape*">*print-escape*</a>   to <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>
     and <a class="variable-reference" href="#variable-*print-readably*">*print-readably*</a> to <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>.
The general rule is that output from <a class="function-reference" href="#function-princ">princ</a> is intended to look
good to people, while output from <a class="function-reference" href="#function-prin1">prin1</a> is intended to
be acceptable to <a class="function-reference" href="chapter-23.xhtml#function-read">read</a>.

<a class="function-reference" href="#function-print">print</a> is just like <a class="function-reference" href="#function-prin1">prin1</a> 
except that the printed representation
of <span class="parameter">object</span> is preceded by a newline 
and followed by a space.<br/><a class="function-reference" href="#function-pprint">pprint</a> is just like <a class="function-reference" href="#function-print">print</a> except that the trailing
space is omitted and 
<span class="parameter">object</span> is printed with the <a class="variable-reference" href="#variable-*print-pretty*">*print-pretty*</a> flag <a class="glossary-reference" href="chapter-26.xhtml#glossary-non-nil">non-nil</a> 
to produce pretty output.<br/><span class="parameter">Output-stream</span> specifies the <a class="glossary-reference" href="chapter-26.xhtml#glossary-stream">stream</a> to which 
output is to be sent.  <br/></dd></dl><dl><dt class="label">Affected By</dt><dd><a class="variable-reference" href="chapter-21.xhtml#variable-*standard-output*">*standard-output*</a>,
<a class="variable-reference" href="chapter-21.xhtml#variable-*terminal-io*">*terminal-io*</a>,
<a class="variable-reference" href="#variable-*print-escape*">*print-escape*</a>,
<a class="variable-reference" href="#variable-*print-radix*">*print-radix*</a>,
<a class="variable-reference" href="#variable-*print-base*">*print-base*</a>,
<a class="variable-reference" href="#variable-*print-circle*">*print-circle*</a>,
<a class="variable-reference" href="#variable-*print-pretty*">*print-pretty*</a>,
<a class="variable-reference" href="#variable-*print-level*">*print-level*</a>,
<a class="variable-reference" href="#variable-*print-length*">*print-length*</a>,
<a class="variable-reference" href="#variable-*print-case*">*print-case*</a>,
<a class="variable-reference" href="#variable-*print-gensym*">*print-gensym*</a>,
<a class="variable-reference" href="#variable-*print-array*">*print-array*</a>,
<a class="variable-reference" href="chapter-23.xhtml#variable-*read-default-float-format*">*read-default-float-format*</a>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="function-reference" href="chapter-23.xhtml#function-readtable-case">readtable-case</a>,
<a class="section-reference" href="#section-FORMATPrinterOps">FORMAT Printer Operations</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">functions</a> <a class="function-reference" href="#function-prin1">prin1</a> and <a class="function-reference" href="#function-print">print</a> do not bind <a class="variable-reference" href="#variable-*print-readably*">*print-readably*</a>.<br/><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="function-reference" href="#function-prin1">prin1</a> <span class="syntax-interned-symbol">object</span> <span class="syntax-interned-symbol">output-stream</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>â‰¡</mo></math> <span class="syntax-cons">(<a class="function-reference" href="#function-write">write</a> <span class="syntax-interned-symbol">object</span> <span class="syntax-keyword-symbol">:stream</span> <span class="syntax-interned-symbol">output-stream</span> <span class="syntax-keyword-symbol">:escape</span> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a>)</span>
</span></code></pre><br/><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="function-reference" href="#function-princ">princ</a> <span class="syntax-interned-symbol">object</span> <span class="syntax-interned-symbol">output-stream</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>â‰¡</mo></math> <span class="syntax-cons">(<a class="function-reference" href="#function-write">write</a> <span class="syntax-interned-symbol">object</span> <a class="type-reference" href="chapter-21.xhtml#type-stream">stream</a> <span class="syntax-interned-symbol">output-stream</span> <span class="syntax-keyword-symbol">:escape</span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-keyword-symbol">:readably</span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span>
</span></code></pre>
<pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="function-reference" href="#function-print">print</a> <span class="syntax-interned-symbol">object</span> <span class="syntax-interned-symbol">output-stream</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>â‰¡</mo></math> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-progn">progn</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-21.xhtml#function-terpri">terpri</a> <span class="syntax-interned-symbol">output-stream</span>)</span>
           <span class="syntax-cons">(<a class="function-reference" href="#function-write">write</a> <span class="syntax-interned-symbol">object</span> <span class="syntax-keyword-symbol">:stream</span> <span class="syntax-interned-symbol">output-stream</span>
                         <span class="syntax-keyword-symbol">:escape</span> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a>)</span>
           <span class="syntax-cons">(<a class="function-reference" href="chapter-21.xhtml#function-write-char">write-char</a> <span class="syntax-character">#\space</span> <span class="syntax-interned-symbol">output-stream</span>)</span>)</span>
</span></code></pre><br/><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="function-reference" href="#function-pprint">pprint</a> <span class="syntax-interned-symbol">object</span> <span class="syntax-interned-symbol">output-stream</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>â‰¡</mo></math> <span class="syntax-cons">(<a class="function-reference" href="#function-write">write</a> <span class="syntax-interned-symbol">object</span> <span class="syntax-keyword-symbol">:stream</span> <span class="syntax-interned-symbol">output-stream</span> <span class="syntax-keyword-symbol">:escape</span> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a> <span class="syntax-keyword-symbol">:pretty</span> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a>)</span>
</span></code></pre>
</dd></dl></div><br/><br/><br/><div class="component" id="function-write-to-string"><div class="header"><span class="left"><span class="name" id="function-write-to-string">write-to-string</span>, <span class="name" id="function-prin1-to-string">prin1-to-string</span>, <span class="name" id="function-princ-to-string">princ-to-string</span></span><span class="right"><span class="ftype">Function</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">write-to-string</span>&nbsp;<span class="lambda-list">object <span class="lambda-list-keyword">&amp;key</span> array base case circle escape gensym
		       length level lines miser-width pprint-dispatch
		       pretty radix readably right-margin </span>&nbsp;â†’&nbsp;<span class="return-values">string</span></span><br/><br/><span class="function-definition"><span class="name">prin1-to-string</span>&nbsp;<span class="lambda-list">object</span>&nbsp;â†’&nbsp;<span class="return-values">string</span></span><br/><br/><span class="function-definition"><span class="name">princ-to-string</span>&nbsp;<span class="lambda-list">object</span>&nbsp;â†’&nbsp;<span class="return-values">string</span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">object</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.<br/><span class="parameter">array</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generalized boolean">generalized boolean</a>.<br/><span class="parameter">base</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-radix">radix</a>.<br/><span class="parameter">case</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-member">member</a> <span class="syntax-keyword-symbol">:upcase</span> <span class="syntax-keyword-symbol">:downcase</span> <span class="syntax-keyword-symbol">:capitalize</span>)</span>
</span></code></pre>.<br/><span class="parameter">circle</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generalized boolean">generalized boolean</a>.<br/><span class="parameter">escape</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generalized boolean">generalized boolean</a>.<br/><span class="parameter">gensym</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generalized boolean">generalized boolean</a>.<br/><span class="parameter">length</span>&mdash;a non-negative <a class="glossary-reference" href="chapter-26.xhtml#glossary-integer">integer</a>, or <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.<br/><span class="parameter">level</span>&mdash;a non-negative <a class="glossary-reference" href="chapter-26.xhtml#glossary-integer">integer</a>, or <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.<br/><span class="parameter">lines</span>&mdash;a non-negative <a class="glossary-reference" href="chapter-26.xhtml#glossary-integer">integer</a>, or <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.<br/><span class="parameter">miser-width</span>&mdash;a non-negative <a class="glossary-reference" href="chapter-26.xhtml#glossary-integer">integer</a>, or <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.<br/><span class="parameter">pprint-dispatch</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-pprint dispatch table">pprint dispatch table</a>.<br/><span class="parameter">pretty</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generalized boolean">generalized boolean</a>.<br/><span class="parameter">radix</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generalized boolean">generalized boolean</a>.<br/><span class="parameter">readably</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generalized boolean">generalized boolean</a>.<br/><span class="parameter">right-margin</span>&mdash;a non-negative <a class="glossary-reference" href="chapter-26.xhtml#glossary-integer">integer</a>, or <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.<br/><br/><span class="parameter">string</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-string">string</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd><a class="function-reference" href="#function-write-to-string">write-to-string</a>, <a class="function-reference" href="#function-prin1-to-string">prin1-to-string</a>, and <a class="function-reference" href="#function-princ-to-string">princ-to-string</a>
are used to create a <a class="glossary-reference" href="chapter-26.xhtml#glossary-string">string</a> consisting of the printed representation 
of <span class="parameter">object</span>.
<span class="parameter">Object</span> is effectively printed as if by <a class="function-reference" href="#function-write">write</a>,
<a class="function-reference" href="#function-prin1">prin1</a>, or <a class="function-reference" href="#function-princ">princ</a>, respectively,
and the <a class="glossary-reference" href="chapter-26.xhtml#glossary-character">characters</a> that would be output are made 
into a <a class="glossary-reference" href="chapter-26.xhtml#glossary-string">string</a>.<br/><a class="function-reference" href="#function-write-to-string">write-to-string</a> is the general output function.
It has the ability to specify all the parameters applicable 
to the printing of <span class="parameter">object</span>.<br/><a class="function-reference" href="#function-prin1-to-string">prin1-to-string</a> acts like <a class="function-reference" href="#function-write-to-string">write-to-string</a> with 
<pre><code><span class="syntax-root"><span class="syntax-keyword-symbol">:escape</span> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a>
</span></code></pre>, that is, escape characters are written where appropriate.<br/><a class="function-reference" href="#function-princ-to-string">princ-to-string</a> acts like <a class="function-reference" href="#function-write-to-string">write-to-string</a> with 
<pre><code><span class="syntax-root"><span class="syntax-keyword-symbol">:escape</span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-keyword-symbol">:readably</span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>
</span></code></pre>.  
Thus no <a class="glossary-reference" href="chapter-26.xhtml#glossary-escape">escape</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-character">characters</a> are written.<br/>All other keywords that would be specified to <a class="function-reference" href="#function-write-to-string">write-to-string</a> 
are default values when <a class="function-reference" href="#function-prin1-to-string">prin1-to-string</a>
or <a class="function-reference" href="#function-princ-to-string">princ-to-string</a> is invoked.<br/>The meanings and defaults for the keyword arguments to <a class="function-reference" href="#function-write-to-string">write-to-string</a>
are the same as those for <a class="function-reference" href="#function-write">write</a>.<br/></dd></dl><dl><dt class="label">Examples</dt><dd><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="#function-prin1-to-string">prin1-to-string</a> <span class="syntax-string">"abc"</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"\"abc\""</span>
<span class="syntax-cons">(<a class="function-reference" href="#function-princ-to-string">princ-to-string</a> <span class="syntax-string">"abc"</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"abc"</span>
</span></code></pre><br/></dd></dl><dl><dt class="label">Side Effects</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Affected By</dt><dd><a class="variable-reference" href="#variable-*print-escape*">*print-escape*</a>,
<a class="variable-reference" href="#variable-*print-radix*">*print-radix*</a>,
<a class="variable-reference" href="#variable-*print-base*">*print-base*</a>,
<a class="variable-reference" href="#variable-*print-circle*">*print-circle*</a>,
<a class="variable-reference" href="#variable-*print-pretty*">*print-pretty*</a>,
<a class="variable-reference" href="#variable-*print-level*">*print-level*</a>,
<a class="variable-reference" href="#variable-*print-length*">*print-length*</a>,
<a class="variable-reference" href="#variable-*print-case*">*print-case*</a>,
<a class="variable-reference" href="#variable-*print-gensym*">*print-gensym*</a>,
<a class="variable-reference" href="#variable-*print-array*">*print-array*</a>,
<a class="variable-reference" href="chapter-23.xhtml#variable-*read-default-float-format*">*read-default-float-format*</a>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd><span class="none">None</span>.
</dd></dl><dl><dt class="label">See Also</dt><dd><a class="function-reference" href="#function-write">write</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="function-reference" href="#function-write-to-string">write-to-string</a> <span class="parameter">object</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">key</span> <span class="parameter">argument</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>â‰¡</mo></math> <span class="syntax-cons">(<a class="macro-reference" href="chapter-21.xhtml#macro-with-output-to-string">with-output-to-string</a> <span class="syntax-cons">(#1=#:string-stream)</span> 
     <span class="syntax-cons">(<a class="function-reference" href="#function-write">write</a> <span class="syntax-interned-symbol">object</span> <span class="syntax-keyword-symbol">:stream</span> <span class="syntax-uninterned-symbol">#1#</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">key</span> <span class="parameter">argument</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span>)</span>)</span>

 <span class="syntax-cons">(<a class="function-reference" href="#function-princ-to-string">princ-to-string</a> <span class="parameter">object</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>â‰¡</mo></math> <span class="syntax-cons">(<a class="macro-reference" href="chapter-21.xhtml#macro-with-output-to-string">with-output-to-string</a> <span class="syntax-cons">(<a class="type-reference" href="chapter-21.xhtml#type-string-stream">string-stream</a>)</span>
     <span class="syntax-cons">(<a class="function-reference" href="#function-princ">princ</a> <span class="parameter">object</span> <a class="type-reference" href="chapter-21.xhtml#type-string-stream">string-stream</a>)</span>)</span>

 <span class="syntax-cons">(<a class="function-reference" href="#function-prin1-to-string">prin1-to-string</a> <span class="parameter">object</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>â‰¡</mo></math> <span class="syntax-cons">(<a class="macro-reference" href="chapter-21.xhtml#macro-with-output-to-string">with-output-to-string</a> <span class="syntax-cons">(<a class="type-reference" href="chapter-21.xhtml#type-string-stream">string-stream</a>)</span>
     <span class="syntax-cons">(<a class="function-reference" href="#function-prin1">prin1</a> <span class="parameter">object</span> <a class="type-reference" href="chapter-21.xhtml#type-string-stream">string-stream</a>)</span>)</span>
</span></code></pre>
</dd></dl></div><br/><br/>
<br/><div class="component" id="variable-*print-array*"><div class="header"><span class="left"><span class="name" id="variable-*print-array*">*print-array*</span></span><span class="right"><span class="ftype">Variable</span></span></div><br/><dl><dt class="label">Value Type</dt><dd>a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generalized boolean">generalized boolean</a>.<br/></dd></dl><dl><dt class="label">Initial Value</dt><dd><a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>Controls the format in which <a class="glossary-reference" href="chapter-26.xhtml#glossary-array">arrays</a> are printed.  
If it is <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>, the contents of <a class="glossary-reference" href="chapter-26.xhtml#glossary-array">arrays</a> other than <a class="glossary-reference" href="chapter-26.xhtml#glossary-string">strings</a>
are never printed.  Instead, <a class="glossary-reference" href="chapter-26.xhtml#glossary-array">arrays</a> are printed in a concise form using
<pre><code><span class="syntax-root">#&lt;
</span></code></pre> that gives enough information for the user to be able to identify the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-array">array</a>, but does not include the entire <a class="glossary-reference" href="chapter-26.xhtml#glossary-array">array</a> contents.
If it is <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>, non-<a class="glossary-reference" href="chapter-26.xhtml#glossary-string">string</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-array">arrays</a> are printed using
<pre><code><span class="syntax-root">#<span class="syntax-cons">(<span class="syntax-interned-symbol">...</span>)</span>
</span></code></pre>, <pre><code><span class="syntax-root">#*
</span></code></pre>, or <pre><code><span class="syntax-root">#nA
</span></code></pre> syntax.<br/></dd></dl><dl><dt class="label">Examples</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Affected By</dt><dd>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation">implementation</a>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="section-reference" href="chapter-2.xhtml#section-SharpsignLeftParen">Sharpsign Left-Parenthesis</a>,
<a class="section-reference" href="chapter-2.xhtml#section-SharpsignLeftAngle">Sharpsign Less-Than-Sign</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd><span class="none">None</span>.<br/></dd></dl></div><br/><br/><br/><div class="component" id="variable-*print-base*"><div class="header"><span class="left"><span class="name" id="variable-*print-base*">*print-base*</span>, <span class="name" id="variable-*print-radix*">*print-radix*</span></span><span class="right"><span class="ftype">Variable</span></span></div><br/><dl><dt class="label">Value Type</dt><dd><a class="variable-reference" href="#variable-*print-base*">*print-base*</a>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-radix">radix</a>.
<a class="variable-reference" href="#variable-*print-radix*">*print-radix*</a>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generalized boolean">generalized boolean</a>.<br/></dd></dl><dl><dt class="label">Initial Value</dt><dd>The initial <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a> of <a class="variable-reference" href="#variable-*print-base*">*print-base*</a> is <pre><code><span class="syntax-root"><span class="syntax-number">10</span>
</span></code></pre>.
The initial <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a> of <a class="variable-reference" href="#variable-*print-radix*">*print-radix*</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd><a class="variable-reference" href="#variable-*print-base*">*print-base*</a> and <a class="variable-reference" href="#variable-*print-radix*">*print-radix*</a> control the printing
of <a class="glossary-reference" href="chapter-26.xhtml#glossary-rational">rationals</a>.
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a> of <a class="variable-reference" href="#variable-*print-base*">*print-base*</a> is called the <span class="newterm">current output base</span>.<br/>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a> of <a class="variable-reference" href="#variable-*print-base*">*print-base*</a> is the <a class="glossary-reference" href="chapter-26.xhtml#glossary-radix">radix</a> in which the printer 
will print <a class="glossary-reference" href="chapter-26.xhtml#glossary-rational">rationals</a>.   For radices above <pre><code><span class="syntax-root"><span class="syntax-number">10</span>
</span></code></pre>, letters of
the alphabet are used to represent digits above <pre><code><span class="syntax-root"><span class="syntax-number">9</span>
</span></code></pre>.<br/>If the <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a> of <a class="variable-reference" href="#variable-*print-radix*">*print-radix*</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>,
the printer will print a radix specifier to indicate the <a class="glossary-reference" href="chapter-26.xhtml#glossary-radix">radix</a>
in which it is printing a <a class="glossary-reference" href="chapter-26.xhtml#glossary-rational">rational</a> number.  The radix specifier
is always printed using lowercase letters.  If <a class="variable-reference" href="#variable-*print-base*">*print-base*</a>
is <pre><code><span class="syntax-root"><span class="syntax-number">2</span>
</span></code></pre>, <pre><code><span class="syntax-root"><span class="syntax-number">8</span>
</span></code></pre>, or <pre><code><span class="syntax-root"><span class="syntax-number">16</span>
</span></code></pre>, then the radix specifier used is <pre><code><span class="syntax-root">#b
</span></code></pre>,
<pre><code><span class="syntax-root">#o
</span></code></pre>, or <pre><code><span class="syntax-root">#x
</span></code></pre>, respectively.  For <a class="glossary-reference" href="chapter-26.xhtml#glossary-integer">integers</a>, base ten is
indicated by a trailing decimal point instead of a leading radix
specifier; for <a class="glossary-reference" href="chapter-26.xhtml#glossary-ratio">ratios</a>, <pre><code><span class="syntax-root">#10r
</span></code></pre> is used.  <br/></dd></dl><dl><dt class="label">Examples</dt><dd><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<a class="variable-reference" href="#variable-*print-base*">*print-base*</a> <span class="syntax-number">24.</span>)</span> <span class="syntax-cons">(<a class="variable-reference" href="#variable-*print-radix*">*print-radix*</a> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a>)</span>)</span> 
   <span class="syntax-cons">(<a class="function-reference" href="#function-print">print</a> <span class="syntax-number">23.</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> #24rN
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">23</span>
 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <a class="variable-reference" href="#variable-*print-base*">*print-base*</a> <span class="syntax-number">10</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">10</span>
 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <a class="variable-reference" href="#variable-*print-radix*">*print-radix*</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>                                          
 <span class="syntax-cons">(<a class="macro-reference" href="chapter-6.xhtml#macro-dotimes">dotimes</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">i</span> <span class="syntax-number">35</span>)</span>
    <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<a class="variable-reference" href="#variable-*print-base*">*print-base*</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">i</span> <span class="syntax-number">2</span>)</span>)</span>)</span>           <span class="syntax-line-comment syntax-comment">;print the decimal number 40 
</span>      <span class="syntax-cons">(<a class="function-reference" href="#function-write">write</a> <span class="syntax-number">40</span>)</span>                            <span class="syntax-line-comment syntax-comment">;in each base from 2 to 36
</span>      <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-zerop">zerop</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-mod">mod</a> <span class="syntax-interned-symbol">i</span> <span class="syntax-number">10</span>)</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-21.xhtml#function-terpri">terpri</a>)</span> <span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a> <span class="syntax-string">" "</span>)</span>)</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 101000
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 1111 220 130 104 55 50 44 40 37 34
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 31 2C 2A 28 26 24 22 20 1J 1I
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 1H 1G 1F 1E 1D 1C 1B 1A 19 18
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 17 16 15 14 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>
 <span class="syntax-cons">(<a class="macro-reference" href="chapter-6.xhtml#macro-dolist">dolist</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">pb</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-number">2</span> <span class="syntax-number">3</span> <span class="syntax-number">8</span> <span class="syntax-number">10</span> <span class="syntax-number">16</span>)</span></span>)</span>               
    <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<a class="variable-reference" href="#variable-*print-radix*">*print-radix*</a> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a>)</span>                 <span class="syntax-line-comment syntax-comment">;print the integer 10 and 
</span>          <span class="syntax-cons">(<a class="variable-reference" href="#variable-*print-base*">*print-base*</a> <span class="syntax-interned-symbol">pb</span>)</span>)</span>                <span class="syntax-line-comment syntax-comment">;the ratio 1/10 in bases 2, 
</span>     <span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a> <span class="syntax-string">"~&amp;~S  ~S~%"</span> <span class="syntax-number">10</span> <span class="syntax-number">1/10</span>)</span>)</span>)</span>        ;3, 8, 10, 16
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> #b1010  #b1/1010
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> #3r101  #3r1/101
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> #o12  #o1/12
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 10.  #10r1/10
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> #xA  #x1/A
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>
</span></code></pre><br/></dd></dl><dl><dt class="label">Affected By</dt><dd>Might be <a class="glossary-reference" href="chapter-26.xhtml#glossary-bound">bound</a> by <a class="function-reference" href="#function-format">format</a>, and <a class="function-reference" href="#function-write">write</a>, <a class="function-reference" href="#function-write-to-string">write-to-string</a>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="function-reference" href="#function-format">format</a>,
<a class="function-reference" href="#function-write">write</a>,
<a class="function-reference" href="#function-write-to-string">write-to-string</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd><span class="none">None</span>.<br/></dd></dl></div><br/><br/><br/><div class="component" id="variable-*print-case*"><div class="header"><span class="left"><span class="name" id="variable-*print-case*">*print-case*</span></span><span class="right"><span class="ftype">Variable</span></span></div><br/><dl><dt class="label">Value Type</dt><dd>One of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbols</a> <span class="keyword">:upcase</span>, <span class="keyword">:downcase</span>, or <span class="keyword">:capitalize</span>.<br/></dd></dl><dl><dt class="label">Initial Value</dt><dd>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> <span class="keyword">:upcase</span>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a> of <a class="variable-reference" href="#variable-*print-case*">*print-case*</a> controls the case (upper, lower, or mixed) in 
which to print any uppercase characters in the names of <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbols</a>
when vertical-bar syntax is not used.<br/><a class="variable-reference" href="#variable-*print-case*">*print-case*</a> has an effect at all times when the <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a> of <a class="variable-reference" href="#variable-*print-escape*">*print-escape*</a>
is <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>. <a class="variable-reference" href="#variable-*print-case*">*print-case*</a> also has an effect when
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a> of <a class="variable-reference" href="#variable-*print-escape*">*print-escape*</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a> unless inside an escape context
(<span class="explicit-italic"> i.e.</span>,  unless between <a class="glossary-reference" href="chapter-26.xhtml#glossary-vertical-bar">vertical-bars</a> or after a <a class="glossary-reference" href="chapter-26.xhtml#glossary-slash">slash</a>).

</dd></dl><dl><dt class="label">Examples</dt><dd><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">test-print-case</span> <span class="syntax-symbol">()</span>
   <span class="syntax-cons">(<a class="macro-reference" href="chapter-6.xhtml#macro-dolist">dolist</a> <span class="syntax-cons">(<a class="variable-reference" href="#variable-*print-case*">*print-case*</a> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-keyword-symbol">:upcase</span> <span class="syntax-keyword-symbol">:downcase</span> <span class="syntax-keyword-symbol">:capitalize</span>)</span></span>)</span>
     <span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a> <span class="syntax-string">"~&amp;~S ~S~%"</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">this-and-that</span></span> <span class="syntax-quote">'<span class="syntax-interned-symbol">|And-something-elSE|</span></span>)</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">TEST-PC</span>
;; Although the choice of which characters to escape is specified by
;; *PRINT-CASE*, the choice of how to escape those characters 
;; (i.e., whether single escapes or multiple escapes are used)
;; is implementation-dependent.  The examples here show two of the
;; many valid ways in which escaping might appear.
 <span class="syntax-cons">(<span class="syntax-interned-symbol">test-print-case</span>)</span> ;Implementation A
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> THIS-AND-THAT |And-something-elSE|
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> this-and-that a\n\d-\s\o\m\e\t\h\i\n\g-\e\lse
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> This-And-That A\n\d-\s\o\m\e\t\h\i\n\g-\e\lse
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>
 <span class="syntax-cons">(<span class="syntax-interned-symbol">test-print-case</span>)</span> ;Implementation B
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> THIS-AND-THAT |And-something-elSE|
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> this-and-that a|nd-something-el|se
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> This-And-That A|nd-something-el|se
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>
</span></code></pre><br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="function-reference" href="#function-write">write</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd><a class="function-reference" href="chapter-23.xhtml#function-read">read</a> normally converts lowercase characters appearing 
in <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbols</a> to corresponding uppercase characters,
so that internally print names normally contain only uppercase characters.<br/>If <a class="variable-reference" href="#variable-*print-escape*">*print-escape*</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>,
lowercase characters in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>
are always printed in lowercase, and
are preceded by a single escape character 
or enclosed by multiple escape characters;
uppercase characters in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>
are printed in upper case, in lower case, or in mixed case
so as to capitalize words, according to the value of
<a class="variable-reference" href="#variable-*print-case*">*print-case*</a>.  The convention for what constitutes
a ``word'' is the same as for <a class="function-reference" href="chapter-16.xhtml#function-string-capitalize">string-capitalize</a>.
</dd></dl></div><br/><br/>
<br/><div class="component" id="variable-*print-circle*"><div class="header"><span class="left"><span class="name" id="variable-*print-circle*">*print-circle*</span></span><span class="right"><span class="ftype">Variable</span></span></div><br/>
<dl><dt class="label">Value Type</dt><dd>a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generalized boolean">generalized boolean</a>.<br/></dd></dl><dl><dt class="label">Initial Value</dt><dd><a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>Controls the attempt to detect circularity and sharing in an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> 
being printed.<br/>If <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>,
the printing process merely proceeds by recursive descent without attempting 
to detect circularity and sharing.<br/>If <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>,
the printer will endeavor to detect cycles and sharing
in the structure to be printed, 
and to use <pre><code><span class="syntax-root">#<span class="explicit-italic"> n</span>=
</span></code></pre> and <pre><code><span class="syntax-root">#<span class="explicit-italic"> n</span>#
</span></code></pre>
syntax to indicate the circularities or shared components.<br/>If <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>, a user-defined 
<a class="function-reference" href="#function-print-object">print-object</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a>can print
<a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a> to the supplied <a class="glossary-reference" href="chapter-26.xhtml#glossary-stream">stream</a> using <a class="function-reference" href="#function-write">write</a>, <a class="function-reference" href="#function-prin1">prin1</a>, 
<a class="function-reference" href="#function-princ">princ</a>, or <a class="function-reference" href="#function-format">format</a> and expect circularities and sharing
to be detected and printed using the <pre><code><span class="syntax-root">#<span class="explicit-italic"> n</span>#
</span></code></pre> syntax.
If a user-defined 
<a class="function-reference" href="#function-print-object">print-object</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a>prints to a <a class="glossary-reference" href="chapter-26.xhtml#glossary-stream">stream</a> other than the one
that was supplied, then circularity detection starts over for that <a class="glossary-reference" href="chapter-26.xhtml#glossary-stream">stream</a>. 

Note that implementations should not use <pre><code><span class="syntax-root">#<span class="explicit-italic"> n</span>#
</span></code></pre> notation 
when the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lisp reader">Lisp reader</a> would automatically assure sharing without it
(<span class="explicit-italic"> e.g.</span>,  as happens with <a class="glossary-reference" href="chapter-26.xhtml#glossary-interned">interned</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbols</a>).<br/></dd></dl><dl><dt class="label">Examples</dt><dd><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">3</span>)</span>)</span>)</span>
   <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-cdddr">cdddr</a> <span class="syntax-interned-symbol">a</span>)</span> <span class="syntax-interned-symbol">a</span>)</span>
   <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<a class="symbol-reference" href="chapter-2.xhtml#symbol-*print-circle*">*print-circle*</a> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a>)</span>)</span>
     <span class="syntax-cons">(<a class="function-reference" href="#function-write">write</a> <span class="syntax-interned-symbol">a</span>)</span>
     <span class="syntax-keyword-symbol">:done</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> #1=(1 2 3 . #1#)
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-keyword-symbol">:DONE</span>
</span></code></pre><br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="function-reference" href="#function-write">write</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd>An attempt to print a circular structure with <a class="variable-reference" href="#variable-*print-circle*">*print-circle*</a> 
set to <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a> may lead to looping behavior and failure to terminate.<br/></dd></dl>
</div><br/><br/>
<br/><div class="component" id="variable-*print-escape*"><div class="header"><span class="left"><span class="name" id="variable-*print-escape*">*print-escape*</span></span><span class="right"><span class="ftype">Variable</span></span></div><br/><dl><dt class="label">Value Type</dt><dd>a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generalized boolean">generalized boolean</a>.<br/></dd></dl><dl><dt class="label">Initial Value</dt><dd><a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>If <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>,
escape characters and <a class="glossary-reference" href="chapter-26.xhtml#glossary-package prefix">package prefixes</a> are not output
when an expression is printed.<br/>If <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>, an attempt is made to print an <a class="glossary-reference" href="chapter-26.xhtml#glossary-expression">expression</a>
in such a way that it can be read again to produce an <a class="function-reference" href="chapter-5.xhtml#function-equal">equal</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-expression">expression</a>.
(This is only a guideline; not a requirement.  See <a class="variable-reference" href="#variable-*print-readably*">*print-readably*</a>.)<br/>For more specific details of how the <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a> of <a class="variable-reference" href="#variable-*print-escape*">*print-escape*</a>
affects the printing of certain <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">types</a>,
see <span class="section-reference error">section:DefaultPrintObjMeths.</span><br/></dd></dl><dl><dt class="label">Examples</dt><dd><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<a class="variable-reference" href="#variable-*print-escape*">*print-escape*</a> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a>)</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="#function-write">write</a> <span class="syntax-character">#\a</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> #\a
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-character">#\a</span>
 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<a class="variable-reference" href="#variable-*print-escape*">*print-escape*</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="#function-write">write</a> <span class="syntax-character">#\a</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> a
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-character">#\a</span>
</span></code></pre><br/></dd></dl><dl><dt class="label">Affected By</dt><dd><a class="function-reference" href="#function-princ">princ</a>, <a class="function-reference" href="#function-prin1">prin1</a>, <a class="function-reference" href="#function-format">format</a><br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="function-reference" href="#function-write">write</a>, <a class="function-reference" href="chapter-23.xhtml#function-readtable-case">readtable-case</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd><a class="function-reference" href="#function-princ">princ</a> effectively binds <a class="variable-reference" href="#variable-*print-escape*">*print-escape*</a> to <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>.
<a class="function-reference" href="#function-prin1">prin1</a> effectively binds <a class="variable-reference" href="#variable-*print-escape*">*print-escape*</a> to <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>.<br/></dd></dl></div><br/><br/>
<br/><div class="component" id="variable-*print-gensym*"><div class="header"><span class="left"><span class="name" id="variable-*print-gensym*">*print-gensym*</span></span><span class="right"><span class="ftype">Variable</span></span></div><br/><dl><dt class="label">Value Type</dt><dd>a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generalized boolean">generalized boolean</a>.<br/></dd></dl><dl><dt class="label">Initial Value</dt><dd><a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>Controls whether the prefix ``<pre><code><span class="syntax-root">#:
</span></code></pre>'' is printed before 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-apparently uninterned">apparently uninterned</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbols</a>.  
The prefix is printed before such <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbols</a> 
if and only if the <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a> of <a class="variable-reference" href="#variable-*print-gensym*">*print-gensym*</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>.<br/></dd></dl><dl><dt class="label">Examples</dt><dd><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<a class="variable-reference" href="#variable-*print-gensym*">*print-gensym*</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span>)</span>
   <span class="syntax-cons">(<a class="function-reference" href="#function-print">print</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-10.xhtml#function-gensym">gensym</a>)</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> G6040 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-uninterned-symbol">#:G6040</span>
</span></code></pre><br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="function-reference" href="#function-write">write</a>, <a class="variable-reference" href="#variable-*print-escape*">*print-escape*</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd><span class="none">None</span>.<br/></dd></dl></div><br/><br/>
<br/><div class="component" id="variable-*print-level*"><div class="header"><span class="left"><span class="name" id="variable-*print-level*">*print-level*</span>, <span class="name" id="variable-*print-length*">*print-length*</span></span><span class="right"><span class="ftype">Variable</span></span></div><br/><dl><dt class="label">Value Type</dt><dd>a non-negative <a class="glossary-reference" href="chapter-26.xhtml#glossary-integer">integer</a>, or <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.<br/></dd></dl><dl><dt class="label">Initial Value</dt><dd><a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd><a class="variable-reference" href="#variable-*print-level*">*print-level*</a> controls how many levels deep a nested <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> will print.
If it is <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>, then no control is exercised.
Otherwise, it is an <a class="glossary-reference" href="chapter-26.xhtml#glossary-integer">integer</a> indicating the maximum level to be printed.
An <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> to be printed is at level <pre><code><span class="syntax-root"><span class="syntax-number">0</span>
</span></code></pre>;
its components (as of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> or <a class="glossary-reference" href="chapter-26.xhtml#glossary-vector">vector</a>) are at level <pre><code><span class="syntax-root"><span class="syntax-number">1</span>
</span></code></pre>;
and so on.
If an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> to be recursively printed has components 
and is at a level equal to or greater than the <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a> of <a class="variable-reference" href="#variable-*print-level*">*print-level*</a>, 
then the <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> is printed as ``<pre><code><span class="syntax-root">#
</span></code></pre>''.<br/><a class="variable-reference" href="#variable-*print-length*">*print-length*</a> controls how many elements at a given level are printed.
If it is <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>, there is no limit to the number of components printed.
Otherwise, it is an <a class="glossary-reference" href="chapter-26.xhtml#glossary-integer">integer</a> indicating the maximum number of <a class="glossary-reference" href="chapter-26.xhtml#glossary-element">elements</a> 
of an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> to be printed.  If exceeded, the printer will print 
``<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">...</span>
</span></code></pre>'' in place of the other <a class="glossary-reference" href="chapter-26.xhtml#glossary-element">elements</a>.  In the case of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-dotted list">dotted list</a>,
if the <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> contains exactly as many <a class="glossary-reference" href="chapter-26.xhtml#glossary-element">elements</a> as the <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a> of <a class="variable-reference" href="#variable-*print-length*">*print-length*</a>,
the terminating <a class="glossary-reference" href="chapter-26.xhtml#glossary-atom">atom</a> is printed rather than printing ``<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">...</span>
</span></code></pre>''<br/><a class="variable-reference" href="#variable-*print-level*">*print-level*</a> and <a class="variable-reference" href="#variable-*print-length*">*print-length*</a> affect the printing 
of an any <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> printed with a list-like syntax.  They do not affect
the printing of <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbols</a>, <a class="glossary-reference" href="chapter-26.xhtml#glossary-string">strings</a>, and <a class="glossary-reference" href="chapter-26.xhtml#glossary-bit vector">bit vectors</a>.<br/></dd></dl><dl><dt class="label">Examples</dt><dd>
<pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-cons">(<span class="syntax-number">2</span> <span class="syntax-cons">(<span class="syntax-number">3</span> <span class="syntax-cons">(<span class="syntax-number">4</span> <span class="syntax-cons">(<span class="syntax-number">5</span> <span class="syntax-cons">(<span class="syntax-number">6</span>)</span>)</span>)</span>)</span>)</span>)</span></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-cons">(<span class="syntax-number">2</span> <span class="syntax-cons">(<span class="syntax-number">3</span> <span class="syntax-cons">(<span class="syntax-number">4</span> <span class="syntax-cons">(<span class="syntax-number">5</span> <span class="syntax-cons">(<span class="syntax-number">6</span>)</span>)</span>)</span>)</span>)</span>)</span>
 <span class="syntax-cons">(<a class="macro-reference" href="chapter-6.xhtml#macro-dotimes">dotimes</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">i</span> <span class="syntax-number">8</span>)</span> 
   <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<a class="variable-reference" href="#variable-*print-level*">*print-level*</a> <span class="syntax-interned-symbol">i</span>)</span>)</span> 
     <span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a> <span class="syntax-string">"~&amp;~D &ndash; ~S~%"</span> <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">a</span>)</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 0 &ndash; #
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 1 &ndash; (1 #)
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 2 &ndash; (1 (2 #))
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 3 &ndash; (1 (2 (3 #)))
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 4 &ndash; (1 (2 (3 (4 #))))
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 5 &ndash; (1 (2 (3 (4 (5 #)))))
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 6 &ndash; (1 (2 (3 (4 (5 (6))))))
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 7 &ndash; (1 (2 (3 (4 (5 (6))))))
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>

 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">3</span> <span class="syntax-number">4</span> <span class="syntax-number">5</span> <span class="syntax-number">6</span>)</span></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">3</span> <span class="syntax-number">4</span> <span class="syntax-number">5</span> <span class="syntax-number">6</span>)</span>
 <span class="syntax-cons">(<a class="macro-reference" href="chapter-6.xhtml#macro-dotimes">dotimes</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">i</span> <span class="syntax-number">7</span>)</span> 
   <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<a class="variable-reference" href="#variable-*print-length*">*print-length*</a> <span class="syntax-interned-symbol">i</span>)</span>)</span> 
     <span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a> <span class="syntax-string">"~&amp;~D &ndash; ~S~%"</span> <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">a</span>)</span>)</span>)</span> 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 0 &ndash; (...)
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 1 &ndash; (1 ...)
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 2 &ndash; (1 2 ...)
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 3 &ndash; (1 2 3 ...)
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 4 &ndash; (1 2 3 4 ...)
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 5 &ndash; (1 2 3 4 5 6)
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 6 &ndash; (1 2 3 4 5 6)
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>

<span class="syntax-cons">(<a class="macro-reference" href="chapter-6.xhtml#macro-dolist">dolist</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">level-length</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-number">0</span> <span class="syntax-number">1</span>)</span> <span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">1</span>)</span> <span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">2</span>)</span> <span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">3</span>)</span> <span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">4</span>)</span> 
                        <span class="syntax-cons">(<span class="syntax-number">2</span> <span class="syntax-number">1</span>)</span> <span class="syntax-cons">(<span class="syntax-number">2</span> <span class="syntax-number">2</span>)</span> <span class="syntax-cons">(<span class="syntax-number">2</span> <span class="syntax-number">3</span>)</span> <span class="syntax-cons">(<span class="syntax-number">3</span> <span class="syntax-number">2</span>)</span> <span class="syntax-cons">(<span class="syntax-number">3</span> <span class="syntax-number">3</span>)</span> <span class="syntax-cons">(<span class="syntax-number">3</span> <span class="syntax-number">4</span>)</span>)</span></span>)</span>
 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<a class="variable-reference" href="#variable-*print-level*">*print-level*</a>  <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-first">first</a>  <span class="syntax-interned-symbol">level-length</span>)</span>)</span>
       <span class="syntax-cons">(<a class="variable-reference" href="#variable-*print-length*">*print-length*</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-second">second</a> <span class="syntax-interned-symbol">level-length</span>)</span>)</span>)</span>
   <span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a> <span class="syntax-string">"~&amp;~D ~D &ndash; ~S~%"</span>
           <a class="variable-reference" href="#variable-*print-level*">*print-level*</a> <a class="variable-reference" href="#variable-*print-length*">*print-length*</a> 
           <span class="syntax-quote">'<span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-member">member</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-car">car</a> <span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-number">3</span>)</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">foo</span> <span class="syntax-symbol">.</span> <span class="syntax-vector">#(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">d</span> <span class="syntax-string">"Baz"</span>)</span>)</span></span>)</span></span>)</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 0 1 &ndash; #
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 1 1 &ndash; (IF ...)
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 1 2 &ndash; (IF # ...)
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 1 3 &ndash; (IF # # ...)
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 1 4 &ndash; (IF # # #)
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 2 1 &ndash; (IF ...)
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 2 2 &ndash; (IF (MEMBER X ...) ...)
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 2 3 &ndash; (IF (MEMBER X Y) (+ # 3) ...)
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 3 2 &ndash; (IF (MEMBER X ...) ...)
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 3 3 &ndash; (IF (MEMBER X Y) (+ (CAR X) 3) ...)
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 3 4 &ndash; (IF (MEMBER X Y) (+ (CAR X) 3) '(FOO . #(A B C D ...)))
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>
</span></code></pre><br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="function-reference" href="#function-write">write</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd><span class="none">None</span>.<br/>
</dd></dl></div><br/><br/><br/><div class="component" id="variable-*print-lines*"><div class="header"><span class="left"><span class="name" id="variable-*print-lines*">*print-lines*</span></span><span class="right"><span class="ftype">Variable</span></span></div><br/><dl><dt class="label">Value Type</dt><dd>a non-negative <a class="glossary-reference" href="chapter-26.xhtml#glossary-integer">integer</a>, or <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.<br/></dd></dl><dl><dt class="label">Initial Value</dt><dd><a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>When the <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a> of <a class="variable-reference" href="#variable-*print-lines*">*print-lines*</a> is other than <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>,
it is a limit on the number of output lines produced when something is pretty
printed.  If an attempt is made to go beyond that many lines,
``<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">..</span>
</span></code></pre>''<a id="index/text-dot dot"></a><a id="index/code-.."></a>
is printed at the end of the last line followed by all of the
suffixes (closing delimiters) that are pending to be printed.<br/></dd></dl><dl><dt class="label">Examples</dt><dd><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<a class="variable-reference" href="#variable-*print-right-margin*">*print-right-margin*</a> <span class="syntax-number">25</span>)</span> <span class="syntax-cons">(<a class="variable-reference" href="#variable-*print-lines*">*print-lines*</a> <span class="syntax-number">3</span>)</span>)</span>
   <span class="syntax-cons">(<a class="function-reference" href="#function-pprint">pprint</a> <span class="syntax-quote">'<span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-progn">progn</a> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-number">1</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-number">2</span> <span class="syntax-interned-symbol">c</span> <span class="syntax-number">3</span> <span class="syntax-interned-symbol">d</span> <span class="syntax-number">4</span>)</span>)</span></span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> (PROGN (SETQ A 1
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math>              B 2
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math>              C 3 ..))
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>âŸ¨</mi></math><span class="explicit-italic"> no <span class="glossary-reference error">glossary:values</span></span><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>âŸ©</mi></math>
</span></code></pre><br/></dd></dl><dl><dt class="label">See Also</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Notes</dt><dd>The ``<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">..</span>
</span></code></pre>'' notation is intentionally different than
the ``<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">...</span>
</span></code></pre>'' notation used for level abbreviation, so that the two
different situations can be visually distinguished.<br/>This notation is used to increase the likelihood that the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lisp reader">Lisp reader</a>
will signal an error if an attempt is later made to read the abbreviated output.
Note however that if the truncation occurs in a <a class="glossary-reference" href="chapter-26.xhtml#glossary-string">string</a>, 
as in <pre><code><span class="syntax-root"><span class="syntax-string">"This string has been trunc.."</span>
</span></code></pre>, the problem situation cannot be
detected later and no such error will be signaled.<br/></dd></dl></div><br/><br/><br/><div class="component" id="variable-*print-miser-width*"><div class="header"><span class="left"><span class="name" id="variable-*print-miser-width*">*print-miser-width*</span></span><span class="right"><span class="ftype">Variable</span></span></div><br/>
<dl><dt class="label">Value Type</dt><dd>a non-negative <a class="glossary-reference" href="chapter-26.xhtml#glossary-integer">integer</a>, or <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.<br/></dd></dl><dl><dt class="label">Initial Value</dt><dd><a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a><br/></dd></dl><dl><dt class="label">Description</dt><dd>If it is not <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>, the <a class="glossary-reference" href="chapter-26.xhtml#glossary-pretty printer">pretty printer</a> switches to a compact
style of output (called miser style) whenever the width available for
printing a substructure is less than or equal to this many <a class="glossary-reference" href="chapter-26.xhtml#glossary-em">ems</a>.<br/></dd></dl><dl><dt class="label">Examples</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Notes</dt><dd><span class="none">None</span>.<br/></dd></dl>
</div><br/><br/><br/><div class="component" id="variable-*print-pprint-dispatch*"><div class="header"><span class="left"><span class="name" id="variable-*print-pprint-dispatch*">*print-pprint-dispatch*</span></span><span class="right"><span class="ftype">Variable</span></span></div><br/>
<dl><dt class="label">Value Type</dt><dd>a <a class="glossary-reference" href="chapter-26.xhtml#glossary-pprint dispatch table">pprint dispatch table</a>.<br/></dd></dl><dl><dt class="label">Initial Value</dt><dd><a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a>, but the initial entries all use a 
special class of priorities that have the property that they are less
than every priority that can be specified using <a class="function-reference" href="#function-set-pprint-dispatch">set-pprint-dispatch</a>,
so that the initial contents of any entry can be overridden.<br/></dd></dl><dl><dt class="label">Description</dt><dd>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-pprint dispatch table">pprint dispatch table</a> which currently controls the <a class="glossary-reference" href="chapter-26.xhtml#glossary-pretty printer">pretty printer</a>.<br/></dd></dl><dl><dt class="label">Examples</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="variable-reference" href="#variable-*print-pretty*">*print-pretty*</a>,
<a class="section-reference" href="#section-PPrintDispatchTables">Pretty Print Dispatch Tables</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd>The intent is that the initial <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a> of this <a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variable</a> should
cause `traditional' <a class="glossary-reference" href="chapter-26.xhtml#glossary-pretty print">pretty printing</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-code">code</a>.
In general, however, you can put a value in <a class="variable-reference" href="#variable-*print-pprint-dispatch*">*print-pprint-dispatch*</a>
that makes pretty-printed output look exactly like non-pretty-printed output.
Setting <a class="variable-reference" href="#variable-*print-pretty*">*print-pretty*</a> to <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a> 
just causes the functions contained in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-current pprint dispatch table">current pprint dispatch table</a> 
to have priority over normal <a class="function-reference" href="#function-print-object">print-object</a> methods;
it has no magic way of enforcing that those functions actually produce pretty
output.  For details, see <span class="section-reference error">section:PPrintDispatchTables.</span></dd></dl>
</div><br/><br/><br/><div class="component" id="variable-*print-pretty*"><div class="header"><span class="left"><span class="name" id="variable-*print-pretty*">*print-pretty*</span></span><span class="right"><span class="ftype">Variable</span></span></div><br/><dl><dt class="label">Value Type</dt><dd>a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generalized boolean">generalized boolean</a>.<br/></dd></dl><dl><dt class="label">Initial Value</dt><dd><a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>Controls whether the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lisp printer">Lisp printer</a> calls the <a class="glossary-reference" href="chapter-26.xhtml#glossary-pretty printer">pretty printer</a>.<br/>If it is <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>,
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-pretty printer">pretty printer</a> is not used and 
a minimum
of <a class="glossary-reference" href="chapter-26.xhtml#glossary-whitespace">whitespace</a><sub>1</sub>
is output when printing an expression.<br/>If it is <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>,
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-pretty printer">pretty printer</a> is used, and the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lisp printer">Lisp printer</a> will endeavor
to insert extra <a class="glossary-reference" href="chapter-26.xhtml#glossary-whitespace">whitespace</a><sub>1</sub> where appropriate to make <a class="glossary-reference" href="chapter-26.xhtml#glossary-expression">expressions</a> 
more readable.<br/><a class="variable-reference" href="#variable-*print-pretty*">*print-pretty*</a> has an effect even when the <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a> of <a class="variable-reference" href="#variable-*print-escape*">*print-escape*</a>
is <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>.<br/></dd></dl><dl><dt class="label">Examples</dt><dd><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <a class="variable-reference" href="#variable-*print-pretty*">*print-pretty*</a> <span class="syntax-quote">'<a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>
 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-progn">progn</a> <span class="syntax-cons">(<a class="function-reference" href="#function-write">write</a> <span class="syntax-quote">'<span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-number">1</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">b</span> <span class="syntax-number">2</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">c</span> <span class="syntax-number">3</span>)</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span>)</span>)</span></span>)</span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> (LET ((A 1) (B 2) (C 3)) (+ A B C))
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>
 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<a class="variable-reference" href="#variable-*print-pretty*">*print-pretty*</a> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a>)</span>)</span>
   <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-progn">progn</a> <span class="syntax-cons">(<a class="function-reference" href="#function-write">write</a> <span class="syntax-quote">'<span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-number">1</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">b</span> <span class="syntax-number">2</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">c</span> <span class="syntax-number">3</span>)</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span>)</span>)</span></span>)</span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> (LET ((A 1)
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math>       (B 2)
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math>       (C 3))
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math>   (+ A B C))
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>
;; Note that the first two expressions printed by this next form
;; differ from the second two only in whether escape characters are printed.
;; In all four cases, extra whitespace is inserted by the pretty printer.
 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-flet">flet</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">test</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span>)</span>
          <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<a class="variable-reference" href="#variable-*print-pretty*">*print-pretty*</a> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a>)</span>)</span>
            <span class="syntax-cons">(<a class="function-reference" href="#function-print">print</a> <span class="syntax-interned-symbol">x</span>)</span>
            <span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a> <span class="syntax-string">"~%~S "</span> <span class="syntax-interned-symbol">x</span>)</span>
            <span class="syntax-cons">(<a class="function-reference" href="chapter-21.xhtml#function-terpri">terpri</a>)</span> <span class="syntax-cons">(<a class="function-reference" href="#function-princ">princ</a> <span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="#function-princ">princ</a> <span class="syntax-string">" "</span>)</span>
            <span class="syntax-cons">(<a class="function-reference" href="#function-format">format</a> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a> <span class="syntax-string">"~%~A "</span> <span class="syntax-interned-symbol">x</span>)</span>)</span>)</span>)</span>
  <span class="syntax-cons">(<span class="syntax-interned-symbol">test</span> <span class="syntax-quote">'<span class="syntax-function">#'<span class="syntax-cons">(<a class="macro-reference" href="chapter-3.xhtml#macro-lambda">lambda</a> <span class="syntax-symbol">()</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-string">"a"</span> <span class="syntax-character">#\b</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">c</span></span> <span class="syntax-function">#'<span class="syntax-interned-symbol">d</span></span>)</span>)</span></span></span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> #'(LAMBDA ()
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math>     (LIST "a" #\b 'C #'D))
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> #'(LAMBDA ()
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math>     (LIST "a" #\b 'C #'D))
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> #'(LAMBDA ()
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math>     (LIST a b 'C #'D)) 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> #'(LAMBDA ()
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math>     (LIST a b 'C #'D))
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>
</span></code></pre>
</dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="function-reference" href="#function-write">write</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd><span class="none">None</span>.<br/></dd></dl></div><br/><br/><br/><div class="component" id="variable-*print-readably*"><div class="header"><span class="left"><span class="name" id="variable-*print-readably*">*print-readably*</span></span><span class="right"><span class="ftype">Variable</span></span></div>

<dl><dt class="label">Value Type</dt><dd>a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generalized boolean">generalized boolean</a>.<br/></dd></dl><dl><dt class="label">Initial Value</dt><dd><a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>If <a class="variable-reference" href="#variable-*print-readably*">*print-readably*</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>,
some special rules for printing <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a> go into effect.
Specifically, printing any <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>O</mrow><mo>1</mo></msub></math> produces a printed 
representation that, when seen by the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lisp reader">Lisp reader</a> 
while the <a class="glossary-reference" href="chapter-26.xhtml#glossary-standard readtable">standard readtable</a> is in effect,
will produce 
an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>O</mrow><mo>2</mo></msub></math> that is <a class="glossary-reference" href="chapter-26.xhtml#glossary-similar">similar</a> to <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow>O</mrow><mo>1</mo></msub></math>.
The printed representation produced might or might not be the same as
the printed representation produced when <a class="variable-reference" href="#variable-*print-readably*">*print-readably*</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>.
If printing an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-readably">readably</a> is not possible,
an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="#type-print-not-readable">print-not-readable</a> is signaled rather than 
using a syntax (<span class="explicit-italic"> e.g.</span>,  the ``<pre><code><span class="syntax-root">#&lt;
</span></code></pre>'' syntax) that would not be readable by
the same <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation">implementation</a>.
If the <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a> of some other <a class="glossary-reference" href="chapter-26.xhtml#glossary-printer control variable">printer control variable</a> is such
that these requirements would be violated, the <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a> of that other
<a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variable</a> is ignored.<br/>Specifically, if <a class="variable-reference" href="#variable-*print-readably*">*print-readably*</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>,
printing proceeds as if
      <a class="variable-reference" href="#variable-*print-escape*">*print-escape*</a>,
      <a class="variable-reference" href="#variable-*print-array*">*print-array*</a>,
  and <a class="variable-reference" href="#variable-*print-gensym*">*print-gensym*</a> were also <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>,
and as if 
      <a class="variable-reference" href="#variable-*print-length*">*print-length*</a>,
      <a class="variable-reference" href="#variable-*print-level*">*print-level*</a>,
  and <a class="variable-reference" href="#variable-*print-lines*">*print-lines*</a> were <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>.

If <a class="variable-reference" href="#variable-*print-readably*">*print-readably*</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>,
the normal rules for printing and the normal interpretations
of other <a class="glossary-reference" href="chapter-26.xhtml#glossary-printer control variable">printer control variables</a> are in effect.<br/>Individual <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> for <a class="function-reference" href="#function-print-object">print-object</a>, including user-defined
<a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a>, are responsible for implementing these requirements.<br/>If <a class="variable-reference" href="chapter-23.xhtml#variable-*read-eval*">*read-eval*</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a> and <a class="variable-reference" href="#variable-*print-readably*">*print-readably*</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>,
any such method that would output a reference to the ``<pre><code><span class="syntax-root">#.
</span></code></pre>'' <a class="glossary-reference" href="chapter-26.xhtml#glossary-reader macro">reader macro</a>
will either output something else or will signal an error (as described above).<br/></dd></dl><dl><dt class="label">Examples</dt><dd><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-string">"a"</span> <span class="syntax-quote">'\a</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-10.xhtml#function-gensym">gensym</a>)</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">b</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">c</span>)</span>)</span>)</span> <span class="syntax-interned-symbol">d</span> <span class="syntax-interned-symbol">e</span> <span class="syntax-interned-symbol">f</span> <span class="syntax-interned-symbol">g</span>)</span></span>)</span>)</span>
       <span class="syntax-cons">(<a class="variable-reference" href="#variable-*print-escape*">*print-escape*</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span>
       <span class="syntax-cons">(<a class="variable-reference" href="#variable-*print-gensym*">*print-gensym*</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span>
       <span class="syntax-cons">(<a class="variable-reference" href="#variable-*print-level*">*print-level*</a> <span class="syntax-number">3</span>)</span>
       <span class="syntax-cons">(<a class="variable-reference" href="#variable-*print-length*">*print-length*</a> <span class="syntax-number">3</span>)</span>)</span>
   <span class="syntax-cons">(<a class="function-reference" href="#function-write">write</a> <span class="syntax-interned-symbol">x</span>)</span>
   <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<a class="variable-reference" href="#variable-*print-readably*">*print-readably*</a> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a>)</span>)</span>
     <span class="syntax-cons">(<a class="function-reference" href="chapter-21.xhtml#function-terpri">terpri</a>)</span>
     <span class="syntax-cons">(<a class="function-reference" href="#function-write">write</a> <span class="syntax-interned-symbol">x</span>)</span>
     <span class="syntax-keyword-symbol">:done</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> (a a G4581 ((A #) D E ...))
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> ("a" |a| #:G4581 ((A (B (C))) D E F G))
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-keyword-symbol">:DONE</span>

;; This is setup code is shared between the examples
;; of three hypothetical implementations which follow.
 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">table</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-18.xhtml#function-make-hash-table">make-hash-table</a>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-verbatim">#&lt;HASH-TABLE EQL 0/120 32005763&gt;</span> 
 <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-18.xhtml#function-gethash">gethash</a> <span class="syntax-interned-symbol">table</span> <span class="syntax-number">1</span>)</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">one</span></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">ONE</span>
 <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-18.xhtml#function-gethash">gethash</a> <span class="syntax-interned-symbol">table</span> <span class="syntax-number">2</span>)</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">two</span></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">TWO</span>

;; Implementation A
 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<a class="variable-reference" href="#variable-*print-readably*">*print-readably*</a> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a>)</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="#function-print">print</a> <span class="syntax-interned-symbol">table</span>)</span>)</span>
 <span class="syntax-interned-symbol">Error:</span> <span class="syntax-interned-symbol">Can</span><span class="syntax-quote">'<a class="section-reference" href="chapter-26.xhtml#section-T">T</a></span> <a class="function-reference" href="#function-print">print</a> <span class="syntax-verbatim">#&lt;HASH-TABLE EQL 0/120 32005763&gt;</span> <span class="syntax-interned-symbol">readably.</span>

;; Implementation B
;; No standardized #S notation for hash tables is defined, 
;; but there might be an implementation-defined notation.
 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<a class="variable-reference" href="#variable-*print-readably*">*print-readably*</a> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a>)</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="#function-print">print</a> <span class="syntax-interned-symbol">table</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> #S(HASH-TABLE :TEST EQL :SIZE 120 :CONTENTS (1 ONE 2 TWO))
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-verbatim">#&lt;HASH-TABLE EQL 0/120 32005763&gt;</span>

;; Implementation C
;; Note that #. notation can only be used if *READ-EVAL* is true.
;; If *READ-EVAL* were false, this same implementation might have to
;; signal an error unless it had yet another printing strategy to fall
;; back on.
 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<a class="variable-reference" href="#variable-*print-readably*">*print-readably*</a> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a>)</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="#function-print">print</a> <span class="syntax-interned-symbol">table</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> #.(LET ((HASH-TABLE (MAKE-HASH-TABLE)))
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math>     (SETF (GETHASH 1 HASH-TABLE) ONE)
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math>     (SETF (GETHASH 2 HASH-TABLE) TWO)
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math>     HASH-TABLE)
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-verbatim">#&lt;HASH-TABLE EQL 0/120 32005763&gt;</span>
</span></code></pre><br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="function-reference" href="#function-write">write</a>, <a class="macro-reference" href="#macro-print-unreadable-object">print-unreadable-object</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd>The rules for ``<a class="glossary-reference" href="chapter-26.xhtml#glossary-similarity">similarity</a>'' imply that 
<pre><code><span class="syntax-root">#A
</span></code></pre> or <pre><code><span class="syntax-root">#<span class="syntax-symbol">(
Â¶</span></span></code></pre> syntax cannot be used for <a class="glossary-reference" href="chapter-26.xhtml#glossary-array">arrays</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-element type">element type</a>
other than <a class="type-reference" href="chapter-4.xhtml#type-t">t</a>.  
An implementation will have to use another syntax 
or signal an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="#type-print-not-readable">print-not-readable</a>.  <br/>
</dd></dl>
</div><br/><br/>
<br/><div class="component" id="variable-*print-right-margin*"><div class="header"><span class="left"><span class="name" id="variable-*print-right-margin*">*print-right-margin*</span></span><span class="right"><span class="ftype">Variable</span></span></div><br/>
<dl><dt class="label">Value Type</dt><dd>a non-negative <a class="glossary-reference" href="chapter-26.xhtml#glossary-integer">integer</a>, or <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.<br/></dd></dl><dl><dt class="label">Initial Value</dt><dd><a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>If it is <a class="glossary-reference" href="chapter-26.xhtml#glossary-non-nil">non-nil</a>, it specifies the right margin (as <a class="glossary-reference" href="chapter-26.xhtml#glossary-integer">integer</a>
number of <a class="glossary-reference" href="chapter-26.xhtml#glossary-em">ems</a>) to use when the <a class="glossary-reference" href="chapter-26.xhtml#glossary-pretty printer">pretty printer</a> is making
layout decisions.<br/>If it is <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>, the right margin is taken to be the maximum line length 
such that output can be displayed without wraparound or truncation.
If this cannot be determined, an <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a> value is used.<br/></dd></dl><dl><dt class="label">Examples</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Notes</dt><dd>This measure is in units of <a class="glossary-reference" href="chapter-26.xhtml#glossary-em">ems</a> in order to be compatible with
<a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-defined">implementation-defined</a> variable-width fonts while still not 
requiring the language to provide support for fonts.<br/></dd></dl>
</div><br/><br/><br/><br/><div class="component" id="type-print-not-readable"><div class="header"><span class="left"><span class="name" id="type-print-not-readable">print-not-readable</span></span><span class="right"><span class="ftype">Condition Type</span></span></div><br/><dl><dt class="label">Class Precedence List</dt><dd><a class="type-reference" href="#type-print-not-readable">print-not-readable</a>,
<a class="type-reference" href="chapter-9.xhtml#type-error">error</a>,
<a class="type-reference" href="chapter-9.xhtml#type-serious-condition">serious-condition</a>,
<a class="type-reference" href="chapter-9.xhtml#type-condition">condition</a>,
<a class="type-reference" href="chapter-4.xhtml#type-t">t</a><br/></dd></dl><dl><dt class="label">Description</dt><dd>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="#type-print-not-readable">print-not-readable</a> consists of error conditions that occur during
output while <a class="variable-reference" href="#variable-*print-readably*">*print-readably*</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>, as a result of attempting
to write a printed representation with the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lisp printer">Lisp printer</a>
that would not be correctly read back with the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lisp reader">Lisp reader</a>.
The object which could not be printed is initialized by 
the <span class="keyword">:object</span> initialization argument to <a class="function-reference" href="chapter-9.xhtml#function-make-condition">make-condition</a>, and is <a class="glossary-reference" href="chapter-26.xhtml#glossary-access">accessed</a> by 
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="#function-print-not-readable-object">print-not-readable-object</a>.
</dd></dl>
<dl><dt class="label">See Also</dt><dd><a class="function-reference" href="#function-print-not-readable-object">print-not-readable-object</a><br/></dd></dl></div><br/>
<br/><div class="component" id="function-print-not-readable-object"><div class="header"><span class="left"><span class="name" id="function-print-not-readable-object">print-not-readable-object</span></span><span class="right"><span class="ftype">Function</span></span></div>
<dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">print-not-readable-object</span>&nbsp;<span class="lambda-list">condition</span>&nbsp;â†’&nbsp;<span class="return-values">object</span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">condition</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-condition">condition</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="#type-print-not-readable">print-not-readable</a>.<br/><span class="parameter">object</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>Returns the <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> that could not be printed readably 
in the situation represented by <span class="parameter">condition</span>.<br/></dd></dl><dl><dt class="label">Examples</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="type-reference" href="#type-print-not-readable">print-not-readable</a>,
<a class="section-reference" href="chapter-9.xhtml#section-ChapNine">Conditions</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd><span class="none">None</span>.<br/>
</dd></dl></div><br/><br/><br/><div class="component" id="function-format"><div class="header"><span class="left"><span class="name" id="function-format">format</span></span><span class="right"><span class="ftype">Function</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">format</span>&nbsp;<span class="lambda-list">destination control-string <span class="lambda-list-keyword">&amp;rest</span> args</span>&nbsp;â†’&nbsp;<span class="return-values">result</span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">destination</span>&mdash;<a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>,
		      <a class="symbol-reference" href="chapter-5.xhtml#symbol-t">t</a>,
		      a <a class="glossary-reference" href="chapter-26.xhtml#glossary-stream">stream</a>,
		   or a <a class="glossary-reference" href="chapter-26.xhtml#glossary-string">string</a> with a <a class="glossary-reference" href="chapter-26.xhtml#glossary-fill pointer">fill pointer</a>.<br/><span class="parameter">control-string</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-format control">format control</a>.

<span class="parameter">args</span>&mdash;<a class="glossary-reference" href="chapter-26.xhtml#glossary-format argument">format arguments</a> for <span class="parameter">control-string</span>.<br/><span class="parameter">result</span>&mdash;if <span class="parameter">destination</span> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-non-nil">non-nil</a>, then <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>;
		 otherwise, a <a class="glossary-reference" href="chapter-26.xhtml#glossary-string">string</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd><a class="function-reference" href="#function-format">format</a> produces formatted output by outputting the characters
of <span class="parameter">control-string</span> and observing that a <a class="glossary-reference" href="chapter-26.xhtml#glossary-tilde">tilde</a>
introduces a directive.  The character after the tilde, possibly preceded 
by prefix parameters and modifiers, specifies what kind of formatting 
is desired.  Most directives use one or more elements of <span class="parameter">args</span> to
create their output.<br/>If <span class="parameter">destination</span> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-string">string</a>, a <a class="glossary-reference" href="chapter-26.xhtml#glossary-stream">stream</a>, or <a class="symbol-reference" href="chapter-5.xhtml#symbol-t">t</a>, 
then the <span class="parameter">result</span> is <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.  Otherwise, the <span class="parameter">result</span> is
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-string">string</a> containing the `output.'<br/><a class="function-reference" href="#function-format">format</a> is useful for producing nicely formatted text, producing
good-looking messages, and so on.  <a class="function-reference" href="#function-format">format</a> can generate and return
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-string">string</a> or output to <span class="parameter">destination</span>.<br/>For details on how the <span class="parameter">control-string</span> is interpreted,
see <span class="section-reference error">section:FormattedOutput.</span><br/></dd></dl><dl><dt class="label">Examples</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Affected By</dt><dd><a class="variable-reference" href="chapter-21.xhtml#variable-*standard-output*">*standard-output*</a>,
<a class="variable-reference" href="#variable-*print-escape*">*print-escape*</a>,
<a class="variable-reference" href="#variable-*print-radix*">*print-radix*</a>,
<a class="variable-reference" href="#variable-*print-base*">*print-base*</a>,
<a class="variable-reference" href="#variable-*print-circle*">*print-circle*</a>,
<a class="variable-reference" href="#variable-*print-pretty*">*print-pretty*</a>,
<a class="variable-reference" href="#variable-*print-level*">*print-level*</a>,
<a class="variable-reference" href="#variable-*print-length*">*print-length*</a>,
<a class="variable-reference" href="#variable-*print-case*">*print-case*</a>,
<a class="variable-reference" href="#variable-*print-gensym*">*print-gensym*</a>,
<a class="variable-reference" href="#variable-*print-array*">*print-array*</a>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd>If <span class="parameter">destination</span> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-string">string</a> with a <a class="glossary-reference" href="chapter-26.xhtml#glossary-fill pointer">fill pointer</a>,
the consequences are undefined if destructive modifications are performed
directly on the <a class="glossary-reference" href="chapter-26.xhtml#glossary-string">string</a> during the <a class="glossary-reference" href="chapter-26.xhtml#glossary-dynamic extent">dynamic extent</a> of the call.

</dd></dl><dl><dt class="label">See Also</dt><dd><a class="function-reference" href="#function-write">write</a>,
<a class="section-reference" href="chapter-13.xhtml#section-ImplementationDefinedScripts">Documentation of Implementation-Defined Scripts</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd><span class="none">None</span>.<br/></dd></dl></div><br/>
</section></section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>