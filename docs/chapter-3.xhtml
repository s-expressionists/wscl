<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="style.css"/><script src="permalink.js"/><script src="navigation.js"/><title>Well-specified Common Lisp â€” Evaluation and Compilation</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">Evaluation and Compilation</span><br/><ol class="local-toc"><li><a href="#section-Evaluation">Evaluation</a><ol> <li><a href="#section-IntroToEnvs">Introduction to Environments</a><ol> <li><a href="#section-TheGlobalEnvironment">The Global Environment</a><ol> </ol></li><li><a href="#section-DynamicEnvironments">Dynamic Environments</a><ol> </ol></li><li><a href="#section-LexicalEnvironments">Lexical Environments</a><ol> <li><a href="#section-NullLexicalEnv">The Null Lexical Environment</a><ol> </ol></li></ol></li><li><a href="#section-EnvObjs">Environment Objects</a><ol> </ol></li></ol></li><li><a href="#section-EvaluationModel">The Evaluation Model</a><ol> <li><a href="#section-FormEvaluation">Form Evaluation</a><ol> <li><a href="#section-SymbolsAsForms">Symbols as Forms</a><ol> <li><a href="#section-LexicalVariables">Lexical Variables</a><ol> </ol></li><li><a href="#section-DynamicVariables">Dynamic Variables</a><ol> </ol></li><li><a href="#section-ConstantVars">Constant Variables</a><ol> </ol></li><li><a href="#section-SymbolsNamingBothLexicalandDynamicVariables">Symbols Naming Both Lexical and Dynamic Variables</a><ol> </ol></li></ol></li><li><a href="#section-ConsesasForms">Conses as Forms</a><ol> <li><a href="#section-SpecialForms">Special Forms</a><ol> </ol></li><li><a href="#section-MacroForms">Macro Forms</a><ol> </ol></li><li><a href="#section-FunctionForms">Function Forms</a><ol> </ol></li><li><a href="#section-LambdaForms">Lambda Forms</a><ol> </ol></li></ol></li><li><a href="#section-Self-EvaluatingObjects">Self-Evaluating Objects</a><ol> <li><a href="#section-ExamplesofSelf-EvaluatingObjects">Examples of Self-Evaluating Objects</a><ol> </ol></li></ol></li></ol></li></ol></li><li><a href="#section-LambdaExpressions">Lambda Expressions</a><ol> </ol></li><li><a href="#section-ClosuresandLexicalBinding">Closures and Lexical Binding</a><ol> </ol></li><li><a href="#section-Shadowing">Shadowing</a><ol> </ol></li><li><a href="#section-Extent">Extent</a><ol> </ol></li><li><a href="#section-ReturnValues">Return Values</a><ol> </ol></li></ol></li><li><a href="#section-Compilation">Compilation</a><ol> <li><a href="#section-CompilationTerms">Compiler Terminology</a><ol> </ol></li><li><a href="#section-CompilationSemantics">Compilation Semantics</a><ol> <li><a href="#section-CompilerMacros">Compiler Macros</a><ol> <li><a href="#section-PurposeofCompilerMacros">Purpose of Compiler Macros</a><ol> </ol></li><li><a href="#section-NamingofCompilerMacros">Naming of Compiler Macros</a><ol> </ol></li><li><a href="#section-WhenCompilerMacrosAreUsed">When Compiler Macros Are Used</a><ol> <li><a href="#section-NotesabouttheImplementationofCompilerMacros">Notes about the Implementation of Compiler Macros</a><ol> </ol></li></ol></li></ol></li><li><a href="#section-MinimalCompilation">Minimal Compilation</a><ol> </ol></li><li><a href="#section-SemanticConstraints">Semantic Constraints</a><ol> </ol></li></ol></li><li><a href="#section-FileCompilation">File Compilation</a><ol> <li><a href="#section-TopLevelForms">Processing of Top Level Forms</a><ol> <li><a href="#section-DefiningMacros">Processing of Defining Macros</a><ol> </ol></li><li><a href="#section-ConstraintsOnMacros">Constraints on Macros and Compiler Macros</a><ol> </ol></li></ol></li></ol></li><li><a href="#section-LiteralsInCompiledFiles">Literal Objects in Compiled Files</a><ol> <li><a href="#section-ExternalizableObjects">Externalizable Objects</a><ol> </ol></li><li><a href="#section-Similarity">Similarity of Literal Objects</a><ol> <li><a href="#section-SimilarityofAggregateObjects">Similarity of Aggregate Objects</a><ol> </ol></li><li><a href="#section-DefinitionofSimilarity">Definition of Similarity</a><ol> </ol></li></ol></li><li><a href="#section-ExtensionstoSimilarityRules">Extensions to Similarity Rules</a><ol> </ol></li><li><a href="#section-CallingMakeLoadForm">Additional Constraints on Externalizable Objects</a><ol> </ol></li></ol></li><li><a href="#section-FileCompilerExceptions">Exceptional Situations in the Compiler</a><ol> </ol></li></ol></li><li><a href="#section-Declarations">Declarations</a><ol> <li><a href="#section-MinimalDeclarationProcessingRequirements">Minimal Declaration Processing Requirements</a><ol> </ol></li><li><a href="#section-DeclarationSpecifiers">Declaration Specifiers</a><ol> </ol></li><li><a href="#section-DeclarationIdentifiers">Declaration Identifiers</a><ol> <li><a href="#section-ShorthandnotationforTypeDeclarations">Shorthand notation for Type Declarations</a><ol> </ol></li></ol></li><li><a href="#section-DeclScope">Declaration Scope</a><ol> <li><a href="#section-ExamplesofDeclarationScope">Examples of Declaration Scope</a><ol> </ol></li></ol></li></ol></li><li><a href="#section-LambdaLists">Lambda Lists</a><ol> <li><a href="#section-OrdinaryLambdaLists">Ordinary Lambda Lists</a><ol> <li><a href="#section-Specifiersfortherequiredparameters">Specifiers for the required parameters</a><ol> </ol></li><li><a href="#section-Specifiersforoptionalparameters">Specifiers for optional parameters</a><ol> </ol></li><li><a href="#section-Aspecifierforarestparameter">A specifier for a rest parameter</a><ol> </ol></li><li><a href="#section-Specifiersforkeywordparameters">Specifiers for keyword parameters</a><ol> <li><a href="#section-SuppressingKeyArgChecks">Suppressing Keyword Argument Checking</a><ol> <li><a href="#section-ExamplesofSuppressingKeywordArgumentChecking">Examples of Suppressing Keyword Argument Checking</a><ol> </ol></li></ol></li></ol></li><li><a href="#section-Specifiersforvariables">Specifiers for </a><ol> </ol></li><li><a href="#section-ExamplesofOrdinaryLambdaLists">Examples of Ordinary Lambda Lists</a><ol> </ol></li></ol></li><li><a href="#section-GFLambdaLists">Generic Function Lambda Lists</a><ol> </ol></li><li><a href="#section-SpecializedLambdaLists">Specialized Lambda Lists</a><ol> </ol></li><li><a href="#section-MacroLambdaLists">Macro Lambda Lists</a><ol> <li><a href="#section-DestructuringByLambdaLists">Destructuring by Lambda Lists</a><ol> <li><a href="#section-Data-directedDestructuringbyLambdaLists">Data-directed Destructuring by Lambda Lists</a><ol> <li><a href="#section-ExamplesofData-directedDestructuringbyLambdaLists">Examples of Data-directed Destructuring by Lambda Lists</a><ol> </ol></li></ol></li><li><a href="#section-Lambda-list-directedDestructuringbyLambdaLists">Lambda-list-directed Destructuring by Lambda Lists</a><ol> </ol></li></ol></li></ol></li><li><a href="#section-DestructuringLambdaLists">Destructuring Lambda Lists</a><ol> </ol></li><li><a href="#section-BoaLambdaLists">Boa Lambda Lists</a><ol> </ol></li><li><a href="#section-DefsetfLambdaLists">Defsetf Lambda Lists</a><ol> </ol></li><li><a href="#section-DeftypeLambdaLists">Deftype Lambda Lists</a><ol> </ol></li><li><a href="#section-DefineModifyMacroLambdaLists">Define-modify-macro Lambda Lists</a><ol> </ol></li><li><a href="#section-DefMethCombArgsLambdaLists">Define-method-combination Arguments Lambda Lists</a><ol> </ol></li><li><a href="#section-DocVsDecls">Syntactic Interaction of Documentation Strings and Declarations</a><ol> </ol></li></ol></li><li><a href="#section-FuncallErrorChecking">Error Checking in Function Calls</a><ol> <li><a href="#section-ArgumentMismatchDetection">Argument Mismatch Detection</a><ol> <li><a href="#section-SafeAndUnsafeCalls">Safe and Unsafe Calls</a><ol> <li><a href="#section-SafeCallDetectionTime">Error Detection Time in Safe Calls</a><ol> </ol></li></ol></li><li><a href="#section-TooFewArguments">Too Few Arguments</a><ol> </ol></li><li><a href="#section-TooManyArguments">Too Many Arguments</a><ol> </ol></li><li><a href="#section-UnrecognizedKeyArgs">Unrecognized Keyword Arguments</a><ol> </ol></li><li><a href="#section-InvalidKeyArgs">Invalid Keyword Arguments</a><ol> </ol></li><li><a href="#section-OddNumberOfKeyArgs">Odd Number of Keyword Arguments</a><ol> </ol></li><li><a href="#section-DestructuringMismatch">Destructuring Mismatch</a><ol> </ol></li><li><a href="#section-ErrorsWhenCallingaNextMethod">Errors When Calling a Next Method</a><ol> </ol></li></ol></li></ol></li><li><a href="#section-TraversalRules">Traversal Rules and Side Effects</a><ol> </ol></li><li><a href="#section-DestructiveOperations">Destructive Operations</a><ol> <li><a href="#section-ModificationofLiteralObjects">Modification of Literal Objects</a><ol> </ol></li><li><a href="#section-TransferofControlduringaDestructiveOperation">Transfer of Control during a Destructive Operation</a><ol> <li><a href="#section-ExamplesofTransferofControlduringaDestructiveOperation">Examples of Transfer of Control during a Destructive Operation</a><ol> </ol></li></ol></li></ol></li><li><a href="#section-Dictionary">Dictionary</a><ol> <li><a href="#symbol-lambda">lambda</a></li><li><a href="#macro-lambda">lambda</a></li><li><a href="#function-compile">compile</a></li><li><a href="#function-eval">eval</a></li><li><a href="#special-operator-eval-when">eval-when</a></li><li><a href="#special-operator-load-time-value">load-time-value</a></li><li><a href="#special-operator-quote">quote</a></li><li><a href="#function-compiler-macro-function">compiler-macro-function</a></li><li><a href="#macro-define-compiler-macro">define-compiler-macro</a></li><li><a href="#macro-defmacro">defmacro</a></li><li><a href="#function-macro-function">macro-function</a></li><li><a href="#function-macroexpand">macroexpand, macroexpand-1</a></li><li><a href="#macro-define-symbol-macro">define-symbol-macro</a></li><li><a href="#special-operator-symbol-macrolet">symbol-macrolet</a></li><li><a href="#variable-*macroexpand-hook*">*macroexpand-hook*</a></li><li><a href="#function-proclaim">proclaim</a></li><li><a href="#macro-declaim">declaim</a></li><li><a href="#symbol-declare">declare</a></li><li><a href="#declaration-ignore">ignore, ignorable</a></li><li><a href="#declaration-dynamic-extent">dynamic-extent</a></li><li><a href="#declaration-type">type</a></li><li><a href="#declaration-inline">inline, notinline</a></li><li><a href="#declaration-ftype">ftype</a></li><li><a href="#declaration-declaration">declaration</a></li><li><a href="#declaration-optimize">optimize</a></li><li><a href="#declaration-special">special</a></li><li><a href="#special-operator-locally">locally</a></li><li><a href="#special-operator-the">the</a></li><li><a href="#function-special-operator-p">special-operator-p</a></li><li><a href="#function-constantp">constantp</a></li></ol></li></ol></nav><div class="content"><section id="section-ChapThree"><h1 class="section-title">3. Evaluation and Compilation</h1><section id="section-Evaluation"><h2 class="section-title">Evaluation</h2>

<span class="glossary-reference error">glossary:Execution</span> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-code">code</a> can be accomplished by a variety of means ranging
from direct interpretation of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> representing a <a class="glossary-reference" href="chapter-26.xhtml#glossary-program">program</a>
to invocation of <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiled code">compiled code</a> produced by a <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler">compiler</a>.<br/><span class="newterm">Evaluation</span> is the process by which a <a class="glossary-reference" href="chapter-26.xhtml#glossary-program">program</a> is <span class="glossary-reference error">glossary:executed</span> in <span class="explicit-roman">Common Lisp</span>.
The mechanism of <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluation</a> is manifested
 both implicitly through the effect of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lisp read-eval-print loop">Lisp read-eval-print loop</a>,
 and  explicitly through the presence of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">functions</a> 
       <a class="function-reference" href="#function-eval">eval</a>,
       <a class="function-reference" href="#function-compile">compile</a>,
       <a class="function-reference" href="chapter-24.xhtml#function-compile-file">compile-file</a>,
   and <a class="function-reference" href="chapter-24.xhtml#function-load">load</a>.
Any of these facilities might share the same execution strategy, 
or each might use a different one.<br/>The behavior of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-conforming program">conforming program</a> processed by <a class="function-reference" href="#function-eval">eval</a>
and by <a class="function-reference" href="chapter-24.xhtml#function-compile-file">compile-file</a> might differ; see <span class="section-reference error">section:SemanticConstraints.</span><br/><a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">Evaluation</a> can be understood in terms of a model in which an
interpreter recursively traverses a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> performing each
step of the computation as it goes.  
This model, which describes the semantics of <span class="explicit-roman">Common Lisp</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-program">programs</a>,
is described in <a class="section-reference" href="#section-EvaluationModel">The Evaluation Model</a>.<br/><section id="section-IntroToEnvs"><h3 class="section-title">Introduction to Environments</h3><br/>A <span class="newterm">binding</span> is an association between a <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> and
that which the name denotes.  <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">Bindings</a> are <a class="glossary-reference" href="chapter-26.xhtml#glossary-establish">established</a>
in a <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical environment">lexical environment</a> or a <a class="glossary-reference" href="chapter-26.xhtml#glossary-dynamic environment">dynamic environment</a>
by particular <a class="glossary-reference" href="chapter-26.xhtml#glossary-special operator">special operators</a>.<br/>An <span class="newterm">environment</span> is a set of <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a> and other information
used during evaluation (<span class="explicit-italic"> e.g.</span>,  to associate meanings with names).<br/><a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">Bindings</a> in an <a class="glossary-reference" href="chapter-26.xhtml#glossary-environment">environment</a> are partitioned into <span class="newterm">namespaces</span>.
A single <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> can simultaneously have more than one
associated <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> per <a class="glossary-reference" href="chapter-26.xhtml#glossary-environment">environment</a>,
but can have only one associated <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> per <a class="glossary-reference" href="chapter-26.xhtml#glossary-namespace">namespace</a>.<br/>
<section id="section-TheGlobalEnvironment"><h4 class="section-title">The Global Environment</h4>The <span class="newterm">global environment</span> is that part of an <a class="glossary-reference" href="chapter-26.xhtml#glossary-environment">environment</a>
that contains <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a> with both <a class="glossary-reference" href="chapter-26.xhtml#glossary-indefinite scope">indefinite scope</a> 
and <a class="glossary-reference" href="chapter-26.xhtml#glossary-indefinite extent">indefinite extent</a>.
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-global environment">global environment</a> contains, among other things, the following:<br/><ul><li><a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-dynamic variable">dynamic variables</a> and <a class="glossary-reference" href="chapter-26.xhtml#glossary-constant variable">constant variables</a>.
</li><li><a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">functions</a>, <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macros</a>, and <a class="glossary-reference" href="chapter-26.xhtml#glossary-special operator">special operators</a>.
</li><li> <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler macro">compiler macros</a>.
</li><li><a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> and <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">names</a>
</li><li>information about <a class="glossary-reference" href="chapter-26.xhtml#glossary-proclamation">proclamations</a>.
</li></ul><br/></section><section id="section-DynamicEnvironments"><h4 class="section-title">Dynamic Environments</h4>A <span class="newterm">dynamic environment</span> for <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluation</a> is that part of an
<a class="glossary-reference" href="chapter-26.xhtml#glossary-environment">environment</a> that contains <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a> whose duration
is bounded by points of <span class="glossary-reference error">glossary:establishment</span> and <span class="glossary-reference error">glossary:disestablishment</span> 
within the execution of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> that
established the <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a>.
A <a class="glossary-reference" href="chapter-26.xhtml#glossary-dynamic environment">dynamic environment</a> contains, among other things, the following:<br/><ul><li><a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a> for <a class="glossary-reference" href="chapter-26.xhtml#glossary-dynamic variable">dynamic variables</a>.
</li><li>information about <a class="glossary-reference" href="chapter-26.xhtml#glossary-active">active</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-catch tag">catch tags</a>.
</li><li>information about <a class="glossary-reference" href="chapter-26.xhtml#glossary-exit point">exit points</a> established by <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-unwind-protect">unwind-protect</a>.
</li><li>information about <a class="glossary-reference" href="chapter-26.xhtml#glossary-active">active</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-handler">handlers</a> and <a class="glossary-reference" href="chapter-26.xhtml#glossary-restart">restarts</a>.
</li></ul><br/>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-dynamic environment">dynamic environment</a> that is active at any given point 
in the <span class="glossary-reference error">glossary:execution</span> of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-program">program</a> is referred to by 
definite reference as ``the current <a class="glossary-reference" href="chapter-26.xhtml#glossary-dynamic environment">dynamic environment</a>,''
or sometimes as just ``the <a class="glossary-reference" href="chapter-26.xhtml#glossary-dynamic environment">dynamic environment</a>.''<br/>Within a given <a class="glossary-reference" href="chapter-26.xhtml#glossary-namespace">namespace</a>,
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> is said to be <a class="glossary-reference" href="chapter-26.xhtml#glossary-bound">bound</a>
in a <a class="glossary-reference" href="chapter-26.xhtml#glossary-dynamic environment">dynamic environment</a> if there is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> 
associated with its <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-dynamic environment">dynamic environment</a> 
or, if not, there is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> 
associated with its name in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-global environment">global environment</a>.<br/></section><section id="section-LexicalEnvironments"><h4 class="section-title">Lexical Environments</h4>A <span class="newterm">lexical environment</span> for <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluation</a> at some position in a <a class="glossary-reference" href="chapter-26.xhtml#glossary-program">program</a>
is that part of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-environment">environment</a> that contains information having 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical scope">lexical scope</a> within the <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a> containing that position.
A <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical environment">lexical environment</a> contains, among other things, the following:<br/><ul><li><a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical variable">lexical variables</a> and <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol macro">symbol macros</a>.
</li><li><a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">functions</a> and <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macros</a>.
             (Implicit in this is information about those <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler macro">compiler macros</a> 
	      that are locally disabled.)
</li><li><a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-block tag">block tags</a>.
</li><li><a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-go tag">go tags</a>.
</li><li>information about <a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration">declarations</a>.
</li></ul><br/>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical environment">lexical environment</a> that is active at any given position
in a <a class="glossary-reference" href="chapter-26.xhtml#glossary-program">program</a> being semantically processed is referred to by
definite reference as ``the current <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical environment">lexical environment</a>,''
or sometimes as just ``the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical environment">lexical environment</a>.''  <br/>Within a given <a class="glossary-reference" href="chapter-26.xhtml#glossary-namespace">namespace</a>,
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> is said to be <a class="glossary-reference" href="chapter-26.xhtml#glossary-bound">bound</a> in a <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical environment">lexical environment</a>
if there is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> 
associated with its <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a>
in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical environment">lexical environment</a> or, if not, there is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> 
associated with its name in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-global environment">global environment</a>.<br/><section id="section-NullLexicalEnv"><h5 class="section-title">The Null Lexical Environment</h5><br/>The <span class="newterm">null lexical environment</span> is equivalent to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-global environment">global environment</a>.<br/>Although in general the representation of an <a class="glossary-reference" href="chapter-26.xhtml#glossary-environment">environment</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>
is <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a>, <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a> can be used in any situation where an
<a class="glossary-reference" href="chapter-26.xhtml#glossary-environment">environment</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> is called for in order to denote 
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-null lexical environment">null lexical environment</a>.<br/></section></section><section id="section-EnvObjs"><h4 class="section-title">Environment Objects</h4><br/>Some <a class="glossary-reference" href="chapter-26.xhtml#glossary-operator">operators</a> make use of an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>, 
called an <span class="newterm">environment object</span>,
that represents the set of <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical binding">lexical bindings</a> needed to perform
semantic analysis on a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> in a given <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical environment">lexical environment</a>.
The set of <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a> in an <a class="glossary-reference" href="chapter-26.xhtml#glossary-environment object">environment object</a>
may be a subset of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a> that would be needed to actually 
perform an <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluation</a>; for example, <span class="glossary-reference error">glossary:values</span> associated with
<a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variable</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">names</a> and <a class="glossary-reference" href="chapter-26.xhtml#glossary-function name">function names</a> in the corresponding
<a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical environment">lexical environment</a> might not be available in an <a class="glossary-reference" href="chapter-26.xhtml#glossary-environment object">environment object</a>.<br/>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> and nature of an <a class="glossary-reference" href="chapter-26.xhtml#glossary-environment object">environment object</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a>.
The <span class="glossary-reference error">glossary:values</span> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-environment parameter">environment parameters</a> to <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro function">macro functions</a>
are examples of <a class="glossary-reference" href="chapter-26.xhtml#glossary-environment object">environment objects</a>.<br/>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a> when used as an <a class="glossary-reference" href="chapter-26.xhtml#glossary-environment object">environment object</a>
denotes the <a class="glossary-reference" href="chapter-26.xhtml#glossary-null lexical environment">null lexical environment</a>;
see <span class="section-reference error">section:NullLexicalEnv.</span><br/></section></section><section id="section-EvaluationModel"><h3 class="section-title">The Evaluation Model</h3><br/>A <span class="explicit-roman">Common Lisp</span> system evaluates <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a> with respect to lexical,
dynamic, and global <a class="glossary-reference" href="chapter-26.xhtml#glossary-environment">environments</a>.  The following sections
describe the components of the <span class="explicit-roman">Common Lisp</span> evaluation model.<br/><section id="section-FormEvaluation"><h4 class="section-title">Form Evaluation</h4><a class="glossary-reference" href="chapter-26.xhtml#glossary-form">Forms</a> fall into three categories:
<a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbols</a>, <a class="glossary-reference" href="chapter-26.xhtml#glossary-cons">conses</a>, and <a class="glossary-reference" href="chapter-26.xhtml#glossary-self-evaluating object">self-evaluating objects</a>.
The following sections explain these categories.<br/><section id="section-SymbolsAsForms"><h5 class="section-title">Symbols as Forms</h5><br/>If a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>,
then it is either a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol macro">symbol macro</a> or a <a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variable</a>.<br/>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> names a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol macro">symbol macro</a> 
if there is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> as a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol macro">symbol macro</a>
in the current <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical environment">lexical environment</a> 
 (see <a class="macro-reference" href="#macro-define-symbol-macro">define-symbol-macro</a> and <a class="special-operator-reference" href="#special-operator-symbol-macrolet">symbol-macrolet</a>).
If the <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol macro">symbol macro</a>,
its expansion function is obtained.
The expansion function is a function of two arguments, and is invoked
by calling the <a class="glossary-reference" href="chapter-26.xhtml#glossary-macroexpand hook">macroexpand hook</a> with 
     the expansion function as its first argument,
     the <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> as its second argument,
 and an <a class="glossary-reference" href="chapter-26.xhtml#glossary-environment object">environment object</a> (corresponding to the current <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical environment">lexical environment</a>)
      as its third argument.
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-macroexpand hook">macroexpand hook</a>, in turn, calls the expansion function with the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> as its first argument and the <a class="glossary-reference" href="chapter-26.xhtml#glossary-environment">environment</a> as its second argument.
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a> of the expansion function, which is passed through
by the <a class="glossary-reference" href="chapter-26.xhtml#glossary-macroexpand hook">macroexpand hook</a>, is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>. 
This resulting <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> is processed in place of the original <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>.<br/>If a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> that is not a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol macro">symbol macro</a>,
then it is the <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variable</a>, and the <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a> of that
<a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variable</a> is returned. There are three kinds of variables:
 <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical variable">lexical variables</a>,
 <a class="glossary-reference" href="chapter-26.xhtml#glossary-dynamic variable">dynamic variables</a>,
and
 <a class="glossary-reference" href="chapter-26.xhtml#glossary-constant variable">constant variables</a>.
A <a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variable</a> can store one <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.
The main operations on a <a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variable</a> are 
 to <a class="glossary-reference" href="chapter-26.xhtml#glossary-read">read</a><sub>1</sub> and 
 to <a class="glossary-reference" href="chapter-26.xhtml#glossary-write">write</a><sub>1</sub>
its <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a>.<br/>
An error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-10.xhtml#type-unbound-variable">unbound-variable</a> should be signaled if
an <a class="glossary-reference" href="chapter-26.xhtml#glossary-unbound variable">unbound variable</a> is referenced.<br/><a class="glossary-reference" href="chapter-26.xhtml#glossary-non-constant variable">Non-constant variables</a> can be <a class="glossary-reference" href="chapter-26.xhtml#glossary-assign">assigned</a> by using <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> 
or <a class="glossary-reference" href="chapter-26.xhtml#glossary-bound">bound</a><sub>3</sub> by using <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a>.
Figure <span class="explicit-mono">()</span>&ndash; lists some <a class="glossary-reference" href="chapter-26.xhtml#glossary-defined name">defined names</a> that
are applicable to assigning, binding, and defining <a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variables</a>.<br/><span class="float" id="figure-Some Defined Names Applicable to Variables"><table><tbody><tr><td><a class="function-reference" href="chapter-10.xhtml#function-boundp">boundp</a></td><td><a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a></td><td><a class="special-operator-reference" href="chapter-5.xhtml#special-operator-progv">progv</a></td></tr><tr><td><a class="macro-reference" href="chapter-5.xhtml#macro-defconstant">defconstant</a></td><td><a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let*">let*</a></td><td><a class="macro-reference" href="chapter-5.xhtml#macro-psetq">psetq</a></td></tr><tr><td><a class="macro-reference" href="chapter-5.xhtml#macro-defparameter">defparameter</a></td><td><a class="function-reference" href="chapter-10.xhtml#function-makunbound">makunbound</a></td><td><a class="function-reference" href="chapter-10.xhtml#function-set">set</a></td></tr><tr><td><a class="macro-reference" href="chapter-5.xhtml#macro-defvar">defvar</a></td><td><a class="macro-reference" href="chapter-5.xhtml#macro-multiple-value-bind">multiple-value-bind</a></td><td><a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a></td></tr><tr><td><a class="macro-reference" href="#macro-lambda">lambda</a></td><td><a class="macro-reference" href="chapter-5.xhtml#macro-multiple-value-setq">multiple-value-setq</a></td><td><a class="function-reference" href="chapter-10.xhtml#function-symbol-value">symbol-value</a></td></tr></tbody></table><div class="caption">Some Defined Names Applicable to Variables</div></span><br/>The following is a description of each kind of variable.<br/><section id="section-LexicalVariables"><h6 class="section-title">Lexical Variables</h6>A <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical variable">lexical variable</a> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variable</a> that can be referenced only within 
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical scope">lexical scope</a> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> that establishes that <a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variable</a>;
<a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical variable">lexical variables</a> have <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical scope">lexical scope</a>.
Each time a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> creates a <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical binding">lexical binding</a> of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variable</a>,
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-fresh">fresh</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-establish">established</a>.<br/>Within the <a class="glossary-reference" href="chapter-26.xhtml#glossary-scope">scope</a> of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> for a <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical variable">lexical variable</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a>,
uses of that <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> as a <a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variable</a> are considered to be references
to that <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> except where the <a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variable</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-shadow">shadowed</a><sub>2</sub> 
by a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> that <a class="glossary-reference" href="chapter-26.xhtml#glossary-establish">establishes</a> a <a class="glossary-reference" href="chapter-26.xhtml#glossary-fresh">fresh</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> for that 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variable</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a>,
or by a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> that locally <span class="glossary-reference error">glossary:declares</span> the <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> <a class="declaration-reference" href="#declaration-special">special</a>.<br/>A <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical variable">lexical variable</a> always has a <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a>.
There is no <a class="glossary-reference" href="chapter-26.xhtml#glossary-operator">operator</a> that introduces a <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> for a
<a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical variable">lexical variable</a> without giving it an initial <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a>, nor
is there any <a class="glossary-reference" href="chapter-26.xhtml#glossary-operator">operator</a> that can make a <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical variable">lexical variable</a> be <a class="glossary-reference" href="chapter-26.xhtml#glossary-unbound">unbound</a>.<br/><a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">Bindings</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical variable">lexical variables</a> are found in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical environment">lexical environment</a>.<br/></section><section id="section-DynamicVariables"><h6 class="section-title">Dynamic Variables</h6>A <a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variable</a> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-dynamic variable">dynamic variable</a> if one of the following
conditions hold:<br/><ul><li>It is locally declared or globally proclaimed <a class="declaration-reference" href="#declaration-special">special</a>.<br/> </li><li>It occurs textually within a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> that
creates a <a class="glossary-reference" href="chapter-26.xhtml#glossary-dynamic binding">dynamic binding</a> for a <a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variable</a> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-same">same</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a>,
and the <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> is not <a class="glossary-reference" href="chapter-26.xhtml#glossary-shadow">shadowed</a><sub>2</sub> by a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>
that creates a <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical binding">lexical binding</a> of the same <a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variable</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a>.<br/>
</li></ul><br/>A <a class="glossary-reference" href="chapter-26.xhtml#glossary-dynamic variable">dynamic variable</a> can be referenced at any time in any <a class="glossary-reference" href="chapter-26.xhtml#glossary-program">program</a>;
there is no textual limitation on references to <a class="glossary-reference" href="chapter-26.xhtml#glossary-dynamic variable">dynamic variables</a>.
At any given time, all <a class="glossary-reference" href="chapter-26.xhtml#glossary-dynamic variable">dynamic variables</a> with a given name refer to 
exactly one <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a>, either in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-dynamic environment">dynamic environment</a>
or in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-global environment">global environment</a>.<br/>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a> part of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> for a <a class="glossary-reference" href="chapter-26.xhtml#glossary-dynamic variable">dynamic variable</a> might
be empty; in this case, the <a class="glossary-reference" href="chapter-26.xhtml#glossary-dynamic variable">dynamic variable</a> is said to have no <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a>,
or to be <a class="glossary-reference" href="chapter-26.xhtml#glossary-unbound">unbound</a>.  A <a class="glossary-reference" href="chapter-26.xhtml#glossary-dynamic variable">dynamic variable</a> can be made <a class="glossary-reference" href="chapter-26.xhtml#glossary-unbound">unbound</a>
by using <a class="function-reference" href="chapter-10.xhtml#function-makunbound">makunbound</a>.<br/>The effect of <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> a <a class="glossary-reference" href="chapter-26.xhtml#glossary-dynamic variable">dynamic variable</a> is to create
a new <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> to which all references to that <a class="glossary-reference" href="chapter-26.xhtml#glossary-dynamic variable">dynamic variable</a>
in any <a class="glossary-reference" href="chapter-26.xhtml#glossary-program">program</a> refer for the duration of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluation</a> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>
that creates the <a class="glossary-reference" href="chapter-26.xhtml#glossary-dynamic binding">dynamic binding</a>.<br/>
A <a class="glossary-reference" href="chapter-26.xhtml#glossary-dynamic variable">dynamic variable</a> can be referenced outside the <a class="glossary-reference" href="chapter-26.xhtml#glossary-dynamic extent">dynamic extent</a> of
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> that <a class="glossary-reference" href="chapter-26.xhtml#glossary-bind">binds</a> it.  Such a <a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variable</a> is sometimes called 
a ``global variable'' but is still in all respects just a <a class="glossary-reference" href="chapter-26.xhtml#glossary-dynamic variable">dynamic variable</a>
whose <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> happens to exist in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-global environment">global environment</a> rather than in some
<a class="glossary-reference" href="chapter-26.xhtml#glossary-dynamic environment">dynamic environment</a>.<br/>A <a class="glossary-reference" href="chapter-26.xhtml#glossary-dynamic variable">dynamic variable</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-unbound">unbound</a>
unless and until explicitly assigned a value, except for 
those variables whose initial value is 
defined in this specification or by an <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation">implementation</a>.<br/>
</section><section id="section-ConstantVars"><h6 class="section-title">Constant Variables</h6><br/>Certain variables, called <a class="glossary-reference" href="chapter-26.xhtml#glossary-constant variable">constant variables</a>, are reserved as ``named constants.''  
The consequences are undefined if an attempt is made to 
    assign a value to,
 or create
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> for a <a class="glossary-reference" href="chapter-26.xhtml#glossary-constant variable">constant variable</a>, 
except that a `compatible' redefinition of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-constant variable">constant variable</a>
using <a class="macro-reference" href="chapter-5.xhtml#macro-defconstant">defconstant</a> is permitted; see the <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a> <a class="macro-reference" href="chapter-5.xhtml#macro-defconstant">defconstant</a>.<br/><a class="glossary-reference" href="chapter-26.xhtml#glossary-keyword">Keywords</a>, 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbols</a> defined by <span class="explicit-roman">Common Lisp</span> or the <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation">implementation</a>
  as constant (such as <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>, <a class="symbol-reference" href="chapter-5.xhtml#symbol-t">t</a>, and <a class="constant-reference" href="chapter-12.xhtml#constant-pi">pi</a>),
and <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbols</a> declared as constant using <a class="macro-reference" href="chapter-5.xhtml#macro-defconstant">defconstant</a>
are <a class="glossary-reference" href="chapter-26.xhtml#glossary-constant variable">constant variables</a>.<br/></section><section id="section-SymbolsNamingBothLexicalandDynamicVariables"><h6 class="section-title">Symbols Naming Both Lexical and Dynamic Variables</h6>The same <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> can name both 
    a <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical variable">lexical variable</a> 
and a <a class="glossary-reference" href="chapter-26.xhtml#glossary-dynamic variable">dynamic variable</a>,
but never in the same <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical environment">lexical environment</a>.<br/>In the following example, the <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">x</span>
</span></code></pre> is used,
at different times, 
    as the <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical variable">lexical variable</a>
and as the <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-dynamic variable">dynamic variable</a>.<br/><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-number">1</span>)</span>)</span>            <span class="syntax-line-comment syntax-comment">;Binds a special variable X
</span>   <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-special">special</a> <span class="syntax-interned-symbol">x</span>)</span>)</span>
   <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-number">2</span>)</span>)</span>          <span class="syntax-line-comment syntax-comment">;Binds a lexical variable X
</span>     <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">x</span>                <span class="syntax-line-comment syntax-comment">;Reads a lexical variable X
</span>        <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-locally">locally</a> <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-special">special</a> <span class="syntax-interned-symbol">x</span>)</span>)</span>
                 <span class="syntax-interned-symbol">x</span>)</span>)</span>)</span>)</span>   ;Reads a special variable X
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">3</span>
</span></code></pre><br/></section></section><section id="section-ConsesasForms"><h5 class="section-title">Conses as Forms</h5>A <a class="glossary-reference" href="chapter-26.xhtml#glossary-cons">cons</a> that is used as a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> is called a <a class="glossary-reference" href="chapter-26.xhtml#glossary-compound form">compound form</a>.<br/>If the <a class="glossary-reference" href="chapter-26.xhtml#glossary-car">car</a> of that <a class="glossary-reference" href="chapter-26.xhtml#glossary-compound form">compound form</a> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>, 
that <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> is the <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> of an <a class="glossary-reference" href="chapter-26.xhtml#glossary-operator">operator</a>,
and the <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> is either a <a class="glossary-reference" href="chapter-26.xhtml#glossary-special form">special form</a>, a <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro form">macro form</a>,
or a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function form">function form</a>, depending on the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> 
of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-operator">operator</a> in the current <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical environment">lexical environment</a>.
If the <a class="glossary-reference" href="chapter-26.xhtml#glossary-operator">operator</a> is neither a <a class="glossary-reference" href="chapter-26.xhtml#glossary-special operator">special operator</a>
nor a <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro name">macro name</a>, it is assumed to be a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function name">function name</a>
(even if there is no definition for such a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a>).<br/>If the <a class="glossary-reference" href="chapter-26.xhtml#glossary-car">car</a> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-compound form">compound form</a> is not a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>,
then that <a class="glossary-reference" href="chapter-26.xhtml#glossary-car">car</a> must be a <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda expression">lambda expression</a>,
in which case the <a class="glossary-reference" href="chapter-26.xhtml#glossary-compound form">compound form</a> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda form">lambda form</a>.<br/>How a <a class="glossary-reference" href="chapter-26.xhtml#glossary-compound form">compound form</a> is processed depends on whether it is 
classified as a <a class="glossary-reference" href="chapter-26.xhtml#glossary-special form">special form</a>, a <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro form">macro form</a>, 
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function form">function form</a>, or a <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda form">lambda form</a>.<br/><section id="section-SpecialForms"><h6 class="section-title">Special Forms</h6>A <a class="glossary-reference" href="chapter-26.xhtml#glossary-special form">special form</a> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> with special syntax,
special evaluation rules, or both, possibly manipulating the
evaluation environment, control flow, or both.
A <a class="glossary-reference" href="chapter-26.xhtml#glossary-special operator">special operator</a> has access to
    the current <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical environment">lexical environment</a> 
and the current <a class="glossary-reference" href="chapter-26.xhtml#glossary-dynamic environment">dynamic environment</a>.
Each <a class="glossary-reference" href="chapter-26.xhtml#glossary-special operator">special operator</a> defines the manner in which its <a class="glossary-reference" href="chapter-26.xhtml#glossary-subexpression">subexpressions</a>
are treated&mdash;which are <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a>, which are special syntax, <span class="explicit-italic"> etc.</span><br/>Some <a class="glossary-reference" href="chapter-26.xhtml#glossary-special operator">special operators</a> create new 
lexical or dynamic <a class="glossary-reference" href="chapter-26.xhtml#glossary-environment">environments</a> for use during the 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluation</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-subform">subforms</a>
of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-special form">special form</a>.  For example, <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-block">block</a> creates a
new <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical environment">lexical environment</a> that is the same as the one in force
at the point of evaluation of the <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-block">block</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>
with the addition of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> of the <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-block">block</a> name
to an <a class="glossary-reference" href="chapter-26.xhtml#glossary-exit point">exit point</a> from the <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-block">block</a>.<br/>
The set of <a class="glossary-reference" href="chapter-26.xhtml#glossary-special operator">special operator</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">names</a> is fixed in <span class="explicit-roman">Common Lisp</span>; 
no way is provided for the user to define a <a class="glossary-reference" href="chapter-26.xhtml#glossary-special operator">special operator</a>.
Figure <span class="explicit-mono">()</span>&ndash; lists all of the <span class="explicit-roman">Common Lisp</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbols</a>
that have definitions as <a class="glossary-reference" href="chapter-26.xhtml#glossary-special operator">special operators</a>.<br/>
<span class="float" id="figure-CLSpecialOps"><table><tbody><tr><td><a class="special-operator-reference" href="chapter-5.xhtml#special-operator-block">block</a></td><td><a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let*">let*</a></td><td><a class="special-operator-reference" href="chapter-5.xhtml#special-operator-return-from">return-from</a></td></tr><tr><td><a class="special-operator-reference" href="chapter-5.xhtml#special-operator-catch">catch</a></td><td><a class="special-operator-reference" href="#special-operator-load-time-value">load-time-value</a></td><td><a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a></td></tr><tr><td><a class="special-operator-reference" href="#special-operator-eval-when">eval-when</a></td><td><a class="special-operator-reference" href="#special-operator-locally">locally</a></td><td><a class="special-operator-reference" href="#special-operator-symbol-macrolet">symbol-macrolet</a></td></tr><tr><td><a class="special-operator-reference" href="chapter-5.xhtml#special-operator-flet">flet</a></td><td><a class="special-operator-reference" href="chapter-5.xhtml#special-operator-macrolet">macrolet</a></td><td><a class="special-operator-reference" href="chapter-5.xhtml#special-operator-tagbody">tagbody</a></td></tr><tr><td><a class="special-operator-reference" href="chapter-5.xhtml#special-operator-function">function</a></td><td><a class="special-operator-reference" href="chapter-5.xhtml#special-operator-multiple-value-call">multiple-value-call</a></td><td><a class="special-operator-reference" href="#special-operator-the">the</a></td></tr><tr><td><a class="special-operator-reference" href="chapter-5.xhtml#special-operator-go">go</a></td><td><a class="special-operator-reference" href="chapter-5.xhtml#special-operator-multiple-value-prog1">multiple-value-prog1</a></td><td><a class="special-operator-reference" href="chapter-5.xhtml#special-operator-throw">throw</a></td></tr><tr><td><a class="special-operator-reference" href="chapter-5.xhtml#special-operator-if">if</a></td><td><a class="special-operator-reference" href="chapter-5.xhtml#special-operator-progn">progn</a></td><td><a class="special-operator-reference" href="chapter-5.xhtml#special-operator-unwind-protect">unwind-protect</a></td></tr><tr><td><a class="special-operator-reference" href="chapter-5.xhtml#special-operator-labels">labels</a></td><td><a class="special-operator-reference" href="chapter-5.xhtml#special-operator-progv">progv</a></td><td/></tr><tr><td><a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a></td><td><a class="special-operator-reference" href="#special-operator-quote">quote</a></td><td/></tr></tbody></table><div class="caption">Common Lisp Special Operators</div></span>

</section><section id="section-MacroForms"><h6 class="section-title">Macro Forms</h6>If the <a class="glossary-reference" href="chapter-26.xhtml#glossary-operator">operator</a> names a <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a>,
its associated <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro function">macro function</a> is applied
to the entire <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> and the result of that application is
used in place of the original <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>.<br/>Specifically, a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> names a <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a> in a given <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical environment">lexical environment</a> if
<a class="function-reference" href="#function-macro-function">macro-function</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a> of the 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> and that <a class="glossary-reference" href="chapter-26.xhtml#glossary-environment">environment</a>.
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> returned by <a class="function-reference" href="#function-macro-function">macro-function</a>
is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> of two arguments, called the
expansion function.
The expansion function is invoked by calling the <a class="glossary-reference" href="chapter-26.xhtml#glossary-macroexpand hook">macroexpand hook</a> with
      the expansion function as its first argument,
      the entire <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro form">macro form</a> as its second argument,
    and an <a class="glossary-reference" href="chapter-26.xhtml#glossary-environment object">environment object</a> (corresponding to the current <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical environment">lexical environment</a>)
      as its third argument.
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-macroexpand hook">macroexpand hook</a>, in turn, calls the expansion function with the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> as its first argument and the <a class="glossary-reference" href="chapter-26.xhtml#glossary-environment">environment</a> as its second argument.
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a> of the expansion function, which is passed through
by the <a class="glossary-reference" href="chapter-26.xhtml#glossary-macroexpand hook">macroexpand hook</a>, is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>. 
The returned <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> is <span class="glossary-reference error">glossary:evaluated</span> in place of the original <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>.<br/>The consequences are undefined if a <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro function">macro function</a> destructively modifies
any part of its <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> argument.

A <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro name">macro name</a> is not a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function designator">function designator</a>,
and cannot be used as the <span class="parameter">function</span> argument to <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">functions</a> 
such as <a class="function-reference" href="chapter-5.xhtml#function-apply">apply</a>, <a class="function-reference" href="chapter-5.xhtml#function-funcall">funcall</a>, or <a class="function-reference" href="chapter-17.xhtml#function-map">map</a>.<br/>An <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation">implementation</a> is free to implement a <span class="explicit-roman">Common Lisp</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-special operator">special operator</a>
as a <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a>.  An <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation">implementation</a> is free to implement any
<a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-operator">operator</a> as a <a class="glossary-reference" href="chapter-26.xhtml#glossary-special operator">special operator</a>, but only
if an equivalent definition of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a> is also provided.

Figure <span class="explicit-mono">()</span>&ndash; lists some <a class="glossary-reference" href="chapter-26.xhtml#glossary-defined name">defined names</a> that are applicable
to <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macros</a>.<br/><span class="float" id="figure-Defined names applicable to macros"><table><tbody><tr><td><a class="variable-reference" href="#variable-*macroexpand-hook*">*macroexpand-hook*</a></td><td><a class="function-reference" href="#function-macro-function">macro-function</a></td><td><a class="function-reference" href="#function-macroexpand-1">macroexpand-1</a></td></tr><tr><td><a class="macro-reference" href="#macro-defmacro">defmacro</a></td><td><a class="function-reference" href="#function-macroexpand">macroexpand</a></td><td><a class="special-operator-reference" href="chapter-5.xhtml#special-operator-macrolet">macrolet</a></td></tr></tbody></table><div class="caption">Defined names applicable to macros</div></span>

</section><section id="section-FunctionForms"><h6 class="section-title">Function Forms</h6><br/>If the <a class="glossary-reference" href="chapter-26.xhtml#glossary-operator">operator</a> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> naming a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a>,
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> represents a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function form">function form</a>,
and the <a class="glossary-reference" href="chapter-26.xhtml#glossary-cdr">cdr</a> of the list contains the <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a> 
which when evaluated will supply the arguments passed to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a>.<br/>When a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function name">function name</a> is not defined, 
an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-5.xhtml#type-undefined-function">undefined-function</a> should be signaled at run time;
see <span class="section-reference error">section:SemanticConstraints.</span><br/>A <a class="glossary-reference" href="chapter-26.xhtml#glossary-function form">function form</a> is evaluated as follows:<br/>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-subform">subforms</a> in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-cdr">cdr</a> of the original <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>
are evaluated in left-to-right order in the current lexical and 
dynamic <a class="glossary-reference" href="chapter-26.xhtml#glossary-environment">environments</a>.  The <a class="glossary-reference" href="chapter-26.xhtml#glossary-primary value">primary value</a> of each
such <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluation</a> becomes an <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">argument</a> to the named <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a>;
any additional <span class="glossary-reference error">glossary:values</span> returned by the <a class="glossary-reference" href="chapter-26.xhtml#glossary-subform">subforms</a> are discarded.<br/>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-functional value">functional value</a> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-operator">operator</a> 
is retrieved from the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical environment">lexical environment</a>,
and that <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> is invoked with the indicated arguments.<br/>
Although the order of <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluation</a> of 
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">argument</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-subform">subforms</a> themselves is 
strictly left-to-right, it is not specified whether 
the definition of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-operator">operator</a> in a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function form">function form</a> is looked up 
before the <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluation</a> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">argument</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-subform">subforms</a>,
after the <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluation</a> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">argument</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-subform">subforms</a>,
or between the <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluation</a> of any two <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">argument</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-subform">subforms</a> 
if there is more than one such <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">argument</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-subform">subform</a>.  
For example, the following might return 23 or24.<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">foo</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-number">3</span>)</span>)</span>
<span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">bar</span> <span class="syntax-symbol">()</span> <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-10.xhtml#function-symbol-function">symbol-function</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">foo</span></span>)</span> <span class="syntax-function">#'<span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-number">4</span>)</span>)</span></span>)</span>)</span>
<span class="syntax-cons">(<span class="syntax-interned-symbol">foo</span> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-progn">progn</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">bar</span>)</span> <span class="syntax-number">20</span>)</span>)</span>
</span></code></pre>
A <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> for a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function name">function name</a> can be <a class="glossary-reference" href="chapter-26.xhtml#glossary-establish">established</a> in 
one of several ways.  A <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> for a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function name">function name</a> in 
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-global environment">global environment</a> can be <a class="glossary-reference" href="chapter-26.xhtml#glossary-establish">established</a> by 
 <a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a>,
 <a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> of <span class="symbol-reference error">symbol:fdefinition</span>,
 <a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> of <span class="symbol-reference error">symbol:symbol-function</span>,
 <a class="function-reference" href="chapter-7.xhtml#function-ensure-generic-function">ensure-generic-function</a>,
 <a class="macro-reference" href="chapter-7.xhtml#macro-defmethod">defmethod</a> (implicitly, due to <a class="function-reference" href="chapter-7.xhtml#function-ensure-generic-function">ensure-generic-function</a>),
or
 <a class="macro-reference" href="chapter-7.xhtml#macro-defgeneric">defgeneric</a>.
A <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> for a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function name">function name</a> in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical environment">lexical environment</a>
can be <a class="glossary-reference" href="chapter-26.xhtml#glossary-establish">established</a> by
   <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-flet">flet</a>
or <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-labels">labels</a>.


Figure <span class="explicit-mono">()</span>&ndash; lists some <a class="glossary-reference" href="chapter-26.xhtml#glossary-defined name">defined names</a> that are applicable to <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">functions</a>.<br/><span class="float" id="figure-Some function-related defined names"><table><tbody><tr><td><a class="function-reference" href="chapter-5.xhtml#function-apply">apply</a></td><td><a class="function-reference" href="chapter-5.xhtml#function-fdefinition">fdefinition</a></td><td><a class="function-reference" href="chapter-14.xhtml#function-mapcan">mapcan</a></td></tr><tr><td><a class="constant-reference" href="chapter-5.xhtml#constant-call-arguments-limit">call-arguments-limit</a></td><td><a class="special-operator-reference" href="chapter-5.xhtml#special-operator-flet">flet</a></td><td><a class="function-reference" href="chapter-14.xhtml#function-mapcar">mapcar</a></td></tr><tr><td><a class="function-reference" href="chapter-5.xhtml#function-complement">complement</a></td><td><a class="function-reference" href="chapter-5.xhtml#function-fmakunbound">fmakunbound</a></td><td><a class="function-reference" href="chapter-14.xhtml#function-mapcon">mapcon</a></td></tr><tr><td><a class="function-reference" href="chapter-5.xhtml#function-constantly">constantly</a></td><td><a class="function-reference" href="chapter-5.xhtml#function-funcall">funcall</a></td><td><a class="function-reference" href="chapter-14.xhtml#function-mapl">mapl</a></td></tr><tr><td><a class="macro-reference" href="chapter-7.xhtml#macro-defgeneric">defgeneric</a></td><td><a class="special-operator-reference" href="chapter-5.xhtml#special-operator-function">function</a></td><td><a class="function-reference" href="chapter-14.xhtml#function-maplist">maplist</a></td></tr><tr><td><a class="macro-reference" href="chapter-7.xhtml#macro-defmethod">defmethod</a></td><td><a class="function-reference" href="chapter-5.xhtml#function-functionp">functionp</a></td><td><a class="special-operator-reference" href="chapter-5.xhtml#special-operator-multiple-value-call">multiple-value-call</a></td></tr><tr><td><a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a></td><td><a class="special-operator-reference" href="chapter-5.xhtml#special-operator-labels">labels</a></td><td><a class="function-reference" href="chapter-17.xhtml#function-reduce">reduce</a></td></tr><tr><td><a class="function-reference" href="chapter-5.xhtml#function-fboundp">fboundp</a></td><td><a class="function-reference" href="chapter-17.xhtml#function-map">map</a></td><td><a class="function-reference" href="chapter-10.xhtml#function-symbol-function">symbol-function</a></td></tr></tbody></table><div class="caption">Some function-related defined names</div></span>

</section><section id="section-LambdaForms"><h6 class="section-title">Lambda Forms</h6><br/>A <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda form">lambda form</a> is similar to a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function form">function form</a>, except that
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function name">function name</a> is replaced by a <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda expression">lambda expression</a>.<br/>A <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda form">lambda form</a> is equivalent to using <span class="glossary-reference error">glossary:funcall</span> of a
<a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical closure">lexical closure</a> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda expression">lambda expression</a> on the given <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">arguments</a>.
(In practice, some compilers are more likely to produce inline code 
for a <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda form">lambda form</a> than for an arbitrary named function 
that has been declared <a class="declaration-reference" href="#declaration-inline">inline</a>; however, such a difference
is not semantic.)<br/>For further information, see <span class="section-reference error">section:LambdaExpressions.</span><br/></section></section><section id="section-Self-EvaluatingObjects"><h5 class="section-title">Self-Evaluating Objects</h5>A <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> that is neither a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> nor a <a class="glossary-reference" href="chapter-26.xhtml#glossary-cons">cons</a> is 
defined to be a <a class="glossary-reference" href="chapter-26.xhtml#glossary-self-evaluating object">self-evaluating object</a>.  <span class="glossary-reference error">glossary:Evaluating</span>
such an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-yield">yields</a> the <a class="glossary-reference" href="chapter-26.xhtml#glossary-same">same</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> 
as a result.

Certain specific <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbols</a> and <a class="glossary-reference" href="chapter-26.xhtml#glossary-cons">conses</a> might also happen 
to be ``self-evaluating'' but only as a special case of a more 
general set of rules for the <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluation</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbols</a> and
<a class="glossary-reference" href="chapter-26.xhtml#glossary-cons">conses</a>; such <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a> are not considered to be
<a class="glossary-reference" href="chapter-26.xhtml#glossary-self-evaluating object">self-evaluating objects</a>.<br/>The consequences are undefined if <span class="glossary-reference error">glossary:literal objects</span> (including
<a class="glossary-reference" href="chapter-26.xhtml#glossary-self-evaluating object">self-evaluating objects</a>) are destructively modified.<br/><section id="section-ExamplesofSelf-EvaluatingObjects"><h6 class="section-title">Examples of Self-Evaluating Objects</h6><a class="glossary-reference" href="chapter-26.xhtml#glossary-number">Numbers</a>, <a class="glossary-reference" href="chapter-26.xhtml#glossary-pathname">pathnames</a>, and <a class="glossary-reference" href="chapter-26.xhtml#glossary-array">arrays</a> are examples of
<a class="glossary-reference" href="chapter-26.xhtml#glossary-self-evaluating object">self-evaluating objects</a>.<br/><pre><code><span class="syntax-root"><span class="syntax-number">3</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">3</span>
<span class="syntax-number">#c<span class="syntax-symbol">(<span class="syntax-number">2/3</span> <span class="syntax-number">5/8</span>)</span></span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">#C<span class="syntax-symbol">(<span class="syntax-number">2/3</span> <span class="syntax-number">5/8</span>)</span></span>
<span class="syntax-pathname">#p<span class="syntax-string">"S:[BILL]OTHELLO.TXT"</span></span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-pathname">#P<span class="syntax-string">"S:[BILL]OTHELLO.TXT"</span></span>
<span class="syntax-vector">#(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-vector">#(<span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">B</span> <span class="syntax-interned-symbol">C</span>)</span>
<span class="syntax-string">"fred smith"</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"fred smith"</span>
</span></code></pre><br/></section></section></section></section><section id="section-LambdaExpressions"><h3 class="section-title">Lambda Expressions</h3><br/>

In a <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda expression">lambda expression</a>,
the body is evaluated in a lexical <a class="glossary-reference" href="chapter-26.xhtml#glossary-environment">environment</a> that is formed by
adding the <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> of 
each <a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter">parameter</a> in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a>
with the corresponding <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a> from the <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">arguments</a>
to the current lexical <a class="glossary-reference" href="chapter-26.xhtml#glossary-environment">environment</a>.<br/>For further discussion of how <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a> are <a class="glossary-reference" href="chapter-26.xhtml#glossary-establish">established</a> 
based on the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a>, see <span class="section-reference error">section:LambdaLists.</span><br/>The body of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda expression">lambda expression</a> is an <a class="glossary-reference" href="chapter-26.xhtml#glossary-implicit progn">implicit progn</a>;
the <span class="glossary-reference error">glossary:values</span> it returns are returned by the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda expression">lambda expression</a>.<br/>
</section><section id="section-ClosuresandLexicalBinding"><h3 class="section-title">Closures and Lexical Binding</h3>A <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical closure">lexical closure</a> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> that can refer to and alter
the values of <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical binding">lexical bindings</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-establish">established</a> by <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a>
that textually include the function definition.<br/>Consider this code, where <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">x</span>
</span></code></pre> is not declared <a class="declaration-reference" href="#declaration-special">special</a>:<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">two-funs</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span>)</span>
  <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-function">function</a> <span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-symbol">()</span> <span class="syntax-interned-symbol">x</span>)</span>)</span>
        <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-function">function</a> <span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">y</span>)</span> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span>)</span>)</span>)</span>)</span>
<span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">funs</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">two-funs</span> <span class="syntax-number">6</span>)</span>)</span>
<span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-funcall">funcall</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-car">car</a> <span class="syntax-interned-symbol">funs</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">6</span>
<span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-funcall">funcall</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-cadr">cadr</a> <span class="syntax-interned-symbol">funs</span>)</span> <span class="syntax-number">43</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">43</span>
<span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-funcall">funcall</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-car">car</a> <span class="syntax-interned-symbol">funs</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">43</span>
</span></code></pre><br/>The <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-function">function</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-special form">special form</a> coerces a 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda expression">lambda expression</a> into a <a class="glossary-reference" href="chapter-26.xhtml#glossary-closure">closure</a> in which the 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical environment">lexical environment</a> in effect when the <a class="glossary-reference" href="chapter-26.xhtml#glossary-special form">special form</a> is
evaluated is captured along with the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda expression">lambda expression</a>.<br/>The function <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">two-funs</span>
</span></code></pre> returns a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> of two 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-function">functions</a>, each of which refers to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> of the
variable <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">x</span>
</span></code></pre> created on entry to the function <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">two-funs</span>
</span></code></pre> when it
was called.
This variable has the value <pre><code><span class="syntax-root"><span class="syntax-number">6</span>
</span></code></pre>
initially, but <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> can alter this <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a>.
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical closure">lexical closure</a> created for the first 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda expression">lambda expression</a> does not ``snapshot'' the <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a> <pre><code><span class="syntax-root"><span class="syntax-number">6</span>
</span></code></pre> for <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">x</span>
</span></code></pre>
when the <a class="glossary-reference" href="chapter-26.xhtml#glossary-closure">closure</a> is created; rather it captures the <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> of <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">x</span>
</span></code></pre>.
The second <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> can be used to alter the <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a> in the same (captured)
<a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> (to <pre><code><span class="syntax-root"><span class="syntax-number">43</span>
</span></code></pre>, in the example), and
this altered variable binding then affects the value returned by the first <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a>.<br/>                     
In situations where a <a class="glossary-reference" href="chapter-26.xhtml#glossary-closure">closure</a> of a 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda expression">lambda expression</a> over the same set of <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a> may be
produced more than once, the various resulting <span class="glossary-reference error">glossary:closures</span> may
or may not be <a class="glossary-reference" href="chapter-26.xhtml#glossary-identical">identical</a>, at the discretion of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation">implementation</a>.
That is, two <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">functions</a> that are behaviorally
indistinguishable might or might not be <a class="glossary-reference" href="chapter-26.xhtml#glossary-identical">identical</a>.
Two <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">functions</a> that are behaviorally distinguishable are <a class="glossary-reference" href="chapter-26.xhtml#glossary-distinct">distinct</a>.
For example:<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-number">5</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">funs</span> <span class="syntax-quote">'<span class="syntax-symbol">()</span></span>)</span>)</span>
  <span class="syntax-cons">(<a class="macro-reference" href="chapter-6.xhtml#macro-dotimes">dotimes</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">j</span> <span class="syntax-number">10</span>)</span>                          
    <span class="syntax-cons">(<a class="macro-reference" href="chapter-14.xhtml#macro-push">push</a> <span class="syntax-function">#'<span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">z</span>)</span>                        
              <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-null">null</a> <span class="syntax-interned-symbol">z</span>)</span> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-number">0</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">z</span>)</span>)</span>)</span></span>
          <span class="syntax-interned-symbol">funs</span>)</span>)</span>
  <span class="syntax-interned-symbol">funs</span>)</span>
</span></code></pre>
The result of the above <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> of ten <span class="glossary-reference error">glossary:closures</span>.
Each requires only the <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> of <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">x</span>
</span></code></pre>.
It is the same <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> in each case, 
but the ten <a class="glossary-reference" href="chapter-26.xhtml#glossary-closure">closure</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a> might or might not be <a class="glossary-reference" href="chapter-26.xhtml#glossary-identical">identical</a>.
On the other hand, the result of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a><br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">funs</span> <span class="syntax-quote">'<span class="syntax-symbol">()</span></span>)</span>)</span>     
  <span class="syntax-cons">(<a class="macro-reference" href="chapter-6.xhtml#macro-dotimes">dotimes</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">j</span> <span class="syntax-number">10</span>)</span>
    <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-number">5</span>)</span>)</span>
      <span class="syntax-cons">(<a class="macro-reference" href="chapter-14.xhtml#macro-push">push</a> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-function">function</a> <span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">z</span>)</span>
                       <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-null">null</a> <span class="syntax-interned-symbol">z</span>)</span> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-number">0</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">z</span>)</span>)</span>)</span>)</span>
            <span class="syntax-interned-symbol">funs</span>)</span>)</span>)</span>
 <span class="syntax-interned-symbol">funs</span>)</span>
</span></code></pre>
is also a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> of ten <span class="glossary-reference error">glossary:closures</span>.
However, in this case no two of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-closure">closure</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a> can
be <a class="glossary-reference" href="chapter-26.xhtml#glossary-identical">identical</a> because each <a class="glossary-reference" href="chapter-26.xhtml#glossary-closure">closure</a> is closed over a distinct
<a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> of <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">x</span>
</span></code></pre>, and these <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a> can be behaviorally
distinguished because of the use of <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a>.<br/>The result of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a><br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">funs</span> <span class="syntax-quote">'<span class="syntax-symbol">()</span></span>)</span>)</span>
  <span class="syntax-cons">(<a class="macro-reference" href="chapter-6.xhtml#macro-dotimes">dotimes</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">j</span> <span class="syntax-number">10</span>)</span>
    <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-number">5</span>)</span>)</span>
      <span class="syntax-cons">(<a class="macro-reference" href="chapter-14.xhtml#macro-push">push</a> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-function">function</a> <span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">z</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">z</span>)</span>)</span>)</span>
           <span class="syntax-interned-symbol">funs</span>)</span>)</span>)</span>
  <span class="syntax-interned-symbol">funs</span>)</span>
</span></code></pre>
is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> of ten <a class="glossary-reference" href="chapter-26.xhtml#glossary-closure">closure</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a> that
might or might not be <a class="glossary-reference" href="chapter-26.xhtml#glossary-identical">identical</a>.
A different <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> of <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">x</span>
</span></code></pre> is involved for
each <a class="glossary-reference" href="chapter-26.xhtml#glossary-closure">closure</a>, but the <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a> cannot be distinguished
because their values are the <a class="glossary-reference" href="chapter-26.xhtml#glossary-same">same</a> and immutable (there being no occurrence
of <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> on <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">x</span>
</span></code></pre>).  A compiler could internally
transform the <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> to<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">funs</span> <span class="syntax-quote">'<span class="syntax-symbol">()</span></span>)</span>)</span>
  <span class="syntax-cons">(<a class="macro-reference" href="chapter-6.xhtml#macro-dotimes">dotimes</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">j</span> <span class="syntax-number">10</span>)</span>
    <span class="syntax-cons">(<a class="macro-reference" href="chapter-14.xhtml#macro-push">push</a> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-function">function</a> <span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">z</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-number">5</span> <span class="syntax-interned-symbol">z</span>)</span>)</span>)</span>
          <span class="syntax-interned-symbol">funs</span>)</span>)</span>
 <span class="syntax-interned-symbol">funs</span>)</span>
</span></code></pre>
where the <span class="glossary-reference error">glossary:closures</span> may be <a class="glossary-reference" href="chapter-26.xhtml#glossary-identical">identical</a>.
 
It is possible that a <a class="glossary-reference" href="chapter-26.xhtml#glossary-closure">closure</a> does not
close over any variable bindings.
In the code fragment<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-mapcar">mapcar</a> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-function">function</a> <span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-number">2</span>)</span>)</span>)</span> <span class="syntax-interned-symbol">y</span>)</span>
</span></code></pre>
the function <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-number">2</span>)</span>)</span>
</span></code></pre> contains no references to any outside
object. In this case, the same <a class="glossary-reference" href="chapter-26.xhtml#glossary-closure">closure</a> might be returned
for all evaluations of the <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-function">function</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>.<br/></section><section id="section-Shadowing"><h3 class="section-title">Shadowing</h3>

If two <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a> that <a class="glossary-reference" href="chapter-26.xhtml#glossary-establish">establish</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical binding">lexical bindings</a> with
the same <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> <math xmlns="http://www.w3.org/1998/Math/MathML">N</math> are textually nested, then references to <math xmlns="http://www.w3.org/1998/Math/MathML">N</math>
within the inner <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> refer to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> established by
the inner <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>; the inner <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> for <math xmlns="http://www.w3.org/1998/Math/MathML">N</math>
<span class="newterm">shadows</span> the outer <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> for <math xmlns="http://www.w3.org/1998/Math/MathML">N</math>.  Outside the inner
<a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> but inside the outer one, references to <math xmlns="http://www.w3.org/1998/Math/MathML">N</math> refer to the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> established by the outer <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>.  For example:<br/>
<pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">test</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">z</span>)</span>
  <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">z</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-*">*</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-number">2</span>)</span>)</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="chapter-22.xhtml#function-print">print</a> <span class="syntax-interned-symbol">z</span>)</span>)</span>
  <span class="syntax-interned-symbol">z</span>)</span>
</span></code></pre>
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> of the variable <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">z</span>
</span></code></pre> by
<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> shadows
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter">parameter</a> binding for the function <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">test</span>
</span></code></pre>.  The reference to the
variable <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">z</span>
</span></code></pre> in the <a class="function-reference" href="chapter-22.xhtml#function-print">print</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> refers to the <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> binding.
The reference to <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">z</span>
</span></code></pre> at the end of the function <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">test</span>
</span></code></pre> 
refers to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter">parameter</a> named <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">z</span>
</span></code></pre>.<br/>Constructs that are lexically scoped act as if new names were
generated for each <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> on each execution.  Therefore,
dynamic shadowing cannot occur.  For example:<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">contorted-example</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">f</span> <span class="syntax-interned-symbol">g</span> <span class="syntax-interned-symbol">x</span>)</span>
  <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-=">=</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-number">0</span>)</span>
      <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-funcall">funcall</a> <span class="syntax-interned-symbol">f</span>)</span>
      <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-block">block</a> <span class="syntax-interned-symbol">here</span>
         <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-number">5</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">contorted-example</span> <span class="syntax-interned-symbol">g</span>
                                 <span class="syntax-function">#'<span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-symbol">()</span> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-return-from">return-from</a> <span class="syntax-interned-symbol">here</span> <span class="syntax-number">4</span>)</span>)</span></span>
                                 <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function--">-</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-number">1</span>)</span>)</span>)</span>)</span>)</span>)</span>
</span></code></pre>
Consider the call <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">contorted-example</span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-number">2</span>)</span>
</span></code></pre>.  This produces
<pre><code><span class="syntax-root"><span class="syntax-number">4</span>
</span></code></pre>.  During the course of execution, there are three
calls to <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">contorted-example</span>
</span></code></pre>, interleaved with two 
blocks:<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">contorted-example</span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-number">2</span>)</span>
  <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-block">block</a> <span class="syntax-interned-symbol">here\ssso</span> <span class="syntax-interned-symbol">...</span>)</span>
    <span class="syntax-cons">(<span class="syntax-interned-symbol">contorted-example</span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-function">#'<span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-symbol">()</span> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-return-from">return-from</a> <span class="syntax-interned-symbol">here\ssso</span> <span class="syntax-number">4</span>)</span>)</span></span> <span class="syntax-number">1</span>)</span>
      <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-block">block</a> <span class="syntax-interned-symbol">here\ssst</span> <span class="syntax-interned-symbol">...</span>)</span>
        <span class="syntax-cons">(<span class="syntax-interned-symbol">contorted-example</span> <span class="syntax-function">#'<span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-symbol">()</span> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-return-from">return-from</a> <span class="syntax-interned-symbol">here\ssso</span> <span class="syntax-number">4</span>)</span>)</span></span>
                           <span class="syntax-function">#'<span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-symbol">()</span> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-return-from">return-from</a> <span class="syntax-interned-symbol">here\ssst</span> <span class="syntax-number">4</span>)</span>)</span></span>
                           <span class="syntax-number">0</span>)</span>
            <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-funcall">funcall</a> <span class="syntax-interned-symbol">f</span>)</span>
                   <span class="syntax-interned-symbol">where</span> <span class="syntax-interned-symbol">f</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-function">#'<span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-symbol">()</span> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-return-from">return-from</a> <span class="syntax-interned-symbol">here\ssso</span> <span class="syntax-number">4</span>)</span>)</span></span>
                <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-return-from">return-from</a> <span class="syntax-interned-symbol">here\ssso</span> <span class="syntax-number">4</span>)</span>
</span></code></pre>
At the time the <pre><code><span class="syntax-root"><a class="function-reference" href="chapter-5.xhtml#function-funcall">funcall</a>
</span></code></pre> is executed
there are two <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-block">block</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-exit point">exit points</a> outstanding, each apparently
named <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">here</span>
</span></code></pre>.
The <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-return-from">return-from</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> executed as a result of the <pre><code><span class="syntax-root"><a class="function-reference" href="chapter-5.xhtml#function-funcall">funcall</a>
</span></code></pre>
operation
refers to the outer outstanding <a class="glossary-reference" href="chapter-26.xhtml#glossary-exit point">exit point</a>
(here<math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow/><mo>1</mo></msub></math>), not the
inner one (here<math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow/><mo>2</mo></msub></math>).
It
refers to that <a class="glossary-reference" href="chapter-26.xhtml#glossary-exit point">exit point</a> textually visible at the point of
execution of <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-function">function</a>
(here abbreviated by the <pre><code><span class="syntax-root">#<span class="syntax-quote">'
Â¶</span></span></code></pre> syntax) that resulted
in creation of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> actually invoked by 
<a class="function-reference" href="chapter-5.xhtml#function-funcall">funcall</a>.                       <br/>If, in this example, one were to change the <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-funcall">funcall</a> <span class="syntax-interned-symbol">f</span>)</span>
</span></code></pre> to
<pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-funcall">funcall</a> <span class="syntax-interned-symbol">g</span>)</span>
</span></code></pre>, then the value of the call <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">contorted-example</span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-number">2</span>)</span>
</span></code></pre>
would be <pre><code><span class="syntax-root"><span class="syntax-number">9</span>
</span></code></pre>.  The value would change because 
<a class="function-reference" href="chapter-5.xhtml#function-funcall">funcall</a> would cause the
execution of <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-return-from">return-from</a> <span class="syntax-interned-symbol">here\ssst\</span> <span class="syntax-number">4</span>)</span>
</span></code></pre>, thereby causing
a return from the inner <a class="glossary-reference" href="chapter-26.xhtml#glossary-exit point">exit point</a> (here<math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow/><mo>2</mo></msub></math>).
When that occurs, the value <pre><code><span class="syntax-root"><span class="syntax-number">4</span>
</span></code></pre> is returned from the
middle invocation of <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">contorted-example</span>
</span></code></pre>, <pre><code><span class="syntax-root"><span class="syntax-number">5</span>
</span></code></pre> is added to that
to get <pre><code><span class="syntax-root"><span class="syntax-number">9</span>
</span></code></pre>, and that value is returned from the outer block
and the outermost call to <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">contorted-example</span>
</span></code></pre>.  The point
is that the choice of <a class="glossary-reference" href="chapter-26.xhtml#glossary-exit point">exit point</a>
returned from has nothing to do with its
being innermost or outermost; rather,
it depends on the lexical environment
that is packaged up with a <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda expression">lambda expression</a> when
<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-function">function</a> is executed.<br/></section><section id="section-Extent"><h3 class="section-title">Extent</h3><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">Contorted-example</span>
</span></code></pre> works only because the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> named by <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">f</span>
</span></code></pre> is invoked during the <a class="glossary-reference" href="chapter-26.xhtml#glossary-extent">extent</a> of the 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-exit point">exit point</a>.
Once the flow of execution has left the block,
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-exit point">exit point</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-disestablish">disestablished</a>.  For example:<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">invalid-example</span> <span class="syntax-symbol">()</span>
  <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">y</span> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-block">block</a> <span class="syntax-interned-symbol">here</span> <span class="syntax-function">#'<span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">z</span>)</span> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-return-from">return-from</a> <span class="syntax-interned-symbol">here</span> <span class="syntax-interned-symbol">z</span>)</span>)</span></span>)</span>)</span>)</span>
    <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-numberp">numberp</a> <span class="syntax-interned-symbol">y</span>)</span> <span class="syntax-interned-symbol">y</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-funcall">funcall</a> <span class="syntax-interned-symbol">y</span> <span class="syntax-number">5</span>)</span>)</span>)</span>)</span>
</span></code></pre>
One might expect the call <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">invalid-example</span>)</span>
</span></code></pre> to produce <pre><code><span class="syntax-root"><span class="syntax-number">5</span>
</span></code></pre>
by the following incorrect reasoning:
<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> binds <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">y</span>
</span></code></pre> to the
value of <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-block">block</a>; this value is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> resulting
from the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda expression">lambda expression</a>.  Because <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">y</span>
</span></code></pre> is not a number, it is
invoked on the value <pre><code><span class="syntax-root"><span class="syntax-number">5</span>
</span></code></pre>.  The <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-return-from">return-from</a> should then
return this value from the                      
<a class="glossary-reference" href="chapter-26.xhtml#glossary-exit point">exit point</a> named <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">here</span>
</span></code></pre>, thereby
exiting from the block again and giving <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">y</span>
</span></code></pre> the value <pre><code><span class="syntax-root"><span class="syntax-number">5</span>
</span></code></pre>
which, being a number, is then returned as the value of the call
to <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">invalid-example</span>
</span></code></pre>.<br/>The argument fails only because <a class="glossary-reference" href="chapter-26.xhtml#glossary-exit point">exit points</a> have 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-dynamic extent">dynamic extent</a>.  The argument is correct up to the execution of
<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-return-from">return-from</a>.  The execution of <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-return-from">return-from</a>
should signal an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-5.xhtml#type-control-error">control-error</a>, however, not
because it cannot refer to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-exit point">exit point</a>, but because it
does correctly refer to an <a class="glossary-reference" href="chapter-26.xhtml#glossary-exit point">exit point</a> and that 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-exit point">exit point</a> has been <a class="glossary-reference" href="chapter-26.xhtml#glossary-disestablish">disestablished</a>.<br/>A reference by name to a dynamic <a class="glossary-reference" href="chapter-26.xhtml#glossary-exit point">exit point</a> binding such as
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-catch tag">catch tag</a> refers to the most recently 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-establish">established</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> of that name that has not been 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-disestablish">disestablished</a>.  For example:<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">fun1</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span>)</span>
  <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-catch">catch</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">trap</span></span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-number">3</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">fun2</span> <span class="syntax-interned-symbol">x</span>)</span>)</span>)</span>)</span>
<span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">fun2</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">y</span>)</span>
  <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-catch">catch</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">trap</span></span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-*">*</a> <span class="syntax-number">5</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">fun3</span> <span class="syntax-interned-symbol">y</span>)</span>)</span>)</span>)</span>
<span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">fun3</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">z</span>)</span>
  <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-throw">throw</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">trap</span></span> <span class="syntax-interned-symbol">z</span>)</span>)</span>
</span></code></pre>
Consider the call <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">fun1</span> <span class="syntax-number">7</span>)</span>
</span></code></pre>.  The result is <pre><code><span class="syntax-root"><span class="syntax-number">10</span>
</span></code></pre>.  At the time
the <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-throw">throw</a> is executed, there are two outstanding catchers with the
name <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">trap</span>
</span></code></pre>: one established within procedure <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">fun1</span>
</span></code></pre>, and the other
within procedure <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">fun2</span>
</span></code></pre>.  The latter is the more recent, and so the
value <pre><code><span class="syntax-root"><span class="syntax-number">7</span>
</span></code></pre> is returned from <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-catch">catch</a> in <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">fun2</span>
</span></code></pre>.
Viewed from within <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">fun3</span>
</span></code></pre>, the <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-catch">catch</a> 
in <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">fun2</span>
</span></code></pre> shadows the one in <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">fun1</span>
</span></code></pre>.
Had <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">fun2</span>
</span></code></pre> been defined as<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">fun2</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">y</span>)</span>
  <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-catch">catch</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">snare</span></span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-*">*</a> <span class="syntax-number">5</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">fun3</span> <span class="syntax-interned-symbol">y</span>)</span>)</span>)</span>)</span>
</span></code></pre>
then the two <a class="glossary-reference" href="chapter-26.xhtml#glossary-exit point">exit points</a> 
would have different <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">names</a>, and therefore the one
in <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">fun1</span>
</span></code></pre> would not be shadowed.  The result would then have been <pre><code><span class="syntax-root"><span class="syntax-number">7</span>
</span></code></pre>.<br/></section><section id="section-ReturnValues"><h3 class="section-title">Return Values</h3>Ordinarily the result of calling a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> is a single <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.
Sometimes, however, it is convenient for a function to compute several
<a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a> and return them.<br/>In order to receive other than exactly one value from a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>,
one of several <a class="glossary-reference" href="chapter-26.xhtml#glossary-special form">special forms</a> or <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macros</a> must be used to request those
values.  If a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> produces <a class="glossary-reference" href="chapter-26.xhtml#glossary-multiple values">multiple values</a> which were not
requested in this way, then the first value is given to the caller and
all others are discarded; if the <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> produces zero values,
then the caller receives <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a> as a value.<br/>Figure <span class="explicit-mono">()</span>&ndash; lists 
some <a class="glossary-reference" href="chapter-26.xhtml#glossary-operator">operators</a> for receiving <a class="glossary-reference" href="chapter-26.xhtml#glossary-multiple values">multiple values</a><sub>2</sub>.
These <a class="glossary-reference" href="chapter-26.xhtml#glossary-operator">operators</a> can be used to specify 
    one or more <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a> to <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluate">evaluate</a> 
and where to put the <span class="glossary-reference error">glossary:values</span> returned by those <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a>.<br/><span class="float" id="figure-Some operators applicable to receiving multiple values"><table><tbody><tr><td><a class="macro-reference" href="chapter-5.xhtml#macro-multiple-value-bind">multiple-value-bind</a></td><td><a class="special-operator-reference" href="chapter-5.xhtml#special-operator-multiple-value-prog1">multiple-value-prog1</a></td><td><a class="special-operator-reference" href="chapter-5.xhtml#special-operator-return-from">return-from</a></td></tr><tr><td><a class="special-operator-reference" href="chapter-5.xhtml#special-operator-multiple-value-call">multiple-value-call</a></td><td><a class="macro-reference" href="chapter-5.xhtml#macro-multiple-value-setq">multiple-value-setq</a></td><td><a class="special-operator-reference" href="chapter-5.xhtml#special-operator-throw">throw</a></td></tr><tr><td><a class="macro-reference" href="chapter-5.xhtml#macro-multiple-value-list">multiple-value-list</a></td><td><a class="macro-reference" href="chapter-5.xhtml#macro-return">return</a></td><td/></tr></tbody></table><div class="caption">Some operators applicable to receiving multiple values</div></span><br/>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="chapter-5.xhtml#function-values">values</a> can produce <a class="glossary-reference" href="chapter-26.xhtml#glossary-multiple values">multiple values</a><sub>2</sub>.
<pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-values">values</a>)</span>
</span></code></pre> returns zero values;
<pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-values">values</a> <span class="parameter">form</span>)</span>
</span></code></pre> returns the <a class="glossary-reference" href="chapter-26.xhtml#glossary-primary value">primary value</a> returned by <span class="parameter">form</span>;
<pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-values">values</a> <span class="parameter">form1</span> <span class="parameter">form2</span>)</span>
</span></code></pre> returns two values,
    the <a class="glossary-reference" href="chapter-26.xhtml#glossary-primary value">primary value</a> of <span class="parameter">form1</span>
and the <a class="glossary-reference" href="chapter-26.xhtml#glossary-primary value">primary value</a> of <span class="parameter">form2</span>;
and so on.<br/>See <a class="constant-reference" href="chapter-5.xhtml#constant-multiple-values-limit">multiple-values-limit</a> and <a class="function-reference" href="chapter-5.xhtml#function-values-list">values-list</a>.<br/></section>
</section><section id="section-Compilation"><h2 class="section-title">Compilation</h2>


<br/>
<section id="section-CompilationTerms"><h3 class="section-title">Compiler Terminology</h3><br/> 
The following terminology is used in this section.<br/>The <span class="newterm">compiler</span> is a utility that translates code into an
<a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a> form that might be represented or
executed efficiently.
The term <span class="newterm">compiler</span> refers to both of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">functions</a>
<a class="function-reference" href="#function-compile">compile</a> and <a class="function-reference" href="chapter-24.xhtml#function-compile-file">compile-file</a>.<br/>The term <span class="newterm">compiled code</span> refers to 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a> representing compiled programs, such as <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a> constructed
by <a class="function-reference" href="#function-compile">compile</a> or by <a class="function-reference" href="chapter-24.xhtml#function-load">load</a> when <span class="glossary-reference error">glossary:loading</span> a <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiled file">compiled file</a>.<br/>The term <span class="newterm">implicit compilation</span> refers to <a class="glossary-reference" href="chapter-26.xhtml#glossary-compilation">compilation</a>
performed during <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluation</a>.<br/>
The term <span class="newterm">literal object</span> refers to 
     a quoted <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> 
  or a <a class="glossary-reference" href="chapter-26.xhtml#glossary-self-evaluating object">self-evaluating object</a> 
  or an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> that is a substructure of such an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.
A <a class="glossary-reference" href="chapter-26.xhtml#glossary-constant variable">constant variable</a> is not itself a <span class="glossary-reference error">glossary:literal object</span>.
 
The term <span class="newterm">coalesce</span> is defined as follows.
Suppose <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">A</span>
</span></code></pre> and <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">B</span>
</span></code></pre> are two <span class="glossary-reference error">glossary:literal constants</span> in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-source code">source code</a>,
and that <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">A</span><span class="syntax-quote">'
Â¶</span></span></code></pre> and <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">B</span><span class="syntax-quote">'
Â¶</span></span></code></pre> are the corresponding <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a> in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiled code">compiled code</a>.
If <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">A</span><span class="syntax-quote">'
Â¶</span></span></code></pre> and <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">B</span><span class="syntax-quote">'
Â¶</span></span></code></pre> are <a class="function-reference" href="chapter-5.xhtml#function-eql">eql</a> but
<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">A</span>
</span></code></pre> and <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">B</span>
</span></code></pre> are not <a class="function-reference" href="chapter-5.xhtml#function-eql">eql</a>, then it is said
that <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">A</span>
</span></code></pre> and <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">B</span>
</span></code></pre> have been coalesced by the compiler.<br/>The term <span class="newterm">minimal compilation</span> refers to actions the compiler
must take at <a class="glossary-reference" href="chapter-26.xhtml#glossary-compile time">compile time</a>. These actions are specified in 
<a class="section-reference" href="#section-CompilationSemantics">Compilation Semantics</a>.<br/>The verb <span class="newterm">process</span> refers to performing <a class="glossary-reference" href="chapter-26.xhtml#glossary-minimal compilation">minimal compilation</a>,
determining the time of evaluation for a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>,
and possibly <span class="glossary-reference error">glossary:evaluating</span> that <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> (if required).<br/>The term <span class="newterm">further compilation</span> refers to
<a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a> compilation beyond <a class="glossary-reference" href="chapter-26.xhtml#glossary-minimal compilation">minimal compilation</a>.
That is, <a class="glossary-reference" href="chapter-26.xhtml#glossary-process">processing</a> does not imply complete compilation.
Block compilation and generation of machine-specific instructions are 
examples of further compilation.
Further compilation is permitted to take place at <a class="glossary-reference" href="chapter-26.xhtml#glossary-run time">run time</a>.<br/>Four different <a class="glossary-reference" href="chapter-26.xhtml#glossary-environment">environments</a> relevant to compilation are
distinguished:
  the <a class="glossary-reference" href="chapter-26.xhtml#glossary-startup environment">startup environment</a>,
  the <a class="glossary-reference" href="chapter-26.xhtml#glossary-compilation environment">compilation environment</a>,
  the <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation environment">evaluation environment</a>, and
  the <a class="glossary-reference" href="chapter-26.xhtml#glossary-run-time environment">run-time environment</a>.<br/>The <span class="newterm">startup environment</span> is
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-environment">environment</a> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lisp image">Lisp image</a> 
from which the <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler">compiler</a> was invoked.<br/>The <span class="newterm">compilation environment</span> is maintained by the compiler
and is used to hold definitions and declarations to be used internally
by the compiler.  Only those parts of a definition needed for correct
compilation are saved. The <a class="glossary-reference" href="chapter-26.xhtml#glossary-compilation environment">compilation environment</a> is used
as the <a class="glossary-reference" href="chapter-26.xhtml#glossary-environment">environment</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">argument</a> to macro expanders called by
the compiler. It is unspecified whether a definition available in the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-compilation environment">compilation environment</a> can be used in an <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluation</a>
initiated in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-startup environment">startup environment</a> or <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation environment">evaluation environment</a>.<br/>The <span class="newterm">evaluation environment</span> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-run-time environment">run-time environment</a>
in which macro expanders and code specified by <a class="special-operator-reference" href="#special-operator-eval-when">eval-when</a>
to be evaluated are evaluated.  All evaluations initiated by the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler">compiler</a> take place in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation environment">evaluation environment</a>.<br/>The <span class="newterm">run-time environment</span> is the 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-environment">environment</a> in which the program being compiled will be executed.<br/>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-compilation environment">compilation environment</a> inherits from
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation environment">evaluation environment</a>,
and the <a class="glossary-reference" href="chapter-26.xhtml#glossary-compilation environment">compilation environment</a> and <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation environment">evaluation environment</a> 
might be <a class="glossary-reference" href="chapter-26.xhtml#glossary-identical">identical</a>.
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation environment">evaluation environment</a> inherits from
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-startup environment">startup environment</a>, 
and the <a class="glossary-reference" href="chapter-26.xhtml#glossary-startup environment">startup environment</a> and <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation environment">evaluation environment</a> 
might be <a class="glossary-reference" href="chapter-26.xhtml#glossary-identical">identical</a>.<br/>
The term <span class="newterm">compile time</span> refers to the duration of time that
the compiler is processing <a class="glossary-reference" href="chapter-26.xhtml#glossary-source code">source code</a>.
At <a class="glossary-reference" href="chapter-26.xhtml#glossary-compile time">compile time</a>,
only the <a class="glossary-reference" href="chapter-26.xhtml#glossary-compilation environment">compilation environment</a> 
and  the <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation environment">evaluation environment</a>
are available.<br/>The term <span class="newterm">compile-time definition</span> refers to a definition in
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-compilation environment">compilation environment</a>.
For example, when compiling a file, 
the definition of a function might be retained in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-compilation environment">compilation environment</a> 
if it is declared <a class="declaration-reference" href="#declaration-inline">inline</a>. 
This definition might not be available in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation environment">evaluation environment</a>.<br/>The term <span class="newterm">run time</span> refers to the duration of time that the
loader is loading compiled code or compiled code is being executed.
At run time, only the <a class="glossary-reference" href="chapter-26.xhtml#glossary-run-time environment">run-time environment</a> is available.<br/>The term <span class="newterm">run-time definition</span> refers to a definition in the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-run-time environment">run-time environment</a>.<br/>The term <span class="newterm">run-time compiler</span> refers to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="#function-compile">compile</a>
or <a class="glossary-reference" href="chapter-26.xhtml#glossary-implicit compilation">implicit compilation</a>, for which the compilation and run-time 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-environment">environments</a> are maintained in the same <a class="glossary-reference" href="chapter-26.xhtml#glossary-lisp image">Lisp image</a>.
Note that when the <a class="glossary-reference" href="chapter-26.xhtml#glossary-run-time compiler">run-time compiler</a> is used,
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-run-time environment">run-time environment</a> 
and <a class="glossary-reference" href="chapter-26.xhtml#glossary-startup environment">startup environment</a> 
are the same.<br/></section><section id="section-CompilationSemantics"><h3 class="section-title">Compilation Semantics</h3><br/>Conceptually, compilation is a process that traverses code, performs
certain kinds of syntactic and semantic analyses using information
(such as proclamations and <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a> definitions) present in the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-compilation environment">compilation environment</a>, and produces equivalent, possibly
more efficient code.<br/>
<section id="section-CompilerMacros"><h4 class="section-title">Compiler Macros</h4><br/>A <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler macro">compiler macro</a> can be defined for a <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a>
that also names a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> or <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a>.
That is, it is possible for a
<a class="glossary-reference" href="chapter-26.xhtml#glossary-function name">function name</a> to name both a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> and a <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler macro">compiler macro</a>.<br/>A <a class="glossary-reference" href="chapter-26.xhtml#glossary-function name">function name</a> names a <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler macro">compiler macro</a> if <a class="function-reference" href="#function-compiler-macro-function">compiler-macro-function</a>
is <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function name">function name</a> in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical environment">lexical environment</a> in which
it appears.  Creating a <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical binding">lexical binding</a> for the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function name">function name</a>
not only creates a new local <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> or
<a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a> definition, but also <a class="glossary-reference" href="chapter-26.xhtml#glossary-shadow">shadows</a><sub>2</sub> the <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler macro">compiler macro</a>.<br/>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> returned by <a class="function-reference" href="#function-compiler-macro-function">compiler-macro-function</a>
is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> of two arguments, called the
expansion function.  To expand a <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler macro">compiler macro</a>,
the expansion function is invoked by calling the <a class="glossary-reference" href="chapter-26.xhtml#glossary-macroexpand hook">macroexpand hook</a> with
      the expansion function as its first argument,
      the entire compiler macro <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> as its second argument,
  and the current compilation <a class="glossary-reference" href="chapter-26.xhtml#glossary-environment">environment</a> 
       (or with the current lexical <a class="glossary-reference" href="chapter-26.xhtml#glossary-environment">environment</a>,
 	 if the <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> is being processed by something
	 other than <a class="function-reference" href="chapter-24.xhtml#function-compile-file">compile-file</a>) 
       as its third argument.
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-macroexpand hook">macroexpand hook</a>, in turn, calls the expansion function with the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> as its first argument and the <a class="glossary-reference" href="chapter-26.xhtml#glossary-environment">environment</a> as its second argument.
The return value from the expansion function, which is passed through
by the <a class="glossary-reference" href="chapter-26.xhtml#glossary-macroexpand hook">macroexpand hook</a>, might either be the <a class="glossary-reference" href="chapter-26.xhtml#glossary-same">same</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>, 
or else a form that can, at the discretion of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-code">code</a> doing the expansion, 
be used in place of the original <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>.<br/><span class="float" id="figure-Defined names applicable to compiler macros"><table><tbody><tr><td><a class="variable-reference" href="#variable-*macroexpand-hook*">*macroexpand-hook*</a></td><td><a class="function-reference" href="#function-compiler-macro-function">compiler-macro-function</a></td><td><a class="macro-reference" href="#macro-define-compiler-macro">define-compiler-macro</a></td></tr></tbody></table><div class="caption">Defined names applicable to compiler macros</div></span><br/><section id="section-PurposeofCompilerMacros"><h5 class="section-title">Purpose of Compiler Macros</h5>The purpose of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler macro">compiler macro</a> facility is to permit 
selective source code transformations as optimization advice 
to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler">compiler</a>.  When a <a class="glossary-reference" href="chapter-26.xhtml#glossary-compound form">compound form</a> is being
processed (as by the compiler), if the <a class="glossary-reference" href="chapter-26.xhtml#glossary-operator">operator</a> names a
<a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler macro">compiler macro</a> then the <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler macro function">compiler macro function</a> may be
invoked on the form, and the resulting expansion recursively processed
in preference to performing the usual processing on the original <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>
according to its normal interpretation as a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function form">function form</a> or
<a class="glossary-reference" href="chapter-26.xhtml#glossary-macro form">macro form</a>.<br/>A <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler macro function">compiler macro function</a>, like a <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro function">macro function</a>,
is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> of two <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">arguments</a>: the entire call <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>
and the <a class="glossary-reference" href="chapter-26.xhtml#glossary-environment">environment</a>. Unlike an ordinary <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro function">macro function</a>, a 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler macro function">compiler macro function</a> can decline to provide an expansion merely by
returning a value that is the <a class="glossary-reference" href="chapter-26.xhtml#glossary-same">same</a> as the original <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>.
The consequences are undefined if a <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler macro function">compiler macro function</a>
destructively modifies any part of its <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> argument.<br/>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> passed to the compiler macro function can either be a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a>
whose <a class="glossary-reference" href="chapter-26.xhtml#glossary-car">car</a> is the function name, or a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> whose <a class="glossary-reference" href="chapter-26.xhtml#glossary-car">car</a> is
<a class="function-reference" href="chapter-5.xhtml#function-funcall">funcall</a> and whose <a class="glossary-reference" href="chapter-26.xhtml#glossary-cadr">cadr</a> is a list <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-function">function</a> <span class="parameter">name</span>)</span>
</span></code></pre>;
note that this affects destructuring of the form argument by the 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler macro function">compiler macro function</a>.
<a class="macro-reference" href="#macro-define-compiler-macro">define-compiler-macro</a> arranges for destructuring of arguments to be
performed correctly for both possible formats.<br/>
When <a class="function-reference" href="chapter-24.xhtml#function-compile-file">compile-file</a> chooses to expand a <a class="glossary-reference" href="chapter-26.xhtml#glossary-top level form">top level form</a> that is
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler macro">compiler macro</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>, the expansion is also treated as a <a class="glossary-reference" href="chapter-26.xhtml#glossary-top level form">top level form</a>
for the purposes of <a class="special-operator-reference" href="#special-operator-eval-when">eval-when</a> processing; see <span class="section-reference error">section:TopLevelForms.</span>

</section><section id="section-NamingofCompilerMacros"><h5 class="section-title">Naming of Compiler Macros</h5><a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler macro">Compiler macros</a> may be defined for <a class="glossary-reference" href="chapter-26.xhtml#glossary-function name">function names</a> that name
<a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macros</a> as well as <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">functions</a>.  

<a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler macro">Compiler macro</a> definitions are strictly global.  There is no provision
for defining local <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler macro">compiler macros</a> in the way that <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-macrolet">macrolet</a>
defines local <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macros</a>.  Lexical bindings of a function name shadow any
compiler macro definition associated with the name as well as its 
global <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> or <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a> definition.<br/>Note that the presence of a compiler macro definition does not affect
the values returned by
functions that access <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> definitions (<span class="explicit-italic"> e.g.</span>,  <a class="function-reference" href="chapter-5.xhtml#function-fboundp">fboundp</a>)
or <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a> definitions (<span class="explicit-italic"> e.g.</span>,  <a class="function-reference" href="#function-macroexpand">macroexpand</a>).
Compiler macros are global, and the function
<a class="function-reference" href="#function-compiler-macro-function">compiler-macro-function</a> is sufficient to resolve their interaction
with other lexical and global definitions.<br/></section><section id="section-WhenCompilerMacrosAreUsed"><h5 class="section-title">When Compiler Macros Are Used</h5>The presence of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler macro">compiler macro</a> definition for a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> or <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a>
indicates that it is desirable for the <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler">compiler</a> to use the expansion
of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler macro">compiler macro</a> instead of the original <a class="glossary-reference" href="chapter-26.xhtml#glossary-function form">function form</a> or
<a class="glossary-reference" href="chapter-26.xhtml#glossary-macro form">macro form</a>.  However, no language processor
(compiler, evaluator, or other code walker) is ever required to actually
invoke <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler macro function">compiler macro functions</a>, or to 
make use of the resulting expansion if it does invoke 
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler macro function">compiler macro function</a>.<br/>When the <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler">compiler</a> encounters a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> during processing that represents
a call to a <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler macro">compiler macro</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> (that is not declared <a class="declaration-reference" href="#declaration-notinline">notinline</a>),
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler">compiler</a> might expand the <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler macro">compiler macro</a>, 
and might use the expansion in place of the original <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>.<br/>When <a class="function-reference" href="#function-eval">eval</a> encounters a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> during processing that represents 
a call to a <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler macro">compiler macro</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> (that is not declared <a class="declaration-reference" href="#declaration-notinline">notinline</a>),
<a class="function-reference" href="#function-eval">eval</a> might expand the <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler macro">compiler macro</a>,
and might use the expansion in place of the original <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>.<br/>There are two situations in which a <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler macro">compiler macro</a> definition must not be
applied by any language processor:<br/><ul><li>The global function name binding associated with the compiler
 macro is shadowed by a lexical binding of the function name.<br/></li><li>The function name has been declared or proclaimed <a class="declaration-reference" href="#declaration-notinline">notinline</a> and
 the call form appears within the scope of the declaration.
</li></ul><br/>It is unspecified whether <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler macro">compiler macros</a> are expanded or used in any other
situations.<br/><section id="section-NotesabouttheImplementationofCompilerMacros"><h6 class="section-title">Notes about the Implementation of Compiler Macros</h6>Although it is technically permissible, as described above,
for <a class="function-reference" href="#function-eval">eval</a> to treat <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler macro">compiler macros</a> in the same situations
as <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler">compiler</a> might, this is not necessarily a good idea in
<a class="glossary-reference" href="chapter-26.xhtml#glossary-interpreted implementation">interpreted implementations</a>.<br/><a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler macro">Compiler macros</a> exist for the purpose of trading compile-time speed
for run-time speed.  Programmers who write <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler macro">compiler macros</a> tend to
assume that the <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler macro">compiler macros</a> can take more time than normal <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">functions</a>
and <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macros</a> in order to produce code which is especially optimal for use
at run time.  Since <a class="function-reference" href="#function-eval">eval</a> in an <a class="glossary-reference" href="chapter-26.xhtml#glossary-interpreted implementation">interpreted implementation</a>
might perform semantic analysis of the same form multiple times, it might be 
inefficient in general for the <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation">implementation</a> to choose to call
<a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler macro">compiler macros</a> on every such <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluation</a>.<br/>Nevertheless, the decision about what to do in these situations is left to
each <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation">implementation</a>.<br/></section></section></section>
<section id="section-MinimalCompilation"><h4 class="section-title">Minimal Compilation</h4><br/>
<a class="glossary-reference" href="chapter-26.xhtml#glossary-minimal compilation">Minimal compilation</a> is defined as follows:<br/><ul><li>All <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler macro">compiler macro</a><a id="index/term-compiler macro"></a> calls appearing in the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-source code">source code</a> being compiled are expanded, if at all, at compile time;
they will not be expanded at run time.
</li><li>All <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a><a id="index/term-macro"></a> and 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol macro">symbol macro</a><a id="index/term-symbol macro"></a> calls
appearing in the source code being compiled are expanded at compile time
in such a way that they will not be expanded again at run time.
<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-macrolet">macrolet</a><a id="symbol-macrolet"></a>
and
<a class="special-operator-reference" href="#special-operator-symbol-macrolet">symbol-macrolet</a><a id="symbol-symbol-macrolet"></a>
are effectively replaced by
<a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a> corresponding to their bodies in which calls to 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macros</a> are replaced by their expansions.<br/></li><li>The first <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">argument</a> in a <a class="special-operator-reference" href="#special-operator-load-time-value">load-time-value</a><a id="symbol-load-time-value"></a>
<a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> 
in <a class="glossary-reference" href="chapter-26.xhtml#glossary-source code">source code</a> processed by <a class="function-reference" href="#function-compile">compile</a><a id="symbol-compile"></a>
is <span class="glossary-reference error">glossary:evaluated</span> at <a class="glossary-reference" href="chapter-26.xhtml#glossary-compile time">compile time</a>;
in <a class="glossary-reference" href="chapter-26.xhtml#glossary-source code">source code</a> processed by <a class="function-reference" href="chapter-24.xhtml#function-compile-file">compile-file</a><a id="symbol-compile-file"></a>, 
the compiler arranges for it to be <span class="glossary-reference error">glossary:evaluated</span> at <a class="glossary-reference" href="chapter-26.xhtml#glossary-load time">load time</a>.
In either case, the result of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluation</a>
is remembered and used later as the value of the 
<a class="special-operator-reference" href="#special-operator-load-time-value">load-time-value</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> at <a class="glossary-reference" href="chapter-26.xhtml#glossary-execution time">execution time</a>.<br/></li></ul><br/></section><section id="section-SemanticConstraints"><h4 class="section-title">Semantic Constraints</h4><br/>
All <a class="glossary-reference" href="chapter-26.xhtml#glossary-conforming program">conforming programs</a> must obey the following constraints,
which are designed to minimize the observable differences 
between compiled and interpreted programs:<br/><ul><li>Definitions of any referenced <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macros</a>
must be present in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-compilation environment">compilation environment</a>.  
Any <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> that is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a>
beginning with a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> that does not name a
<a class="glossary-reference" href="chapter-26.xhtml#glossary-special operator">special operator</a> or a <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a> defined in the 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-compilation environment">compilation environment</a> is treated by the compiler as a 
function call.<br/> </li><li><a class="declaration-reference" href="#declaration-special">Special</a> proclamations for <a class="glossary-reference" href="chapter-26.xhtml#glossary-dynamic variable">dynamic variables</a>
must be made in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-compilation environment">compilation environment</a>.  Any <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a>
for which there is no <a class="declaration-reference" href="#declaration-special">special</a> declaration or proclamation in
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-compilation environment">compilation environment</a> is treated by the compiler as
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical binding">lexical binding</a>.<br/>
 </li><li>The definition of a function that is defined and
declared <a class="declaration-reference" href="#declaration-inline">inline</a> in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-compilation environment">compilation environment</a> must be
the same at run time.<br/>  
 </li><li>Within a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> named <math xmlns="http://www.w3.org/1998/Math/MathML">F</math>, the compiler may
(but is not required to)
assume that an apparent recursive call to a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> named <math xmlns="http://www.w3.org/1998/Math/MathML">F</math> 
refers to the same definition of <math xmlns="http://www.w3.org/1998/Math/MathML">F</math>,
unless that function has been declared <a class="declaration-reference" href="#declaration-notinline">notinline</a>.
The consequences of redefining such a recursively defined <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <math xmlns="http://www.w3.org/1998/Math/MathML">F</math> 
while it is executing are undefined.<br/> </li><li>A call within a file to a named function that is
defined in the same file refers to that function, unless that function
has been declared <a class="declaration-reference" href="#declaration-notinline">notinline</a>.  The consequences are unspecified
if functions are redefined individually at run time or multiply
defined in the same file.<br/>  
 </li><li>The argument syntax and number of return values for
all functions whose <a class="declaration-reference" href="#declaration-ftype">ftype</a> is declared at compile time must
remain the same at run time.<br/> </li><li><a class="glossary-reference" href="chapter-26.xhtml#glossary-constant variable">Constant variables</a> defined in
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-compilation environment">compilation environment</a> must have a <a class="glossary-reference" href="chapter-26.xhtml#glossary-similar">similar</a> value at
run time.  A reference to 
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-constant variable">constant variable</a> 
in <a class="glossary-reference" href="chapter-26.xhtml#glossary-source code">source code</a> is equivalent to a reference to 
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-literal">literal</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> that is the <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-constant variable">constant variable</a>.<br/> </li><li>Type definitions made with <a class="macro-reference" href="chapter-4.xhtml#macro-deftype">deftype</a> or
<a class="macro-reference" href="chapter-8.xhtml#macro-defstruct">defstruct</a> in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-compilation environment">compilation environment</a> must
retain the same definition at run time.  Classes defined by <a class="macro-reference" href="chapter-7.xhtml#macro-defclass">defclass</a>
in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-compilation environment">compilation environment</a> must be defined
at run time to have the same <a class="glossary-reference" href="chapter-26.xhtml#glossary-superclass">superclasses</a> and same 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-metaclass">metaclass</a>.<br/>This implies that <a class="glossary-reference" href="chapter-26.xhtml#glossary-subtype">subtype</a>/<a class="glossary-reference" href="chapter-26.xhtml#glossary-supertype">supertype</a> relationships of 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-type specifier">type specifiers</a> must not change between <a class="glossary-reference" href="chapter-26.xhtml#glossary-compile time">compile time</a> and <a class="glossary-reference" href="chapter-26.xhtml#glossary-run time">run time</a>.  <br/> </li><li>Type declarations present in the compilation 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-environment">environment</a> must accurately describe the corresponding values at run time;
otherwise, the consequences are undefined.  It is permissible
for an unknown <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> to appear in a declaration at 
compile time, though a warning might be signaled in such a case.<br/> </li><li>Except in the situations explicitly listed above, a
<a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> defined in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation environment">evaluation environment</a>
is permitted to have a different definition or a different <a class="glossary-reference" href="chapter-26.xhtml#glossary-signature">signature</a>
at run time, and the run-time definition prevails.<br/></li></ul> <br/><a class="glossary-reference" href="chapter-26.xhtml#glossary-conforming program">Conforming programs</a> should not be written using any additional
assumptions about consistency between the run-time 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-environment">environment</a> and the startup, evaluation, and compilation 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-environment">environments</a>.<br/>Except where noted, when a compile-time and a run-time definition are
different, one of the following occurs at run time:<br/><ul><li>an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-9.xhtml#type-error">error</a> is signaled
</li><li>the compile-time definition prevails
</li><li>the run-time definition prevails<br/></li></ul><br/>If the <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler">compiler</a> processes a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function form">function form</a> whose <a class="glossary-reference" href="chapter-26.xhtml#glossary-operator">operator</a> 
is not defined at compile time, no error is signaled at compile time.<br/></section></section><section id="section-FileCompilation"><h3 class="section-title">File Compilation</h3><br/>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="chapter-24.xhtml#function-compile-file">compile-file</a> performs compilation of 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a> in a file following the rules specified in <a class="section-reference" href="#section-CompilationSemantics">Compilation Semantics</a>,
and produces an output file that can be loaded by using <a class="function-reference" href="chapter-24.xhtml#function-load">load</a>.<br/>Normally, the <a class="glossary-reference" href="chapter-26.xhtml#glossary-top level form">top level forms</a> appearing in a file compiled with
<a class="function-reference" href="chapter-24.xhtml#function-compile-file">compile-file</a> are evaluated only when the resulting
compiled file is loaded, and not when the file is compiled.  However,
it is typically the case that some forms in the file need to be evaluated
at compile time so the
remainder of the file can be read and compiled correctly.<br/>The <a class="special-operator-reference" href="#special-operator-eval-when">eval-when</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-special form">special form</a> can be used to control
whether a <a class="glossary-reference" href="chapter-26.xhtml#glossary-top level form">top level form</a> is evaluated at compile time, load
time, or both.  It is possible to specify any of three situations with
<a class="special-operator-reference" href="#special-operator-eval-when">eval-when</a>, denoted by the symbols <span class="keyword">:compile-toplevel</span>,
<span class="keyword">:load-toplevel</span>, and <span class="keyword">:execute</span>.  For top level 
<a class="special-operator-reference" href="#special-operator-eval-when">eval-when</a> forms, <span class="keyword">:compile-toplevel</span> specifies that the
compiler must evaluate the body at compile time, and <span class="explicit-mono">:load-toplevel</span> specifies that the compiler must arrange to evaluate
the body at load time. For non-top level <a class="special-operator-reference" href="#special-operator-eval-when">eval-when</a> forms,
<span class="keyword">:execute</span> specifies that the body must be executed in the run-time
<a class="glossary-reference" href="chapter-26.xhtml#glossary-environment">environment</a>.<br/>The behavior of this <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> can be more precisely understood in
terms of a model of how <a class="function-reference" href="chapter-24.xhtml#function-compile-file">compile-file</a> processes forms in
a file to be compiled. There are two processing modes, called
``not-compile-time'' and ``compile-time-too''.<br/>Successive forms are read from the file by <a class="function-reference" href="chapter-24.xhtml#function-compile-file">compile-file</a>
and processed in not-compile-time mode; in this mode, 
<a class="function-reference" href="chapter-24.xhtml#function-compile-file">compile-file</a> arranges for forms to be evaluated only at load time
and not at compile time.  When <a class="function-reference" href="chapter-24.xhtml#function-compile-file">compile-file</a> is in
compile-time-too mode, forms are evaluated both at compile time and
load time.<br/><section id="section-TopLevelForms"><h4 class="section-title">Processing of Top Level Forms</h4><br/>Processing of <a class="glossary-reference" href="chapter-26.xhtml#glossary-top level form">top level forms</a> in the file compiler is defined
as follows:<br/><ol> <li>If the <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler macro form">compiler macro form</a>
(not disabled by a <a class="declaration-reference" href="#declaration-notinline">notinline</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration">declaration</a>),
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation">implementation</a> might or might not choose to compute
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler macro expansion">compiler macro expansion</a> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> and,
having performed the expansion, might or might not choose to process the result
as a <a class="glossary-reference" href="chapter-26.xhtml#glossary-top level form">top level form</a> in the same processing mode
(compile-time-too or not-compile-time).
If it declines to obtain or use the expansion, it must process the original <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>.
</li><li>If the form is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro form">macro form</a>,
its <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro expansion">macro expansion</a> is computed and processed as a 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-top level form">top level form</a> in
the same processing mode (compile-time-too or not-compile-time).<br/> </li><li>If the form is a <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-progn">progn</a> form, each of its
body <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a> is sequentially processed as a 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-top level form">top level form</a> in the same processing mode.<br/> </li><li>If the form is a <a class="special-operator-reference" href="#special-operator-locally">locally</a>, 
<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-macrolet">macrolet</a>, or <a class="special-operator-reference" href="#special-operator-symbol-macrolet">symbol-macrolet</a>, 
<a class="function-reference" href="chapter-24.xhtml#function-compile-file">compile-file</a> establishes the appropriate bindings and processes the
body forms as <a class="glossary-reference" href="chapter-26.xhtml#glossary-top level form">top level forms</a> with those bindings in effect
in the same processing mode.  (Note that this implies that the lexical
<a class="glossary-reference" href="chapter-26.xhtml#glossary-environment">environment</a> in which <a class="glossary-reference" href="chapter-26.xhtml#glossary-top level form">top level forms</a> are processed
is not necessarily the <a class="glossary-reference" href="chapter-26.xhtml#glossary-null lexical environment">null lexical environment</a>.)<br/> </li><li>If the form is an <a class="special-operator-reference" href="#special-operator-eval-when">eval-when</a><a id="symbol-eval-when"></a> form, it is
handled according to Figure <span class="explicit-mono">()</span>&ndash;.<br/><span class="float" id="figure-EVAL-WHEN processing">=.75pc
 plus .5 fil
<span class="error">unexpanded macro: (:OTHER-COMMAND-APPLICATION NIL :OUTPUT-FILE "chapter-3"
                   :NAME "offinterlineskip" :BOUNDS (31421 . 31438))</span>
<table><tbody><tr><td> plus 1fil</td><td> plus .5 fil</td><td> plus 1fil</td><td> plus 1fil
</td><td/><td/><td/></tr><tr><td>
<span class="explicit-bold"> CT</span> </td><td><span class="explicit-bold"> LT</span> </td><td><span class="explicit-bold"> E</span> </td><td><span class="explicit-bold"> Mode</span></td><td><span class="explicit-bold"> Action</span></td><td><span class="explicit-bold"> New Mode</span></td></tr><tr><td>
Yes</td><td>Yes</td><td>&mdash;</td><td>&mdash;</td><td>Process</td><td>compile-time-too</td></tr><tr><td>No</td><td>Yes</td><td>Yes</td><td> CTT</td><td>Process</td><td>compile-time-too</td></tr><tr><td>No</td><td>Yes</td><td>Yes</td><td> NCT</td><td>Process</td><td>not-compile-time</td></tr><tr><td>No</td><td>Yes</td><td>No</td><td>&mdash;</td><td>Process</td><td>not-compile-time</td></tr><tr><td>Yes</td><td>No</td><td>&mdash;</td><td>&mdash;</td><td>Evaluate</td><td>&mdash;</td></tr><tr><td>No</td><td>No</td><td>Yes</td><td> CTT</td><td>Evaluate</td><td>&mdash;</td></tr><tr><td>No</td><td>No</td><td>Yes</td><td> NCT</td><td>Discard</td><td>&mdash;</td></tr><tr><td>No</td><td>No</td><td>No</td><td>&mdash;</td><td>Discard</td><td>&mdash;</td></tr><tr><td>
</td></tr></tbody></table>

<div class="caption">EVAL-WHEN processing</div></span><br/>Column <span class="explicit-bold"> CT</span>   indicates whether <span class="keyword">:compile-toplevel</span> is specified.
Column <span class="explicit-bold"> LT</span>   indicates whether <span class="keyword">:load-toplevel</span> is specified.
Column <span class="explicit-bold"> E</span>    indicates whether <span class="keyword">:execute</span> is specified.  
Column <span class="explicit-bold"> Mode</span> indicates the processing mode; 
		a dash (&mdash;) indicates that the processing mode is not relevant.<br/>The <span class="explicit-bold"> Action</span> column specifies one of three actions:<br/><ul><li><span class="explicit-bold"> Process:</span> process the body as <a class="glossary-reference" href="chapter-26.xhtml#glossary-top level form">top level forms</a> in the
specified mode.<br/> </li><li><span class="explicit-bold"> Evaluate:</span> evaluate the body in the dynamic execution
context of the compiler, using the <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation environment">evaluation environment</a> as
the global environment and the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical environment">lexical environment</a> in which
the <a class="special-operator-reference" href="#special-operator-eval-when">eval-when</a> appears.<br/></li><li><span class="explicit-bold"> Discard:</span> ignore the <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>.
</li></ul><br/>The <span class="explicit-bold"> New Mode</span> column indicates the new processing mode. 
A dash (&mdash;) indicates the compiler remains in its current mode.<br/> </li><li>Otherwise, the form is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-top level form">top level form</a> that
is not one of the special cases.  In compile-time-too mode, the
compiler first evaluates the form in the evaluation 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-environment">environment</a> and then minimally compiles it.  In not-compile-time
mode, the <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> is simply minimally compiled.  All <a class="glossary-reference" href="chapter-26.xhtml#glossary-subform">subforms</a>
are treated as <a class="glossary-reference" href="chapter-26.xhtml#glossary-non-top-level form">non-top-level forms</a>.<br/>Note that <a class="glossary-reference" href="chapter-26.xhtml#glossary-top level form">top level forms</a> are processed in the order in
which they textually appear in the file and that each 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-top level form">top level form</a> read by the compiler is processed before the next is
read.  However, the order of processing (including macro expansion) of
<a class="glossary-reference" href="chapter-26.xhtml#glossary-subform">subforms</a> that are not <a class="glossary-reference" href="chapter-26.xhtml#glossary-top level form">top level forms</a> and the order of
further compilation is unspecified as long as Common Lisp semantics
are preserved.<br/></li></ol> <br/><a class="special-operator-reference" href="#special-operator-eval-when">eval-when</a> forms cause compile-time evaluation only at
top level.  Both <span class="keyword">:compile-toplevel</span> and <span class="keyword">:load-toplevel</span> situation specifications
are ignored for <a class="glossary-reference" href="chapter-26.xhtml#glossary-non-top-level form">non-top-level forms</a>. For <a class="glossary-reference" href="chapter-26.xhtml#glossary-non-top-level form">non-top-level forms</a>, 
an <a class="special-operator-reference" href="#special-operator-eval-when">eval-when</a>
specifying the <span class="keyword">:execute</span> situation is treated as an <a class="glossary-reference" href="chapter-26.xhtml#glossary-implicit progn">implicit progn</a>
including the <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a> in the body of the <a class="special-operator-reference" href="#special-operator-eval-when">eval-when</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>;
otherwise, the <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a> in the body are ignored.<br/><section id="section-DefiningMacros"><h5 class="section-title">Processing of Defining Macros</h5><br/>

Defining <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macros</a> (such as <a class="macro-reference" href="#macro-defmacro">defmacro</a> or <a class="macro-reference" href="chapter-5.xhtml#macro-defvar">defvar</a>)
appearing within a file being processed by <a class="function-reference" href="chapter-24.xhtml#function-compile-file">compile-file</a>
normally have compile-time side effects which affect how subsequent <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a>
in the same <a class="glossary-reference" href="chapter-26.xhtml#glossary-file">file</a> are compiled.  A convenient model for explaining how these
side effects happen is that the defining macro expands into one or
more <a class="special-operator-reference" href="#special-operator-eval-when">eval-when</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a>, and that the calls which cause the compile-time
side effects to happen appear 
in the body of an <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-eval-when">eval-when</a> <span class="syntax-cons">(<span class="syntax-keyword-symbol">:compile-toplevel</span>)</span> <span class="syntax-interned-symbol">...</span>)</span>
</span></code></pre> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>.<br/>The compile-time side effects may cause information about the definition to
be stored differently than if the defining macro had been processed in the
`normal' way (either interpretively or by loading the compiled file).<br/>In particular, the information stored by the defining <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macros</a> at compile time
might or might not be available to the interpreter (either during or after compilation),
or during subsequent calls to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler">compiler</a>.  For example,
the following code is nonportable because it assumes that the <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler">compiler</a>
stores the macro definition of <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">foo</span>
</span></code></pre> where it is available to the interpreter:<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="#macro-defmacro">defmacro</a> <span class="syntax-interned-symbol">foo</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-car">car</a> <span class="syntax-unquote">,<span class="syntax-interned-symbol">x</span></span>)</span></span>)</span>
<span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-eval-when">eval-when</a> <span class="syntax-cons">(<span class="syntax-keyword-symbol">:execute</span> <span class="syntax-keyword-symbol">:compile-toplevel</span> <span class="syntax-keyword-symbol">:load-toplevel</span>)</span>
  <span class="syntax-cons">(<a class="function-reference" href="chapter-22.xhtml#function-print">print</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">foo</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span>)</span></span>)</span>)</span>)</span>
</span></code></pre><br/>A portable way to do the same thing would be to include the macro
definition inside the <a class="special-operator-reference" href="#special-operator-eval-when">eval-when</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>, as in:<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-eval-when">eval-when</a> <span class="syntax-cons">(<span class="syntax-keyword-symbol">:execute</span> <span class="syntax-keyword-symbol">:compile-toplevel</span> <span class="syntax-keyword-symbol">:load-toplevel</span>)</span>
  <span class="syntax-cons">(<a class="macro-reference" href="#macro-defmacro">defmacro</a> <span class="syntax-interned-symbol">foo</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-car">car</a> <span class="syntax-unquote">,<span class="syntax-interned-symbol">x</span></span>)</span></span>)</span>
  <span class="syntax-cons">(<a class="function-reference" href="chapter-22.xhtml#function-print">print</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">foo</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span>)</span></span>)</span>)</span>)</span>
</span></code></pre><br/>

Figure <span class="explicit-mono">()</span>&ndash; lists macros that make definitions
available both in the compilation and run-time <a class="glossary-reference" href="chapter-26.xhtml#glossary-environment">environments</a>.
It is not specified whether definitions made available in the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-compilation environment">compilation environment</a> are available in the evaluation
<a class="glossary-reference" href="chapter-26.xhtml#glossary-environment">environment</a>, nor is it specified whether they are available
in subsequent compilation units or subsequent invocations of the
compiler.  As with <a class="special-operator-reference" href="#special-operator-eval-when">eval-when</a>, these compile-time side
effects happen only when the defining macros appear at 
top level.<br/><span class="float" id="figure-Defining Macros That Affect the Compile-Time Environment"><table><tbody><tr><td><a class="macro-reference" href="#macro-declaim">declaim</a></td><td><a class="macro-reference" href="chapter-5.xhtml#macro-define-modify-macro">define-modify-macro</a></td><td><a class="macro-reference" href="chapter-5.xhtml#macro-defsetf">defsetf</a></td></tr><tr><td><a class="macro-reference" href="chapter-7.xhtml#macro-defclass">defclass</a></td><td><a class="macro-reference" href="chapter-5.xhtml#macro-define-setf-expander">define-setf-expander</a></td><td><a class="macro-reference" href="chapter-8.xhtml#macro-defstruct">defstruct</a></td></tr><tr><td><a class="macro-reference" href="chapter-5.xhtml#macro-defconstant">defconstant</a></td><td><a class="macro-reference" href="#macro-defmacro">defmacro</a></td><td><a class="macro-reference" href="chapter-4.xhtml#macro-deftype">deftype</a></td></tr><tr><td><a class="macro-reference" href="#macro-define-compiler-macro">define-compiler-macro</a></td><td><a class="macro-reference" href="chapter-11.xhtml#macro-defpackage">defpackage</a></td><td><a class="macro-reference" href="chapter-5.xhtml#macro-defvar">defvar</a></td></tr><tr><td><a class="macro-reference" href="chapter-9.xhtml#macro-define-condition">define-condition</a></td><td><a class="macro-reference" href="chapter-5.xhtml#macro-defparameter">defparameter</a></td><td/></tr></tbody></table><div class="caption">Defining Macros That Affect the Compile-Time Environment</div></span><br/>
</section><section id="section-ConstraintsOnMacros"><h5 class="section-title">Constraints on Macros and Compiler Macros</h5><br/>
Except where explicitly stated otherwise, no <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a> defined in
the <span class="explicit-roman">Common Lisp</span> standard produces an expansion that could cause any of the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-subform">subforms</a> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro form">macro form</a> to be treated as 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-top level form">top level forms</a>.  If an <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation">implementation</a> also provides a
<a class="glossary-reference" href="chapter-26.xhtml#glossary-special operator">special operator</a> definition of a <span class="explicit-roman">Common Lisp</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a>, 
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-special operator">special operator</a> definition must be semantically equivalent
in this respect.<br/><a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler macro">Compiler macro</a> expansions must also have the same
top level evaluation semantics as the <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> which they replace.
This is of concern both to <a class="glossary-reference" href="chapter-26.xhtml#glossary-conforming implementation">conforming implementations</a> and to
<a class="glossary-reference" href="chapter-26.xhtml#glossary-conforming program">conforming programs</a>.<br/></section></section></section><section id="section-LiteralsInCompiledFiles"><h3 class="section-title">Literal Objects in Compiled Files</h3><br/>

The functions <a class="function-reference" href="#function-eval">eval</a> and <a class="function-reference" href="#function-compile">compile</a> are
required to ensure that <span class="glossary-reference error">glossary:literal objects</span> referenced within the resulting
interpreted or compiled code objects are the <a class="glossary-reference" href="chapter-26.xhtml#glossary-same">same</a> as the
corresponding <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a> in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-source code">source code</a>.
<a class="function-reference" href="chapter-24.xhtml#function-compile-file">compile-file</a>, on the other hand, 
must produce a <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiled file">compiled file</a> that, when loaded with
<a class="function-reference" href="chapter-24.xhtml#function-load">load</a>, constructs the <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a> defined by the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-source code">source code</a> and produces references to them.<br/>In the case of <a class="function-reference" href="chapter-24.xhtml#function-compile-file">compile-file</a>, <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a>
constructed by <a class="function-reference" href="chapter-24.xhtml#function-load">load</a> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiled file">compiled file</a> cannot be spoken
of as being the <a class="glossary-reference" href="chapter-26.xhtml#glossary-same">same</a> as the <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a> constructed at
compile time, because the <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiled file">compiled file</a> may be loaded into a different
<a class="glossary-reference" href="chapter-26.xhtml#glossary-lisp image">Lisp image</a> than the one in which it was compiled.  This section
defines the concept of <a class="glossary-reference" href="chapter-26.xhtml#glossary-similarity">similarity</a> which relates
<a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a> in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation environment">evaluation environment</a> to the
corresponding <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a> in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-run-time environment">run-time environment</a>.<br/>The constraints on <span class="glossary-reference error">glossary:literal objects</span> described in this section
apply only to <a class="function-reference" href="chapter-24.xhtml#function-compile-file">compile-file</a>;
<a class="function-reference" href="#function-eval">eval</a> and <a class="function-reference" href="#function-compile">compile</a> do not copy or coalesce constants.<br/><section id="section-ExternalizableObjects"><h4 class="section-title">Externalizable Objects</h4><br/>The fact that the <a class="glossary-reference" href="chapter-26.xhtml#glossary-file compiler">file compiler</a> represents <a class="glossary-reference" href="chapter-26.xhtml#glossary-literal">literal</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a> 
externally in a <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiled file">compiled file</a> and must later reconstruct suitable 
equivalents of those <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a> when that <a class="glossary-reference" href="chapter-26.xhtml#glossary-file">file</a> is loaded
imposes a need for constraints on the nature of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a> that can be 
used as <a class="glossary-reference" href="chapter-26.xhtml#glossary-literal">literal</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a> in <a class="glossary-reference" href="chapter-26.xhtml#glossary-code">code</a> to be processed 
by the <a class="glossary-reference" href="chapter-26.xhtml#glossary-file compiler">file compiler</a>.<br/>An <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> that can be used as a <a class="glossary-reference" href="chapter-26.xhtml#glossary-literal">literal</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> 
in <a class="glossary-reference" href="chapter-26.xhtml#glossary-code">code</a> to be processed by the <a class="glossary-reference" href="chapter-26.xhtml#glossary-file compiler">file compiler</a> is called an
<span class="newterm">externalizable object</span>.<br/>We define that two <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a> are <span class="newterm">similar</span> if they satisfy
a two-place conceptual equivalence predicate (defined below), which is
independent of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lisp image">Lisp image</a> so that the two <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a> in
different <a class="glossary-reference" href="chapter-26.xhtml#glossary-lisp image">Lisp images</a> can be understood to be equivalent under
this predicate.  Further, by inspecting the definition of this conceptual
predicate, the programmer can anticipate what aspects of an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>
are reliably preserved by <span class="glossary-reference error">glossary:file compilation</span>.<br/>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-file compiler">file compiler</a> must cooperate with the <a class="glossary-reference" href="chapter-26.xhtml#glossary-loader">loader</a> in order to
assure that in each case where an <a class="glossary-reference" href="chapter-26.xhtml#glossary-externalizable object">externalizable object</a> is processed
as a <span class="glossary-reference error">glossary:literal object</span>, the <a class="glossary-reference" href="chapter-26.xhtml#glossary-loader">loader</a> will construct a <a class="glossary-reference" href="chapter-26.xhtml#glossary-similar">similar</a>
<a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.<br/>The set of <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a> that are <span class="newterm">externalizable objects</span> are those
for which the new conceptual term ``<a class="glossary-reference" href="chapter-26.xhtml#glossary-similar">similar</a>'' is defined, such that
when a <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiled file">compiled file</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-load">loaded</a>, an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> can be constructed
which can be shown to be <a class="glossary-reference" href="chapter-26.xhtml#glossary-similar">similar</a> to the original <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> which
existed at the time the <a class="glossary-reference" href="chapter-26.xhtml#glossary-file compiler">file compiler</a> was operating.

</section><section id="section-Similarity"><h4 class="section-title">Similarity of Literal Objects</h4><br/><section id="section-SimilarityofAggregateObjects"><h5 class="section-title">Similarity of Aggregate Objects</h5>Of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">types</a> over which <a class="glossary-reference" href="chapter-26.xhtml#glossary-similarity">similarity</a> is defined, 
some are treated as aggregate objects.  For these types, 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-similarity">similarity</a> is defined recursively.  
We say that an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> of these types has certain ``basic qualities''
and to satisfy the <a class="glossary-reference" href="chapter-26.xhtml#glossary-similarity">similarity</a> relationship, the values of the
corresponding qualities of the two <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a> must also be similar.<br/></section><section id="section-DefinitionofSimilarity"><h5 class="section-title">Definition of Similarity</h5>Two <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a> <math xmlns="http://www.w3.org/1998/Math/MathML">S</math> (in <a class="glossary-reference" href="chapter-26.xhtml#glossary-source code">source code</a>) and <math xmlns="http://www.w3.org/1998/Math/MathML">C</math> (in <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiled code">compiled code</a>)
     are defined to be <a class="glossary-reference" href="chapter-26.xhtml#glossary-similar">similar</a> if and only if 
     they are both of one of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">types</a> listed here
      (or defined by the <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation">implementation</a>) 
 and they both satisfy all additional requirements of <a class="glossary-reference" href="chapter-26.xhtml#glossary-similarity">similarity</a> 
      indicated for that <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a>.<br/><dl><dt><a class="type-reference" href="chapter-12.xhtml#type-number">number</a></dt><dd>Two <a class="glossary-reference" href="chapter-26.xhtml#glossary-number">numbers</a> <math xmlns="http://www.w3.org/1998/Math/MathML">S</math> and <math xmlns="http://www.w3.org/1998/Math/MathML">C</math> are <a class="glossary-reference" href="chapter-26.xhtml#glossary-similar">similar</a> if they are of the same <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a>
and represent the same mathematical value.<br/></dd><dt><a class="type-reference" href="chapter-13.xhtml#type-character">character</a></dt><dd>Two <a class="glossary-reference" href="chapter-26.xhtml#glossary-simple">simple</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-character">characters</a> <math xmlns="http://www.w3.org/1998/Math/MathML">S</math> and <math xmlns="http://www.w3.org/1998/Math/MathML">C</math> are <a class="glossary-reference" href="chapter-26.xhtml#glossary-similar">similar</a> 
if they have <a class="glossary-reference" href="chapter-26.xhtml#glossary-similar">similar</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-code">code</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-attribute">attributes</a>.<br/><a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation">Implementations</a> providing additional, <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-defined">implementation-defined</a> 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-attribute">attributes</a> must define whether and how <a class="glossary-reference" href="chapter-26.xhtml#glossary-non-simple">non-simple</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-character">characters</a> 
can be regarded as <a class="glossary-reference" href="chapter-26.xhtml#glossary-similar">similar</a>.<br/></dd><dt><a class="type-reference" href="chapter-10.xhtml#type-symbol">symbol</a></dt><dd>Two <a class="glossary-reference" href="chapter-26.xhtml#glossary-apparently uninterned">apparently uninterned</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbols</a> <math xmlns="http://www.w3.org/1998/Math/MathML">S</math> and <math xmlns="http://www.w3.org/1998/Math/MathML">C</math> are <a class="glossary-reference" href="chapter-26.xhtml#glossary-similar">similar</a>
if their
<a class="glossary-reference" href="chapter-26.xhtml#glossary-name">names</a>
are <a class="glossary-reference" href="chapter-26.xhtml#glossary-similar">similar</a>.<br/>Two <a class="glossary-reference" href="chapter-26.xhtml#glossary-interned">interned</a> symbols <math xmlns="http://www.w3.org/1998/Math/MathML">S</math> and <math xmlns="http://www.w3.org/1998/Math/MathML">C</math> are <a class="glossary-reference" href="chapter-26.xhtml#glossary-similar">similar</a> 
if their <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">names</a> are <a class="glossary-reference" href="chapter-26.xhtml#glossary-similar">similar</a>,
and if either <math xmlns="http://www.w3.org/1998/Math/MathML">S</math> is accessible in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-current package">current package</a> at compile time
          and <math xmlns="http://www.w3.org/1998/Math/MathML">C</math> is accessible in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-current package">current package</a> at load time,
       or <math xmlns="http://www.w3.org/1998/Math/MathML">C</math> is accessible in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-package">package</a> that is <a class="glossary-reference" href="chapter-26.xhtml#glossary-similar">similar</a> to
          the <a class="glossary-reference" href="chapter-26.xhtml#glossary-home package">home package</a> of <math xmlns="http://www.w3.org/1998/Math/MathML">S</math>.<br/>(Note that <a class="glossary-reference" href="chapter-26.xhtml#glossary-similarity">similarity</a> of
<a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbols</a> is dependent
on neither the <a class="glossary-reference" href="chapter-26.xhtml#glossary-current readtable">current readtable</a> nor how the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="chapter-23.xhtml#function-read">read</a> would
parse the <a class="glossary-reference" href="chapter-26.xhtml#glossary-character">characters</a> in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>.)

</dd><dt><a class="type-reference" href="chapter-11.xhtml#type-package">package</a></dt><dd>Two <a class="glossary-reference" href="chapter-26.xhtml#glossary-package">packages</a> <math xmlns="http://www.w3.org/1998/Math/MathML">S</math> and <math xmlns="http://www.w3.org/1998/Math/MathML">C</math> are <a class="glossary-reference" href="chapter-26.xhtml#glossary-similar">similar</a> if their <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">names</a> are <a class="glossary-reference" href="chapter-26.xhtml#glossary-similar">similar</a>.<br/>Note that although a <a class="glossary-reference" href="chapter-26.xhtml#glossary-package">package</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> is an <a class="glossary-reference" href="chapter-26.xhtml#glossary-externalizable object">externalizable object</a>,
the programmer is responsible for ensuring that the corresponding <a class="glossary-reference" href="chapter-26.xhtml#glossary-package">package</a> is
already in existence when code referencing it as a <a class="glossary-reference" href="chapter-26.xhtml#glossary-literal">literal</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> 
is <a class="glossary-reference" href="chapter-26.xhtml#glossary-load">loaded</a>.  The <a class="glossary-reference" href="chapter-26.xhtml#glossary-loader">loader</a> finds the corresponding <a class="glossary-reference" href="chapter-26.xhtml#glossary-package">package</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>
as if by calling <a class="function-reference" href="chapter-11.xhtml#function-find-package">find-package</a> with that <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> as an <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">argument</a>.
An error is signaled by the <a class="glossary-reference" href="chapter-26.xhtml#glossary-loader">loader</a> if no <a class="glossary-reference" href="chapter-26.xhtml#glossary-package">package</a> exists at load time.<br/></dd><dt><a class="type-reference" href="chapter-12.xhtml#type-random-state">random-state</a></dt><dd>Two <a class="glossary-reference" href="chapter-26.xhtml#glossary-random state">random states</a> <math xmlns="http://www.w3.org/1998/Math/MathML">S</math> and <math xmlns="http://www.w3.org/1998/Math/MathML">C</math> are <a class="glossary-reference" href="chapter-26.xhtml#glossary-similar">similar</a> if <math xmlns="http://www.w3.org/1998/Math/MathML">S</math>
would always produce the same sequence of pseudo-random numbers 
as a <a class="glossary-reference" href="chapter-26.xhtml#glossary-copy">copy</a><sub>5</sub> of <math xmlns="http://www.w3.org/1998/Math/MathML">C</math>
when given as the <span class="parameter">random-state</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">argument</a> to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="chapter-12.xhtml#function-random">random</a>, 
assuming equivalent <span class="parameter">limit</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">arguments</a> in each case.<br/>(Note that since <math xmlns="http://www.w3.org/1998/Math/MathML">C</math> has been processed by the <a class="glossary-reference" href="chapter-26.xhtml#glossary-file compiler">file compiler</a>,
it cannot be used directly as an <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">argument</a> to <a class="function-reference" href="chapter-12.xhtml#function-random">random</a>
because <a class="function-reference" href="chapter-12.xhtml#function-random">random</a> would perform a side effect.)<br/></dd><dt><a class="type-reference" href="chapter-14.xhtml#type-cons">cons</a></dt><dd>Two <a class="glossary-reference" href="chapter-26.xhtml#glossary-cons">conses</a>, <math xmlns="http://www.w3.org/1998/Math/MathML">S</math> and <math xmlns="http://www.w3.org/1998/Math/MathML">C</math>, are <a class="glossary-reference" href="chapter-26.xhtml#glossary-similar">similar</a> if
    the <a class="glossary-reference" href="chapter-26.xhtml#glossary-car">car</a><sub>2</sub> of <math xmlns="http://www.w3.org/1998/Math/MathML">S</math> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-similar">similar</a> to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-car">car</a><sub>2</sub> of <math xmlns="http://www.w3.org/1998/Math/MathML">C</math>,
and the <a class="glossary-reference" href="chapter-26.xhtml#glossary-cdr">cdr</a><sub>2</sub> of <math xmlns="http://www.w3.org/1998/Math/MathML">S</math> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-similar">similar</a> to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-cdr">cdr</a><sub>2</sub> of <math xmlns="http://www.w3.org/1998/Math/MathML">C</math>.<br/></dd><dt><a class="type-reference" href="chapter-15.xhtml#type-array">array</a></dt><dd>Two one-dimensional <a class="glossary-reference" href="chapter-26.xhtml#glossary-array">arrays</a>, <math xmlns="http://www.w3.org/1998/Math/MathML">S</math> and <math xmlns="http://www.w3.org/1998/Math/MathML">C</math>, are <a class="glossary-reference" href="chapter-26.xhtml#glossary-similar">similar</a> if
     the <a class="glossary-reference" href="chapter-26.xhtml#glossary-length">length</a> of <math xmlns="http://www.w3.org/1998/Math/MathML">S</math> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-similar">similar</a> to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-length">length</a> of <math xmlns="http://www.w3.org/1998/Math/MathML">C</math>,
     the <a class="glossary-reference" href="chapter-26.xhtml#glossary-actual array element type">actual array element type</a> of <math xmlns="http://www.w3.org/1998/Math/MathML">S</math> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-similar">similar</a> to
     the <a class="glossary-reference" href="chapter-26.xhtml#glossary-actual array element type">actual array element type</a> of <math xmlns="http://www.w3.org/1998/Math/MathML">C</math>,
 and each <a class="glossary-reference" href="chapter-26.xhtml#glossary-active">active</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-element">element</a> of <math xmlns="http://www.w3.org/1998/Math/MathML">S</math> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-similar">similar</a> to
      the corresponding <a class="glossary-reference" href="chapter-26.xhtml#glossary-element">element</a> of <math xmlns="http://www.w3.org/1998/Math/MathML">C</math>.<br/>Two <a class="glossary-reference" href="chapter-26.xhtml#glossary-array">arrays</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-rank">rank</a> other than one, <math xmlns="http://www.w3.org/1998/Math/MathML">S</math> and <math xmlns="http://www.w3.org/1998/Math/MathML">C</math>, are <a class="glossary-reference" href="chapter-26.xhtml#glossary-similar">similar</a> if
     the <a class="glossary-reference" href="chapter-26.xhtml#glossary-rank">rank</a> of <math xmlns="http://www.w3.org/1998/Math/MathML">S</math> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-similar">similar</a> to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-rank">rank</a> of <math xmlns="http://www.w3.org/1998/Math/MathML">C</math>,
     each <a class="glossary-reference" href="chapter-26.xhtml#glossary-dimension">dimension</a><sub>1</sub> of <math xmlns="http://www.w3.org/1998/Math/MathML">S</math> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-similar">similar</a> to 
      the corresponding <a class="glossary-reference" href="chapter-26.xhtml#glossary-dimension">dimension</a><sub>1</sub> of <math xmlns="http://www.w3.org/1998/Math/MathML">C</math>,
     the <a class="glossary-reference" href="chapter-26.xhtml#glossary-actual array element type">actual array element type</a> of <math xmlns="http://www.w3.org/1998/Math/MathML">S</math> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-similar">similar</a> to
     the <a class="glossary-reference" href="chapter-26.xhtml#glossary-actual array element type">actual array element type</a> of <math xmlns="http://www.w3.org/1998/Math/MathML">C</math>,
 and each <a class="glossary-reference" href="chapter-26.xhtml#glossary-element">element</a> of <math xmlns="http://www.w3.org/1998/Math/MathML">S</math> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-similar">similar</a> to
      the corresponding <a class="glossary-reference" href="chapter-26.xhtml#glossary-element">element</a> of <math xmlns="http://www.w3.org/1998/Math/MathML">C</math>.<br/>In addition,
if <math xmlns="http://www.w3.org/1998/Math/MathML">S</math> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-simple array">simple array</a>, then <math xmlns="http://www.w3.org/1998/Math/MathML">C</math> must also be a <a class="glossary-reference" href="chapter-26.xhtml#glossary-simple array">simple array</a>.
If <math xmlns="http://www.w3.org/1998/Math/MathML">S</math> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-displaced array">displaced array</a>,
       has a <a class="glossary-reference" href="chapter-26.xhtml#glossary-fill pointer">fill pointer</a>,
    or is <a class="glossary-reference" href="chapter-26.xhtml#glossary-actually adjustable">actually adjustable</a>, 
<math xmlns="http://www.w3.org/1998/Math/MathML">C</math> is permitted to lack any or all of these qualities.<br/></dd><dt><a class="type-reference" href="chapter-18.xhtml#type-hash-table">hash-table</a></dt><dd>Two <a class="glossary-reference" href="chapter-26.xhtml#glossary-hash table">hash tables</a> <math xmlns="http://www.w3.org/1998/Math/MathML">S</math> and <math xmlns="http://www.w3.org/1998/Math/MathML">C</math> are <a class="glossary-reference" href="chapter-26.xhtml#glossary-similar">similar</a> if they meet the following
three requirements:<br/><ol><li>They both have the same test 
 	    (<span class="explicit-italic"> e.g.</span>,  they are both <a class="function-reference" href="chapter-5.xhtml#function-eql">eql</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-hash table">hash tables</a>).<br/></li><li>There is a unique one-to-one correspondence between the keys of
           the two <a class="glossary-reference" href="chapter-26.xhtml#glossary-hash table">hash tables</a>, such that the corresponding keys are 
	   <a class="glossary-reference" href="chapter-26.xhtml#glossary-similar">similar</a>.<br/></li><li>For all keys, the values associated with two corresponding keys
           are <a class="glossary-reference" href="chapter-26.xhtml#glossary-similar">similar</a>.
</li></ol><br/>If there is more than one possible one-to-one correspondence between
the keys of <math xmlns="http://www.w3.org/1998/Math/MathML">S</math> and <math xmlns="http://www.w3.org/1998/Math/MathML">C</math>, the consequences are unspecified.  
A <a class="glossary-reference" href="chapter-26.xhtml#glossary-conforming program">conforming program</a> cannot use a table such as <math xmlns="http://www.w3.org/1998/Math/MathML">S</math> as an
<span class="glossary-reference error">glossary:externalizable constant</span>.<br/></dd><dt><a class="type-reference" href="chapter-19.xhtml#type-pathname">pathname</a></dt><dd>Two <a class="glossary-reference" href="chapter-26.xhtml#glossary-pathname">pathnames</a> <math xmlns="http://www.w3.org/1998/Math/MathML">S</math> and <math xmlns="http://www.w3.org/1998/Math/MathML">C</math> are <a class="glossary-reference" href="chapter-26.xhtml#glossary-similar">similar</a> if all corresponding 
<span class="glossary-reference error">glossary:pathname components</span> are <a class="glossary-reference" href="chapter-26.xhtml#glossary-similar">similar</a>.<br/></dd><dt><a class="type-reference" href="chapter-4.xhtml#type-function">function</a></dt><dd><a class="glossary-reference" href="chapter-26.xhtml#glossary-function">Functions</a> are not <a class="glossary-reference" href="chapter-26.xhtml#glossary-externalizable object">externalizable objects</a>.

</dd><dt><a class="type-reference" href="chapter-4.xhtml#type-structure-object">structure-object</a> and <a class="type-reference" href="chapter-4.xhtml#type-standard-object">standard-object</a></dt><dd>A general-purpose concept of <a class="glossary-reference" href="chapter-26.xhtml#glossary-similarity">similarity</a> does not exist for <span class="glossary-reference error">glossary:structures</span>
and <a class="glossary-reference" href="chapter-26.xhtml#glossary-standard object">standard objects</a>.
However, a <a class="glossary-reference" href="chapter-26.xhtml#glossary-conforming program">conforming program</a> is permitted to define a <a class="function-reference" href="chapter-7.xhtml#function-make-load-form">make-load-form</a>
<a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> for any <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a> <math xmlns="http://www.w3.org/1998/Math/MathML">K</math> defined by that <a class="glossary-reference" href="chapter-26.xhtml#glossary-program">program</a> that is
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-subclass">subclass</a> of either <a class="type-reference" href="chapter-4.xhtml#type-structure-object">structure-object</a> or <a class="type-reference" href="chapter-4.xhtml#type-standard-object">standard-object</a>.
The effect of such a <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> is to define that an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> <math xmlns="http://www.w3.org/1998/Math/MathML">S</math> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <math xmlns="http://www.w3.org/1998/Math/MathML">K</math>
in <a class="glossary-reference" href="chapter-26.xhtml#glossary-source code">source code</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-similar">similar</a> to an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> <math xmlns="http://www.w3.org/1998/Math/MathML">C</math> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <math xmlns="http://www.w3.org/1998/Math/MathML">K</math>
in <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiled code">compiled code</a> if <math xmlns="http://www.w3.org/1998/Math/MathML">C</math> was constructed from <a class="glossary-reference" href="chapter-26.xhtml#glossary-code">code</a> produced by 
calling <a class="function-reference" href="chapter-7.xhtml#function-make-load-form">make-load-form</a> on <math xmlns="http://www.w3.org/1998/Math/MathML">S</math>.

</dd></dl><br/></section></section><section id="section-ExtensionstoSimilarityRules"><h4 class="section-title">Extensions to Similarity Rules</h4>Some <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a>, such as <a class="glossary-reference" href="chapter-26.xhtml#glossary-stream">streams</a>, <a class="type-reference" href="chapter-23.xhtml#type-readtable">readtables</a>, and <a class="type-reference" href="chapter-4.xhtml#type-method">methods</a>
are not <a class="glossary-reference" href="chapter-26.xhtml#glossary-externalizable object">externalizable objects</a> under the definition of similarity given above.
That is, such <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a> may not portably appear as <a class="glossary-reference" href="chapter-26.xhtml#glossary-literal">literal</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a> 
in <a class="glossary-reference" href="chapter-26.xhtml#glossary-code">code</a> to be processed by the <a class="glossary-reference" href="chapter-26.xhtml#glossary-file compiler">file compiler</a>. <br/>An <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation">implementation</a> is permitted to extend the rules of similarity, 
so that other kinds of <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a> are <a class="glossary-reference" href="chapter-26.xhtml#glossary-externalizable object">externalizable objects</a>
for that <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation">implementation</a>.<br/>If for some kind of <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>, <a class="glossary-reference" href="chapter-26.xhtml#glossary-similarity">similarity</a> is
neither defined by this specification 
	    nor by the <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation">implementation</a>, 
then the <a class="glossary-reference" href="chapter-26.xhtml#glossary-file compiler">file compiler</a> must signal an error upon encountering such 
an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> as a <span class="glossary-reference error">glossary:literal constant</span>.<br/></section><section id="section-CallingMakeLoadForm"><h4 class="section-title">Additional Constraints on Externalizable Objects</h4>If two <span class="glossary-reference error">glossary:literal objects</span> appearing in the source code for a single file
processed with
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-file compiler">file compiler</a> 
are the <a class="glossary-reference" href="chapter-26.xhtml#glossary-identical">identical</a>,
the corresponding <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a> in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiled code">compiled code</a> 
must also be the <a class="glossary-reference" href="chapter-26.xhtml#glossary-identical">identical</a>.
With the exception of <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbols</a> and <a class="glossary-reference" href="chapter-26.xhtml#glossary-package">packages</a>, any two
<span class="glossary-reference error">glossary:literal objects</span>
in <a class="glossary-reference" href="chapter-26.xhtml#glossary-code">code</a> being processed by
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-file compiler">file compiler</a>
may be <a class="glossary-reference" href="chapter-26.xhtml#glossary-coalesce">coalesced</a> 
if and only if they are <a class="glossary-reference" href="chapter-26.xhtml#glossary-similar">similar</a>; 
if they are either both <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbols</a> or both <a class="glossary-reference" href="chapter-26.xhtml#glossary-package">packages</a>,
they may only be <a class="glossary-reference" href="chapter-26.xhtml#glossary-coalesce">coalesced</a> if and only if they are <a class="glossary-reference" href="chapter-26.xhtml#glossary-identical">identical</a>.

<a class="glossary-reference" href="chapter-26.xhtml#glossary-object">Objects</a> containing circular references can 
be <a class="glossary-reference" href="chapter-26.xhtml#glossary-externalizable object">externalizable objects</a>.
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-file compiler">file compiler</a> is required to preserve <a class="function-reference" href="chapter-5.xhtml#function-eql">eql</a>ness of 
substructures within a <a class="glossary-reference" href="chapter-26.xhtml#glossary-file">file</a>.
Preserving <a class="function-reference" href="chapter-5.xhtml#function-eql">eql</a>ness means that subobjects that are
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-same">same</a>
in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-source code">source code</a> must 
be
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-same">same</a>
in the corresponding <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiled code">compiled code</a>.

In addition, the following are constraints on the handling of
<span class="glossary-reference error">glossary:literal objects</span> by the <a class="glossary-reference" href="chapter-26.xhtml#glossary-file compiler">file compiler</a>:<br/><ul><li><span class="explicit-bold"> array:</span> If an <a class="glossary-reference" href="chapter-26.xhtml#glossary-array">array</a> in the source code is a
<a class="glossary-reference" href="chapter-26.xhtml#glossary-simple array">simple array</a>, then the corresponding <a class="glossary-reference" href="chapter-26.xhtml#glossary-array">array</a>
in the compiled code will also be a <a class="glossary-reference" href="chapter-26.xhtml#glossary-simple array">simple array</a>.  If
an <a class="glossary-reference" href="chapter-26.xhtml#glossary-array">array</a> in the source code is displaced, has a 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-fill pointer">fill pointer</a>, or is <a class="glossary-reference" href="chapter-26.xhtml#glossary-actually adjustable">actually adjustable</a>, the corresponding 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-array">array</a> in the compiled code might lack any or all of these
qualities. If an <a class="glossary-reference" href="chapter-26.xhtml#glossary-array">array</a> in the source code has a fill
pointer, then the corresponding <a class="glossary-reference" href="chapter-26.xhtml#glossary-array">array</a> in the compiled
code might be only the size implied by the fill pointer.<br/> </li><li><span class="explicit-bold"> packages:</span> The loader is required to find the
corresponding <a class="glossary-reference" href="chapter-26.xhtml#glossary-package">package</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> as if by calling 
<a class="function-reference" href="chapter-11.xhtml#function-find-package">find-package</a> with the package name as an argument.  
An error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-11.xhtml#type-package-error">package-error</a> is signaled if no 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-package">package</a> of that name exists at load time.<br/> </li><li><span class="explicit-bold"> random-state:</span> A constant <a class="glossary-reference" href="chapter-26.xhtml#glossary-random state">random state</a>
object cannot be used as the state argument 
to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="chapter-12.xhtml#function-random">random</a> because <a class="function-reference" href="chapter-12.xhtml#function-random">random</a> modifies this data structure.<br/></li><li><span class="explicit-bold"> structure, standard-object:</span>
<a class="glossary-reference" href="chapter-26.xhtml#glossary-object">Objects</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-4.xhtml#type-structure-object">structure-object</a> and <a class="type-reference" href="chapter-4.xhtml#type-standard-object">standard-object</a>
may appear in compiled constants if there is an
appropriate <a class="function-reference" href="chapter-7.xhtml#function-make-load-form">make-load-form</a> method defined for that
<a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a>.<br/>
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-file compiler">file compiler</a> calls <a class="function-reference" href="chapter-7.xhtml#function-make-load-form">make-load-form</a> on any <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>
that is referenced as a <span class="glossary-reference error">glossary:literal object</span> if the <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> is a
<a class="glossary-reference" href="chapter-26.xhtml#glossary-generalized instance">generalized instance</a> of <a class="type-reference" href="chapter-4.xhtml#type-standard-object">standard-object</a>,
<a class="type-reference" href="chapter-4.xhtml#type-structure-object">structure-object</a>, <a class="type-reference" href="chapter-9.xhtml#type-condition">condition</a>, or any of a 
(possibly empty) <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a> set of other <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">classes</a>.
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-file compiler">file compiler</a> only calls <a class="function-reference" href="chapter-7.xhtml#function-make-load-form">make-load-form</a> once for
any given <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> within a single <a class="glossary-reference" href="chapter-26.xhtml#glossary-file">file</a>.
 <br/></li> <li><span class="explicit-bold"> symbol:</span> In order to guarantee that <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiled file">compiled files</a> can be <a class="glossary-reference" href="chapter-26.xhtml#glossary-load">loaded</a>
  correctly, users must ensure that the <a class="glossary-reference" href="chapter-26.xhtml#glossary-package">packages</a> referenced in those <a class="glossary-reference" href="chapter-26.xhtml#glossary-file">files</a>
  are defined consistently at compile time and load time.  <a class="glossary-reference" href="chapter-26.xhtml#glossary-conforming program">Conforming programs</a>
  must satisfy the following requirements:<br/><ol><li>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-current package">current package</a> when a <a class="glossary-reference" href="chapter-26.xhtml#glossary-top level form">top level form</a> in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-file">file</a>
      is processed by <a class="function-reference" href="chapter-24.xhtml#function-compile-file">compile-file</a> must be the same as the <a class="glossary-reference" href="chapter-26.xhtml#glossary-current package">current package</a>
      when the <a class="glossary-reference" href="chapter-26.xhtml#glossary-code">code</a> corresponding to that <a class="glossary-reference" href="chapter-26.xhtml#glossary-top level form">top level form</a> in the
      <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiled file">compiled file</a> is executed by <a class="function-reference" href="chapter-24.xhtml#function-load">load</a>.  In particular:<br/><dl><dt>a.</dt><dd>Any <a class="glossary-reference" href="chapter-26.xhtml#glossary-top level form">top level form</a> in a <a class="glossary-reference" href="chapter-26.xhtml#glossary-file">file</a> that alters
	  the <a class="glossary-reference" href="chapter-26.xhtml#glossary-current package">current package</a> must change it to a <a class="glossary-reference" href="chapter-26.xhtml#glossary-package">package</a>
	  of the same <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> both at compile time and at load time.<br/></dd><dt>b.</dt><dd>If the first <a class="glossary-reference" href="chapter-26.xhtml#glossary-non-atomic">non-atomic</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-top level form">top level form</a> in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-file">file</a>
	  is not an <a class="macro-reference" href="chapter-11.xhtml#macro-in-package">in-package</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>, then the <a class="glossary-reference" href="chapter-26.xhtml#glossary-current package">current package</a>
	  at the time <a class="function-reference" href="chapter-24.xhtml#function-load">load</a> is called must be a <a class="glossary-reference" href="chapter-26.xhtml#glossary-package">package</a> with the 
	  same <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> as the package that was the <a class="glossary-reference" href="chapter-26.xhtml#glossary-current package">current package</a>
	  at the time <a class="function-reference" href="chapter-24.xhtml#function-compile-file">compile-file</a> was called.
</dd></dl><br/></li><li>For all <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbols</a> 
      appearing lexically within a <a class="glossary-reference" href="chapter-26.xhtml#glossary-top level form">top level form</a> that
      were <a class="glossary-reference" href="chapter-26.xhtml#glossary-accessible">accessible</a> in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-package">package</a> that was the <a class="glossary-reference" href="chapter-26.xhtml#glossary-current package">current package</a>
      during processing of that <a class="glossary-reference" href="chapter-26.xhtml#glossary-top level form">top level form</a> at compile time, but
      whose <a class="glossary-reference" href="chapter-26.xhtml#glossary-home package">home package</a> was another <a class="glossary-reference" href="chapter-26.xhtml#glossary-package">package</a>, at load time there must
      be a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> with the same <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> that is <a class="glossary-reference" href="chapter-26.xhtml#glossary-accessible">accessible</a> in both the
      load-time <a class="glossary-reference" href="chapter-26.xhtml#glossary-current package">current package</a> and in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-package">package</a>
      with the same <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> as the
      compile-time <a class="glossary-reference" href="chapter-26.xhtml#glossary-home package">home package</a>. <br/></li><li>For all <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbols</a> represented in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiled file">compiled file</a> 
      that were <a class="glossary-reference" href="chapter-26.xhtml#glossary-external symbol">external symbols</a> in
      their <a class="glossary-reference" href="chapter-26.xhtml#glossary-home package">home package</a> at compile time, there must be a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> with the
      same <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> that is an <a class="glossary-reference" href="chapter-26.xhtml#glossary-external symbol">external symbol</a> in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-package">package</a> 
      with the same <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> at load time.
</li></ol><br/>  If any of these conditions do not hold, the <a class="glossary-reference" href="chapter-26.xhtml#glossary-package">package</a> in which the <a class="glossary-reference" href="chapter-26.xhtml#glossary-loader">loader</a> looks
  for the affected <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbols</a> is unspecified.  <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation">Implementations</a> are permitted 
  to signal an error or to define this behavior.
</li></ul><br/></section></section><section id="section-FileCompilerExceptions"><h3 class="section-title">Exceptional Situations in the Compiler</h3><br/>


<a class="function-reference" href="#function-compile">compile</a> and <a class="function-reference" href="chapter-24.xhtml#function-compile-file">compile-file</a> are permitted to
signal errors and warnings, including errors due to compile-time
processing of <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-eval-when">eval-when</a> <span class="syntax-cons">(<span class="syntax-keyword-symbol">:compile-toplevel</span>)</span> <span class="syntax-interned-symbol">...</span>)</span>
</span></code></pre> forms,
macro expansion, and conditions signaled by the compiler itself.<br/><a class="glossary-reference" href="chapter-26.xhtml#glossary-condition">Conditions</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-9.xhtml#type-error">error</a> might be signaled by the compiler
in situations where the compilation cannot proceed without intervention.  <br/>In addition to situations for which the standard specifies that
<a class="glossary-reference" href="chapter-26.xhtml#glossary-condition">conditions</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-9.xhtml#type-warning">warning</a> must or might be signaled,
warnings might be signaled in situations where the compiler can
determine that the consequences are undefined or that a run-time
error will be signaled.  Examples of this situation are as follows: 
    violating type declarations,
    altering or assigning the value of a constant defined with <a class="macro-reference" href="chapter-5.xhtml#macro-defconstant">defconstant</a>,
    calling built-in Lisp functions with a wrong number of arguments or malformed keyword
      argument lists, 
and using unrecognized declaration specifiers.<br/>The compiler is permitted to issue warnings about matters of
programming style as conditions of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-9.xhtml#type-style-warning">style-warning</a>.
Examples of this situation are as follows:
      redefining a function using a different argument list,
      calling a function with a wrong number of arguments,
      not declaring <a class="declaration-reference" href="#declaration-ignore">ignore</a> of a local variable that is not referenced,
  and referencing a variable declared <a class="declaration-reference" href="#declaration-ignore">ignore</a>.

Both <a class="function-reference" href="#function-compile">compile</a> and <a class="function-reference" href="chapter-24.xhtml#function-compile-file">compile-file</a> are permitted
(but not required) to <a class="glossary-reference" href="chapter-26.xhtml#glossary-establish">establish</a> a <a class="glossary-reference" href="chapter-26.xhtml#glossary-handler">handler</a>
for <a class="glossary-reference" href="chapter-26.xhtml#glossary-condition">conditions</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-9.xhtml#type-error">error</a>.  For example, they
might signal a warning, and restart compilation from some
<a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a> point in order to let the 
compilation proceed without manual intervention.<br/>Both <a class="function-reference" href="#function-compile">compile</a> and <a class="function-reference" href="chapter-24.xhtml#function-compile-file">compile-file</a> return three
values, the second two indicating whether the source code being compiled
contained errors and whether style warnings were issued.<br/> 
Some warnings might be deferred until the end of compilation. 
See <a class="macro-reference" href="chapter-24.xhtml#macro-with-compilation-unit">with-compilation-unit</a>.<br/>
</section>
</section><section id="section-Declarations"><h2 class="section-title">Declarations</h2>

<span class="newterm">Declarations</span> provide a way of specifying information for use by
program processors, such as the evaluator or the compiler.<br/><span class="newterm">Local declarations</span>
can be embedded in executable code using <a class="symbol-reference" href="#symbol-declare">declare</a>.
<span class="newterm">Global declarations</span>, 
or <span class="newterm">proclamations</span>,
are established by <a class="function-reference" href="#function-proclaim">proclaim</a> or <a class="macro-reference" href="#macro-declaim">declaim</a>.<br/>The <a class="special-operator-reference" href="#special-operator-the">the</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-special form">special form</a> provides a shorthand notation for 
making a <a class="glossary-reference" href="chapter-26.xhtml#glossary-local declaration">local declaration</a> about the <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> of the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a> of a given <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>.

The consequences are undefined if a program violates a <a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration">declaration</a>
or a <a class="glossary-reference" href="chapter-26.xhtml#glossary-proclamation">proclamation</a>.<br/><section id="section-MinimalDeclarationProcessingRequirements"><h3 class="section-title">Minimal Declaration Processing Requirements</h3>In general, an <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation">implementation</a> is free to ignore
<a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration specifier">declaration specifiers</a> except for the
     <a class="declaration-reference" href="#declaration-declaration">declaration</a><a id="symbol-declaration"></a>,
     <a class="declaration-reference" href="#declaration-notinline">notinline</a><a id="symbol-notinline"></a>,
     <span class="declaration-reference error">declaration:safety</span><a id="symbol-safety"></a>,
 and <a class="declaration-reference" href="#declaration-special">special</a><a id="symbol-special"></a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration specifier">declaration specifiers</a>.<br/>A <a class="declaration-reference" href="#declaration-declaration">declaration</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration">declaration</a> must suppress warnings
about unrecognized <a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration">declarations</a> of the kind that it declares.
If an <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation">implementation</a> does not produce warnings about
unrecognized declarations, it may safely ignore this <a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration">declaration</a>.<br/>A <a class="declaration-reference" href="#declaration-notinline">notinline</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration">declaration</a> must be recognized by any <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation">implementation</a>
that supports inline functions or <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler macro">compiler macros</a> in order to disable those facilities.
An <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation">implementation</a> that does not use inline functions or <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler macro">compiler macros</a>
may safely ignore this <a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration">declaration</a>.<br/>A <span class="declaration-reference error">declaration:safety</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration">declaration</a> that increases the current safety level 
must always be recognized.  An <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation">implementation</a> that always processes 
code as if safety were high may safely ignore this <a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration">declaration</a>.<br/>A <a class="declaration-reference" href="#declaration-special">special</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration">declaration</a> must be processed by all <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation">implementations</a>.<br/></section><section id="section-DeclarationSpecifiers"><h3 class="section-title">Declaration Specifiers</h3>A <span class="newterm">declaration specifier</span> is an <a class="glossary-reference" href="chapter-26.xhtml#glossary-expression">expression</a> that can appear at
top level of a <a class="symbol-reference" href="#symbol-declare">declare</a> expression or a <a class="macro-reference" href="#macro-declaim">declaim</a> form, or as 
the argument to <a class="function-reference" href="#function-proclaim">proclaim</a>.
It is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> whose <a class="glossary-reference" href="chapter-26.xhtml#glossary-car">car</a> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration identifier">declaration identifier</a>,
and whose <a class="glossary-reference" href="chapter-26.xhtml#glossary-cdr">cdr</a> is data interpreted according to rules specific to
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration identifier">declaration identifier</a>.<br/></section><section id="section-DeclarationIdentifiers"><h3 class="section-title">Declaration Identifiers</h3>Figure <span class="explicit-mono">()</span>&ndash; shows a list of all 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration identifier">declaration identifiers</a><a id="index/term-declaration identifier"></a> 
defined by this standard.<br/><span class="float" id="figure-Common Lisp Declaration Identifiers"><table><tbody><tr><td><a class="declaration-reference" href="#declaration-declaration">declaration</a></td><td><a class="declaration-reference" href="#declaration-ignore">ignore</a></td><td><a class="declaration-reference" href="#declaration-special">special</a></td></tr><tr><td><a class="declaration-reference" href="#declaration-dynamic-extent">dynamic-extent</a></td><td><a class="declaration-reference" href="#declaration-inline">inline</a></td><td><a class="declaration-reference" href="#declaration-type">type</a></td></tr><tr><td><a class="declaration-reference" href="#declaration-ftype">ftype</a></td><td><a class="declaration-reference" href="#declaration-notinline">notinline</a></td><td/></tr><tr><td><a class="declaration-reference" href="#declaration-ignorable">ignorable</a></td><td><a class="declaration-reference" href="#declaration-optimize">optimize</a></td><td/></tr></tbody></table><div class="caption">Common Lisp Declaration Identifiers</div></span>

An implementation is free to support other (<a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-defined">implementation-defined</a>)
<a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration identifier">declaration identifiers</a> as well.  
A warning might be issued
if a <a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration identifier">declaration identifier</a> 
is not among those defined above,
is not defined by the <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation">implementation</a>,
is not a <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a>, 
and has not been declared in a <a class="declaration-reference" href="#declaration-declaration">declaration</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-proclamation">proclamation</a>.<br/>
<section id="section-ShorthandnotationforTypeDeclarations"><h4 class="section-title">Shorthand notation for Type Declarations</h4>A <a class="glossary-reference" href="chapter-26.xhtml#glossary-type specifier">type specifier</a> can be used as a <a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration identifier">declaration identifier</a>.
<pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="parameter">type-specifier</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">var</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span>)</span>
</span></code></pre> is taken as shorthand for
<pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="symbol-reference" href="chapter-25.xhtml#symbol-type">type</a> <span class="parameter">type-specifier</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">var</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span>)</span>
</span></code></pre>.<br/></section></section><section id="section-DeclScope"><h3 class="section-title">Declaration Scope</h3><br/>
<a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration">Declarations</a> can be divided into two kinds: those that apply to the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variables</a> or <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">functions</a>; and those that
do not apply to <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a>.<br/>A <a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration">declaration</a> that appears at the head of a binding <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> 
and applies to a <a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variable</a> or <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> 
made by that <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> is called a <span class="newterm">bound declaration</span>; 
such a <a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration">declaration</a> affects both the <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> and
any references within the <a class="glossary-reference" href="chapter-26.xhtml#glossary-scope">scope</a> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration">declaration</a>.  <br/><a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration">Declarations</a> that are not <a class="glossary-reference" href="chapter-26.xhtml#glossary-bound declaration">bound declarations</a> are called
<span class="newterm">free declarations</span>.<br/>A <a class="glossary-reference" href="chapter-26.xhtml#glossary-free declaration">free declaration</a> in a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> <math xmlns="http://www.w3.org/1998/Math/MathML">F1</math> that applies to a <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a>
for a <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> <math xmlns="http://www.w3.org/1998/Math/MathML">N</math> <a class="glossary-reference" href="chapter-26.xhtml#glossary-establish">established</a> by some <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> <math xmlns="http://www.w3.org/1998/Math/MathML">F2</math>
of which <math xmlns="http://www.w3.org/1998/Math/MathML">F1</math> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-subform">subform</a>
affects only references to <math xmlns="http://www.w3.org/1998/Math/MathML">N</math> within <math xmlns="http://www.w3.org/1998/Math/MathML">F1</math>; it does not to apply to
other references to <math xmlns="http://www.w3.org/1998/Math/MathML">N</math> outside of <math xmlns="http://www.w3.org/1998/Math/MathML">F1</math>, nor does it affect the manner
in which the <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> of <math xmlns="http://www.w3.org/1998/Math/MathML">N</math> by <math xmlns="http://www.w3.org/1998/Math/MathML">F2</math> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-establish">established</a>.<br/><a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration">Declarations</a> that do not apply to <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a> can only appear 
as <a class="glossary-reference" href="chapter-26.xhtml#glossary-free declaration">free declarations</a>.<br/>

The <a class="glossary-reference" href="chapter-26.xhtml#glossary-scope">scope</a> of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-bound declaration">bound declaration</a> is the same as the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical scope">lexical scope</a>
of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> to which it applies;
for <a class="glossary-reference" href="chapter-26.xhtml#glossary-special variable">special variables</a>,
this means the <a class="glossary-reference" href="chapter-26.xhtml#glossary-scope">scope</a> that the <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> 
would have had had it been a <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical binding">lexical binding</a>.<br/>Unless explicitly stated otherwise, the <a class="glossary-reference" href="chapter-26.xhtml#glossary-scope">scope</a> of a 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-free declaration">free declaration</a> includes only the body <a class="glossary-reference" href="chapter-26.xhtml#glossary-subform">subforms</a> of 
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> at whose head it appears, and no other <a class="glossary-reference" href="chapter-26.xhtml#glossary-subform">subforms</a>.
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-scope">scope</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-free declaration">free declarations</a> specifically does not
include <a class="glossary-reference" href="chapter-26.xhtml#glossary-initialization form">initialization forms</a> for <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a> established
by the <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> containing the <a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration">declarations</a>.<br/>Some <a class="glossary-reference" href="chapter-26.xhtml#glossary-iteration form">iteration forms</a> include step, end-test, or result 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-subform">subforms</a> that are also included in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-scope">scope</a>
of <a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration">declarations</a> that appear in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-iteration form">iteration form</a>.
Specifically, the <a class="glossary-reference" href="chapter-26.xhtml#glossary-iteration form">iteration forms</a> and <a class="glossary-reference" href="chapter-26.xhtml#glossary-subform">subforms</a> involved
are:<br/><ul><li><a class="macro-reference" href="chapter-6.xhtml#macro-do">do</a>, <a class="macro-reference" href="chapter-6.xhtml#macro-do*">do*</a>:  
  <span class="parameter">step-forms</span>, <span class="parameter">end-test-form</span>, and <span class="parameter">result-forms</span>.
</li><li><a class="macro-reference" href="chapter-6.xhtml#macro-dolist">dolist</a>, <a class="macro-reference" href="chapter-6.xhtml#macro-dotimes">dotimes</a>:
  <span class="parameter">result-form</span>
</li><li><a class="macro-reference" href="chapter-11.xhtml#macro-do-all-symbols">do-all-symbols</a>, <a class="macro-reference" href="chapter-11.xhtml#macro-do-external-symbols">do-external-symbols</a>, <a class="macro-reference" href="chapter-11.xhtml#macro-do-symbols">do-symbols</a>:
  <span class="parameter">result-form</span>
</li></ul>
<section id="section-ExamplesofDeclarationScope"><h4 class="section-title">Examples of Declaration Scope</h4>Here is an example illustrating the <a class="glossary-reference" href="chapter-26.xhtml#glossary-scope">scope</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-bound declaration">bound declarations</a>.<br/><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-number">1</span>)</span>)</span>                <span class="syntax-line-comment syntax-comment">;[1] 1st occurrence of x
</span>   <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-special">special</a> <span class="syntax-interned-symbol">x</span>)</span>)</span>     <span class="syntax-line-comment syntax-comment">;[2] 2nd occurrence of x
</span>   <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-number">2</span>)</span>)</span>              <span class="syntax-line-comment syntax-comment">;[3] 3rd occurrence of x
</span>     <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">old-x</span> <span class="syntax-interned-symbol">x</span>)</span>         <span class="syntax-line-comment syntax-comment">;[4] 4th occurrence of x
</span>           <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-number">3</span>)</span>)</span>            <span class="syntax-line-comment syntax-comment">;[5] 5th occurrence of x
</span>       <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-special">special</a> <span class="syntax-interned-symbol">x</span>)</span>)</span> <span class="syntax-line-comment syntax-comment">;[6] 6th occurrence of x
</span>       <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">old-x</span> <span class="syntax-interned-symbol">x</span>)</span>)</span>)</span>)</span>     ;[7] 7th occurrence of x
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-number">2</span> <span class="syntax-number">3</span>)</span>
</span></code></pre><br/>The first occurrence of <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">x</span>
</span></code></pre> <a class="glossary-reference" href="chapter-26.xhtml#glossary-establish">establishes</a> a <a class="glossary-reference" href="chapter-26.xhtml#glossary-dynamic binding">dynamic binding</a>
of <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">x</span>
</span></code></pre> because of the <a class="declaration-reference" href="#declaration-special">special</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration">declaration</a> for <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">x</span>
</span></code></pre>
in the second line.  The third occurrence of <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">x</span>
</span></code></pre> <a class="glossary-reference" href="chapter-26.xhtml#glossary-establish">establishes</a> a
<a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical binding">lexical binding</a> of <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">x</span>
</span></code></pre> (because there is no <a class="declaration-reference" href="#declaration-special">special</a>
<a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration">declaration</a> in the corresponding <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>).
The fourth occurrence of <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">x</span>
</span></code></pre> <span class="glossary-reference error">glossary:x</span> is a reference to the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical binding">lexical binding</a> of <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">x</span>
</span></code></pre> established in the third line.
The fifth occurrence of <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">x</span>
</span></code></pre> <a class="glossary-reference" href="chapter-26.xhtml#glossary-establish">establishes</a> a <a class="glossary-reference" href="chapter-26.xhtml#glossary-dynamic binding">dynamic binding</a>
of <span class="glossary-reference error">glossary:x</span> for the body of the <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> that begins on
that line because of the <a class="declaration-reference" href="#declaration-special">special</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration">declaration</a> for <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">x</span>
</span></code></pre>
in the sixth line. The reference to <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">x</span>
</span></code></pre> in the fourth line is not
affected by the <a class="declaration-reference" href="#declaration-special">special</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration">declaration</a> in the sixth line 
because that reference is not within the ``would-be <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical scope">lexical scope</a>''
of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variable</a> <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">x</span>
</span></code></pre> in the fifth line.  The reference to <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">x</span>
</span></code></pre>
in the seventh line is a reference to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-dynamic binding">dynamic binding</a> of <span class="glossary-reference error">glossary:x</span>
<a class="glossary-reference" href="chapter-26.xhtml#glossary-establish">established</a> in the fifth line.<br/>
Here is another example, to illustrate the <a class="glossary-reference" href="chapter-26.xhtml#glossary-scope">scope</a> of a
<a class="glossary-reference" href="chapter-26.xhtml#glossary-free declaration">free declaration</a>.  In the following:<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-cons">(<a class="lambda-list-keyword-reference" href="#lambda-list-keyword-optional">&amp;OPTIONAL</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">foo</span> <span class="syntax-number">1</span>)</span>)</span>)</span> <span class="syntax-line-comment syntax-comment">;[1]
</span>  <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-notinline">notinline</a> <span class="syntax-interned-symbol">foo</span>)</span>)</span>     <span class="syntax-line-comment syntax-comment">;[2]
</span>  <span class="syntax-cons">(<span class="syntax-interned-symbol">foo</span> <span class="syntax-interned-symbol">x</span>)</span>)</span>                      ;[3]
</span></code></pre><br/>the <a class="glossary-reference" href="chapter-26.xhtml#glossary-call">call</a> to <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">foo</span>
</span></code></pre> in the first line might be 
compiled inline even though the <a class="glossary-reference" href="chapter-26.xhtml#glossary-call">call</a> to <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">foo</span>
</span></code></pre> in
the third line must not be.  This is because
the <a class="declaration-reference" href="#declaration-notinline">notinline</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration">declaration</a>
for <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">foo</span>
</span></code></pre> in the second line applies only to the body on the
third line.  In order to suppress inlining for both <a class="glossary-reference" href="chapter-26.xhtml#glossary-call">calls</a>, 
one might write:<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-locally">locally</a> <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-notinline">notinline</a> <span class="syntax-interned-symbol">foo</span>)</span>)</span> <span class="syntax-line-comment syntax-comment">;[1]
</span>  <span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-cons">(<a class="lambda-list-keyword-reference" href="#lambda-list-keyword-optional">&amp;OPTIONAL</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">foo</span> <span class="syntax-number">1</span>)</span>)</span>)</span>  <span class="syntax-line-comment syntax-comment">;[2]
</span>    <span class="syntax-cons">(<span class="syntax-interned-symbol">foo</span> <span class="syntax-interned-symbol">x</span>)</span>)</span>)</span>                      ;[3]
</span></code></pre><br/>or, alternatively:<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-cons">(<a class="lambda-list-keyword-reference" href="#lambda-list-keyword-optional">&amp;OPTIONAL</a>                               <span class="syntax-line-comment syntax-comment">;[1]
</span>           <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-locally">locally</a> <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-notinline">notinline</a> <span class="syntax-interned-symbol">foo</span>)</span>)</span> <span class="syntax-line-comment syntax-comment">;[2]
</span>                <span class="syntax-cons">(<span class="syntax-interned-symbol">foo</span> <span class="syntax-number">1</span>)</span>)</span>)</span>)</span>                       <span class="syntax-line-comment syntax-comment">;[3]
</span>  <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-notinline">notinline</a> <span class="syntax-interned-symbol">foo</span>)</span>)</span>                      <span class="syntax-line-comment syntax-comment">;[4]
</span>  <span class="syntax-cons">(<span class="syntax-interned-symbol">foo</span> <span class="syntax-interned-symbol">x</span>)</span>)</span>                                       ;[5]
</span></code></pre><br/>
Finally, here is an example that shows the <a class="glossary-reference" href="chapter-26.xhtml#glossary-scope">scope</a> of
<a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration">declarations</a> in an <a class="glossary-reference" href="chapter-26.xhtml#glossary-iteration form">iteration form</a>.<br/><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span>  <span class="syntax-number">1</span>)</span>)</span>                     <span class="syntax-line-comment syntax-comment">;[1]
</span>   <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-special">special</a> <span class="syntax-interned-symbol">x</span>)</span>)</span>           <span class="syntax-line-comment syntax-comment">;[2]
</span>     <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-number">2</span>)</span>)</span>                  <span class="syntax-line-comment syntax-comment">;[3]
</span>       <span class="syntax-cons">(<a class="macro-reference" href="chapter-6.xhtml#macro-dotimes">dotimes</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">x</span>)</span>            <span class="syntax-line-comment syntax-comment">;[4]
</span>         <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-special">special</a> <span class="syntax-interned-symbol">x</span>)</span>)</span>)</span>)</span>)</span>  ;[5]
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">1</span>
</span></code></pre><br/>In this example, the first reference to <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">x</span>
</span></code></pre> on the fourth line is to
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical binding">lexical binding</a> of <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">x</span>
</span></code></pre> established on the third line.
However, the second occurrence of <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">x</span>
</span></code></pre> on the fourth line lies within
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-scope">scope</a> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-free declaration">free declaration</a> on the fifth line
(because this is the <span class="parameter">result-form</span> of the <a class="macro-reference" href="chapter-6.xhtml#macro-dotimes">dotimes</a>)
and therefore refers to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-dynamic binding">dynamic binding</a> of <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">x</span>
</span></code></pre>.

</section></section>
</section><section id="section-LambdaLists"><h2 class="section-title">Lambda Lists</h2>

A <span class="newterm">lambda list</span> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> that
specifies a set of <a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter">parameters</a> (sometimes called <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda variable">lambda variables</a>)
and a protocol for receiving <span class="glossary-reference error">glossary:values</span> for those <a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter">parameters</a>.<br/>
There are several kinds of <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda lists</a>.<br/><span class="float" id="figure-What Kind of Lambda Lists to Use"><table><thead><th>Context</th><th>Kind of Lambda List</th></thead><tbody><tr><td><a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>                        </td><td> <a class="glossary-reference" href="chapter-26.xhtml#glossary-ordinary lambda list">ordinary lambda list</a>         </td></tr><tr><td><a class="macro-reference" href="#macro-defmacro">defmacro</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>                     </td><td> <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro lambda list">macro lambda list</a>            </td></tr><tr><td><a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda expression">lambda expression</a>                          </td><td> <a class="glossary-reference" href="chapter-26.xhtml#glossary-ordinary lambda list">ordinary lambda list</a>         </td></tr><tr><td><a class="special-operator-reference" href="chapter-5.xhtml#special-operator-flet">flet</a> local <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> definition   </td><td> <a class="glossary-reference" href="chapter-26.xhtml#glossary-ordinary lambda list">ordinary lambda list</a>         </td></tr><tr><td><a class="special-operator-reference" href="chapter-5.xhtml#special-operator-labels">labels</a> local <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> definition </td><td> <a class="glossary-reference" href="chapter-26.xhtml#glossary-ordinary lambda list">ordinary lambda list</a>         </td></tr><tr><td><a class="macro-reference" href="chapter-9.xhtml#macro-handler-case">handler-case</a> <span class="parameter">clause</span> specification
						   </td><td> <a class="glossary-reference" href="chapter-26.xhtml#glossary-ordinary lambda list">ordinary lambda list</a>         </td></tr><tr><td><a class="macro-reference" href="chapter-9.xhtml#macro-restart-case">restart-case</a> <span class="parameter">clause</span> specification
						   </td><td> <a class="glossary-reference" href="chapter-26.xhtml#glossary-ordinary lambda list">ordinary lambda list</a>         </td></tr><tr><td><a class="special-operator-reference" href="chapter-5.xhtml#special-operator-macrolet">macrolet</a> local <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a> definition   </td><td> <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro lambda list">macro lambda list</a>            </td></tr><tr><td><a class="macro-reference" href="chapter-7.xhtml#macro-define-method-combination">define-method-combination</a>		   </td><td> <a class="glossary-reference" href="chapter-26.xhtml#glossary-ordinary lambda list">ordinary lambda list</a>	 </td></tr><tr><td><a class="macro-reference" href="chapter-7.xhtml#macro-define-method-combination">define-method-combination</a> <span class="keyword">:arguments</span> option </td><td>
       <a class="glossary-reference" href="chapter-26.xhtml#glossary-define-method-combination arguments lambda list">define-method-combination arguments lambda list</a>         </td></tr><tr><td><a class="macro-reference" href="chapter-8.xhtml#macro-defstruct">defstruct</a> <span class="keyword">:constructor</span> option       </td><td> <a class="glossary-reference" href="chapter-26.xhtml#glossary-boa lambda list">boa lambda list</a>              </td></tr><tr><td><a class="macro-reference" href="chapter-7.xhtml#macro-defgeneric">defgeneric</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>                   </td><td> <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function lambda list">generic function lambda list</a> </td></tr><tr><td><a class="macro-reference" href="chapter-7.xhtml#macro-defgeneric">defgeneric</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> clause          </td><td> <a class="glossary-reference" href="chapter-26.xhtml#glossary-specialized lambda list">specialized lambda list</a>      </td></tr><tr><td><a class="macro-reference" href="chapter-7.xhtml#macro-defmethod">defmethod</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>                    </td><td> <a class="glossary-reference" href="chapter-26.xhtml#glossary-specialized lambda list">specialized lambda list</a>      </td></tr><tr><td><a class="macro-reference" href="chapter-5.xhtml#macro-defsetf">defsetf</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>                      </td><td> <a class="glossary-reference" href="chapter-26.xhtml#glossary-defsetf lambda list">defsetf lambda list</a>          </td></tr><tr><td><a class="macro-reference" href="chapter-5.xhtml#macro-define-setf-expander">define-setf-expander</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>	   </td><td> <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro lambda list">macro lambda list</a>	         </td></tr><tr><td><a class="macro-reference" href="chapter-4.xhtml#macro-deftype">deftype</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>			   </td><td> <a class="glossary-reference" href="chapter-26.xhtml#glossary-deftype lambda list">deftype lambda list</a>		 </td></tr><tr><td><a class="macro-reference" href="chapter-5.xhtml#macro-destructuring-bind">destructuring-bind</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>	   </td><td> <a class="glossary-reference" href="chapter-26.xhtml#glossary-destructuring lambda list">destructuring lambda list</a>    </td></tr><tr><td><a class="macro-reference" href="#macro-define-compiler-macro">define-compiler-macro</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>       </td><td> <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro lambda list">macro lambda list</a>             </td></tr><tr><td><a class="macro-reference" href="chapter-5.xhtml#macro-define-modify-macro">define-modify-macro</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>         </td><td> <a class="glossary-reference" href="chapter-26.xhtml#glossary-define-modify-macro lambda list">define-modify-macro lambda list</a> </td></tr></tbody></table><div class="caption">What Kind of Lambda Lists to Use</div></span><br/>Figure <span class="explicit-mono">()</span>&ndash; lists some <a class="glossary-reference" href="chapter-26.xhtml#glossary-defined name">defined names</a> that are applicable
to <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda lists</a>.<br/><span class="float" id="figure-Defined names applicable to lambda lists"><table><tbody><tr><td><a class="constant-reference" href="chapter-5.xhtml#constant-lambda-list-keywords">lambda-list-keywords</a></td><td><a class="constant-reference" href="chapter-5.xhtml#constant-lambda-parameters-limit">lambda-parameters-limit</a></td><td/></tr></tbody></table><div class="caption">Defined names applicable to lambda lists</div></span><br/>
<section id="section-OrdinaryLambdaLists"><h3 class="section-title">Ordinary Lambda Lists</h3><br/>An <span class="newterm">ordinary lambda list</span> is used to describe how a set of
<a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">arguments</a> is received by an <span class="glossary-reference error">glossary:ordinary</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a>.  
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-defined name">defined names</a> in Figure <span class="explicit-mono">()</span>&ndash; are those which use
<a class="glossary-reference" href="chapter-26.xhtml#glossary-ordinary lambda list">ordinary lambda lists</a>:<br/><span class="float" id="figure-Standardized Operators that use Ordinary Lambda Lists"><table><tbody><tr><td><a class="macro-reference" href="chapter-7.xhtml#macro-define-method-combination">define-method-combination</a></td><td><a class="macro-reference" href="chapter-9.xhtml#macro-handler-case">handler-case</a></td><td><a class="macro-reference" href="chapter-9.xhtml#macro-restart-case">restart-case</a></td></tr><tr><td><a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a></td><td><a class="special-operator-reference" href="chapter-5.xhtml#special-operator-labels">labels</a></td><td/></tr><tr><td><a class="special-operator-reference" href="chapter-5.xhtml#special-operator-flet">flet</a></td><td><a class="macro-reference" href="#macro-lambda">lambda</a></td><td/></tr></tbody></table><div class="caption">Standardized Operators that use Ordinary Lambda Lists</div></span><br/>An <a class="glossary-reference" href="chapter-26.xhtml#glossary-ordinary lambda list">ordinary lambda list</a> can contain the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list keyword">lambda list keywords</a> shown
in Figure <span class="explicit-mono">()</span>&ndash;.<br/><span class="float" id="figure-Lambda List Keywords used by Ordinary Lambda Lists"><table><tbody><tr><td><a class="lambda-list-keyword-reference" href="#lambda-list-keyword-allow-other-keys">allow-other-keys</a></td><td><a class="lambda-list-keyword-reference" href="#lambda-list-keyword-key">key</a></td><td><a class="lambda-list-keyword-reference" href="#lambda-list-keyword-rest">rest</a></td></tr><tr><td><a class="lambda-list-keyword-reference" href="#lambda-list-keyword-aux">aux</a></td><td><a class="lambda-list-keyword-reference" href="#lambda-list-keyword-optional">optional</a></td><td/></tr></tbody></table><div class="caption">Lambda List Keywords used by Ordinary Lambda Lists</div></span><br/>Each <a class="glossary-reference" href="chapter-26.xhtml#glossary-element">element</a> of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a> is either a parameter specifier
or a <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list keyword">lambda list keyword</a>.
Implementations are free to provide additional <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list keyword">lambda list keywords</a>.
For a list of all <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list keyword">lambda list keywords</a>
used by the implementation, see <a class="constant-reference" href="chapter-5.xhtml#constant-lambda-list-keywords">lambda-list-keywords</a>.<br/>The syntax for <a class="glossary-reference" href="chapter-26.xhtml#glossary-ordinary lambda list">ordinary lambda lists</a> is as follows: <br/><br/>


<tr><td>lambda-list</td><td>::=</td><td><span class="explicit-roman">(</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">var</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span><br/>
		      <span class="explicit-mono">[</span><span class="lambda-list-keyword">&amp;optional</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">var</span> |
		       <span class="explicit-roman">(</span><span class="parameter">var</span> <span class="explicit-roman">[</span>init-form <span class="explicit-roman">[</span>supplied-p-parameter<span class="explicit-roman">]</span><span class="explicit-roman">]</span><span class="explicit-roman">)</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span><span class="explicit-mono">]</span><br/>
		      <span class="explicit-mono">[</span><span class="lambda-list-keyword">&amp;rest</span> <span class="parameter">var</span><span class="explicit-mono">]</span><br/>
		      <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">[</span>
</span></code></pre><span class="lambda-list-keyword">&amp;key</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">var</span> |
		          	 <span class="explicit-roman">(</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">var</span> | 
					       <span class="explicit-roman">(</span><span class="parameter">keyword-name</span> <span class="parameter">var</span><span class="explicit-roman">)</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math>
				 	<span class="explicit-roman">[</span>init-form <span class="explicit-roman">[</span>supplied-p-parameter<span class="explicit-roman">]</span><span class="explicit-roman">]</span><span class="explicit-roman">)</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span>
				  <span class="explicit-roman">[</span><span class="lambda-list-keyword">&amp;allow-other-keys</span><span class="explicit-roman">]</span><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">]</span>
</span></code></pre><br/>
		      <span class="explicit-mono">[</span><span class="lambda-list-keyword">&amp;aux</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">var</span> | <span class="explicit-roman">(</span><span class="parameter">var</span> <span class="explicit-roman">[</span><span class="parameter">init-form</span><span class="explicit-roman">]</span><span class="explicit-roman">)</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span><span class="explicit-mono">]</span><span class="explicit-roman">)</span><br/></td></tr><br/>A <span class="parameter">var</span> or <span class="parameter">supplied-p-parameter</span> must be a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>
that is not the name of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-constant variable">constant variable</a>.<br/>An <span class="parameter">init-form</span> can be any <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>.
Whenever any <span class="parameter">init-form</span> is evaluated for any parameter
specifier, that <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> may refer to any parameter variable to
the left of the specifier in which the <span class="parameter">init-form</span> appears,
including any <span class="parameter">supplied-p-parameter</span> variables, and may rely 
on the fact that no other parameter variable has yet been bound
(including its own parameter variable).<br/>A <span class="parameter">keyword-name</span> can be any <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>, 
but by convention is normally a <a class="glossary-reference" href="chapter-26.xhtml#glossary-keyword">keyword</a><sub>1</sub>;
all <a class="glossary-reference" href="chapter-26.xhtml#glossary-standardized">standardized</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">functions</a> follow that convention.<br/>An <a class="glossary-reference" href="chapter-26.xhtml#glossary-ordinary lambda list">ordinary lambda list</a> has five parts, any or all of which may be empty.
For information about the treatment of argument mismatches,
see <span class="section-reference error">section:FuncallErrorChecking.</span><br/>
<section id="section-Specifiersfortherequiredparameters"><h4 class="section-title">Specifiers for the required parameters</h4>These are all the parameter specifiers up to 
the first <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list keyword">lambda list keyword</a>;
if there are no <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list keyword">lambda list keywords</a>, 
then all the specifiers are for required parameters.
Each required parameter is specified by a parameter variable <span class="parameter">var</span>.
<span class="parameter">var</span> is bound as a lexical variable unless it is declared <a class="declaration-reference" href="#declaration-special">special</a>.<br/>If there are <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">n</span>
</span></code></pre> required parameters (<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">n</span>
</span></code></pre> may be zero), 
there must be at least <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">n</span>
</span></code></pre> passed arguments, and the 
required parameters are bound to the first <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">n</span>
</span></code></pre> passed arguments;
see <span class="section-reference error">section:FuncallErrorChecking.</span>
The other parameters are then processed using any remaining arguments.<br/></section><section id="section-Specifiersforoptionalparameters"><h4 class="section-title">Specifiers for optional parameters</h4><a id="lambda-list-keyword-optional"></a><br/>If <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-optional">optional</a> is present,
the optional parameter specifiers are those following 
<a class="lambda-list-keyword-reference" href="#lambda-list-keyword-optional">optional</a> 
up to the next <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list keyword">lambda list keyword</a> or the end of the list.
If optional parameters are specified, then each one is processed as
follows.  If any unprocessed arguments remain, then the parameter variable
<span class="parameter">var</span> is bound to the next remaining argument, just as for a required
parameter.  If no arguments remain, however, then <span class="parameter">init-form</span> 
is evaluated, and the parameter variable
is bound to the resulting value 
(or to <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a> if no <span class="parameter">init-form</span> appears
in the parameter specifier).
If another variable name <span class="parameter">supplied-p-parameter</span> 
appears in the specifier, it is bound
to <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a> if an argument had been available, and to <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a> if no
argument remained (and therefore <span class="parameter">init-form</span> had to be evaluated).
<span class="parameter">Supplied-p-parameter</span>
is bound not to an argument but to a value indicating whether or not
an argument had been supplied for the corresponding <span class="parameter">var</span>.<br/></section><section id="section-Aspecifierforarestparameter"><h4 class="section-title">A specifier for a rest parameter</h4><a id="lambda-list-keyword-rest"></a><br/><a class="lambda-list-keyword-reference" href="#lambda-list-keyword-rest">rest</a>, if present, must be followed by a single <a class="glossary-reference" href="chapter-26.xhtml#glossary-rest parameter">rest parameter</a>
specifier, which in turn must be followed by another 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list keyword">lambda list keyword</a> or the end of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a>.  After all
optional parameter specifiers have been processed, then there may or
may not be a <a class="glossary-reference" href="chapter-26.xhtml#glossary-rest parameter">rest parameter</a>.  If there is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-rest parameter">rest parameter</a>, it is
bound to a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> of all as-yet-unprocessed arguments.  If
no unprocessed arguments remain, the <a class="glossary-reference" href="chapter-26.xhtml#glossary-rest parameter">rest parameter</a> is bound to the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-empty list">empty list</a>.  If there is no <a class="glossary-reference" href="chapter-26.xhtml#glossary-rest parameter">rest parameter</a> and there are no 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-keyword parameter">keyword parameters</a>, then an error 
should be signaled if
any unprocessed arguments remain; see <span class="section-reference error">section:FuncallErrorChecking.</span>
The value of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-rest parameter">rest parameter</a>
is permitted, but not required, to share structure with the
last argument to <a class="function-reference" href="chapter-5.xhtml#function-apply">apply</a>.<br/></section><a id="lambda-list-keyword-key"></a>
<a id="lambda-list-keyword-allow-other-keys"></a><br/><section id="section-Specifiersforkeywordparameters"><h4 class="section-title">Specifiers for keyword parameters</h4>If <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-key">key</a> 
is present, all specifiers up to the next <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list keyword">lambda list keyword</a>
or the end of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> are keyword parameter specifiers.
When keyword parameters are processed,
the same arguments are processed that
would be made into a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> for a <a class="glossary-reference" href="chapter-26.xhtml#glossary-rest parameter">rest parameter</a>.
It is permitted to specify both <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-rest">rest</a> and <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-key">key</a>.
In this case the remaining arguments are used for both purposes;
that is, all remaining arguments are made into a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> for the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-rest parameter">rest parameter</a>, and are also processed for the <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-key">key</a> parameters.
If <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-key">key</a> is specified, there must remain
an even number of arguments; see <span class="section-reference error">section:OddNumberOfKeyArgs.</span>These arguments are considered as pairs,
the first argument in each pair being interpreted as a name
and the second as the corresponding value.
The first <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> of each pair must be a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>;
see <span class="section-reference error">section:InvalidKeyArgs.</span>
The keyword parameter specifiers may optionally be followed by the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list keyword">lambda list keyword</a> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-allow-other-keys">allow-other-keys</a>.<br/>In each keyword parameter specifier must be a name <span class="parameter">var</span> for
the parameter variable.
If the <span class="parameter">var</span> appears alone or in a <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="parameter">var</span> <span class="parameter">init-form</span>)</span>
</span></code></pre>
combination, the keyword name used when matching <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">arguments</a> to <a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter">parameters</a>
is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> in the <a class="package-reference" href="chapter-11.xhtml#package-keyword">keyword</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-package">package</a> whose <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> is the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-same">same</a> (under <a class="function-reference" href="chapter-16.xhtml#function-string=">string=</a>) as <span class="parameter">var</span>'s.
If the notation <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-cons">(<span class="parameter">keyword-name</span> <span class="parameter">var</span>)</span> <span class="parameter">init-form</span>)</span>
</span></code></pre> is used,
then the keyword name used to match <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">arguments</a> to <a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter">parameters</a> is
<span class="parameter">keyword-name</span>, which may be a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> in any <a class="glossary-reference" href="chapter-26.xhtml#glossary-package">package</a>.
(Of course, if it is not a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> in the <a class="package-reference" href="chapter-11.xhtml#package-keyword">keyword</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-package">package</a>,
it does not necessarily self-evaluate, so care must be taken when calling the function
to make sure that normal evaluation still yields the keyword name.)
Thus<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">foo</span> <span class="syntax-cons">(<a class="lambda-list-keyword-reference" href="#lambda-list-keyword-key">&amp;KEY</a> <span class="syntax-interned-symbol">radix</span> <span class="syntax-cons">(<a class="symbol-reference" href="chapter-25.xhtml#symbol-type">type</a> <span class="syntax-quote">'<a class="type-reference" href="chapter-12.xhtml#type-integer">integer</a></span>)</span>)</span> <span class="syntax-interned-symbol">...</span>)</span>
</span></code></pre>
means exactly the same as<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">foo</span> <span class="syntax-cons">(<a class="lambda-list-keyword-reference" href="#lambda-list-keyword-key">&amp;KEY</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-keyword-symbol">:radix</span> <span class="syntax-interned-symbol">radix</span>)</span>)</span> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-keyword-symbol">:type</span> <a class="symbol-reference" href="chapter-25.xhtml#symbol-type">type</a>)</span> <span class="syntax-quote">'<a class="type-reference" href="chapter-12.xhtml#type-integer">integer</a></span>)</span>)</span> <span class="syntax-interned-symbol">...</span>)</span>
</span></code></pre><br/>The keyword parameter specifiers are, like all parameter specifiers,
effectively processed from left to right.  For each keyword parameter
specifier, if there is an argument pair whose name matches that
specifier's name (that is, the names are <a class="function-reference" href="chapter-5.xhtml#function-eq">eq</a>), then the
parameter variable for that specifier is bound to the second item (the
value) of that argument pair.  If more than one such argument pair
matches, the leftmost argument pair is used.  If no such argument pair
exists, then the <span class="parameter">init-form</span> for that specifier is evaluated and
the parameter variable is bound to that value (or to <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a> if no
<span class="parameter">init-form</span> was specified).  <span class="parameter">supplied-p-parameter</span> is
treated as for <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-optional">optional</a> parameters: it is bound to <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a> if there
was a matching argument pair, and to <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a> otherwise.<br/>Unless keyword argument checking is suppressed,
an argument pair must a name matched by a parameter specifier;
see <span class="section-reference error">section:UnrecognizedKeyArgs.</span><br/>If keyword argument checking is suppressed, 
then it is permitted for an argument pair
to match no parameter specifier, and the argument pair is ignored, but
such an argument pair is accessible through the <a class="glossary-reference" href="chapter-26.xhtml#glossary-rest parameter">rest parameter</a> if
one was supplied.  The purpose of these mechanisms is to allow sharing
of argument lists among several <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda expression">lambda expressions</a> and to
allow either the caller or the called <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda expression">lambda expression</a> to
specify that such sharing may be taking place.<br/>Note that if <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-key">key</a> is present, a keyword argument of <span class="keyword">:allow-other-keys</span>
is always permitted&mdash;regardless of whether the associated value is <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>
or <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>.  However, if the value is <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>, other non-matching
keywords are not tolerated (unless <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-allow-other-keys">allow-other-keys</a> was used).<br/>Furthermore, if the receiving argument list specifies a regular argument which
would be flagged by <span class="keyword">:allow-other-keys</span>, then <span class="keyword">:allow-other-keys</span> has both
its special-cased meaning (identifying whether additional keywords are permitted)
and its normal meaning (data flow into the function in question).

<section id="section-SuppressingKeyArgChecks"><h5 class="section-title">Suppressing Keyword Argument Checking</h5><br/>If <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-allow-other-keys">allow-other-keys</a> was specified in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a> of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a>,
<a class="glossary-reference" href="chapter-26.xhtml#glossary-keyword">keyword</a><sub>2</sub> <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">argument</a> checking is suppressed in calls
to that <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a>.<br/>If the <span class="keyword">:allow-other-keys</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">argument</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a> in a call to a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a>,
<a class="glossary-reference" href="chapter-26.xhtml#glossary-keyword">keyword</a><sub>2</sub> <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">argument</a> checking is suppressed 
in that call.<br/>The <span class="keyword">:allow-other-keys</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">argument</a> is permissible in all situations involving
<a class="glossary-reference" href="chapter-26.xhtml#glossary-keyword">keyword</a><sub>2</sub> <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">arguments</a>, even when its associated <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a>
is <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>.<br/><section id="section-ExamplesofSuppressingKeywordArgumentChecking"><h6 class="section-title">Examples of Suppressing Keyword Argument Checking</h6><pre><code><span class="syntax-root">;;; The caller can supply :ALLOW-OTHER-KEYS T to suppress checking.
 <span class="syntax-cons">(<span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-cons">(<a class="lambda-list-keyword-reference" href="#lambda-list-keyword-key">&amp;KEY</a> <span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-keyword-symbol">:x</span> <span class="syntax-number">1</span> <span class="syntax-keyword-symbol">:y</span> <span class="syntax-number">2</span> <span class="syntax-keyword-symbol">:allow-other-keys</span> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">1</span>
;;; The callee can use &amp;ALLOW-OTHER-KEYS to suppress checking.
 <span class="syntax-cons">(<span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-cons">(<a class="lambda-list-keyword-reference" href="#lambda-list-keyword-key">&amp;KEY</a> <span class="syntax-interned-symbol">x</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-allow-other-keys">&amp;ALLOW-OTHER-KEYS</a>)</span> <span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-keyword-symbol">:x</span> <span class="syntax-number">1</span> <span class="syntax-keyword-symbol">:y</span> <span class="syntax-number">2</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">1</span>
;;; :ALLOW-OTHER-KEYS NIL is always permitted.
 <span class="syntax-cons">(<span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-cons">(<a class="lambda-list-keyword-reference" href="#lambda-list-keyword-key">&amp;KEY</a>)</span> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a>)</span> <span class="syntax-keyword-symbol">:allow-other-keys</span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a>
;;; As with other keyword arguments, only the left-most pair
;;; named :ALLOW-OTHER-KEYS has any effect.
 <span class="syntax-cons">(<span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-cons">(<a class="lambda-list-keyword-reference" href="#lambda-list-keyword-key">&amp;KEY</a> <span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-interned-symbol">x</span>)</span> 
  <span class="syntax-keyword-symbol">:x</span> <span class="syntax-number">1</span> <span class="syntax-keyword-symbol">:y</span> <span class="syntax-number">2</span> <span class="syntax-keyword-symbol">:allow-other-keys</span> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a> <span class="syntax-keyword-symbol">:allow-other-keys</span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">1</span>
;;; Only the left-most pair named :ALLOW-OTHER-KEYS has any effect,
;;; so in safe code this signals a PROGRAM-ERROR (and might enter the
;;; debugger).  In unsafe code, the consequences are undefined.
 <span class="syntax-cons">(<span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-cons">(<a class="lambda-list-keyword-reference" href="#lambda-list-keyword-key">&amp;KEY</a> <span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-interned-symbol">x</span>)</span>                   <span class="syntax-line-comment syntax-comment">;This call is not valid
</span>  <span class="syntax-keyword-symbol">:x</span> <span class="syntax-number">1</span> <span class="syntax-keyword-symbol">:y</span> <span class="syntax-number">2</span> <span class="syntax-keyword-symbol">:allow-other-keys</span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-keyword-symbol">:allow-other-keys</span> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a>)</span>
</span></code></pre><br/></section></section></section><section id="section-Specifiersforvariables"><h4 class="section-title">Specifiers for <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-aux">aux</a> variables</h4><a id="lambda-list-keyword-aux"></a><br/>These are not really parameters.  If the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list keyword">lambda list keyword</a>
<a class="lambda-list-keyword-reference" href="#lambda-list-keyword-aux">aux</a> is present, all specifiers after it are auxiliary variable
specifiers.  After all parameter specifiers have been processed, the
auxiliary variable specifiers (those following <span class="lambda-list-keyword">&amp;aux</span>) are processed
from left to right.  For each one, <span class="parameter">init-form</span> is evaluated and
<span class="parameter">var</span> is bound to that value (or to <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a> if no <span class="parameter">init-form</span>
was specified).  <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-aux">aux</a> variable processing is analogous to
<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let*">let*</a> processing.<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-aux">&amp;AUX</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-car">car</a> <span class="syntax-interned-symbol">x</span>)</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">b</span> <span class="syntax-number">2</span>)</span> <span class="syntax-interned-symbol">c</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span>)</span>)</span>
   <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>â‰¡</mo></math> <span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let*">let*</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-car">car</a> <span class="syntax-interned-symbol">x</span>)</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">b</span> <span class="syntax-number">2</span>)</span> <span class="syntax-interned-symbol">c</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span>)</span>)</span>)</span>
</span></code></pre><br/></section><section id="section-ExamplesofOrdinaryLambdaLists"><h4 class="section-title">Examples of Ordinary Lambda Lists</h4>Here are some examples involving <a class="glossary-reference" href="chapter-26.xhtml#glossary-optional parameter">optional parameters</a> and <a class="glossary-reference" href="chapter-26.xhtml#glossary-rest parameter">rest parameters</a>:<br/><pre><code><span class="syntax-root"> <span class="syntax-cons">(<span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-*">*</a> <span class="syntax-interned-symbol">b</span> <span class="syntax-number">3</span>)</span>)</span>)</span> <span class="syntax-number">4</span> <span class="syntax-number">5</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">19</span>
 <span class="syntax-cons">(<span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-optional">&amp;OPTIONAL</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">b</span> <span class="syntax-number">2</span>)</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-*">*</a> <span class="syntax-interned-symbol">b</span> <span class="syntax-number">3</span>)</span>)</span>)</span> <span class="syntax-number">4</span> <span class="syntax-number">5</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">19</span>
 <span class="syntax-cons">(<span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-optional">&amp;OPTIONAL</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">b</span> <span class="syntax-number">2</span>)</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-*">*</a> <span class="syntax-interned-symbol">b</span> <span class="syntax-number">3</span>)</span>)</span>)</span> <span class="syntax-number">4</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">10</span>
 <span class="syntax-cons">(<span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-cons">(<a class="lambda-list-keyword-reference" href="#lambda-list-keyword-optional">&amp;OPTIONAL</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-number">2</span> <span class="syntax-interned-symbol">b</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">c</span> <span class="syntax-number">3</span> <span class="syntax-interned-symbol">d</span>)</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-rest">&amp;REST</a> <span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">d</span> <span class="syntax-interned-symbol">x</span>)</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-number">2</span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-number">3</span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span>
 <span class="syntax-cons">(<span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-cons">(<a class="lambda-list-keyword-reference" href="#lambda-list-keyword-optional">&amp;OPTIONAL</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-number">2</span> <span class="syntax-interned-symbol">b</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">c</span> <span class="syntax-number">3</span> <span class="syntax-interned-symbol">d</span>)</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-rest">&amp;REST</a> <span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">d</span> <span class="syntax-interned-symbol">x</span>)</span>)</span> <span class="syntax-number">6</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-number">6</span> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a> <span class="syntax-number">3</span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span>
 <span class="syntax-cons">(<span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-cons">(<a class="lambda-list-keyword-reference" href="#lambda-list-keyword-optional">&amp;OPTIONAL</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-number">2</span> <span class="syntax-interned-symbol">b</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">c</span> <span class="syntax-number">3</span> <span class="syntax-interned-symbol">d</span>)</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-rest">&amp;REST</a> <span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">d</span> <span class="syntax-interned-symbol">x</span>)</span>)</span> <span class="syntax-number">6</span> <span class="syntax-number">3</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-number">6</span> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a> <span class="syntax-number">3</span> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span>
 <span class="syntax-cons">(<span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-cons">(<a class="lambda-list-keyword-reference" href="#lambda-list-keyword-optional">&amp;OPTIONAL</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-number">2</span> <span class="syntax-interned-symbol">b</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">c</span> <span class="syntax-number">3</span> <span class="syntax-interned-symbol">d</span>)</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-rest">&amp;REST</a> <span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">d</span> <span class="syntax-interned-symbol">x</span>)</span>)</span> <span class="syntax-number">6</span> <span class="syntax-number">3</span> <span class="syntax-number">8</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-number">6</span> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a> <span class="syntax-number">3</span> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a> <span class="syntax-cons">(<span class="syntax-number">8</span>)</span>)</span>
 <span class="syntax-cons">(<span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-cons">(<a class="lambda-list-keyword-reference" href="#lambda-list-keyword-optional">&amp;OPTIONAL</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-number">2</span> <span class="syntax-interned-symbol">b</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">c</span> <span class="syntax-number">3</span> <span class="syntax-interned-symbol">d</span>)</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-rest">&amp;REST</a> <span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">d</span> <span class="syntax-interned-symbol">x</span>)</span>)</span>
  <span class="syntax-number">6</span> <span class="syntax-number">3</span> <span class="syntax-number">8</span> <span class="syntax-number">9</span> <span class="syntax-number">10</span> <span class="syntax-number">11</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-number">6</span> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a> <span class="syntax-number">3</span> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a> <span class="syntax-cons">(<span class="syntax-number">8</span> <span class="syntax-number">9</span> <span class="syntax-number">10</span> <span class="syntax-number">11</span>)</span>)</span>
</span></code></pre><br/>Here are some examples involving <a class="glossary-reference" href="chapter-26.xhtml#glossary-keyword parameter">keyword parameters</a>:<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-key">&amp;KEY</a> <span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">d</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">d</span>)</span>)</span> <span class="syntax-number">1</span> <span class="syntax-number">2</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">2</span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span>
<span class="syntax-cons">(<span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-key">&amp;KEY</a> <span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">d</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">d</span>)</span>)</span> <span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-keyword-symbol">:c</span> <span class="syntax-number">6</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">6</span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span>
<span class="syntax-cons">(<span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-key">&amp;KEY</a> <span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">d</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">d</span>)</span>)</span> <span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-keyword-symbol">:d</span> <span class="syntax-number">8</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">2</span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-number">8</span>)</span>
<span class="syntax-cons">(<span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-key">&amp;KEY</a> <span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">d</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">d</span>)</span>)</span> <span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-keyword-symbol">:c</span> <span class="syntax-number">6</span> <span class="syntax-keyword-symbol">:d</span> <span class="syntax-number">8</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">6</span> <span class="syntax-number">8</span>)</span>
<span class="syntax-cons">(<span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-key">&amp;KEY</a> <span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">d</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">d</span>)</span>)</span> <span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-keyword-symbol">:d</span> <span class="syntax-number">8</span> <span class="syntax-keyword-symbol">:c</span> <span class="syntax-number">6</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">6</span> <span class="syntax-number">8</span>)</span>
<span class="syntax-cons">(<span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-key">&amp;KEY</a> <span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">d</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">d</span>)</span>)</span> <span class="syntax-keyword-symbol">:a</span> <span class="syntax-number">1</span> <span class="syntax-keyword-symbol">:d</span> <span class="syntax-number">8</span> <span class="syntax-keyword-symbol">:c</span> <span class="syntax-number">6</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-keyword-symbol">:a</span> <span class="syntax-number">1</span> <span class="syntax-number">6</span> <span class="syntax-number">8</span>)</span>
<span class="syntax-cons">(<span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-key">&amp;KEY</a> <span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">d</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">d</span>)</span>)</span> <span class="syntax-keyword-symbol">:a</span> <span class="syntax-keyword-symbol">:b</span> <span class="syntax-keyword-symbol">:c</span> <span class="syntax-keyword-symbol">:d</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-keyword-symbol">:a</span> <span class="syntax-keyword-symbol">:b</span> <span class="syntax-keyword-symbol">:d</span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span>
<span class="syntax-cons">(<span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-key">&amp;KEY</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-keyword-symbol">:sea</span> <span class="syntax-interned-symbol">c</span>)</span>)</span> <span class="syntax-interned-symbol">d</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">d</span>)</span>)</span> <span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-keyword-symbol">:sea</span> <span class="syntax-number">6</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">6</span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span>
<span class="syntax-cons">(<span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-key">&amp;KEY</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">c</span>)</span>)</span> <span class="syntax-interned-symbol">d</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">d</span>)</span>)</span> <span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">c</span></span> <span class="syntax-number">6</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">6</span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span>
</span></code></pre><br/>Here are some examples involving <a class="glossary-reference" href="chapter-26.xhtml#glossary-optional parameter">optional parameters</a>, <a class="glossary-reference" href="chapter-26.xhtml#glossary-rest parameter">rest parameters</a>,
and <a class="glossary-reference" href="chapter-26.xhtml#glossary-keyword parameter">keyword parameters</a> together:<br/><pre><code><span class="syntax-root"> <span class="syntax-cons">(<span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-optional">&amp;OPTIONAL</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">b</span> <span class="syntax-number">3</span>)</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-rest">&amp;REST</a> <span class="syntax-interned-symbol">x</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-key">&amp;KEY</a> <span class="syntax-interned-symbol">c</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">d</span> <span class="syntax-interned-symbol">a</span>)</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">d</span> <span class="syntax-interned-symbol">x</span>)</span>)</span> <span class="syntax-number">1</span>)</span>   
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">3</span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-number">1</span> <span class="syntax-symbol">()</span>)</span> 
 <span class="syntax-cons">(<span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-optional">&amp;OPTIONAL</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">b</span> <span class="syntax-number">3</span>)</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-rest">&amp;REST</a> <span class="syntax-interned-symbol">x</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-key">&amp;KEY</a> <span class="syntax-interned-symbol">c</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">d</span> <span class="syntax-interned-symbol">a</span>)</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">d</span> <span class="syntax-interned-symbol">x</span>)</span>)</span> <span class="syntax-number">1</span> <span class="syntax-number">2</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">2</span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-number">1</span> <span class="syntax-symbol">()</span>)</span>
 <span class="syntax-cons">(<span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-optional">&amp;OPTIONAL</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">b</span> <span class="syntax-number">3</span>)</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-rest">&amp;REST</a> <span class="syntax-interned-symbol">x</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-key">&amp;KEY</a> <span class="syntax-interned-symbol">c</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">d</span> <span class="syntax-interned-symbol">a</span>)</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">d</span> <span class="syntax-interned-symbol">x</span>)</span>)</span> <span class="syntax-keyword-symbol">:c</span> <span class="syntax-number">7</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-keyword-symbol">:c</span> <span class="syntax-number">7</span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-keyword-symbol">:c</span> <span class="syntax-symbol">()</span>)</span>
 <span class="syntax-cons">(<span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-optional">&amp;OPTIONAL</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">b</span> <span class="syntax-number">3</span>)</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-rest">&amp;REST</a> <span class="syntax-interned-symbol">x</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-key">&amp;KEY</a> <span class="syntax-interned-symbol">c</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">d</span> <span class="syntax-interned-symbol">a</span>)</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">d</span> <span class="syntax-interned-symbol">x</span>)</span>)</span> <span class="syntax-number">1</span> <span class="syntax-number">6</span> <span class="syntax-keyword-symbol">:c</span> <span class="syntax-number">7</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">6</span> <span class="syntax-number">7</span> <span class="syntax-number">1</span> <span class="syntax-cons">(<span class="syntax-keyword-symbol">:c</span> <span class="syntax-number">7</span>)</span>)</span>
 <span class="syntax-cons">(<span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-optional">&amp;OPTIONAL</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">b</span> <span class="syntax-number">3</span>)</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-rest">&amp;REST</a> <span class="syntax-interned-symbol">x</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-key">&amp;KEY</a> <span class="syntax-interned-symbol">c</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">d</span> <span class="syntax-interned-symbol">a</span>)</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">d</span> <span class="syntax-interned-symbol">x</span>)</span>)</span> <span class="syntax-number">1</span> <span class="syntax-number">6</span> <span class="syntax-keyword-symbol">:d</span> <span class="syntax-number">8</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">6</span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-number">8</span> <span class="syntax-cons">(<span class="syntax-keyword-symbol">:d</span> <span class="syntax-number">8</span>)</span>)</span>
 <span class="syntax-cons">(<span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-optional">&amp;OPTIONAL</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">b</span> <span class="syntax-number">3</span>)</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-rest">&amp;REST</a> <span class="syntax-interned-symbol">x</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-key">&amp;KEY</a> <span class="syntax-interned-symbol">c</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">d</span> <span class="syntax-interned-symbol">a</span>)</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">d</span> <span class="syntax-interned-symbol">x</span>)</span>)</span> <span class="syntax-number">1</span> <span class="syntax-number">6</span> <span class="syntax-keyword-symbol">:d</span> <span class="syntax-number">8</span> <span class="syntax-keyword-symbol">:c</span> <span class="syntax-number">9</span> <span class="syntax-keyword-symbol">:d</span> <span class="syntax-number">10</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">6</span> <span class="syntax-number">9</span> <span class="syntax-number">8</span> <span class="syntax-cons">(<span class="syntax-keyword-symbol">:d</span> <span class="syntax-number">8</span> <span class="syntax-keyword-symbol">:c</span> <span class="syntax-number">9</span> <span class="syntax-keyword-symbol">:d</span> <span class="syntax-number">10</span>)</span>)</span>
</span></code></pre><br/>As an example of the use of <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-allow-other-keys">allow-other-keys</a> and
<span class="keyword">:allow-other-keys</span>, consider a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> that takes two named
arguments of its own and also accepts additional named arguments to be
passed to <a class="function-reference" href="chapter-15.xhtml#function-make-array">make-array</a>:<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">array-of-strings</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">str</span> <span class="syntax-interned-symbol">dims</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-rest">&amp;REST</a> <span class="syntax-interned-symbol">named-pairs</span>
                         <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-key">&amp;KEY</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">start</span> <span class="syntax-number">0</span>)</span> <span class="syntax-interned-symbol">end</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-allow-other-keys">&amp;ALLOW-OTHER-KEYS</a>)</span>
  <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-apply">apply</a> <span class="syntax-function">#'<a class="function-reference" href="chapter-15.xhtml#function-make-array">make-array</a></span> <span class="syntax-interned-symbol">dims</span>
         <span class="syntax-keyword-symbol">:initial-element</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-17.xhtml#function-subseq">subseq</a> <span class="syntax-interned-symbol">str</span> <span class="syntax-interned-symbol">start</span> <span class="syntax-interned-symbol">end</span>)</span>
         <span class="syntax-keyword-symbol">:allow-other-keys</span> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a>
         <span class="syntax-interned-symbol">named-pairs</span>)</span>)</span>
</span></code></pre><br/>This <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> takes a <a class="glossary-reference" href="chapter-26.xhtml#glossary-string">string</a> and dimensioning
information and returns an <a class="glossary-reference" href="chapter-26.xhtml#glossary-array">array</a> of the specified
dimensions, each of whose elements is the specified 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-string">string</a>.  However, <span class="keyword">:start</span> and <span class="keyword">:end</span> named
arguments may be used to specify that a substring of the given
<a class="glossary-reference" href="chapter-26.xhtml#glossary-string">string</a> should be used.  In addition, the presence of
<a class="lambda-list-keyword-reference" href="#lambda-list-keyword-allow-other-keys">allow-other-keys</a> in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a> indicates that the
caller may supply additional named arguments; the <a class="glossary-reference" href="chapter-26.xhtml#glossary-rest parameter">rest parameter</a>
provides access to them.  These additional named arguments are passed
to <a class="function-reference" href="chapter-15.xhtml#function-make-array">make-array</a>.  The <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="chapter-15.xhtml#function-make-array">make-array</a>
normally does not allow the named arguments <span class="keyword">:start</span> 
and <span class="keyword">:end</span> to be used, and an error should be
signaled if such named arguments are supplied to <a class="function-reference" href="chapter-15.xhtml#function-make-array">make-array</a>.
However, the presence in the call to <a class="function-reference" href="chapter-15.xhtml#function-make-array">make-array</a> 
of the named argument <span class="keyword">:allow-other-keys</span> with
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a> value causes any extraneous named arguments, including
<span class="keyword">:start</span> and <span class="keyword">:end</span>, to be acceptable and ignored.<br/></section></section><section id="section-GFLambdaLists"><h3 class="section-title">Generic Function Lambda Lists</h3><br/>A <span class="newterm">generic function lambda list</span> is used to describe the overall shape of
the argument list to be accepted by a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a>.
Individual <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> <span class="glossary-reference error">glossary:signatures</span> might contribute additional 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-keyword parameter">keyword parameters</a> to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-effective method">effective method</a>.<br/>A <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function lambda list">generic function lambda list</a> is used by <a class="macro-reference" href="chapter-7.xhtml#macro-defgeneric">defgeneric</a>.

A <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function lambda list">generic function lambda list</a> has the following syntax:<br/><br/>


<tr><td>lambda-list</td><td>::=</td><td><span class="explicit-roman">(</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">var</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span><br/>
		      <span class="explicit-mono">[</span><span class="lambda-list-keyword">&amp;optional</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">var</span> | <span class="explicit-roman">(</span><span class="parameter">var</span><span class="explicit-roman">)</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span><span class="explicit-mono">]</span><br/>
		      <span class="explicit-mono">[</span><span class="lambda-list-keyword">&amp;rest</span> <span class="parameter">var</span><span class="explicit-mono">]</span><br/>
		      <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">[</span>
</span></code></pre><span class="lambda-list-keyword">&amp;key</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">var</span> | <span class="explicit-roman">(</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">var</span> | 
					       <span class="explicit-roman">(</span><span class="parameter">keyword-name</span> <span class="parameter">var</span><span class="explicit-roman">)</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">)</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span>
				  <span class="explicit-roman">[</span><span class="lambda-list-keyword">&amp;allow-other-keys</span><span class="explicit-roman">]</span><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">]</span>
</span></code></pre><span class="explicit-roman">)</span><br/></td></tr><br/>A <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function lambda list">generic function lambda list</a> can contain the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list keyword">lambda list keywords</a> shown
in Figure <span class="explicit-mono">()</span>&ndash;.<br/><span class="float" id="figure-Lambda List Keywords used by Generic Function Lambda Lists"><table><tbody><tr><td><a class="lambda-list-keyword-reference" href="#lambda-list-keyword-allow-other-keys">allow-other-keys</a></td><td><a class="lambda-list-keyword-reference" href="#lambda-list-keyword-optional">optional</a></td><td/></tr><tr><td><a class="lambda-list-keyword-reference" href="#lambda-list-keyword-key">key</a></td><td><a class="lambda-list-keyword-reference" href="#lambda-list-keyword-rest">rest</a></td><td/></tr></tbody></table><div class="caption">Lambda List Keywords used by Generic Function Lambda Lists</div></span><br/>A <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function lambda list">generic function lambda list</a> differs from an <a class="glossary-reference" href="chapter-26.xhtml#glossary-ordinary lambda list">ordinary lambda list</a> 
in the following ways:<br/><dl><dt> Required arguments</dt><dd>Zero or more <a class="glossary-reference" href="chapter-26.xhtml#glossary-required parameter">required parameters</a> must be specified.<br/></dd><dt> Optional and keyword arguments</dt><dd><a class="glossary-reference" href="chapter-26.xhtml#glossary-optional parameter">Optional parameters</a> and <a class="glossary-reference" href="chapter-26.xhtml#glossary-keyword parameter">keyword parameters</a> may not have 
default initial value forms nor use supplied-p parameters.<br/></dd><dt> Use of <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-aux">aux</a></dt><dd>The use of <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-aux">aux</a> is not allowed. 
</dd></dl><br/></section>
<section id="section-SpecializedLambdaLists"><h3 class="section-title">Specialized Lambda Lists</h3><br/>A <span class="newterm">specialized lambda list</span> is used to <a class="glossary-reference" href="chapter-26.xhtml#glossary-specialize">specialize</a> a <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a>
for a particular <a class="glossary-reference" href="chapter-26.xhtml#glossary-signature">signature</a> and to describe how <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">arguments</a> matching
that <a class="glossary-reference" href="chapter-26.xhtml#glossary-signature">signature</a> are received by the <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a>.  
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-defined name">defined names</a> in Figure <span class="explicit-mono">()</span>&ndash; use <a class="glossary-reference" href="chapter-26.xhtml#glossary-specialized lambda list">specialized lambda lists</a>
in some way; see the dictionary entry for each for information about how.<br/><span class="float" id="figure-Standardized Operators that use Specialized Lambda Lists"><table><tbody><tr><td><a class="macro-reference" href="chapter-7.xhtml#macro-defmethod">defmethod</a></td><td><a class="macro-reference" href="chapter-7.xhtml#macro-defgeneric">defgeneric</a></td><td/></tr></tbody></table><div class="caption">Standardized Operators that use Specialized Lambda Lists</div></span>

A <a class="glossary-reference" href="chapter-26.xhtml#glossary-specialized lambda list">specialized lambda list</a> can contain the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list keyword">lambda list keywords</a> shown
in Figure <span class="explicit-mono">()</span>&ndash;.<br/><span class="float" id="figure-Lambda List Keywords used by Specialized Lambda Lists"><table><tbody><tr><td><a class="lambda-list-keyword-reference" href="#lambda-list-keyword-allow-other-keys">allow-other-keys</a></td><td><a class="lambda-list-keyword-reference" href="#lambda-list-keyword-key">key</a></td><td><a class="lambda-list-keyword-reference" href="#lambda-list-keyword-rest">rest</a></td></tr><tr><td><a class="lambda-list-keyword-reference" href="#lambda-list-keyword-aux">aux</a></td><td><a class="lambda-list-keyword-reference" href="#lambda-list-keyword-optional">optional</a></td><td/></tr></tbody></table><div class="caption">Lambda List Keywords used by Specialized Lambda Lists</div></span><br/>A <a class="glossary-reference" href="chapter-26.xhtml#glossary-specialized lambda list">specialized lambda list</a> is syntactically the same as an <a class="glossary-reference" href="chapter-26.xhtml#glossary-ordinary lambda list">ordinary lambda list</a>
except that each <a class="glossary-reference" href="chapter-26.xhtml#glossary-required parameter">required parameter</a> may optionally be associated with a <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a>
or <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> for which that <a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter">parameter</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-specialized">specialized</a>.<br/><br/>


<tr><td>lambda-list</td><td>::=</td><td><span class="explicit-roman">(</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">var</span> | <span class="explicit-roman">(</span><span class="parameter">var</span> <span class="explicit-roman">[</span><span class="parameter">specializer</span><span class="explicit-roman">]</span><span class="explicit-roman">)</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span><br/>
		     0<span class="explicit-mono">[</span><span class="lambda-list-keyword">&amp;optional</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">var</span> |
		       <span class="explicit-roman">(</span><span class="parameter">var</span> <span class="explicit-roman">[</span>init-form <span class="explicit-roman">[</span>supplied-p-parameter<span class="explicit-roman">]</span><span class="explicit-roman">]</span><span class="explicit-roman">)</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span><span class="explicit-mono">]</span><br/>
		     0<span class="explicit-mono">[</span><span class="lambda-list-keyword">&amp;rest</span> <span class="parameter">var</span><span class="explicit-mono">]</span><br/>
		     0<span class="explicit-mono">[</span><span class="lambda-list-keyword">&amp;key</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">var</span> |
		          	 <span class="explicit-roman">(</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">var</span> | 
					       <span class="explicit-roman">(</span><span class="parameter">keyword-name</span> <span class="parameter">var</span><span class="explicit-roman">)</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math>
				 	<span class="explicit-roman">[</span>init-form <span class="explicit-roman">[</span>supplied-p-parameter<span class="explicit-roman">]</span><span class="explicit-roman">]</span><span class="explicit-roman">)</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span> <span class="explicit-roman">[</span><span class="lambda-list-keyword">&amp;allow-other-keys</span><span class="explicit-roman">]</span><span class="explicit-mono">]</span><br/>
		     0<span class="explicit-mono">[</span><span class="lambda-list-keyword">&amp;aux</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">var</span> | <span class="explicit-roman">(</span><span class="parameter">var</span> <span class="explicit-roman">[</span><span class="parameter">init-form</span><span class="explicit-roman">]</span><span class="explicit-roman">)</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span><span class="explicit-mono">]</span><span class="explicit-roman">)</span><br/></td></tr><br/>
</section><section id="section-MacroLambdaLists"><h3 class="section-title">Macro Lambda Lists</h3><br/>A <span class="newterm">macro lambda list</span> is used in describing <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macros</a> 
defined by the <a class="glossary-reference" href="chapter-26.xhtml#glossary-operator">operators</a> in Figure <span class="explicit-mono">()</span>&ndash;.<br/><span class="float" id="figure-Operators that use Macro Lambda Lists"><table><tbody><tr><td><a class="macro-reference" href="#macro-define-compiler-macro">define-compiler-macro</a></td><td><a class="macro-reference" href="#macro-defmacro">defmacro</a></td><td><a class="special-operator-reference" href="chapter-5.xhtml#special-operator-macrolet">macrolet</a></td></tr><tr><td><a class="macro-reference" href="chapter-5.xhtml#macro-define-setf-expander">define-setf-expander</a></td><td/><td/></tr></tbody></table><div class="caption">Operators that use Macro Lambda Lists</div></span><br/>With the additional restriction that
an <a class="glossary-reference" href="chapter-26.xhtml#glossary-environment parameter">environment parameter</a> may appear only once
(at any of the positions indicated),
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro lambda list">macro lambda list</a> has the following syntax:<br/><br/>


<table class="bnf">
<tr><td>reqvars</td><td>::=</td><td><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">var</span> | <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">pattern</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span></td></tr>
<tr><td>optvars</td><td>::=</td><td><span class="explicit-mono">[</span><span class="lambda-list-keyword">&amp;optional</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">var</span> |
		       <span class="explicit-roman">(</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">var</span> | <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">pattern</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math> <span class="explicit-roman">[</span>init-form <span class="explicit-roman">[</span>supplied-p-parameter<span class="explicit-roman">]</span><span class="explicit-roman">]</span><span class="explicit-roman">)</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span><span class="explicit-mono">]</span></td></tr>
<tr><td>restvar</td><td>::=</td><td><span class="explicit-mono">[</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="lambda-list-keyword">&amp;rest</span> | <span class="lambda-list-keyword">&amp;body</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math> <span class="parameter"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">var</span> | <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">pattern</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math></span><span class="explicit-mono">]</span></td></tr>
<tr><td>keyvars</td><td>::=</td><td><span class="explicit-roman">[</span><span class="lambda-list-keyword">&amp;key</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">var</span> |
		          	 <span class="explicit-roman">(</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">var</span> | 
					       <span class="explicit-roman">(</span><span class="parameter">keyword-name</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">var</span> | <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">pattern</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">)</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math>
				 	<span class="explicit-roman">[</span>init-form <span class="explicit-roman">[</span>supplied-p-parameter<span class="explicit-roman">]</span><span class="explicit-roman">]</span><span class="explicit-roman">)</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span><br/>
		 0<span class="explicit-roman">[</span><span class="lambda-list-keyword">&amp;allow-other-keys</span><span class="explicit-roman">]</span><span class="explicit-roman">]</span></td></tr>
<table class="bnf"><tr><td>auxvars</td><td>::=</td><td><span class="explicit-mono">[</span><span class="lambda-list-keyword">&amp;aux</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">var</span> | <span class="explicit-roman">(</span><span class="parameter">var</span> <span class="explicit-roman">[</span><span class="parameter">init-form</span><span class="explicit-roman">]</span><span class="explicit-roman">)</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span><span class="explicit-mono">]</span></td></tr></table>
<tr><td>envvar</td><td>::=</td><td><span class="explicit-mono">[</span><span class="lambda-list-keyword">&amp;environment</span> <span class="parameter">var</span><span class="explicit-mono">]</span></td></tr>
<tr><td>wholevar</td><td>::=</td><td><span class="explicit-mono">[</span><span class="lambda-list-keyword">&amp;whole</span> <span class="parameter">var</span><span class="explicit-mono">]</span></td></tr>
<tr><td>lambda-list</td><td>::=</td><td><span class="explicit-roman">(</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">wholevar</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">envvar</span>
 0<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">reqvars</span>  <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">envvar</span>
 0<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">optvars</span>  <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">envvar</span><br/>
 0<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">restvar</span>  <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">envvar</span>
 0<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">keyvars</span>  <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">envvar</span>
 0<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">auxvars</span>  <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">envvar</span><span class="explicit-roman">)</span> |<br/>
 <span class="explicit-roman">(</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">wholevar</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">envvar</span>
 0<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">reqvars</span>  <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">envvar</span>
 0<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">optvars</span>  <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">envvar</span> <pre><code><span class="syntax-root">.
</span></code></pre>
 0<span class="parameter">var</span><span class="explicit-roman">)</span></td></tr>
<tr><td>pattern</td><td>::=</td><td><span class="explicit-roman">(</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">wholevar</span>
        <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">reqvars</span>
        <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">optvars</span>
        <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">restvar</span>
        <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">keyvars</span>
        <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">auxvars</span><span class="explicit-roman">)</span> |<br/>
 <span class="explicit-roman">(</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">wholevar</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">reqvars</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">optvars</span> <pre><code><span class="syntax-root">.
</span></code></pre>
        <span class="parameter">var</span><span class="explicit-roman">)</span></td></tr>
</table>
<br/>

<br/>A <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro lambda list">macro lambda list</a> can contain
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list keyword">lambda list keywords</a> shown in Figure <span class="explicit-mono">()</span>&ndash;.<br/><span class="float" id="figure-Lambda List Keywords used by Macro Lambda Lists"><table><tbody><tr><td><a class="lambda-list-keyword-reference" href="#lambda-list-keyword-allow-other-keys">allow-other-keys</a></td><td><a class="lambda-list-keyword-reference" href="#lambda-list-keyword-environment">environment</a></td><td><a class="lambda-list-keyword-reference" href="#lambda-list-keyword-rest">rest</a></td></tr><tr><td><a class="lambda-list-keyword-reference" href="#lambda-list-keyword-aux">aux</a></td><td><a class="lambda-list-keyword-reference" href="#lambda-list-keyword-key">key</a></td><td><a class="lambda-list-keyword-reference" href="#lambda-list-keyword-whole">whole</a></td></tr><tr><td><a class="lambda-list-keyword-reference" href="#lambda-list-keyword-body">body</a></td><td><a class="lambda-list-keyword-reference" href="#lambda-list-keyword-optional">optional</a></td><td/></tr></tbody></table><div class="caption">Lambda List Keywords used by Macro Lambda Lists</div></span><br/><a class="glossary-reference" href="chapter-26.xhtml#glossary-optional parameter">Optional parameters</a> (introduced by <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-optional">optional</a>) and
<a class="glossary-reference" href="chapter-26.xhtml#glossary-keyword parameter">keyword parameters</a> (introduced by <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-key">key</a>)
can be supplied in a <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro lambda list">macro lambda list</a>,
just as in an <a class="glossary-reference" href="chapter-26.xhtml#glossary-ordinary lambda list">ordinary lambda list</a>.
Both may contain default initialization forms and <a class="glossary-reference" href="chapter-26.xhtml#glossary-supplied-p parameter">supplied-p parameters</a>.<br/><a class="lambda-list-keyword-reference" href="#lambda-list-keyword-body">body</a><a id="lambda-list-keyword-body"></a>
is identical in function to <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-rest">rest</a>,
but it can be used to inform certain output-formatting 
and editing functions that the remainder of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> is
treated as a body, and should be indented accordingly.
Only one of <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-body">body</a> or <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-rest">rest</a> can be used at any particular level; 
see <span class="section-reference error">section:DestructuringByLambdaLists.</span>
<a class="lambda-list-keyword-reference" href="#lambda-list-keyword-body">body</a> can appear at any level of a 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-macro lambda list">macro lambda list</a>; 
for details, see <span class="section-reference error">section:DestructuringByLambdaLists.</span> 
<a class="lambda-list-keyword-reference" href="#lambda-list-keyword-whole">whole</a><a id="lambda-list-keyword-whole"></a>
is followed by a single variable that is bound to the
entire macro-call form; this is the value that the <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro function">macro function</a>
receives as its first argument.
If <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-whole">whole</a> and a following variable appear,
they must appear first in <span class="parameter">lambda-list</span>,
before any other parameter or <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list keyword">lambda list keyword</a>.
<a class="lambda-list-keyword-reference" href="#lambda-list-keyword-whole">whole</a> can appear at any level of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro lambda list">macro lambda list</a>. 
At inner levels, the <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-whole">whole</a> variable is bound to
		the corresponding part of the argument, 
as with <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-rest">rest</a>, but unlike <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-rest">rest</a>, other arguments are also allowed.
The use of <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-whole">whole</a> does not affect the pattern of arguments
     specified.

<a class="lambda-list-keyword-reference" href="#lambda-list-keyword-environment">environment</a><a id="lambda-list-keyword-environment"></a>
is followed by a single variable that is bound
to an <a class="glossary-reference" href="chapter-26.xhtml#glossary-environment">environment</a> representing the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical environment">lexical environment</a> in which the
macro call is to be interpreted.
This <a class="glossary-reference" href="chapter-26.xhtml#glossary-environment">environment</a> 
should be used with
<a class="function-reference" href="#function-macro-function">macro-function</a>,
<a class="function-reference" href="chapter-5.xhtml#function-get-setf-expansion">get-setf-expansion</a>,
<a class="function-reference" href="#function-compiler-macro-function">compiler-macro-function</a>, 
and
<a class="function-reference" href="#function-macroexpand">macroexpand</a> 
(for example) in computing the expansion of the macro, to ensure that any
<a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical binding">lexical bindings</a> or definitions established in the 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-compilation environment">compilation environment</a> are taken into account.
<a class="lambda-list-keyword-reference" href="#lambda-list-keyword-environment">environment</a> can only appear at the top level of a
	<a class="glossary-reference" href="chapter-26.xhtml#glossary-macro lambda list">macro lambda list</a>, and can only
appear once, but can appear anywhere in that list;
the <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-environment">environment</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter">parameter</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-bound">bound</a> along with <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-whole">whole</a>
before any other <a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variables</a> in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a>, regardless of where
<a class="lambda-list-keyword-reference" href="#lambda-list-keyword-environment">environment</a> appears in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a>.
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> that is bound to the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-environment parameter">environment parameter</a> has <a class="glossary-reference" href="chapter-26.xhtml#glossary-dynamic extent">dynamic extent</a>.
 
Destructuring allows a <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro lambda list">macro lambda list</a> to express
the structure of a macro call syntax.
If no <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list keyword">lambda list keywords</a> appear,
then the <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro lambda list">macro lambda list</a> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-tree">tree</a>
containing parameter names at the leaves.
The pattern and the <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro form">macro form</a> must have compatible <a class="glossary-reference" href="chapter-26.xhtml#glossary-tree structure">tree structure</a>; 
that is, their <a class="glossary-reference" href="chapter-26.xhtml#glossary-tree structure">tree structure</a> must be equivalent,
or it must differ only in that some <span class="glossary-reference error">glossary:leaves</span> of the pattern
match <a class="glossary-reference" href="chapter-26.xhtml#glossary-non-atomic">non-atomic</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro form">macro form</a>.
For information about error detection in this <a class="glossary-reference" href="chapter-26.xhtml#glossary-situation">situation</a>,
see <span class="section-reference error">section:DestructuringMismatch.</span>


A destructuring <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a>
(whether at top level or embedded) 
can
be dotted, ending
in a parameter name.  This situation is treated exactly as if the
parameter name that ends the <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> had appeared preceded by <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-rest">rest</a>.<br/>
It is permissible for a <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> (or a <a class="glossary-reference" href="chapter-26.xhtml#glossary-subexpression">subexpression</a> of a
<a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>)
to be a <a class="glossary-reference" href="chapter-26.xhtml#glossary-dotted list">dotted list</a> 
only  when <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">...</span> &amp;rest <span class="syntax-interned-symbol">var</span>)</span>
</span></code></pre> or <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">...</span> <span class="syntax-symbol">.</span> <span class="syntax-interned-symbol">var</span>)</span>
</span></code></pre> is used to match
 it. It is the responsibility of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a> to recognize and deal
 with such situations.

<section id="section-DestructuringByLambdaLists"><h4 class="section-title">Destructuring by Lambda Lists</h4><br/>Anywhere in a <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro lambda list">macro lambda list</a> where a parameter
name can appear, and where <a class="glossary-reference" href="chapter-26.xhtml#glossary-ordinary lambda list">ordinary lambda list</a> syntax
(as described in <a class="section-reference" href="#section-OrdinaryLambdaLists">Ordinary Lambda Lists</a>) does not 
otherwise allow a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a>, a <a class="glossary-reference" href="chapter-26.xhtml#glossary-destructuring lambda list">destructuring lambda list</a> 
can appear in place
of the parameter name.  When this is done, then the argument 
that would match the parameter is treated as a (possibly dotted) <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a>,
to be used as an argument list for satisfying the
parameters in the embedded <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a>.
This is known as destructuring.<br/>

Destructuring is the process of decomposing a compound <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> into
its component parts, using an abbreviated, declarative syntax, rather
than writing it out by hand using the primitive component-accessing
functions.  Each component part is bound to a variable.
 
 
 
A destructuring operation requires an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> to be decomposed, 
a pattern that specifies what components are to be extracted, and the names
of the variables whose values are to be the components.
 
<section id="section-Data-directedDestructuringbyLambdaLists"><h5 class="section-title">Data-directed Destructuring by Lambda Lists</h5>In data-directed destructuring,
the pattern is a sample <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> to be decomposed.
Wherever a component is to be extracted, 
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> appears in the pattern; 
this <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> is the name of the variable whose value will be that component.
 
<section id="section-ExamplesofData-directedDestructuringbyLambdaLists"><h6 class="section-title">Examples of Data-directed Destructuring by Lambda Lists</h6>An example pattern is<br/><span class="explicit-mono">(a b c)</span><br/>which destructures a list of three elements.  The variable <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">a</span>
</span></code></pre> is assigned
to the first element, <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">b</span>
</span></code></pre> to the second, etc.  A more complex example
is<br/><span class="explicit-mono">((first . rest) . more)</span><br/>The important features of data-directed destructuring are its syntactic
simplicity and the ability to extend it to lambda-list-directed destructuring.<br/></section></section><section id="section-Lambda-list-directedDestructuringbyLambdaLists"><h5 class="section-title">Lambda-list-directed Destructuring by Lambda Lists</h5>An extension of data-directed destructuring of <span class="glossary-reference error">glossary:trees</span> is
lambda-list-directed destructuring.  This derives from the analogy
between the three-element destructuring pattern<br/><span class="explicit-mono">(first second third)</span><br/>and the three-argument <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a><br/><span class="explicit-mono">(first second third)</span><br/>
Lambda-list-directed destructuring is identical to data-directed destructuring
if no <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list keyword">lambda list keywords</a> appear in the pattern.  
Any list in the pattern (whether a sub-list or the whole pattern itself)
that contains a <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list keyword">lambda list keyword</a> is interpreted specially.
Elements of the list to the left of the first
<a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list keyword">lambda list keyword</a> are treated as destructuring patterns, as usual, but the
remaining elements of the list are treated like a function's 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a>
except that where a variable would normally be required, an arbitrary
destructuring pattern is allowed.  Note that in case of ambiguity,
<a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a> syntax is preferred over destructuring syntax.  Thus, after
<a class="lambda-list-keyword-reference" href="#lambda-list-keyword-optional">optional</a> a list of elements is a list of a destructuring pattern
and a default value form.<br/>The detailed behavior of each <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list keyword">lambda list keyword</a> in a 
lambda-list-directed destructuring
pattern is as follows:<br/><dl><dt><a class="lambda-list-keyword-reference" href="#lambda-list-keyword-optional">optional</a></dt><dd>Each following element is a variable or a list of a destructuring
pattern, a default value form, and a supplied-p variable.  The default value and
the supplied-p variable can be omitted.  
If the list being destructured ends
early, so that it does not have an element to match against this destructuring
(sub)-pattern, the default form is evaluated and destructured instead.  The
supplied-p variable receives the value 
<a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a> if the default form is used, <a class="symbol-reference" href="chapter-5.xhtml#symbol-t">t</a> otherwise.<br/></dd><dt><a class="lambda-list-keyword-reference" href="#lambda-list-keyword-rest">rest</a>, <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-body">body</a></dt><dd>The next element is a destructuring pattern that matches the
rest of the list.  <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-body">body</a> is identical to <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-rest">rest</a> but declares that what
is being matched is a list of forms that constitutes the body of <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>.
This next element must be the last unless a <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list keyword">lambda list keyword</a> follows it.<br/></dd><dt><a class="lambda-list-keyword-reference" href="#lambda-list-keyword-aux">aux</a></dt><dd>The remaining elements are not destructuring patterns at all, but are
auxiliary variable bindings.  
 
</dd><dt><a class="lambda-list-keyword-reference" href="#lambda-list-keyword-whole">whole</a></dt><dd>The next element is a destructuring pattern that matches the entire
form in a macro, or the entire <a class="glossary-reference" href="chapter-26.xhtml#glossary-subexpression">subexpression</a> at inner levels.
 
</dd><dt><a class="lambda-list-keyword-reference" href="#lambda-list-keyword-key">key</a></dt><dd>Each following element is one of
<dl><dt/><dd>a <a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variable</a>,<br/></dd><dt>or</dt><dd>a list of a variable,
           an optional initialization form,
       and an optional supplied-p variable.<br/></dd><dt>or</dt><dd>a list of a list of a keyword and a destructuring pattern,
           an optional initialization form,
       and an optional supplied-p variable.
</dd></dl>
The rest of the list being destructured
is taken to be alternating keywords and values and is taken apart appropriately.<br/></dd><dt><a class="lambda-list-keyword-reference" href="#lambda-list-keyword-allow-other-keys">allow-other-keys</a></dt><dd>Stands by itself.
</dd></dl> 
 
</section></section></section><section id="section-DestructuringLambdaLists"><h3 class="section-title">Destructuring Lambda Lists</h3><br/>A <span class="newterm">destructuring lambda list</span> is used by <a class="macro-reference" href="chapter-5.xhtml#macro-destructuring-bind">destructuring-bind</a>.<br/><a class="glossary-reference" href="chapter-26.xhtml#glossary-destructuring lambda list">Destructuring lambda lists</a> are closely related to 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-macro lambda list">macro lambda lists</a>; see <span class="section-reference error">section:MacroLambdaLists.</span>
A <a class="glossary-reference" href="chapter-26.xhtml#glossary-destructuring lambda list">destructuring lambda list</a> can contain all of the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list keyword">lambda list keywords</a> listed for <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro lambda list">macro lambda lists</a>
except for <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-environment">environment</a>, and supports destructuring in the
same way.  Inner <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda lists</a> nested within a <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro lambda list">macro lambda list</a>
have the syntax of <a class="glossary-reference" href="chapter-26.xhtml#glossary-destructuring lambda list">destructuring lambda lists</a>.<br/>A <a class="glossary-reference" href="chapter-26.xhtml#glossary-destructuring lambda list">destructuring lambda list</a> has the following syntax:<br/><br/>


<table class="bnf">
<tr><td>reqvars</td><td>::=</td><td><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">var</span> | <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">lambda-list</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span></td></tr>
<tr><td>optvars</td><td>::=</td><td><span class="explicit-mono">[</span><span class="lambda-list-keyword">&amp;optional</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">var</span> |
		       <span class="explicit-roman">(</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">var</span> | <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">lambda-list</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math> <span class="explicit-roman">[</span>init-form <span class="explicit-roman">[</span>supplied-p-parameter<span class="explicit-roman">]</span><span class="explicit-roman">]</span><span class="explicit-roman">)</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span><span class="explicit-mono">]</span></td></tr>
<tr><td>restvar</td><td>::=</td><td><span class="explicit-mono">[</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="lambda-list-keyword">&amp;rest</span> | <span class="lambda-list-keyword">&amp;body</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math> <span class="parameter"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">var</span> | <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">lambda-list</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math></span><span class="explicit-mono">]</span></td></tr>
<tr><td>keyvars</td><td>::=</td><td><span class="explicit-roman">[</span><span class="lambda-list-keyword">&amp;key</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">var</span> |
		          	 <span class="explicit-roman">(</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">var</span> | 
					       <span class="explicit-roman">(</span><span class="parameter">keyword-name</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">var</span> | <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">lambda-list</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">)</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math>
				 	<span class="explicit-roman">[</span>init-form <span class="explicit-roman">[</span>supplied-p-parameter<span class="explicit-roman">]</span><span class="explicit-roman">]</span><span class="explicit-roman">)</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span><br/>
		 0<span class="explicit-roman">[</span><span class="lambda-list-keyword">&amp;allow-other-keys</span><span class="explicit-roman">]</span><span class="explicit-roman">]</span></td></tr>
<table class="bnf"><tr><td>auxvars</td><td>::=</td><td><span class="explicit-mono">[</span><span class="lambda-list-keyword">&amp;aux</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">var</span> | <span class="explicit-roman">(</span><span class="parameter">var</span> <span class="explicit-roman">[</span><span class="parameter">init-form</span><span class="explicit-roman">]</span><span class="explicit-roman">)</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span><span class="explicit-mono">]</span></td></tr></table>
<tr><td>envvar</td><td>::=</td><td><span class="explicit-mono">[</span><span class="lambda-list-keyword">&amp;environment</span> <span class="parameter">var</span><span class="explicit-mono">]</span></td></tr>
<tr><td>wholevar</td><td>::=</td><td><span class="explicit-mono">[</span><span class="lambda-list-keyword">&amp;whole</span> <span class="parameter">var</span><span class="explicit-mono">]</span></td></tr>
<tr><td>lambda-list</td><td>::=</td><td><span class="explicit-roman">(</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">wholevar</span>
        <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">reqvars</span>
        <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">optvars</span>
        <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">restvar</span>
        <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">keyvars</span>
        <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">auxvars</span><span class="explicit-roman">)</span> |<br/>
 <span class="explicit-roman">(</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">wholevar</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">reqvars</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">optvars</span> <pre><code><span class="syntax-root">.
</span></code></pre>
	 <span class="parameter">var</span><span class="explicit-roman">)</span></td></tr>
</table>
<br/>

<br/></section><section id="section-BoaLambdaLists"><h3 class="section-title">Boa Lambda Lists</h3><br/>A <span class="newterm">boa lambda list</span> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a> that is syntactically 
like an <a class="glossary-reference" href="chapter-26.xhtml#glossary-ordinary lambda list">ordinary lambda list</a>, but that is processed in
``<span class="explicit-bold"> b</span>y <span class="explicit-bold"> o</span>rder of <span class="explicit-bold"> a</span>rgument'' style.<br/>A <a class="glossary-reference" href="chapter-26.xhtml#glossary-boa lambda list">boa lambda list</a> is used only in a <a class="macro-reference" href="chapter-8.xhtml#macro-defstruct">defstruct</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>,
when explicitly specifying the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a> 
of a constructor <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> (sometimes called a ``boa constructor'').<br/>The <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-optional">optional</a>, <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-rest">rest</a>, <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-aux">aux</a>,
<a class="lambda-list-keyword-reference" href="#lambda-list-keyword-key">key</a>, and <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-allow-other-keys">allow-other-keys</a><a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list keyword">lambda list keywords</a> are recognized in a <a class="glossary-reference" href="chapter-26.xhtml#glossary-boa lambda list">boa lambda list</a>.
The way these <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list keyword">lambda list keywords</a> differ from their
use in an <a class="glossary-reference" href="chapter-26.xhtml#glossary-ordinary lambda list">ordinary lambda list</a> follows.<br/>Consider this example, which describes how <a class="macro-reference" href="chapter-8.xhtml#macro-defstruct">defstruct</a> processes
its <span class="keyword">:constructor</span> option.<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-keyword-symbol">:constructor</span> <span class="syntax-interned-symbol">create-foo</span>
        <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-optional">&amp;OPTIONAL</a> <span class="syntax-interned-symbol">b</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">c</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">sea</span></span>)</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-rest">&amp;REST</a> <span class="syntax-interned-symbol">d</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-aux">&amp;AUX</a> <span class="syntax-interned-symbol">e</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">f</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">eff</span></span>)</span>)</span>)</span>
</span></code></pre><br/>This defines <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">create-foo</span>
</span></code></pre> to be a constructor of one or more arguments.
The first argument is used to initialize the <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">a</span>
</span></code></pre> slot.  The second
argument is used to initialize the <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">b</span>
</span></code></pre> slot.  If there isn't any
second argument, then the default value given in the body of the
<a class="macro-reference" href="chapter-8.xhtml#macro-defstruct">defstruct</a> (if given) is used instead.  
The third argument is used to
initialize the <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">c</span>
</span></code></pre> slot.  If there isn't any third argument, then the
symbol <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">sea</span>
</span></code></pre> is used instead.  Any arguments following the third
argument are collected into a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> 
and used to initialize the <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">d</span>
</span></code></pre>
slot.  If there are three or fewer arguments, then <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a> is placed in
the <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">d</span>
</span></code></pre> slot.  The <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">e</span>
</span></code></pre> slot is not initialized; 
its initial value is <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-defined">implementation-defined</a>.
Finally, the <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">f</span>
</span></code></pre> slot is initialized to contain the symbol <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">eff</span>
</span></code></pre>.
<a class="lambda-list-keyword-reference" href="#lambda-list-keyword-key">key</a> and <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-allow-other-keys">allow-other-keys</a> arguments default
in a manner similar to that of <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-optional">optional</a> arguments: if no default
is supplied in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a> then the default value 
given in the body of the <a class="macro-reference" href="chapter-8.xhtml#macro-defstruct">defstruct</a> (if given) is used instead.
For example:<br/><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="macro-reference" href="chapter-8.xhtml#macro-defstruct">defstruct</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">foo</span> <span class="syntax-cons">(<span class="syntax-keyword-symbol">:constructor</span> <span class="syntax-interned-symbol">CREATE-FOO</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-optional">&amp;OPTIONAL</a> <span class="syntax-interned-symbol">b</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">c</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">sea</span></span>)</span>
                                             <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-key">&amp;KEY</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">d</span> <span class="syntax-number">2</span>)</span>
                                             <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-aux">&amp;AUX</a> <span class="syntax-interned-symbol">e</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">f</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">eff</span></span>)</span>)</span>)</span>)</span>
   <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-number">1</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">b</span> <span class="syntax-number">2</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">c</span> <span class="syntax-number">3</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">d</span> <span class="syntax-number">4</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">e</span> <span class="syntax-number">5</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">f</span> <span class="syntax-number">6</span>)</span>)</span>
 
 <span class="syntax-cons">(<span class="syntax-interned-symbol">create-foo</span> <span class="syntax-number">10</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-structure">#S(<span class="syntax-interned-symbol">FOO</span> <span class="syntax-interned-symbol">A</span> <span class="syntax-number">10</span> <span class="syntax-interned-symbol">B</span> <span class="syntax-number">2</span> <span class="syntax-interned-symbol">C</span> <span class="syntax-interned-symbol">SEA</span> <span class="syntax-interned-symbol">D</span> <span class="syntax-number">2</span> <span class="syntax-interned-symbol">E</span> <span class="glossary-reference error">glossary:implemention-dependent</span> <span class="syntax-interned-symbol">F</span> <span class="syntax-interned-symbol">EFF</span>)</span>
 <span class="syntax-cons">(<span class="syntax-interned-symbol">create-foo</span> <span class="syntax-number">10</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">bee</span></span> <span class="syntax-quote">'<span class="syntax-interned-symbol">see</span></span> <span class="syntax-keyword-symbol">:d</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">dee</span></span>)</span> 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-structure">#S(<span class="syntax-interned-symbol">FOO</span> <span class="syntax-interned-symbol">A</span> <span class="syntax-number">10</span> <span class="syntax-interned-symbol">B</span> <span class="syntax-interned-symbol">BEE</span> <span class="syntax-interned-symbol">C</span> <span class="syntax-interned-symbol">SEE</span> <span class="syntax-interned-symbol">D</span> <span class="syntax-interned-symbol">DEE</span> <span class="syntax-interned-symbol">E</span> <span class="glossary-reference error">glossary:implemention-dependent</span> <span class="syntax-interned-symbol">F</span> <span class="syntax-interned-symbol">EFF</span>)</span>
</span></code></pre><br/>If keyword arguments of the form 
<pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-cons">(<span class="explicit-italic"> key</span> <span class="explicit-italic"> var</span>)</span> <span class="explicit-roman">[</span><span class="explicit-italic"> default</span> <span class="explicit-roman">[</span><span class="explicit-italic"> svar</span><span class="explicit-roman">]</span><span class="explicit-roman">]</span>)</span>
</span></code></pre>
are specified, the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> is matched with <span class="explicit-italic"> var</span> 
(not <span class="explicit-italic"> key</span>).<br/>The actions taken in the <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">b</span>
</span></code></pre> and <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">e</span>
</span></code></pre> cases were carefully
chosen to allow the user to specify all possible behaviors. 
The <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-aux">aux</a> variables can be used to completely override the default
initializations given in the body.<br/>If no default value is supplied for an <a class="glossary-reference" href="chapter-26.xhtml#glossary-aux variable">aux variable</a> variable,
the consequences are undefined if an attempt is later made to read
the corresponding <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a>'s value before a value is explicitly assigned.
If such a <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> has a <span class="keyword">:type</span> option specified,
this suppressed initialization does not imply a type mismatch situation;
the declared type is only required to apply when the <a class="glossary-reference" href="chapter-26.xhtml#glossary-slot">slot</a> is finally assigned.

With this definition, the following can be written:<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">create-foo</span> <span class="syntax-number">1</span> <span class="syntax-number">2</span>)</span>
</span></code></pre>
instead of<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">make-foo</span> <span class="syntax-keyword-symbol">:a</span> <span class="syntax-number">1</span> <span class="syntax-keyword-symbol">:b</span> <span class="syntax-number">2</span>)</span>
</span></code></pre>
and <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">create-foo</span>
</span></code></pre> provides defaulting different
from that of <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">make-foo</span>
</span></code></pre>.<br/>Additional arguments that do not correspond to slot names but
are merely present to supply values used in subsequent initialization 
computations are allowed.
For example, in the definition<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-8.xhtml#macro-defstruct">defstruct</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">frob</span> <span class="syntax-cons">(<span class="syntax-keyword-symbol">:constructor</span> <span class="syntax-interned-symbol">create-frob</span>
                 <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-key">&amp;KEY</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">b</span> <span class="syntax-number">3</span> <span class="syntax-interned-symbol">have-b</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">c-token</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">c</span></span>)</span> 
                         <span class="syntax-cons">(<span class="syntax-interned-symbol">c</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">c-token</span> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-interned-symbol">have-b</span> <span class="syntax-number">7</span> <span class="syntax-number">2</span>)</span>)</span>)</span>)</span>)</span>)</span>
        <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span>)</span>
</span></code></pre><br/>the <span class="explicit-mono">c-token</span> argument is used merely to supply a value used in the 
initialization of the <span class="explicit-mono">c</span> slot. The <a class="glossary-reference" href="chapter-26.xhtml#glossary-supplied-p parameter">supplied-p parameters</a> 
associated with <a class="glossary-reference" href="chapter-26.xhtml#glossary-optional parameter">optional parameters</a> and <a class="glossary-reference" href="chapter-26.xhtml#glossary-keyword parameter">keyword parameters</a>
might also be used this way.<br/>
</section><section id="section-DefsetfLambdaLists"><h3 class="section-title">Defsetf Lambda Lists</h3><br/>A <span class="newterm">defsetf lambda list</span> is used by <a class="macro-reference" href="chapter-5.xhtml#macro-defsetf">defsetf</a>.<br/>A <a class="glossary-reference" href="chapter-26.xhtml#glossary-defsetf lambda list">defsetf lambda list</a> has the following syntax:<br/><br/>


<tr><td>lambda-list</td><td>::=</td><td><span class="explicit-roman">(</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">var</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span><br/>
		     0<span class="explicit-mono">[</span><span class="lambda-list-keyword">&amp;optional</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">var</span> |
		       <span class="explicit-roman">(</span><span class="parameter">var</span> <span class="explicit-roman">[</span>init-form <span class="explicit-roman">[</span>supplied-p-parameter<span class="explicit-roman">]</span><span class="explicit-roman">]</span><span class="explicit-roman">)</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span><span class="explicit-mono">]</span><br/>
		     0<span class="explicit-mono">[</span><span class="lambda-list-keyword">&amp;rest</span> <span class="parameter">var</span><span class="explicit-mono">]</span><br/>
		     0<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">[</span>
</span></code></pre><span class="lambda-list-keyword">&amp;key</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">var</span> |
		          	 <span class="explicit-roman">(</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">var</span> | 
					       <span class="explicit-roman">(</span><span class="parameter">keyword-name</span> <span class="parameter">var</span><span class="explicit-roman">)</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math>
				 	<span class="explicit-roman">[</span>init-form <span class="explicit-roman">[</span>supplied-p-parameter<span class="explicit-roman">]</span><span class="explicit-roman">]</span><span class="explicit-roman">)</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span>
				  <span class="explicit-roman">[</span><span class="lambda-list-keyword">&amp;allow-other-keys</span><span class="explicit-roman">]</span><pre><code><span class="syntax-root"><span class="syntax-interned-symbol">]</span>
</span></code></pre><br/>
		     0<span class="explicit-mono">[</span><span class="lambda-list-keyword">&amp;environment</span> <span class="parameter">var</span><span class="explicit-mono">]</span></td></tr><br/>A <a class="glossary-reference" href="chapter-26.xhtml#glossary-defsetf lambda list">defsetf lambda list</a> can contain the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list keyword">lambda list keywords</a> shown
in Figure <span class="explicit-mono">()</span>&ndash;.<br/><span class="float" id="figure-Lambda List Keywords used by Defsetf Lambda Lists"><table><tbody><tr><td><a class="lambda-list-keyword-reference" href="#lambda-list-keyword-allow-other-keys">allow-other-keys</a></td><td><a class="lambda-list-keyword-reference" href="#lambda-list-keyword-key">key</a></td><td><a class="lambda-list-keyword-reference" href="#lambda-list-keyword-rest">rest</a></td></tr><tr><td><a class="lambda-list-keyword-reference" href="#lambda-list-keyword-environment">environment</a></td><td><a class="lambda-list-keyword-reference" href="#lambda-list-keyword-optional">optional</a></td><td/></tr></tbody></table><div class="caption">Lambda List Keywords used by Defsetf Lambda Lists</div></span><br/>A <a class="glossary-reference" href="chapter-26.xhtml#glossary-defsetf lambda list">defsetf lambda list</a> differs from an <a class="glossary-reference" href="chapter-26.xhtml#glossary-ordinary lambda list">ordinary lambda list</a> 
only in that it does not permit the use of <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-aux">aux</a>, 
and that it permits use of <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-environment">environment</a>, 
     which introduces an <a class="glossary-reference" href="chapter-26.xhtml#glossary-environment parameter">environment parameter</a>.<br/></section><section id="section-DeftypeLambdaLists"><h3 class="section-title">Deftype Lambda Lists</h3><br/>A <span class="newterm">deftype lambda list</span> is used by <a class="macro-reference" href="chapter-4.xhtml#macro-deftype">deftype</a>.<br/>A <a class="glossary-reference" href="chapter-26.xhtml#glossary-deftype lambda list">deftype lambda list</a> has the same syntax as a <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro lambda list">macro lambda list</a>,
and can therefore contain the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list keyword">lambda list keywords</a> as a <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro lambda list">macro lambda list</a>.<br/>A <a class="glossary-reference" href="chapter-26.xhtml#glossary-deftype lambda list">deftype lambda list</a> differs from a <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro lambda list">macro lambda list</a> 
only in that if no <span class="parameter">init-form</span> is supplied for an <a class="glossary-reference" href="chapter-26.xhtml#glossary-optional parameter">optional parameter</a>
or <a class="glossary-reference" href="chapter-26.xhtml#glossary-keyword parameter">keyword parameter</a> in the <span class="parameter">lambda-list</span>, the default <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a> 
for that <a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter">parameter</a> is the <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> <span class="symbol-reference error">symbol:*</span> (rather than <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>).

</section><section id="section-DefineModifyMacroLambdaLists"><h3 class="section-title">Define-modify-macro Lambda Lists</h3><br/>A <span class="newterm">define-modify-macro lambda list</span> is used by 
<a class="macro-reference" href="chapter-5.xhtml#macro-define-modify-macro">define-modify-macro</a>.<br/>A <a class="glossary-reference" href="chapter-26.xhtml#glossary-define-modify-macro lambda list">define-modify-macro lambda list</a> can contain the 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list keyword">lambda list keywords</a> shown in Figure <span class="explicit-mono">()</span>&ndash;.<br/><span class="float" id="figure-Lambda List Keywords used by Define-modify-macro Lambda Lists"><table><tbody><tr><td><a class="lambda-list-keyword-reference" href="#lambda-list-keyword-optional">optional</a></td><td><a class="lambda-list-keyword-reference" href="#lambda-list-keyword-rest">rest</a></td></tr></tbody></table><div class="caption">Lambda List Keywords used by Define-modify-macro Lambda Lists</div></span><br/><a class="glossary-reference" href="chapter-26.xhtml#glossary-define-modify-macro lambda list">Define-modify-macro lambda lists</a> are similar to 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-ordinary lambda list">ordinary lambda lists</a>, but do not support keyword arguments.
<a class="macro-reference" href="chapter-5.xhtml#macro-define-modify-macro">define-modify-macro</a> has no need match keyword arguments, and
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-rest parameter">rest parameter</a> is sufficient.  <a class="glossary-reference" href="chapter-26.xhtml#glossary-aux variable">Aux variables</a> are also
not supported, since <a class="macro-reference" href="chapter-5.xhtml#macro-define-modify-macro">define-modify-macro</a> has no body <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a>
which could refer to such <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a>.  See the <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a> <a class="macro-reference" href="chapter-5.xhtml#macro-define-modify-macro">define-modify-macro</a>.<br/></section><section id="section-DefMethCombArgsLambdaLists"><h3 class="section-title">Define-method-combination Arguments Lambda Lists</h3><br/>A <span class="newterm">define-method-combination arguments lambda list</span> is used by 
the <span class="keyword">:arguments</span> option to <a class="macro-reference" href="chapter-7.xhtml#macro-define-method-combination">define-method-combination</a>.<br/>A <a class="glossary-reference" href="chapter-26.xhtml#glossary-define-method-combination arguments lambda list">define-method-combination arguments lambda list</a> can contain the 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list keyword">lambda list keywords</a> shown in Figure <span class="explicit-mono">()</span>&ndash;.<br/><span class="float" id="figure-Lambda List Keywords used by Define-method-combination arguments Lambda Lists"><table><tbody><tr><td><a class="lambda-list-keyword-reference" href="#lambda-list-keyword-allow-other-keys">allow-other-keys</a></td><td><a class="lambda-list-keyword-reference" href="#lambda-list-keyword-key">key</a></td><td><a class="lambda-list-keyword-reference" href="#lambda-list-keyword-rest">rest</a></td></tr><tr><td><a class="lambda-list-keyword-reference" href="#lambda-list-keyword-aux">aux</a></td><td><a class="lambda-list-keyword-reference" href="#lambda-list-keyword-optional">optional</a></td><td><a class="lambda-list-keyword-reference" href="#lambda-list-keyword-whole">whole</a></td></tr></tbody></table><div class="caption">Lambda List Keywords used by Define-method-combination arguments Lambda Lists</div></span><br/><a class="glossary-reference" href="chapter-26.xhtml#glossary-define-method-combination arguments lambda list">Define-method-combination arguments lambda lists</a> are similar to 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-ordinary lambda list">ordinary lambda lists</a>, but also permit the use of <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-whole">whole</a>.<br/></section><section id="section-DocVsDecls"><h3 class="section-title">Syntactic Interaction of Documentation Strings and Declarations</h3><br/>
In a number of situations, a <a class="glossary-reference" href="chapter-26.xhtml#glossary-documentation string">documentation string</a> can appear amidst a
series of <a class="symbol-reference" href="#symbol-declare">declare</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-expression">expressions</a> prior to a series of <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a>.<br/>In that case, if a <a class="glossary-reference" href="chapter-26.xhtml#glossary-string">string</a> <math xmlns="http://www.w3.org/1998/Math/MathML">S</math> appears where a <a class="glossary-reference" href="chapter-26.xhtml#glossary-documentation string">documentation string</a> is
permissible and is not followed by 
  either a <a class="symbol-reference" href="#symbol-declare">declare</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-expression">expression</a> 
      or a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>
then <math xmlns="http://www.w3.org/1998/Math/MathML">S</math> is taken to be a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>;
otherwise, <math xmlns="http://www.w3.org/1998/Math/MathML">S</math> is taken as a <a class="glossary-reference" href="chapter-26.xhtml#glossary-documentation string">documentation string</a>.
The consequences are unspecified if more than one such <a class="glossary-reference" href="chapter-26.xhtml#glossary-documentation string">documentation string</a> 
is present.<br/></section>
</section><section id="section-FuncallErrorChecking"><h2 class="section-title">Error Checking in Function Calls</h2>


<section id="section-ArgumentMismatchDetection"><h3 class="section-title">Argument Mismatch Detection</h3><section id="section-SafeAndUnsafeCalls"><h4 class="section-title">Safe and Unsafe Calls</h4><br/>A <a class="glossary-reference" href="chapter-26.xhtml#glossary-call">call</a> is a <span class="newterm">safe call</span> if each of the following is
either <a class="glossary-reference" href="chapter-26.xhtml#glossary-safe">safe</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-code">code</a> or <a class="glossary-reference" href="chapter-26.xhtml#glossary-system code">system code</a> (other than
<a class="glossary-reference" href="chapter-26.xhtml#glossary-system code">system code</a> that results from <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro expansion">macro expansion</a> of 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-programmer code">programmer code</a>):
<ul><li>the <a class="glossary-reference" href="chapter-26.xhtml#glossary-call">call</a>.
</li><li>the definition of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> being <a class="glossary-reference" href="chapter-26.xhtml#glossary-call">called</a>.
</li><li>the point of <a class="glossary-reference" href="chapter-26.xhtml#glossary-functional evaluation">functional evaluation</a> 
</li></ul><br/>The following special cases require some elaboration:<br/><ul><li>If the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> being called is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a>,
it is considered <a class="glossary-reference" href="chapter-26.xhtml#glossary-safe">safe</a> if all of the following are
<span class="glossary-reference error">glossary:safe code</span> or <a class="glossary-reference" href="chapter-26.xhtml#glossary-system code">system code</a>:

<ul><li>its definition (if it was defined explicitly).
</li><li>the <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> definitions for all <a class="glossary-reference" href="chapter-26.xhtml#glossary-applicable">applicable</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a>.
</li><li>the definition of its <a class="glossary-reference" href="chapter-26.xhtml#glossary-method combination">method combination</a>.
</li></ul><br/></li><li>For the form <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="chapter-4.xhtml#function-coerce">coerce</a> <span class="parameter">x</span> <span class="syntax-quote">'<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-function">function</a></span>)</span>
</span></code></pre>, 
where <span class="parameter">x</span> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda expression">lambda expression</a>,
the value of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-optimize quality">optimize quality</a> <span class="declaration-reference error">declaration:safety</span>
in the global environment at the time the <a class="function-reference" href="chapter-4.xhtml#function-coerce">coerce</a>
is <span class="glossary-reference error">glossary:executed</span> applies to the resulting <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a>.<br/>
   
</li><li>For a call to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="chapter-7.xhtml#function-ensure-generic-function">ensure-generic-function</a>, the value of the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-optimize quality">optimize quality</a> <span class="declaration-reference error">declaration:safety</span> in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-environment">environment</a>
<a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> passed as the <span class="keyword">:environment</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">argument</a> applies 
to the resulting <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a>.<br/></li><li>For a call to <a class="function-reference" href="#function-compile">compile</a> with a <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda expression">lambda expression</a> as the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">argument</a>, the value of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-optimize quality">optimize quality</a> <span class="function-reference error">function:safety</span>
in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-global environment">global environment</a> at the time <a class="function-reference" href="#function-compile">compile</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-call">called</a>
applies to the resulting <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiled function">compiled function</a>.<br/></li><li>For a call to <a class="function-reference" href="#function-compile">compile</a> with only one argument, if the original definition
of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> was <a class="glossary-reference" href="chapter-26.xhtml#glossary-safe">safe</a>, then the resulting <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiled function">compiled function</a>
must also be <a class="glossary-reference" href="chapter-26.xhtml#glossary-safe">safe</a>.<br/></li><li>A <a class="glossary-reference" href="chapter-26.xhtml#glossary-call">call</a> to a <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> by <a class="function-reference" href="chapter-7.xhtml#function-call-next-method">call-next-method</a> must be 
considered <a class="glossary-reference" href="chapter-26.xhtml#glossary-safe">safe</a> if each of the following is 
<span class="glossary-reference error">glossary:safe code</span> or <a class="glossary-reference" href="chapter-26.xhtml#glossary-system code">system code</a>:

<ul><li>the definition of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a> (if it was defined explicitly).
</li><li>the <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">method</a> definitions for all <a class="glossary-reference" href="chapter-26.xhtml#glossary-applicable">applicable</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a>.
</li><li>the definition of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-method combination">method combination</a>.
</li><li>the point of entry into the body of the <span class="glossary-reference error">glossary:method defining form</span>,
	      where the <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> of <a class="function-reference" href="chapter-7.xhtml#function-call-next-method">call-next-method</a> is established.
</li><li>the point of <a class="glossary-reference" href="chapter-26.xhtml#glossary-functional evaluation">functional evaluation</a> of the name <a class="function-reference" href="chapter-7.xhtml#function-call-next-method">call-next-method</a>.
</li></ul><br/></li></ul><br/>An <span class="newterm">unsafe call</span> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-call">call</a> that is not a <a class="glossary-reference" href="chapter-26.xhtml#glossary-safe call">safe call</a>.<br/>The informal intent is that the <a class="glossary-reference" href="chapter-26.xhtml#glossary-programmer">programmer</a> can rely on a <a class="glossary-reference" href="chapter-26.xhtml#glossary-call">call</a>
to be <a class="glossary-reference" href="chapter-26.xhtml#glossary-safe">safe</a>, even when <a class="glossary-reference" href="chapter-26.xhtml#glossary-system code">system code</a> is involved, if all reasonable
steps have been taken to ensure that the <a class="glossary-reference" href="chapter-26.xhtml#glossary-call">call</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-safe">safe</a>.
For example, if a <a class="glossary-reference" href="chapter-26.xhtml#glossary-programmer">programmer</a> calls <a class="function-reference" href="chapter-14.xhtml#function-mapcar">mapcar</a> from <a class="glossary-reference" href="chapter-26.xhtml#glossary-safe">safe</a>
<a class="glossary-reference" href="chapter-26.xhtml#glossary-code">code</a> and supplies a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> that was <a class="glossary-reference" href="chapter-26.xhtml#glossary-compile">compiled</a> 
as <a class="glossary-reference" href="chapter-26.xhtml#glossary-safe">safe</a>, the <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation">implementation</a> is required to ensure that
<a class="function-reference" href="chapter-14.xhtml#function-mapcar">mapcar</a> makes a <a class="glossary-reference" href="chapter-26.xhtml#glossary-safe call">safe call</a> as well.<br/><section id="section-SafeCallDetectionTime"><h5 class="section-title">Error Detection Time in Safe Calls</h5><br/>If an error is signaled in a <a class="glossary-reference" href="chapter-26.xhtml#glossary-safe call">safe call</a>,
the exact point of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-signal">signal</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a>.
In particular, it might be signaled at compile time or at run time,
and if signaled at run time, 
it might be prior to, during, or after <span class="glossary-reference error">glossary:executing</span> the <a class="glossary-reference" href="chapter-26.xhtml#glossary-call">call</a>.
However, it is always prior to the execution of the body of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> 
being <a class="glossary-reference" href="chapter-26.xhtml#glossary-call">called</a>.<br/></section></section><section id="section-TooFewArguments"><h4 class="section-title">Too Few Arguments</h4>It is not permitted to supply too few <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">arguments</a> to a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a>.
Too few arguments means fewer <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">arguments</a> than the number of <a class="glossary-reference" href="chapter-26.xhtml#glossary-required parameter">required parameters</a> 
for the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a>.<br/>If this <a class="glossary-reference" href="chapter-26.xhtml#glossary-situation">situation</a> occurs in a <a class="glossary-reference" href="chapter-26.xhtml#glossary-safe call">safe call</a>,
an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-5.xhtml#type-program-error">program-error</a> must be signaled;
and in an <a class="glossary-reference" href="chapter-26.xhtml#glossary-unsafe call">unsafe call</a> the <a class="glossary-reference" href="chapter-26.xhtml#glossary-situation">situation</a> has undefined consequences.<br/>
</section><section id="section-TooManyArguments"><h4 class="section-title">Too Many Arguments</h4>It is not permitted to supply too many <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">arguments</a> to a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a>.
Too many arguments means more <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">arguments</a> than the number of <a class="glossary-reference" href="chapter-26.xhtml#glossary-required parameter">required parameters</a>
plus the number of <a class="glossary-reference" href="chapter-26.xhtml#glossary-optional parameter">optional parameters</a>; however, if the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> 
uses <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-rest">rest</a> or <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-key">key</a>, it is not possible for it to receive too many arguments.<br/>If this <a class="glossary-reference" href="chapter-26.xhtml#glossary-situation">situation</a> occurs in a <a class="glossary-reference" href="chapter-26.xhtml#glossary-safe call">safe call</a>,
an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-5.xhtml#type-program-error">program-error</a> must be signaled;
and in an <a class="glossary-reference" href="chapter-26.xhtml#glossary-unsafe call">unsafe call</a> the <a class="glossary-reference" href="chapter-26.xhtml#glossary-situation">situation</a> has undefined consequences.<br/>
</section><section id="section-UnrecognizedKeyArgs"><h4 class="section-title">Unrecognized Keyword Arguments</h4><br/>It is not permitted to supply a keyword argument to a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a>
using a name that is not recognized by that <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> 
unless keyword argument checking is suppressed as described
in <a class="section-reference" href="#section-SuppressingKeyArgChecks">Suppressing Keyword Argument Checking</a>.<br/>If this <a class="glossary-reference" href="chapter-26.xhtml#glossary-situation">situation</a> occurs in a <a class="glossary-reference" href="chapter-26.xhtml#glossary-safe call">safe call</a>,
an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-5.xhtml#type-program-error">program-error</a> must be signaled;
and in an <a class="glossary-reference" href="chapter-26.xhtml#glossary-unsafe call">unsafe call</a> the <a class="glossary-reference" href="chapter-26.xhtml#glossary-situation">situation</a> has undefined consequences.<br/>
</section><section id="section-InvalidKeyArgs"><h4 class="section-title">Invalid Keyword Arguments</h4><br/>It is not permitted to supply a keyword argument to a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a>
using a name that is not a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>.<br/>If this <a class="glossary-reference" href="chapter-26.xhtml#glossary-situation">situation</a> occurs in a <a class="glossary-reference" href="chapter-26.xhtml#glossary-safe call">safe call</a>,
an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-5.xhtml#type-program-error">program-error</a> must be signaled 
unless keyword argument checking is suppressed as described
in <a class="section-reference" href="#section-SuppressingKeyArgChecks">Suppressing Keyword Argument Checking</a>;
and in an <a class="glossary-reference" href="chapter-26.xhtml#glossary-unsafe call">unsafe call</a> the <a class="glossary-reference" href="chapter-26.xhtml#glossary-situation">situation</a> has undefined consequences.<br/>
</section><section id="section-OddNumberOfKeyArgs"><h4 class="section-title">Odd Number of Keyword Arguments</h4><br/>
An odd number of <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">arguments</a> must not be supplied for the <a class="glossary-reference" href="chapter-26.xhtml#glossary-keyword parameter">keyword parameters</a>.<br/>If this <a class="glossary-reference" href="chapter-26.xhtml#glossary-situation">situation</a> occurs in a <a class="glossary-reference" href="chapter-26.xhtml#glossary-safe call">safe call</a>,
an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-5.xhtml#type-program-error">program-error</a> must be signaled
unless keyword argument checking is suppressed as described
in <a class="section-reference" href="#section-SuppressingKeyArgChecks">Suppressing Keyword Argument Checking</a>;
and in an <a class="glossary-reference" href="chapter-26.xhtml#glossary-unsafe call">unsafe call</a> the <a class="glossary-reference" href="chapter-26.xhtml#glossary-situation">situation</a> has undefined consequences.<br/>
</section><section id="section-DestructuringMismatch"><h4 class="section-title">Destructuring Mismatch</h4><br/>
When matching a <a class="glossary-reference" href="chapter-26.xhtml#glossary-destructuring lambda list">destructuring lambda list</a> against a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>,
the pattern and the <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> must have compatible <a class="glossary-reference" href="chapter-26.xhtml#glossary-tree structure">tree structure</a>,
as described in <span class="section-reference error">section:ExtraDestructureInfo</span>.<br/>Otherwise, in a <a class="glossary-reference" href="chapter-26.xhtml#glossary-safe call">safe call</a>,
an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-5.xhtml#type-program-error">program-error</a> must be signaled;
and in an <a class="glossary-reference" href="chapter-26.xhtml#glossary-unsafe call">unsafe call</a> the <a class="glossary-reference" href="chapter-26.xhtml#glossary-situation">situation</a> has undefined consequences.<br/>
</section><section id="section-ErrorsWhenCallingaNextMethod"><h4 class="section-title">Errors When Calling a Next Method</h4>If <a class="function-reference" href="chapter-7.xhtml#function-call-next-method">call-next-method</a> is called with <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">arguments</a>, the ordered
set of <a class="glossary-reference" href="chapter-26.xhtml#glossary-applicable">applicable</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> for the changed set of <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">arguments</a>
for <a class="function-reference" href="chapter-7.xhtml#function-call-next-method">call-next-method</a> must be the same as the ordered set of 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-applicable">applicable</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-method">methods</a> for the original <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">arguments</a> to the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-generic function">generic function</a>, or else an error should be signaled.<br/>The comparison between the set of methods applicable to the
new arguments and the set applicable to the original arguments is
insensitive to order differences among methods with the same
specializers.<br/>If <a class="function-reference" href="chapter-7.xhtml#function-call-next-method">call-next-method</a> is called with <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">arguments</a> that specify
a different ordered set of <a class="glossary-reference" href="chapter-26.xhtml#glossary-applicable">applicable</a> methods and there is no 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-next method">next method</a> available, the test for different methods and the 
associated error signaling (when present) takes precedence over calling
<a class="function-reference" href="chapter-7.xhtml#function-no-next-method">no-next-method</a>.<br/></section></section>
</section><section id="section-TraversalRules"><h2 class="section-title">Traversal Rules and Side Effects</h2>

 
The consequences are undefined 
when <a class="glossary-reference" href="chapter-26.xhtml#glossary-code">code</a> executed during an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object-traversing">object-traversing</a> operation
destructively modifies the <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> in a way that might affect the
ongoing traversal operation.
In particular, the following rules apply.
<dl><dt><span class="explicit-bold"> List traversal</span></dt><dd>For <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> traversal operations, the <a class="glossary-reference" href="chapter-26.xhtml#glossary-cdr">cdr</a> chain of the
 <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> is not allowed to be destructively modified.<br/></dd><dt><span class="explicit-bold"> Array traversal</span></dt><dd>For <a class="glossary-reference" href="chapter-26.xhtml#glossary-array">array</a> traversal operations, the <a class="glossary-reference" href="chapter-26.xhtml#glossary-array">array</a> is not allowed 
  to be adjusted and its <a class="glossary-reference" href="chapter-26.xhtml#glossary-fill pointer">fill pointer</a>, if any, is not allowed to 
  be changed.<br/></dd><dt><span class="explicit-bold"> Hash-table traversal</span></dt><dd>For <a class="glossary-reference" href="chapter-26.xhtml#glossary-hash table">hash table</a> traversal operations, new elements may not be added
  or deleted except that the element corresponding to the current hash key 
  may be changed or removed.<br/></dd><dt><span class="explicit-bold"> Package traversal</span></dt><dd>For <a class="glossary-reference" href="chapter-26.xhtml#glossary-package">package</a> traversal operations (<span class="explicit-italic"> e.g.</span>,  <a class="macro-reference" href="chapter-11.xhtml#macro-do-symbols">do-symbols</a>),
  new <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbols</a> may not be <a class="glossary-reference" href="chapter-26.xhtml#glossary-interned">interned</a> in or <a class="glossary-reference" href="chapter-26.xhtml#glossary-uninterned">uninterned</a> 
  from the <a class="glossary-reference" href="chapter-26.xhtml#glossary-package">package</a> being traversed 
  or any <a class="glossary-reference" href="chapter-26.xhtml#glossary-package">package</a> that it uses except that the 
  current <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> may be <a class="glossary-reference" href="chapter-26.xhtml#glossary-uninterned">uninterned</a> from the <a class="glossary-reference" href="chapter-26.xhtml#glossary-package">package</a> 
  being traversed.<br/></dd></dl> 

</section><section id="section-DestructiveOperations"><h2 class="section-title">Destructive Operations</h2>

<section id="section-ModificationofLiteralObjects"><h3 class="section-title">Modification of Literal Objects</h3>The consequences are undefined if <a class="glossary-reference" href="chapter-26.xhtml#glossary-literal">literal</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a> 
are destructively modified.  For this purpose, the following operations 
are considered <a class="glossary-reference" href="chapter-26.xhtml#glossary-destructive">destructive</a>:<br/><dl><dt><a class="type-reference" href="chapter-12.xhtml#type-random-state">random-state</a></dt><dd>Using it as an <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">argument</a> to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="chapter-12.xhtml#function-random">random</a>.<br/></dd><dt><a class="type-reference" href="chapter-14.xhtml#type-cons">cons</a></dt><dd>Changing the <a class="glossary-reference" href="chapter-26.xhtml#glossary-car">car</a><sub>1</sub> or <a class="glossary-reference" href="chapter-26.xhtml#glossary-cdr">cdr</a><sub>1</sub> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-cons">cons</a>,
or performing a <a class="glossary-reference" href="chapter-26.xhtml#glossary-destructive">destructive</a> operation on an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> which is either
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-car">car</a><sub>2</sub> or the <a class="glossary-reference" href="chapter-26.xhtml#glossary-cdr">cdr</a><sub>2</sub> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-cons">cons</a>.<br/></dd><dt><a class="type-reference" href="chapter-15.xhtml#type-array">array</a></dt><dd>Storing a new value into some element of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-array">array</a>,
or performing a <a class="glossary-reference" href="chapter-26.xhtml#glossary-destructive">destructive</a> operation 
on an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> that is already such an <a class="glossary-reference" href="chapter-26.xhtml#glossary-element">element</a>.<br/>Changing the <a class="glossary-reference" href="chapter-26.xhtml#glossary-fill pointer">fill pointer</a>, <a class="glossary-reference" href="chapter-26.xhtml#glossary-dimension">dimensions</a>, or displacement of
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-array">array</a> (regardless of whether the <a class="glossary-reference" href="chapter-26.xhtml#glossary-array">array</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-actually adjustable">actually adjustable</a>).<br/>Performing a <a class="glossary-reference" href="chapter-26.xhtml#glossary-destructive">destructive</a> operation on another <a class="glossary-reference" href="chapter-26.xhtml#glossary-array">array</a> 
that is displaced to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-array">array</a> or that otherwise shares its contents
with the <a class="glossary-reference" href="chapter-26.xhtml#glossary-array">array</a>.<br/></dd><dt><a class="type-reference" href="chapter-18.xhtml#type-hash-table">hash-table</a></dt><dd>Performing a <a class="glossary-reference" href="chapter-26.xhtml#glossary-destructive">destructive</a> operation on any <a class="glossary-reference" href="chapter-26.xhtml#glossary-key">key</a>.<br/>Storing a new <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a><sub>4</sub> for any <a class="glossary-reference" href="chapter-26.xhtml#glossary-key">key</a>,
or performing a <a class="glossary-reference" href="chapter-26.xhtml#glossary-destructive">destructive</a> operation 
on any <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> that is such a <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a>.<br/>Adding or removing entries from the <a class="glossary-reference" href="chapter-26.xhtml#glossary-hash table">hash table</a>.<br/></dd><dt><a class="type-reference" href="chapter-4.xhtml#type-structure-object">structure-object</a></dt><dd>Storing a new value into any slot,
or performing a <a class="glossary-reference" href="chapter-26.xhtml#glossary-destructive">destructive</a> operation on an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> 
that is the value of some slot.<br/></dd><dt><a class="type-reference" href="chapter-4.xhtml#type-standard-object">standard-object</a></dt><dd>Storing a new value into any slot,
or performing a <a class="glossary-reference" href="chapter-26.xhtml#glossary-destructive">destructive</a> operation on an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> 
that is the value of some slot.<br/>Changing the class of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> (<span class="explicit-italic"> e.g.</span>,  using the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="chapter-7.xhtml#function-change-class">change-class</a>).<br/></dd><dt><a class="type-reference" href="chapter-23.xhtml#type-readtable">readtable</a></dt><dd>Altering the <a class="glossary-reference" href="chapter-26.xhtml#glossary-readtable case">readtable case</a>.<br/>Altering the syntax type of any character in this readtable.<br/>Altering the <a class="glossary-reference" href="chapter-26.xhtml#glossary-reader macro function">reader macro function</a> associated with any <a class="glossary-reference" href="chapter-26.xhtml#glossary-character">character</a>
in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-readtable">readtable</a>, or altering the <a class="glossary-reference" href="chapter-26.xhtml#glossary-reader macro function">reader macro functions</a>
associated with <a class="glossary-reference" href="chapter-26.xhtml#glossary-character">characters</a> defined as <a class="glossary-reference" href="chapter-26.xhtml#glossary-dispatching macro character">dispatching macro characters</a>
in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-readtable">readtable</a>.<br/></dd><dt><a class="type-reference" href="chapter-21.xhtml#type-stream">stream</a></dt><dd>Performing I/O operations on the <a class="glossary-reference" href="chapter-26.xhtml#glossary-stream">stream</a>,
or <span class="glossary-reference error">glossary:closing</span> the <a class="glossary-reference" href="chapter-26.xhtml#glossary-stream">stream</a>.<br/></dd><dt>All other standardized types</dt><dd>[This category includes, for example, <a class="type-reference" href="chapter-13.xhtml#type-character">character</a>,
                                      <a class="type-reference" href="chapter-9.xhtml#type-condition">condition</a>,
                                      <a class="type-reference" href="chapter-4.xhtml#type-function">function</a>,
                                      <a class="type-reference" href="chapter-4.xhtml#type-method-combination">method-combination</a>,
                                      <a class="type-reference" href="chapter-4.xhtml#type-method">method</a>,
                                      <a class="type-reference" href="chapter-12.xhtml#type-number">number</a>,
                                      <a class="type-reference" href="chapter-11.xhtml#type-package">package</a>,
                                      <a class="type-reference" href="chapter-19.xhtml#type-pathname">pathname</a>,
                                      <a class="type-reference" href="chapter-9.xhtml#type-restart">restart</a>,
                                  and <a class="type-reference" href="chapter-10.xhtml#type-symbol">symbol</a>.]<br/>
There are no <a class="glossary-reference" href="chapter-26.xhtml#glossary-standardized">standardized</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-destructive">destructive</a> operations
defined on <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a> of these <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">types</a>.<br/></dd></dl><br/></section>
<section id="section-TransferofControlduringaDestructiveOperation"><h3 class="section-title">Transfer of Control during a Destructive Operation</h3>Should a transfer of control out of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-destructive">destructive</a> operation occur
(<span class="explicit-italic"> e.g.</span>,  due to an error) the state of the <span class="parameter">object</span> being modified is
<a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a>.<br/><section id="section-ExamplesofTransferofControlduringaDestructiveOperation"><h4 class="section-title">Examples of Transfer of Control during a Destructive Operation</h4>The following examples illustrate some of the many ways in which the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a> nature of the modification can manifest
itself.<br/><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-number">2</span> <span class="syntax-number">1</span> <span class="syntax-number">4</span> <span class="syntax-number">3</span> <span class="syntax-number">7</span> <span class="syntax-number">6</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">five</span></span>)</span>)</span>)</span>
   <span class="syntax-cons">(<a class="macro-reference" href="chapter-9.xhtml#macro-ignore-errors">ignore-errors</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-17.xhtml#function-sort">sort</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-function">#'<a class="function-reference" href="chapter-12.xhtml#function-&lt;">&lt;</a></span>)</span>)</span>
   <span class="syntax-interned-symbol">a</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">3</span> <span class="syntax-number">4</span> <span class="syntax-number">6</span> <span class="syntax-number">7</span> <span class="syntax-interned-symbol">FIVE</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mover>or<mi>â†’</mi></mover></math> <span class="syntax-cons">(<span class="syntax-number">2</span> <span class="syntax-number">1</span> <span class="syntax-number">4</span> <span class="syntax-number">3</span> <span class="syntax-number">7</span> <span class="syntax-number">6</span> <span class="syntax-interned-symbol">FIVE</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mover>or<mi>â†’</mi></mover></math> <span class="syntax-cons">(<span class="syntax-number">2</span>)</span>

 <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-prog">prog</a> <span class="syntax-interned-symbol">foo</span> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">3</span> <span class="syntax-number">4</span> <span class="syntax-number">5</span> <span class="syntax-number">6</span> <span class="syntax-number">7</span> <span class="syntax-number">8</span> <span class="syntax-number">9</span> <span class="syntax-number">10</span>)</span>)</span>)</span>
   <span class="syntax-cons">(<a class="function-reference" href="chapter-17.xhtml#function-sort">sort</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-function">#'<span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-zerop">zerop</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-random">random</a> <span class="syntax-number">5</span>)</span>)</span> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-return-from">return-from</a> <span class="syntax-interned-symbol">foo</span> <span class="syntax-interned-symbol">a</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-&gt;">&gt;</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span>)</span>)</span></span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">3</span> <span class="syntax-number">4</span> <span class="syntax-number">5</span> <span class="syntax-number">6</span> <span class="syntax-number">7</span> <span class="syntax-number">8</span> <span class="syntax-number">9</span> <span class="syntax-number">10</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mover>or<mi>â†’</mi></mover></math> <span class="syntax-cons">(<span class="syntax-number">3</span> <span class="syntax-number">4</span> <span class="syntax-number">5</span> <span class="syntax-number">6</span> <span class="syntax-number">2</span> <span class="syntax-number">7</span> <span class="syntax-number">8</span> <span class="syntax-number">9</span> <span class="syntax-number">10</span> <span class="syntax-number">1</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mover>or<mi>â†’</mi></mover></math> <span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">4</span> <span class="syntax-number">3</span>)</span>
</span></code></pre><br/></section></section>
</section><br/><section id="section-Dictionary"><h2 class="section-title">Dictionary</h2>



<br/><div class="component" id="symbol-lambda"><div class="header"><span class="left"><span class="name" id="symbol-lambda">lambda</span></span><span class="right"><span class="ftype">Symbol</span></span></div><br/>
<dl><dt class="label">Syntax</dt><dd><span class="special-operator-definition"><span class="name">lambda</span>&nbsp;<span class="lambda-list">lambda-list <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>[</mi><mi>[</mi></math> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">declaration</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>|</mi></math> <span class="parameter">documentation</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>]</mi><mi>]</mi></math> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">form</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span></span>&nbsp;â†’&nbsp;|</span><br/></dd></dl><dl><dt class="label">Arguments</dt><dd><span class="parameter">lambda-list</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-ordinary lambda list">ordinary lambda list</a>.<br/><span class="parameter">declaration</span>&mdash;a <a class="symbol-reference" href="#symbol-declare">declare</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-expression">expression</a>; not evaluated.<br/><span class="parameter">documentation</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-string">string</a>; not evaluated.<br/><span class="parameter">form</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>A <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda expression">lambda expression</a> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> that can be used in place of a
<a class="glossary-reference" href="chapter-26.xhtml#glossary-function name">function name</a> in certain contexts to denote a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> by 
directly describing its behavior rather than indirectly by referring to the 
name of an <a class="glossary-reference" href="chapter-26.xhtml#glossary-establish">established</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a>.<br/><span class="parameter">Documentation</span> is attached to the denoted <span class="parameter">function</span> (if any
is actually created) as a <a class="glossary-reference" href="chapter-26.xhtml#glossary-documentation string">documentation string</a>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="special-operator-reference" href="chapter-5.xhtml#special-operator-function">function</a>,
<a class="function-reference" href="chapter-25.xhtml#function-documentation">documentation</a>,
<a class="section-reference" href="#section-LambdaExpressions">Lambda Expressions</a>,
<a class="section-reference" href="#section-LambdaForms">Lambda Forms</a>,
<a class="section-reference" href="#section-DocVsDecls">Syntactic Interaction of Documentation Strings and Declarations</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda form">lambda form</a><br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="parameter">lambda-list</span> <span class="syntax-symbol">.</span> <span class="parameter">body</span>)</span> <span class="syntax-symbol">.</span> <span class="parameter">arguments</span>)</span>
</span></code></pre><br/>is semantically equivalent to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function form">function form</a><br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-funcall">funcall</a> <span class="syntax-function">#'<span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="parameter">lambda-list</span> <span class="syntax-symbol">.</span> <span class="parameter">body</span>)</span></span> <span class="syntax-symbol">.</span> <span class="parameter">arguments</span>)</span>
</span></code></pre><br/></dd></dl>
</div><br/>

<br/><div class="component" id="macro-lambda"><div class="header"><span class="left"><span class="name" id="macro-lambda">lambda</span></span><span class="right"><span class="ftype">Macro</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">lambda</span>&nbsp;<span class="lambda-list">lambda-list <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>[</mi><mi>[</mi></math> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">declaration</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>|</mi></math> <span class="parameter">documentation</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>]</mi><mi>]</mi></math> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">form</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span></span>&nbsp;â†’&nbsp;<span class="return-values"><span class="parameter">function</span></span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">lambda-list</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-ordinary lambda list">ordinary lambda list</a>.<br/><span class="parameter">declaration</span>&mdash;a <a class="symbol-reference" href="#symbol-declare">declare</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-expression">expression</a>; not evaluated.<br/><span class="parameter">documentation</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-string">string</a>; not evaluated.<br/><span class="parameter">form</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>.<br/><span class="parameter">function</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>Provides a shorthand notation for a <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-function">function</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-special form">special form</a>
involving a <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda expression">lambda expression</a> such that:<br/><pre><code><span class="syntax-root">   <span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="parameter">lambda-list</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>[</mi><mi>[</mi></math> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">declaration</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>|</mi></math> <span class="parameter">documentation</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>]</mi><mi>]</mi></math> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">form</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>â‰¡</mo></math> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-function">function</a> <span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="parameter">lambda-list</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>[</mi><mi>[</mi></math> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">declaration</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>|</mi></math> <span class="parameter">documentation</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>]</mi><mi>]</mi></math> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">form</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>â‰¡</mo></math> <span class="syntax-function">#'<span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="parameter">lambda-list</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>[</mi><mi>[</mi></math> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">declaration</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>|</mi></math> <span class="parameter">documentation</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>]</mi><mi>]</mi></math> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">form</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span>)</span></span>
</span></code></pre><br/></dd></dl><dl><dt class="label">Examples</dt><dd><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-funcall">funcall</a> <span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-number">3</span>)</span>)</span> <span class="syntax-number">4</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">7</span>
</span></code></pre><br/></dd></dl><dl><dt class="label">Side Effects</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="symbol-reference" href="#symbol-lambda">lambda</a> (symbol)<br/></dd></dl><dl><dt class="label">Notes</dt><dd>This macro could be implemented by:<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="#macro-defmacro">defmacro</a> <a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-cons">(<a class="lambda-list-keyword-reference" href="#lambda-list-keyword-whole">&amp;WHOLE</a> <span class="syntax-interned-symbol">form</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-rest">&amp;REST</a> <span class="syntax-interned-symbol">bvl-decls-and-body</span>)</span>
  <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="declaration-reference" href="#declaration-ignore">ignore</a> <span class="syntax-interned-symbol">bvl-decls-and-body</span>)</span>)</span>
  <span class="syntax-quasiquote">`<span class="syntax-function">#'<span class="syntax-unquote">,<span class="syntax-interned-symbol">form</span></span></span></span>)</span>
</span></code></pre><br/></dd></dl></div><br/>


<br/><div class="component" id="function-compile"><div class="header"><span class="left"><span class="name" id="function-compile">compile</span></span><span class="right"><span class="ftype">Function</span></span></div><br/>
<dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">compile</span>&nbsp;<span class="lambda-list">name <span class="lambda-list-keyword">&amp;optional</span> definition</span>&nbsp;â†’&nbsp;<span class="return-values">function, warnings-p, failure-p</span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">name</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function name">function name</a>, or <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.<br/><span class="parameter">definition</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda expression">lambda expression</a> or a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a>.
  The default is the function definition of <span class="parameter">name</span> if it names a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a>,
	   or the <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro function">macro function</a> of <span class="parameter">name</span> if it names a <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a>.
  The consequences are undefined if no <span class="parameter">definition</span> is supplied
  when the <span class="parameter">name</span> is <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.<br/><span class="parameter">function</span>&mdash;the <span class="parameter">function-name</span>,
	        or a <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiled function">compiled function</a>.

<span class="parameter">warnings-p</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generalized boolean">generalized boolean</a>.<br/><span class="parameter">failure-p</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generalized boolean">generalized boolean</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>Compiles an <a class="glossary-reference" href="chapter-26.xhtml#glossary-interpreted function">interpreted function</a>.

<a class="function-reference" href="#function-compile">compile</a> produces a <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiled function">compiled function</a> from <span class="parameter">definition</span>.
If the <span class="parameter">definition</span> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda expression">lambda expression</a>,
it is coerced to a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a>.  
If the <span class="parameter">definition</span> is already a <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiled function">compiled function</a>,
<a class="function-reference" href="#function-compile">compile</a> either produces that function itself (<span class="explicit-italic"> i.e.</span>,  is an identity operation)
or an equivalent function.

If the <span class="parameter">name</span> is <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>,
the resulting <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiled function">compiled function</a> is returned directly as the <a class="glossary-reference" href="chapter-26.xhtml#glossary-primary value">primary value</a>.
If a <a class="glossary-reference" href="chapter-26.xhtml#glossary-non-nil">non-nil</a> <span class="parameter">name</span> is given, 
then the resulting <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiled function">compiled function</a> replaces 
the existing <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> definition of <span class="parameter">name</span>
and the <span class="parameter">name</span> is returned as the <a class="glossary-reference" href="chapter-26.xhtml#glossary-primary value">primary value</a>;
if <span class="parameter">name</span> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> that names a <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a>,
its <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro function">macro function</a> is updated
and the <span class="parameter">name</span> is returned as the <a class="glossary-reference" href="chapter-26.xhtml#glossary-primary value">primary value</a>.<br/><span class="glossary-reference error">glossary:Literal objects</span> appearing in code processed by 
the <a class="function-reference" href="#function-compile">compile</a> function are neither copied nor <a class="glossary-reference" href="chapter-26.xhtml#glossary-coalesce">coalesced</a>.
The code resulting from the execution of <a class="function-reference" href="#function-compile">compile</a> 
references <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a> that are <a class="function-reference" href="chapter-5.xhtml#function-eql">eql</a> to the corresponding
<a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a> in the source code.  

<a class="function-reference" href="#function-compile">compile</a> is permitted, but not required, to <a class="glossary-reference" href="chapter-26.xhtml#glossary-establish">establish</a>
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-handler">handler</a> for <a class="glossary-reference" href="chapter-26.xhtml#glossary-condition">conditions</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-9.xhtml#type-error">error</a>.
For example, the <a class="glossary-reference" href="chapter-26.xhtml#glossary-handler">handler</a> might issue a warning and 
restart compilation from some <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a> point 
in order to let the compilation proceed without manual intervention.

The <a class="glossary-reference" href="chapter-26.xhtml#glossary-secondary value">secondary value</a>, <span class="parameter">warnings-p</span>, is <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>
if no <a class="glossary-reference" href="chapter-26.xhtml#glossary-condition">conditions</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-9.xhtml#type-error">error</a> or <a class="type-reference" href="chapter-9.xhtml#type-warning">warning</a>
were detected by the compiler, and <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a> otherwise.<br/>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-tertiary value">tertiary value</a>, <span class="parameter">failure-p</span>, is <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>
if no <a class="glossary-reference" href="chapter-26.xhtml#glossary-condition">conditions</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-9.xhtml#type-error">error</a> or <a class="type-reference" href="chapter-9.xhtml#type-warning">warning</a>
(other than <a class="type-reference" href="chapter-9.xhtml#type-style-warning">style-warning</a>)
were detected by the compiler, and <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a> otherwise.<br/></dd></dl><dl><dt class="label">Examples</dt><dd><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">foo</span> <span class="syntax-symbol">()</span> <span class="syntax-string">"bar"</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">FOO</span>
<span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-compiled-function-p">compiled-function-p</a> <span class="syntax-function">#'<span class="syntax-interned-symbol">foo</span></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a>
<span class="syntax-cons">(<a class="function-reference" href="#function-compile">compile</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">foo</span></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">FOO</span> 
<span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-compiled-function-p">compiled-function-p</a> <span class="syntax-function">#'<span class="syntax-interned-symbol">foo</span></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>
<span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-10.xhtml#function-symbol-function">symbol-function</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">foo</span></span>)</span>
      <span class="syntax-cons">(<a class="function-reference" href="#function-compile">compile</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-quote">'<span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-symbol">()</span> <span class="syntax-string">"replaced"</span>)</span></span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-verbatim">#&lt;Compiled-Function&gt;</span>
<span class="syntax-cons">(<span class="syntax-interned-symbol">foo</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"replaced"</span>
</span></code></pre>

</dd></dl><dl><dt class="label">Affected By</dt><dd><a class="variable-reference" href="chapter-21.xhtml#variable-*error-output*">*error-output*</a>,
<a class="variable-reference" href="#variable-*macroexpand-hook*">*macroexpand-hook*</a>.<br/>The presence of macro definitions and proclamations.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd>The consequences are undefined if the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical environment">lexical environment</a> surrounding the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> to be compiled contains any <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a> other than those for
<a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macros</a>, <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol macro">symbol macros</a>, or <a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration">declarations</a>.<br/>



For information about errors detected during the compilation process, 
see <span class="section-reference error">section:FileCompilerExceptions.</span><br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="function-reference" href="chapter-24.xhtml#function-compile-file">compile-file</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd><span class="none">None</span>.<br/></dd></dl></div><br/><br/><br/><div class="component" id="function-eval"><div class="header"><span class="left"><span class="name" id="function-eval">eval</span></span><span class="right"><span class="ftype">Function</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">eval</span>&nbsp;<span class="lambda-list">form</span>&nbsp;â†’&nbsp;<span class="return-values"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">result</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span></span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">form</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>.<br/><span class="parameter">results</span>&mdash;the <span class="glossary-reference error">glossary:values</span> <span class="glossary-reference error">glossary:yielded</span> by the <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluation</a> of <span class="parameter">form</span>.<br/>
</dd></dl><dl><dt class="label">Description</dt><dd>Evaluates <span class="parameter">form</span> in the current <a class="glossary-reference" href="chapter-26.xhtml#glossary-dynamic environment">dynamic environment</a>
and the <a class="glossary-reference" href="chapter-26.xhtml#glossary-null lexical environment">null lexical environment</a>.<br/>
<a class="function-reference" href="#function-eval">eval</a> is a user interface to the evaluator.<br/>The evaluator expands macro calls as if through the use of <a class="function-reference" href="#function-macroexpand-1">macroexpand-1</a>.<br/>
Constants appearing in code
processed by <a class="function-reference" href="#function-eval">eval</a> are
not copied nor coalesced. The code resulting from the execution of 
<a class="function-reference" href="#function-eval">eval</a>
references <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a> 
that are <a class="function-reference" href="chapter-5.xhtml#function-eql">eql</a> to the corresponding <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a> in
the source code.  


</dd></dl><dl><dt class="label">Examples</dt><dd><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">form</span> <span class="syntax-quote">'<span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-1+">1+</a> <span class="syntax-interned-symbol">a</span>)</span></span> <span class="syntax-interned-symbol">a</span> <span class="syntax-number">999</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">999</span>
 <span class="syntax-cons">(<a class="function-reference" href="#function-eval">eval</a> <span class="syntax-interned-symbol">form</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">1000</span>
 <span class="syntax-cons">(<a class="function-reference" href="#function-eval">eval</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">form</span></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-1+">1+</a> <span class="syntax-interned-symbol">A</span>)</span>
 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">this</span> <span class="syntax-interned-symbol">would</span> <a class="function-reference" href="chapter-9.xhtml#function-break">break</a> <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-if">if</a> <a class="function-reference" href="#function-eval">eval</a> <span class="syntax-interned-symbol">used</span> <span class="syntax-interned-symbol">local</span> <span class="syntax-interned-symbol">value</span>)</span></span>)</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="#function-eval">eval</a> <span class="syntax-interned-symbol">form</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">1000</span>
</span></code></pre><br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="function-reference" href="#function-macroexpand-1">macroexpand-1</a>,
<a class="section-reference" href="#section-EvaluationModel">The Evaluation Model</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd>To obtain the current dynamic value of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>, 
use of <a class="function-reference" href="chapter-10.xhtml#function-symbol-value">symbol-value</a> is equivalent (and usually preferable) 
to use of <a class="function-reference" href="#function-eval">eval</a>.<br/>Note that an <a class="function-reference" href="#function-eval">eval</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> involves two levels of <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluation</a> 
for its <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">argument</a>.  First, <span class="parameter">form</span> is <span class="glossary-reference error">glossary:evaluated</span> by the
normal argument evaluation mechanism as would occur with any <a class="glossary-reference" href="chapter-26.xhtml#glossary-call">call</a>.
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> that results from this normal <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">argument</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluation</a> 
becomes the <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a> of the <span class="parameter">form</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter">parameter</a>, and is then
<span class="glossary-reference error">glossary:evaluated</span> as part of the <a class="function-reference" href="#function-eval">eval</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>.
For example:<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="#function-eval">eval</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-quote">'<a class="function-reference" href="chapter-14.xhtml#function-cdr">cdr</a></span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-car">car</a> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-quote">quote</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-symbol">.</span> <span class="syntax-interned-symbol">b</span>)</span>)</span> <span class="syntax-interned-symbol">c</span>)</span></span>)</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">b</span>
</span></code></pre>
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">argument</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-quote">'<a class="function-reference" href="chapter-14.xhtml#function-cdr">cdr</a></span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-car">car</a> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-quote">quote</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-symbol">.</span> <span class="syntax-interned-symbol">b</span>)</span>)</span> <span class="syntax-interned-symbol">c</span>)</span></span>)</span>)</span>
</span></code></pre> is evaluated
in the usual way to produce the <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">argument</a> <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-cdr">cdr</a> <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-quote">quote</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-symbol">.</span> <span class="syntax-interned-symbol">b</span>)</span>)</span>)</span>
</span></code></pre>; 
<a class="function-reference" href="#function-eval">eval</a> then evaluates its <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">argument</a>, <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-cdr">cdr</a> <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-quote">quote</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-symbol">.</span> <span class="syntax-interned-symbol">b</span>)</span>)</span>)</span>
</span></code></pre>, to produce <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">b</span>
</span></code></pre>.
Since a single <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluation</a> already occurs for any <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">argument</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>
in any <a class="glossary-reference" href="chapter-26.xhtml#glossary-function form">function form</a>,
<a class="function-reference" href="#function-eval">eval</a> is sometimes said to perform ``an extra level of evaluation.''<br/>
</dd></dl></div><br/><br/><br/><div class="component" id="special-operator-eval-when"><div class="header"><span class="left"><span class="name" id="special-operator-eval-when">eval-when</span></span><span class="right"><span class="ftype">Special Operator</span></span></div>      <br/><dl><dt class="label">Syntax</dt><dd><span class="special-operator-definition"><span class="name">eval-when</span>&nbsp;<span class="lambda-list"><span class="explicit-roman">(</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">situation</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span><span class="explicit-roman">)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">form</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span></span>&nbsp;â†’&nbsp;<span class="return-values"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">result</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span></span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">situation</span>&mdash;One of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbols</a> 
		    <span class="keyword">:compile-toplevel</span><a id="keyword-compile-toplevel"></a>,
		    <span class="keyword">:load-toplevel</span><a id="keyword-load-toplevel"></a>,
		    <span class="keyword">:execute</span><a id="keyword-execute"></a>,
		    <a class="symbol-reference" href="#symbol-compile">compile</a><a id="symbol-compile"></a>,
		    <a class="symbol-reference" href="#symbol-load">load</a><a id="symbol-load"></a>, or
		    <a class="symbol-reference" href="chapter-2.xhtml#symbol-eval">eval</a><a id="symbol-eval"></a>.<br/>The use of <a class="symbol-reference" href="chapter-2.xhtml#symbol-eval">eval</a>, <a class="symbol-reference" href="#symbol-compile">compile</a>, and <a class="symbol-reference" href="#symbol-load">load</a> is deprecated.

<span class="parameter">forms</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-implicit progn">implicit progn</a>.<br/><span class="parameter">results</span>&mdash;the <span class="glossary-reference error">glossary:values</span> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a> if they are executed,
		  or <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a> if they are not. <br/></dd></dl><dl><dt class="label">Description</dt><dd>The body of an <a class="special-operator-reference" href="#special-operator-eval-when">eval-when</a> form is processed as an <a class="glossary-reference" href="chapter-26.xhtml#glossary-implicit progn">implicit progn</a>, 
but only in the <span class="parameter">situations</span> listed.  

 

The use of the <span class="parameter">situations</span> <span class="keyword">:compile-toplevel</span> (or <span class="explicit-mono">compile</span>) and
<span class="keyword">:load-toplevel</span> (or <span class="explicit-mono">load</span>) controls whether and when <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluation</a>
occurs when <a class="special-operator-reference" href="#special-operator-eval-when">eval-when</a> appears as a <a class="glossary-reference" href="chapter-26.xhtml#glossary-top level form">top level form</a> in
code processed by <a class="function-reference" href="chapter-24.xhtml#function-compile-file">compile-file</a>.  See <span class="section-reference error">section:FileCompilation.</span><br/>The use of the <span class="parameter">situation</span> <span class="keyword">:execute</span> (or <span class="explicit-mono">eval</span>) controls whether
evaluation occurs for other <a class="special-operator-reference" href="#special-operator-eval-when">eval-when</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a>; that is, 
those that are not <a class="glossary-reference" href="chapter-26.xhtml#glossary-top level form">top level forms</a>, or those in code processed by
<a class="function-reference" href="#function-eval">eval</a> or <a class="function-reference" href="#function-compile">compile</a>.  If the <span class="keyword">:execute</span> situation is
specified in such a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>, then the body <span class="parameter">forms</span> are processed as 
an <a class="glossary-reference" href="chapter-26.xhtml#glossary-implicit progn">implicit progn</a>; otherwise, the <a class="special-operator-reference" href="#special-operator-eval-when">eval-when</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>
returns <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.<br/><br/>
<a class="special-operator-reference" href="#special-operator-eval-when">eval-when</a> 
normally appears as a <a class="glossary-reference" href="chapter-26.xhtml#glossary-top level form">top level form</a>, but it is meaningful
for it to appear as a <a class="glossary-reference" href="chapter-26.xhtml#glossary-non-top-level form">non-top-level form</a>.
However, the compile-time side
effects described in <a class="section-reference" href="#section-Compilation">Compilation</a>
only take place when <a class="special-operator-reference" href="#special-operator-eval-when">eval-when</a> appears as a  
<a class="glossary-reference" href="chapter-26.xhtml#glossary-top level form">top level form</a>.
 

</dd></dl><dl><dt class="label">Examples</dt><dd>One example of the use of <a class="special-operator-reference" href="#special-operator-eval-when">eval-when</a> is that for the 
compiler to be able to read a file properly when it uses user-defined
<a class="glossary-reference" href="chapter-26.xhtml#glossary-reader macro">reader macros</a>, it is necessary to write<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-eval-when">eval-when</a> <span class="syntax-cons">(<span class="syntax-keyword-symbol">:compile-toplevel</span> <span class="syntax-keyword-symbol">:load-toplevel</span> <span class="syntax-keyword-symbol">:execute</span>)</span>
  <span class="syntax-cons">(<a class="function-reference" href="chapter-23.xhtml#function-set-macro-character">set-macro-character</a> <span class="syntax-character">#\$</span> <span class="syntax-function">#'<span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-cons">(<a class="type-reference" href="chapter-21.xhtml#type-stream">stream</a> <a class="function-reference" href="chapter-16.xhtml#function-char">char</a>)</span>
                               <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="declaration-reference" href="#declaration-ignore">ignore</a> <a class="function-reference" href="chapter-16.xhtml#function-char">char</a>)</span>)</span>
                               <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">dollar</span></span> <span class="syntax-cons">(<a class="function-reference" href="chapter-23.xhtml#function-read">read</a> <a class="type-reference" href="chapter-21.xhtml#type-stream">stream</a>)</span>)</span>)</span></span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a>
</span></code></pre>
This causes the call to <a class="function-reference" href="chapter-23.xhtml#function-set-macro-character">set-macro-character</a> to be executed
in the compiler's execution environment, thereby modifying its
reader syntax table.<br/><pre><code><span class="syntax-root">;;;     The EVAL-WHEN in this case is not at toplevel, so only the :EXECUTE
;;;     keyword is considered. At compile time, this has no effect.
;;;     At load time (if the LET is at toplevel), or at execution time
;;;     (if the LET is embedded in some other form which does not execute
;;;     until later) this sets (SYMBOL-FUNCTION 'FOO1) to a function which
;;;     returns 1.
 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-number">1</span>)</span>)</span>
   <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-eval-when">eval-when</a> <span class="syntax-cons">(<span class="syntax-keyword-symbol">:execute</span> <span class="syntax-keyword-symbol">:load-toplevel</span> <span class="syntax-keyword-symbol">:compile-toplevel</span>)</span>
     <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-10.xhtml#function-symbol-function">symbol-function</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">foo1</span></span>)</span> <span class="syntax-function">#'<span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-symbol">()</span> <span class="syntax-interned-symbol">x</span>)</span></span>)</span>)</span>)</span>

;;;     If this expression occurs at the toplevel of a file to be compiled,
;;;     it has BOTH a compile time AND a load-time effect of setting
;;;     (SYMBOL-FUNCTION 'FOO2) to a function which returns 2.
 <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-eval-when">eval-when</a> <span class="syntax-cons">(<span class="syntax-keyword-symbol">:execute</span> <span class="syntax-keyword-symbol">:load-toplevel</span> <span class="syntax-keyword-symbol">:compile-toplevel</span>)</span>
   <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-number">2</span>)</span>)</span>
     <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-eval-when">eval-when</a> <span class="syntax-cons">(<span class="syntax-keyword-symbol">:execute</span> <span class="syntax-keyword-symbol">:load-toplevel</span> <span class="syntax-keyword-symbol">:compile-toplevel</span>)</span>
       <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-10.xhtml#function-symbol-function">symbol-function</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">foo2</span></span>)</span> <span class="syntax-function">#'<span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-symbol">()</span> <span class="syntax-interned-symbol">x</span>)</span></span>)</span>)</span>)</span>)</span>

;;;     If this expression occurs at the toplevel of a file to be compiled,
;;;     it has BOTH a compile time AND a load-time effect of setting the
;;;     function cell of FOO3 to a function which returns 3.
 <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-eval-when">eval-when</a> <span class="syntax-cons">(<span class="syntax-keyword-symbol">:execute</span> <span class="syntax-keyword-symbol">:load-toplevel</span> <span class="syntax-keyword-symbol">:compile-toplevel</span>)</span>
   <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-10.xhtml#function-symbol-function">symbol-function</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">foo3</span></span>)</span> <span class="syntax-function">#'<span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-symbol">()</span> <span class="syntax-number">3</span>)</span></span>)</span>)</span>
 
;;; #4: This always does nothing. It simply returns NIL.
 <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-eval-when">eval-when</a> <span class="syntax-cons">(<span class="syntax-keyword-symbol">:compile-toplevel</span>)</span>
   <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-eval-when">eval-when</a> <span class="syntax-cons">(<span class="syntax-keyword-symbol">:compile-toplevel</span>)</span> 
     <span class="syntax-cons">(<a class="function-reference" href="chapter-22.xhtml#function-print">print</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">foo4</span></span>)</span>)</span>)</span>

;;;     If this form occurs at toplevel of a file to be compiled, FOO5 is
;;;     printed at compile time. If this form occurs in a non-top-level
;;;     position, nothing is printed at compile time. Regardless of context,
;;;     nothing is ever printed at load time or execution time.
 <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-eval-when">eval-when</a> <span class="syntax-cons">(<span class="syntax-keyword-symbol">:compile-toplevel</span>)</span> 
   <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-eval-when">eval-when</a> <span class="syntax-cons">(<span class="syntax-keyword-symbol">:execute</span>)</span>
     <span class="syntax-cons">(<a class="function-reference" href="chapter-22.xhtml#function-print">print</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">foo5</span></span>)</span>)</span>)</span>
 
;;;     If this form occurs at toplevel of a file to be compiled, FOO6 is
;;;     printed at compile time.  If this form occurs in a non-top-level
;;;     position, nothing is printed at compile time. Regardless of context,
;;;     nothing is ever printed at load time or execution time.
 <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-eval-when">eval-when</a> <span class="syntax-cons">(<span class="syntax-keyword-symbol">:execute</span> <span class="syntax-keyword-symbol">:load-toplevel</span>)</span>
   <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-eval-when">eval-when</a> <span class="syntax-cons">(<span class="syntax-keyword-symbol">:compile-toplevel</span>)</span>
     <span class="syntax-cons">(<a class="function-reference" href="chapter-22.xhtml#function-print">print</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">foo6</span></span>)</span>)</span>)</span>
</span></code></pre><br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="function-reference" href="chapter-24.xhtml#function-compile-file">compile-file</a>, <a class="section-reference" href="#section-Compilation">Compilation</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd>The following effects are logical consequences of the definition of 
<a class="special-operator-reference" href="#special-operator-eval-when">eval-when</a>:<br/><ul><li>Execution of a single <a class="special-operator-reference" href="#special-operator-eval-when">eval-when</a>
expression executes the body code at most once.<br/></li><li><a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">Macros</a> intended for use in <a class="glossary-reference" href="chapter-26.xhtml#glossary-top level form">top level forms</a> 
should be written so that side-effects are done by the <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a>
in the macro expansion.  The macro-expander itself should not do 
the side-effects.<br/>For example:<br/>       Wrong:  <br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="#macro-defmacro">defmacro</a> <span class="syntax-interned-symbol">foo</span> <span class="syntax-symbol">()</span>
  <span class="syntax-cons">(<span class="syntax-interned-symbol">really-foo</span>)</span>
  <span class="syntax-quasiquote">`<span class="syntax-cons">(<span class="syntax-interned-symbol">really-foo</span>)</span></span>)</span>
</span></code></pre><br/>      Right:  <br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="#macro-defmacro">defmacro</a> <span class="syntax-interned-symbol">foo</span> <span class="syntax-symbol">()</span>
  <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-eval-when">eval-when</a> <span class="syntax-cons">(<span class="syntax-keyword-symbol">:compile-toplevel</span> <span class="syntax-keyword-symbol">:execute</span> <span class="syntax-keyword-symbol">:load-toplevel</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">really-foo</span>)</span>)</span></span>)</span>
</span></code></pre><br/>Adherence to this convention means that such <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macros</a> behave
intuitively when appearing as <a class="glossary-reference" href="chapter-26.xhtml#glossary-non-top-level form">non-top-level forms</a>.<br/></li><li>Placing a variable binding around an <a class="special-operator-reference" href="#special-operator-eval-when">eval-when</a> reliably 
captures the binding because the compile-time-too mode cannot occur 
 (<span class="explicit-italic"> i.e.</span>,  introducing a variable binding means that the <a class="special-operator-reference" href="#special-operator-eval-when">eval-when</a>
      is not a <a class="glossary-reference" href="chapter-26.xhtml#glossary-top level form">top level form</a>).
For example,<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-number">3</span>)</span>)</span>
  <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-eval-when">eval-when</a> <span class="syntax-cons">(<span class="syntax-keyword-symbol">:execute</span> <span class="syntax-keyword-symbol">:load-toplevel</span> <span class="syntax-keyword-symbol">:compile-toplevel</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-22.xhtml#function-print">print</a> <span class="syntax-interned-symbol">x</span>)</span>)</span>)</span>
</span></code></pre><br/>
prints <span class="explicit-mono">3</span> 
at execution (<span class="explicit-italic"> i.e.</span>,  load) time, and does not print anything at
compile time.  This is important so that expansions of 
<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> and 
<a class="macro-reference" href="#macro-defmacro">defmacro</a> 
can be done in terms of <a class="special-operator-reference" href="#special-operator-eval-when">eval-when</a> and can correctly capture
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical environment">lexical environment</a>.<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">bar</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">foo</span> <span class="syntax-symbol">()</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-number">3</span>)</span>)</span>)</span>
</span></code></pre><br/>might expand into<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">bar</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span>)</span> 
  <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-progn">progn</a> <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-eval-when">eval-when</a> <span class="syntax-cons">(<span class="syntax-keyword-symbol">:compile-toplevel</span>)</span> 
           <span class="syntax-cons">(<span class="syntax-two-package-markers syntax-interned-symbol">compiler::notice-function-definition</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">foo</span></span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span>)</span></span>)</span>)</span>
         <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-eval-when">eval-when</a> <span class="syntax-cons">(<span class="syntax-keyword-symbol">:execute</span> <span class="syntax-keyword-symbol">:load-toplevel</span>)</span>
           <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-10.xhtml#function-symbol-function">symbol-function</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">foo</span></span>)</span> <span class="syntax-function">#'<span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-symbol">()</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-number">3</span>)</span>)</span></span>)</span>)</span>)</span>)</span>
</span></code></pre><br/>which would be treated by the above rules the same as<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">bar</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span>)</span> 
  <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-10.xhtml#function-symbol-function">symbol-function</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">foo</span></span>)</span> <span class="syntax-function">#'<span class="syntax-cons">(<a class="macro-reference" href="#macro-lambda">lambda</a> <span class="syntax-symbol">()</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-number">3</span>)</span>)</span></span>)</span>)</span>
</span></code></pre><br/>when the definition of <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">bar</span>
</span></code></pre> is not a <a class="glossary-reference" href="chapter-26.xhtml#glossary-top level form">top level form</a>.
</li></ul><br/>                                                                        
</dd></dl></div><br/><br/>
<br/><div class="component" id="special-operator-load-time-value"><div class="header"><span class="left"><span class="name" id="special-operator-load-time-value">load-time-value</span></span><span class="right"><span class="ftype">Special Operator</span></span></div>      

<dl><dt class="label">Syntax</dt><dd><span class="special-operator-definition"><span class="name">load-time-value</span>&nbsp;<span class="lambda-list">form <span class="lambda-list-keyword">&amp;optional</span> read-only-p</span>&nbsp;â†’&nbsp;<span class="return-values">object</span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">form</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>; evaluated as described below.<br/><span class="parameter">read-only-p</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-boolean">boolean</a>; not evaluated.<br/><span class="parameter">object</span>&mdash;the <a class="glossary-reference" href="chapter-26.xhtml#glossary-primary value">primary value</a> resulting from evaluating <span class="parameter">form</span>.<br/></dd></dl><dl><dt class="label">Description</dt><dd><a class="special-operator-reference" href="#special-operator-load-time-value">load-time-value</a> provides a mechanism for delaying evaluation of <span class="parameter">form</span>
until the expression is in the run-time environment; see <span class="section-reference error">section:Compilation.</span><br/><span class="parameter">Read-only-p</span> designates whether the result can be considered a
<a class="glossary-reference" href="chapter-26.xhtml#glossary-constant object">constant object</a>.
If <a class="symbol-reference" href="chapter-5.xhtml#symbol-t">t</a>,
   the result is a read-only quantity that can, 
   if appropriate to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation">implementation</a>, 
   be copied into read-only space and/or <a class="glossary-reference" href="chapter-26.xhtml#glossary-coalesce">coalesced</a> with <a class="glossary-reference" href="chapter-26.xhtml#glossary-similar">similar</a>
   <a class="glossary-reference" href="chapter-26.xhtml#glossary-constant object">constant objects</a> from other <a class="glossary-reference" href="chapter-26.xhtml#glossary-program">programs</a>.
If <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a> (the default),
   the result must be neither copied nor coalesced;
   it must be considered to be potentially modifiable data.<br/>If a <a class="special-operator-reference" href="#special-operator-load-time-value">load-time-value</a> expression is processed by <a class="function-reference" href="chapter-24.xhtml#function-compile-file">compile-file</a>,
the compiler performs its normal semantic processing (such as macro expansion 
and translation into machine code) on <span class="parameter">form</span>, but arranges for the
execution of <span class="parameter">form</span> to occur at load time in a <a class="glossary-reference" href="chapter-26.xhtml#glossary-null lexical environment">null lexical environment</a>, 
with the result of this <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluation</a> then being treated as 
a <span class="glossary-reference error">glossary:literal object</span>
at run time.  It is guaranteed that the evaluation of <span class="parameter">form</span> 
will take place only once when the <a class="glossary-reference" href="chapter-26.xhtml#glossary-file">file</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-load">loaded</a>, but 
the order of evaluation with respect to the evaluation of
<a class="glossary-reference" href="chapter-26.xhtml#glossary-top level form">top level forms</a> in the file is <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a>.
<a id="index/text-order of evaluation"></a><a id="index/text-evaluation order"></a><br/>If a <a class="special-operator-reference" href="#special-operator-load-time-value">load-time-value</a> expression appears within a function compiled
with <a class="function-reference" href="#function-compile">compile</a>, the <span class="parameter">form</span> is evaluated at compile time in a
<a class="glossary-reference" href="chapter-26.xhtml#glossary-null lexical environment">null lexical environment</a>.  The result of this compile-time evaluation 
is treated as
a <span class="glossary-reference error">glossary:literal object</span>
in the compiled code.  <br/>If a <a class="special-operator-reference" href="#special-operator-load-time-value">load-time-value</a> expression is processed by <a class="function-reference" href="#function-eval">eval</a>,
<span class="parameter">form</span> is evaluated in a <a class="glossary-reference" href="chapter-26.xhtml#glossary-null lexical environment">null lexical environment</a>, 
and one value is returned.  Implementations that implicitly compile
(or partially compile) expressions processed by <a class="function-reference" href="#function-eval">eval</a> 
might evaluate <span class="parameter">form</span> only once, at the time this compilation is performed.  
 
If the <a class="glossary-reference" href="chapter-26.xhtml#glossary-same">same</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-load-time-value">load-time-value</a> <span class="parameter">form</span>)</span>
</span></code></pre> is
evaluated or compiled more than once, it is <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a>
whether <span class="parameter">form</span> is evaluated only once or is evaluated more than once.
This can happen both when an expression being evaluated or compiled shares
substructure, and when the <a class="glossary-reference" href="chapter-26.xhtml#glossary-same">same</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> is processed by <a class="function-reference" href="#function-eval">eval</a> or 
<a class="function-reference" href="#function-compile">compile</a> multiple times.                               
Since a <a class="special-operator-reference" href="#special-operator-load-time-value">load-time-value</a> expression can be
  referenced in more than one place and can be evaluated multiple times
  by <a class="function-reference" href="#function-eval">eval</a>, it is 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a> whether each execution returns
  a fresh <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> 
or returns the same <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> as some other execution.
  Users must use caution when destructively modifying the resulting
  <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.<br/>If two lists <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-load-time-value">load-time-value</a> <span class="parameter">form</span>)</span>
</span></code></pre> 
that are the <a class="glossary-reference" href="chapter-26.xhtml#glossary-same">same</a> under <a class="function-reference" href="chapter-5.xhtml#function-equal">equal</a> but are not <a class="glossary-reference" href="chapter-26.xhtml#glossary-identical">identical</a>
are evaluated or compiled,
their values always come from distinct evaluations of <span class="parameter">form</span>.
Their <span class="glossary-reference error">glossary:values</span> may not be coalesced
unless <span class="parameter">read-only-p</span> is <a class="symbol-reference" href="chapter-5.xhtml#symbol-t">t</a>.<br/></dd></dl><dl><dt class="label">Examples</dt><dd><pre><code><span class="syntax-root">;;; The function INCR1 always returns the same value, even in different images.
;;; The function INCR2 always returns the same value in a given image, 
;;; but the value it returns might vary from image to image.
<span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">incr1</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-feature-expression">#.(random 17)</span>)</span>)</span>
<span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">incr2</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-load-time-value">load-time-value</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-random">random</a> <span class="syntax-number">17</span>)</span>)</span>)</span>)</span>

;;; The function FOO1-REF references the nth element of the first of 
;;; the *FOO-ARRAYS* that is available at load time.  It is permissible for
;;; that array to be modified (e.g., by SET-FOO1-REF); FOO1-REF will see the
;;; updated values.
<span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defvar">defvar</a> <span class="syntax-interned-symbol">*foo-arrays*</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-15.xhtml#function-make-array">make-array</a> <span class="syntax-number">7</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-15.xhtml#function-make-array">make-array</a> <span class="syntax-number">8</span>)</span>)</span>)</span>
<span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">foo1-ref</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">n</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-15.xhtml#function-aref">aref</a> <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-load-time-value">load-time-value</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-first">first</a> <span class="syntax-interned-symbol">*my-arrays*</span>)</span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span> <span class="syntax-interned-symbol">n</span>)</span>)</span>
<span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">set-foo1-ref</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">n</span> <span class="syntax-interned-symbol">val</span>)</span> 
  <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-15.xhtml#function-aref">aref</a> <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-load-time-value">load-time-value</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-first">first</a> <span class="syntax-interned-symbol">*my-arrays*</span>)</span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span> <span class="syntax-interned-symbol">n</span>)</span> <span class="syntax-interned-symbol">val</span>)</span>)</span>

;;; The function BAR1-REF references the nth element of the first of 
;;; the *BAR-ARRAYS* that is available at load time.  The programmer has
;;; promised that the array will be treated as read-only, so the system 
;;; can copy or coalesce the array.
<span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defvar">defvar</a> <span class="syntax-interned-symbol">*bar-arrays*</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-15.xhtml#function-make-array">make-array</a> <span class="syntax-number">7</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-15.xhtml#function-make-array">make-array</a> <span class="syntax-number">8</span>)</span>)</span>)</span>
<span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">bar1-ref</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">n</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-15.xhtml#function-aref">aref</a> <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-load-time-value">load-time-value</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-first">first</a> <span class="syntax-interned-symbol">*my-arrays*</span>)</span> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a>)</span> <span class="syntax-interned-symbol">n</span>)</span>)</span>

;;; This use of LOAD-TIME-VALUE permits the indicated vector to be coalesced
;;; even though NIL was specified, because the object was already read-only
;;; when it was written as a literal vector rather than created by a constructor.
;;; User programs must treat the vector v as read-only.
<span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">baz-ref</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">n</span>)</span>
  <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">v</span> <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-load-time-value">load-time-value</a> <span class="syntax-vector">#(<span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">B</span> <span class="syntax-interned-symbol">C</span>)</span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span>)</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-values">values</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-15.xhtml#function-svref">svref</a> <span class="syntax-interned-symbol">v</span> <span class="syntax-interned-symbol">n</span>)</span> <span class="syntax-interned-symbol">v</span>)</span>)</span>)</span>

;;; This use of LOAD-TIME-VALUE permits the indicated vector to be coalesced
;;; even though NIL was specified in the outer situation because T was specified
;;; in the inner situation.  User programs must treat the vector v as read-only.
<span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">baz-ref</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">n</span>)</span>
  <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">v</span> <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-load-time-value">load-time-value</a> <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-load-time-value">load-time-value</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-15.xhtml#function-vector">vector</a> <span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">3</span>)</span> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a>)</span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span>)</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-values">values</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-15.xhtml#function-svref">svref</a> <span class="syntax-interned-symbol">v</span> <span class="syntax-interned-symbol">n</span>)</span> <span class="syntax-interned-symbol">v</span>)</span>)</span>)</span>
</span></code></pre><br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="function-reference" href="chapter-24.xhtml#function-compile-file">compile-file</a>,
<a class="function-reference" href="#function-compile">compile</a>,
<a class="function-reference" href="#function-eval">eval</a>,
<a class="section-reference" href="#section-MinimalCompilation">Minimal Compilation</a>,
<a class="section-reference" href="#section-Compilation">Compilation</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd><a class="special-operator-reference" href="#special-operator-load-time-value">load-time-value</a> must appear outside of quoted structure in a
``for <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluation</a>'' position.  In situations which would appear to call
for use of <a class="special-operator-reference" href="#special-operator-load-time-value">load-time-value</a> within a quoted structure, 
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-backquote">backquote</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-reader macro">reader macro</a> is probably called for;
see <span class="section-reference error">section:Backquote.</span><br/>Specifying <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a> for <span class="parameter">read-only-p</span> is not a way to force an object
to become modifiable if it has already been made read-only.  It is only a way
to say that, for an object that is modifiable, this operation is not intended
to make that object read-only.<br/></dd></dl>                                                                        
</div><br/><br/><br/><div class="component" id="special-operator-quote"><div class="header"><span class="left"><span class="name" id="special-operator-quote">quote</span></span><span class="right"><span class="ftype">Special Operator</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><span class="special-operator-definition"><span class="name">quote</span>&nbsp;<span class="lambda-list">object</span>&nbsp;â†’&nbsp;<span class="return-values">object</span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">object</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>; not evaluated.<br/></dd></dl><dl><dt class="label">Description</dt><dd>The <a class="special-operator-reference" href="#special-operator-quote">quote</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-special operator">special operator</a> just returns <span class="parameter">object</span>.<br/>The consequences are undefined if <span class="glossary-reference error">glossary:literal objects</span> (including
<a class="glossary-reference" href="chapter-26.xhtml#glossary-quoted object">quoted objects</a>) are destructively modified.<br/></dd></dl><dl><dt class="label">Examples</dt><dd><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-number">1</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">1</span>
<span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-quote">quote</a> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-number">3</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">A</span> <span class="syntax-number">3</span>)</span>
<span class="syntax-interned-symbol">a</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">1</span>
<span class="syntax-quote">'<span class="syntax-interned-symbol">a</span></span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">A</span>
<span class="syntax-quote">'<span class="syntax-quote">'<span class="syntax-interned-symbol">a</span></span></span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-quote">quote</a> <span class="syntax-interned-symbol">A</span>)</span> 
<span class="syntax-quote">'<span class="syntax-quote">'<span class="syntax-quote">'<span class="syntax-interned-symbol">a</span></span></span></span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-quote">quote</a> <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-quote">quote</a> <span class="syntax-interned-symbol">A</span>)</span>)</span>
<span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-number">43</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">43</span>
<span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-cons">cons</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-number">3</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-number">43</span> <span class="syntax-cons">(<span class="syntax-number">43</span> <span class="syntax-symbol">.</span> <span class="syntax-number">3</span>)</span>)</span>
<span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-quote">quote</a> <span class="syntax-interned-symbol">a</span>)</span> <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-quote">quote</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-cons">cons</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-number">3</span>)</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-interned-symbol">A</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-cons">cons</a> <span class="syntax-interned-symbol">A</span> <span class="syntax-number">3</span>)</span>)</span> 
<span class="syntax-number">1</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">1</span>
<span class="syntax-quote">'<span class="syntax-number">1</span></span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">1</span>
<span class="syntax-string">"foo"</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"foo"</span>
<span class="syntax-quote">'<span class="syntax-string">"foo"</span></span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"foo"</span>
<span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-car">car</a> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span>)</span></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">A</span>
<span class="syntax-quote">'<span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-car">car</a> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span>)</span></span>)</span></span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-car">car</a> <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-quote">quote</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">B</span>)</span>)</span>)</span>
<span class="syntax-vector">#(<a class="function-reference" href="chapter-14.xhtml#function-car">car</a> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span>)</span></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-vector">#(<a class="function-reference" href="chapter-14.xhtml#function-car">car</a> <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-quote">quote</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">B</span>)</span>)</span>)</span>
<span class="syntax-quote">'<span class="syntax-vector">#(<a class="function-reference" href="chapter-14.xhtml#function-car">car</a> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span>)</span></span>)</span></span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-vector">#(<a class="function-reference" href="chapter-14.xhtml#function-car">car</a> <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-quote">quote</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">B</span>)</span>)</span>)</span>
</span></code></pre><br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="section-reference" href="#section-Evaluation">Evaluation</a>,
<a class="section-reference" href="chapter-2.xhtml#section-QuoteMacro">Single-Quote</a>,
<span class="section-reference error">section:ConstantModification</span>
</dd></dl><dl><dt class="label">Notes</dt><dd>The textual notation <pre><code><span class="syntax-root"><span class="syntax-quote">'<span class="parameter">object</span></span>
</span></code></pre> is equivalent to <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-quote">quote</a> <span class="parameter">object</span>)</span>
</span></code></pre>;
see <span class="section-reference error">section:ConstantModification.</span><br/>Some <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a>, called <a class="glossary-reference" href="chapter-26.xhtml#glossary-self-evaluating object">self-evaluating objects</a>, 
do not require quotation by <a class="special-operator-reference" href="#special-operator-quote">quote</a>.  
However, <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbols</a> and <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">lists</a> are used to represent parts of programs,
and so would not be useable as constant data in a program without <a class="special-operator-reference" href="#special-operator-quote">quote</a>.
Since <a class="special-operator-reference" href="#special-operator-quote">quote</a> suppresses the <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluation</a> of these <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a>,
they become data rather than program.<br/></dd></dl></div><br/><br/>
<br/><div class="component" id="function-compiler-macro-function"><div class="header"><span class="left"><span class="name" id="function-compiler-macro-function">compiler-macro-function</span></span><span class="right"><span class="ftype">Accessor</span></span></div><br/>
<dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">compiler-macro-function</span>&nbsp;<span class="lambda-list">name <span class="lambda-list-keyword">&amp;optional</span> environment</span>&nbsp;â†’&nbsp;<span class="return-values">function</span></span><br/>
<span class="setf-definition">(setf (<span class="name">compiler-macro-function</span>&nbsp;<span class="lambda-list">name <span class="lambda-list-keyword">&amp;optional</span> environment</span>) <span class="new-value">new-function</span>)</span><br/>
</dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">name</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function name">function name</a>.<br/><span class="parameter">environment</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-environment">environment</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.<br/><span class="parameter">function</span>, <span class="parameter">new-function</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler macro function">compiler macro function</a>, or <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd><a class="glossary-reference" href="chapter-26.xhtml#glossary-access">Accesses</a> the <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler macro function">compiler macro function</a> named <span class="parameter">name</span>, if any,
in the <span class="parameter">environment</span>.<br/>A value of <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a> denotes the absence of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler macro function">compiler macro function</a> named <span class="parameter">name</span>.<br/></dd></dl><dl><dt class="label">Examples</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd>The consequences are undefined if <span class="parameter">environment</span> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-non-nil">non-nil</a>
in a use of <a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> of <span class="symbol-reference error">symbol:compiler-macro-function</span>.

</dd></dl><dl><dt class="label">See Also</dt><dd><a class="macro-reference" href="#macro-define-compiler-macro">define-compiler-macro</a>, <a class="section-reference" href="#section-CompilerMacros">Compiler Macros</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd><span class="none">None</span>.<br/></dd></dl>
</div><br/><br/><br/><div class="component" id="macro-define-compiler-macro"><div class="header"><span class="left"><span class="name" id="macro-define-compiler-macro">define-compiler-macro</span></span><span class="right"><span class="ftype">Macro</span></span></div><br/>
<dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">define-compiler-macro</span>&nbsp;<span class="lambda-list">name lambda-list <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>[</mi><mi>[</mi></math> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">declaration</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>|</mi></math> <span class="parameter">documentation</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>]</mi><mi>]</mi></math> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">form</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span></span>&nbsp;â†’&nbsp;<span class="return-values">name</span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">name</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function name">function name</a>.<br/><span class="parameter">lambda-list</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro lambda list">macro lambda list</a>.<br/><span class="parameter">declaration</span>&mdash;a <a class="symbol-reference" href="#symbol-declare">declare</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-expression">expression</a>; not evaluated.<br/><span class="parameter">documentation</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-string">string</a>; not evaluated.<br/><span class="parameter">form</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>

This is the normal mechanism for defining a <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler macro function">compiler macro function</a>.
Its manner of definition is the same as for <a class="macro-reference" href="#macro-defmacro">defmacro</a>; the only
differences are:<br/><ul><li>The <span class="parameter">name</span> can be a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function name">function name</a> naming
 any <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> or <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a>.<br/></li><li>The expander function is installed as a <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler macro function">compiler macro function</a>
 for the <span class="parameter">name</span>, rather than as a <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro function">macro function</a>.<br/></li><li>The <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-whole">whole</a> argument is bound to the form argument that 
 is passed to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler macro function">compiler macro function</a>.  The remaining lambda-list 
 parameters are specified as if this form contained the function name in the
 <a class="glossary-reference" href="chapter-26.xhtml#glossary-car">car</a> and the actual arguments in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-cdr">cdr</a>, but if the <a class="glossary-reference" href="chapter-26.xhtml#glossary-car">car</a> 
 of the actual form is the symbol <a class="function-reference" href="chapter-5.xhtml#function-funcall">funcall</a>, then the destructuring of 
 the arguments is actually performed using its <a class="glossary-reference" href="chapter-26.xhtml#glossary-cddr">cddr</a> instead.<br/></li><li> <span class="parameter">Documentation</span> is attached as a <a class="glossary-reference" href="chapter-26.xhtml#glossary-documentation string">documentation string</a> 
    to <span class="parameter">name</span> (as kind <span class="special-operator-reference error">special-operator:compiler-macro</span>)
and to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler macro function">compiler macro function</a>.

</li><li>Unlike an ordinary <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a>, a <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler macro">compiler macro</a>
 can decline to provide an expansion merely by returning a form that is
 the <a class="glossary-reference" href="chapter-26.xhtml#glossary-same">same</a> as the original (which can be obtained by using
 <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-whole">whole</a>).
</li></ul> <br/></dd></dl><dl><dt class="label">Examples</dt><dd><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">square</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-expt">expt</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-number">2</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">SQUARE</span>
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-define-compiler-macro">define-compiler-macro</a> <span class="syntax-interned-symbol">square</span> <span class="syntax-cons">(<a class="lambda-list-keyword-reference" href="#lambda-list-keyword-whole">&amp;WHOLE</a> <span class="syntax-interned-symbol">form</span> <span class="syntax-interned-symbol">arg</span>)</span>
   <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-atom">atom</a> <span class="syntax-interned-symbol">arg</span>)</span>
       <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-expt">expt</a> <span class="syntax-unquote">,<span class="syntax-interned-symbol">arg</span></span> <span class="syntax-number">2</span>)</span></span>
       <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-case">case</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-car">car</a> <span class="syntax-interned-symbol">arg</span>)</span>
         <span class="syntax-cons">(<span class="syntax-interned-symbol">square</span> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-=">=</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-17.xhtml#function-length">length</a> <span class="syntax-interned-symbol">arg</span>)</span> <span class="syntax-number">2</span>)</span>
                     <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-expt">expt</a> <span class="syntax-unquote">,<span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-nth">nth</a> <span class="syntax-number">1</span> <span class="syntax-interned-symbol">arg</span>)</span></span> <span class="syntax-number">4</span>)</span></span>
                     <span class="syntax-interned-symbol">form</span>)</span>)</span>
         <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-expt">expt</a>   <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-=">=</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-17.xhtml#function-length">length</a> <span class="syntax-interned-symbol">arg</span>)</span> <span class="syntax-number">3</span>)</span>
                     <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-numberp">numberp</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-nth">nth</a> <span class="syntax-number">2</span> <span class="syntax-interned-symbol">arg</span>)</span>)</span>
                         <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-expt">expt</a> <span class="syntax-unquote">,<span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-nth">nth</a> <span class="syntax-number">1</span> <span class="syntax-interned-symbol">arg</span>)</span></span> <span class="syntax-unquote">,<span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-*">*</a> <span class="syntax-number">2</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-nth">nth</a> <span class="syntax-number">2</span> <span class="syntax-interned-symbol">arg</span>)</span>)</span></span>)</span></span>
                         <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-expt">expt</a> <span class="syntax-unquote">,<span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-nth">nth</a> <span class="syntax-number">1</span> <span class="syntax-interned-symbol">arg</span>)</span></span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-*">*</a> <span class="syntax-number">2</span> <span class="syntax-unquote">,<span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-nth">nth</a> <span class="syntax-number">2</span> <span class="syntax-interned-symbol">arg</span>)</span></span>)</span>)</span></span>)</span>
                     <span class="syntax-interned-symbol">form</span>)</span>)</span>
         <span class="syntax-cons">(<a class="symbol-reference" href="chapter-5.xhtml#symbol-otherwise">otherwise</a> <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-expt">expt</a> <span class="syntax-unquote">,<span class="syntax-interned-symbol">arg</span></span> <span class="syntax-number">2</span>)</span></span>)</span>)</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">SQUARE</span>
 <span class="syntax-cons">(<span class="syntax-interned-symbol">square</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">square</span> <span class="syntax-number">3</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">81</span>
 <span class="syntax-cons">(<a class="function-reference" href="#function-macroexpand">macroexpand</a> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">square</span> <span class="syntax-interned-symbol">x</span>)</span></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-interned-symbol">SQUARE</span> <span class="syntax-interned-symbol">X</span>)</span><span class="syntax-verbatim">,</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>
 <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-funcall">funcall</a> <span class="syntax-cons">(<a class="function-reference" href="#function-compiler-macro-function">compiler-macro-function</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">square</span></span>)</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">square</span> <span class="syntax-interned-symbol">x</span>)</span></span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-expt">expt</a> <span class="syntax-interned-symbol">X</span> <span class="syntax-number">2</span>)</span>
 <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-funcall">funcall</a> <span class="syntax-cons">(<a class="function-reference" href="#function-compiler-macro-function">compiler-macro-function</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">square</span></span>)</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">square</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">square</span> <span class="syntax-interned-symbol">x</span>)</span>)</span></span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-expt">expt</a> <span class="syntax-interned-symbol">X</span> <span class="syntax-number">4</span>)</span>
 <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-funcall">funcall</a> <span class="syntax-cons">(<a class="function-reference" href="#function-compiler-macro-function">compiler-macro-function</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">square</span></span>)</span> <span class="syntax-quote">'<span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-funcall">funcall</a> <span class="syntax-function">#'<span class="syntax-interned-symbol">square</span></span> <span class="syntax-interned-symbol">x</span>)</span></span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-expt">expt</a> <span class="syntax-interned-symbol">X</span> <span class="syntax-number">2</span>)</span>

 <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">distance-positional</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x1</span> <span class="syntax-interned-symbol">y1</span> <span class="syntax-interned-symbol">x2</span> <span class="syntax-interned-symbol">y2</span>)</span>
   <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-sqrt">sqrt</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-expt">expt</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function--">-</a> <span class="syntax-interned-symbol">x2</span> <span class="syntax-interned-symbol">x1</span>)</span> <span class="syntax-number">2</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-expt">expt</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function--">-</a> <span class="syntax-interned-symbol">y2</span> <span class="syntax-interned-symbol">y1</span>)</span> <span class="syntax-number">2</span>)</span>)</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">DISTANCE-POSITIONAL</span>
 <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">distance</span> <span class="syntax-cons">(<a class="lambda-list-keyword-reference" href="#lambda-list-keyword-key">&amp;KEY</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">x1</span> <span class="syntax-number">0</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">y1</span> <span class="syntax-number">0</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x2</span> <span class="syntax-interned-symbol">x1</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">y2</span> <span class="syntax-interned-symbol">y1</span>)</span>)</span>
   <span class="syntax-cons">(<span class="syntax-interned-symbol">distance-positional</span> <span class="syntax-interned-symbol">x1</span> <span class="syntax-interned-symbol">y1</span> <span class="syntax-interned-symbol">x2</span> <span class="syntax-interned-symbol">y2</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">DISTANCE</span>
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-define-compiler-macro">define-compiler-macro</a> <span class="syntax-interned-symbol">distance</span> <span class="syntax-cons">(<a class="lambda-list-keyword-reference" href="#lambda-list-keyword-whole">&amp;WHOLE</a> <span class="syntax-interned-symbol">form</span>
                                  <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-rest">&amp;REST</a> <span class="syntax-interned-symbol">key-value-pairs</span>
                                  <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-key">&amp;KEY</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">x1</span> <span class="syntax-number">0</span>  <span class="syntax-interned-symbol">x1-p</span>)</span>
                                       <span class="syntax-cons">(<span class="syntax-interned-symbol">y1</span> <span class="syntax-number">0</span>  <span class="syntax-interned-symbol">y1-p</span>)</span>
                                       <span class="syntax-cons">(<span class="syntax-interned-symbol">x2</span> <span class="syntax-interned-symbol">x1</span> <span class="syntax-interned-symbol">x2-p</span>)</span>
                                       <span class="syntax-cons">(<span class="syntax-interned-symbol">y2</span> <span class="syntax-interned-symbol">y1</span> <span class="syntax-interned-symbol">y2-p</span>)</span>
                                  <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-allow-other-keys">&amp;ALLOW-OTHER-KEYS</a>
                                  <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-environment">&amp;ENVIRONMENT</a> <span class="syntax-interned-symbol">env</span>)</span>
   <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-flet">flet</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">key</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">n</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-nth">nth</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-*">*</a> <span class="syntax-interned-symbol">n</span> <span class="syntax-number">2</span>)</span> <span class="syntax-interned-symbol">key-value-pairs</span>)</span>)</span>
          <span class="syntax-cons">(<span class="syntax-interned-symbol">arg</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">n</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-nth">nth</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-1+">1+</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-*">*</a> <span class="syntax-interned-symbol">n</span> <span class="syntax-number">2</span>)</span>)</span> <span class="syntax-interned-symbol">key-value-pairs</span>)</span>)</span>
          <span class="syntax-cons">(<span class="syntax-interned-symbol">simplep</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span>)</span>
            <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">expanded-x</span> <span class="syntax-cons">(<a class="function-reference" href="#function-macroexpand">macroexpand</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">env</span>)</span>)</span>)</span>
              <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-or">or</a> <span class="syntax-cons">(<a class="function-reference" href="#function-constantp">constantp</a> <span class="syntax-interned-symbol">expanded-x</span> <span class="syntax-interned-symbol">env</span>)</span>
                  <span class="syntax-cons">(<a class="function-reference" href="chapter-10.xhtml#function-symbolp">symbolp</a> <span class="syntax-interned-symbol">expanded-x</span>)</span>)</span>)</span>)</span>)</span>
     <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">n</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-/">/</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-17.xhtml#function-length">length</a> <span class="syntax-interned-symbol">key-value-pairs</span>)</span> <span class="syntax-number">2</span>)</span>)</span>)</span>
       <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-multiple-value-bind">multiple-value-bind</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">x1s</span> <span class="syntax-interned-symbol">y1s</span> <span class="syntax-interned-symbol">x2s</span> <span class="syntax-interned-symbol">y2s</span> <span class="syntax-interned-symbol">others</span>)</span>
           <span class="syntax-cons">(<a class="macro-reference" href="chapter-6.xhtml#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">key</span>)</span> <span class="syntax-interned-symbol">on</span> <span class="syntax-interned-symbol">key-value-pairs</span> <span class="syntax-interned-symbol">by</span> <span class="syntax-function">#'<a class="function-reference" href="chapter-14.xhtml#function-cddr">cddr</a></span>
                 <a class="function-reference" href="chapter-17.xhtml#function-count">count</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-eq">eq</a> <span class="syntax-interned-symbol">key</span> <span class="syntax-quote">'<span class="syntax-keyword-symbol">:x1</span></span>)</span> <span class="syntax-interned-symbol">into</span> <span class="syntax-interned-symbol">x1s</span>
                 <a class="function-reference" href="chapter-17.xhtml#function-count">count</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-eq">eq</a> <span class="syntax-interned-symbol">key</span> <span class="syntax-quote">'<span class="syntax-keyword-symbol">:y1</span></span>)</span> <span class="syntax-interned-symbol">into</span> <span class="syntax-interned-symbol">y1s</span>
                 <a class="function-reference" href="chapter-17.xhtml#function-count">count</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-eq">eq</a> <span class="syntax-interned-symbol">key</span> <span class="syntax-quote">'<span class="syntax-keyword-symbol">:x2</span></span>)</span> <span class="syntax-interned-symbol">into</span> <span class="syntax-interned-symbol">x2s</span>
                 <a class="function-reference" href="chapter-17.xhtml#function-count">count</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-eq">eq</a> <span class="syntax-interned-symbol">key</span> <span class="syntax-quote">'<span class="syntax-keyword-symbol">:y1</span></span>)</span> <span class="syntax-interned-symbol">into</span> <span class="syntax-interned-symbol">y2s</span>
                 <a class="function-reference" href="chapter-17.xhtml#function-count">count</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-not">not</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-member">member</a> <span class="syntax-interned-symbol">key</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-keyword-symbol">:x1</span> <span class="syntax-keyword-symbol">:x2</span> <span class="syntax-keyword-symbol">:y1</span> <span class="syntax-keyword-symbol">:y2</span>)</span></span>)</span>)</span>
                   <span class="syntax-interned-symbol">into</span> <span class="syntax-interned-symbol">others</span>
                 <span class="syntax-interned-symbol">finally</span> <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-return">return</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-values">values</a> <span class="syntax-interned-symbol">x1s</span> <span class="syntax-interned-symbol">y1s</span> <span class="syntax-interned-symbol">x2s</span> <span class="syntax-interned-symbol">y2s</span> <span class="syntax-interned-symbol">others</span>)</span>)</span>)</span>
         <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-cond">cond</a> <span class="syntax-cons">(<span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-and">and</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-=">=</a> <span class="syntax-interned-symbol">n</span> <span class="syntax-number">4</span>)</span>
                     <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-eq">eq</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">key</span> <span class="syntax-number">0</span>)</span> <span class="syntax-keyword-symbol">:x1</span>)</span>
                     <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-eq">eq</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">key</span> <span class="syntax-number">1</span>)</span> <span class="syntax-keyword-symbol">:y1</span>)</span>
                     <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-eq">eq</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">key</span> <span class="syntax-number">2</span>)</span> <span class="syntax-keyword-symbol">:x2</span>)</span>
                     <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-eq">eq</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">key</span> <span class="syntax-number">3</span>)</span> <span class="syntax-keyword-symbol">:y2</span>)</span>)</span>
                <span class="syntax-quasiquote">`<span class="syntax-cons">(<span class="syntax-interned-symbol">distance-positional</span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">x1</span></span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">y1</span></span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">x2</span></span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">y2</span></span>)</span></span>)</span>
               <span class="syntax-cons">(<span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-and">and</a> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-interned-symbol">x1-p</span> <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-and">and</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-=">=</a> <span class="syntax-interned-symbol">x1s</span> <span class="syntax-number">1</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">simplep</span> <span class="syntax-interned-symbol">x1</span>)</span>)</span> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a>)</span>
                     <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-interned-symbol">y1-p</span> <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-and">and</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-=">=</a> <span class="syntax-interned-symbol">y1s</span> <span class="syntax-number">1</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">simplep</span> <span class="syntax-interned-symbol">y1</span>)</span>)</span> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a>)</span>
                     <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-interned-symbol">x2-p</span> <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-and">and</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-=">=</a> <span class="syntax-interned-symbol">x2s</span> <span class="syntax-number">1</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">simplep</span> <span class="syntax-interned-symbol">x2</span>)</span>)</span> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a>)</span>
                     <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-interned-symbol">y2-p</span> <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-and">and</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-=">=</a> <span class="syntax-interned-symbol">y2s</span> <span class="syntax-number">1</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">simplep</span> <span class="syntax-interned-symbol">y2</span>)</span>)</span> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a>)</span>
                     <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-zerop">zerop</a> <span class="syntax-interned-symbol">others</span>)</span>)</span>
                <span class="syntax-quasiquote">`<span class="syntax-cons">(<span class="syntax-interned-symbol">distance-positional</span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">x1</span></span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">y1</span></span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">x2</span></span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">y2</span></span>)</span></span>)</span>
               <span class="syntax-cons">(<span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-and">and</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-&lt;">&lt;</a> <span class="syntax-interned-symbol">x1s</span> <span class="syntax-number">2</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-&lt;">&lt;</a> <span class="syntax-interned-symbol">y1s</span> <span class="syntax-number">2</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-&lt;">&lt;</a> <span class="syntax-interned-symbol">x2s</span> <span class="syntax-number">2</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-&lt;">&lt;</a> <span class="syntax-interned-symbol">y2s</span> <span class="syntax-number">2</span>)</span>
                     <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-zerop">zerop</a> <span class="syntax-interned-symbol">others</span>)</span>)</span>
                <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">temps</span> <span class="syntax-cons">(<a class="macro-reference" href="chapter-6.xhtml#macro-loop">loop</a> <span class="syntax-interned-symbol">repeat</span> <span class="syntax-interned-symbol">n</span> <span class="syntax-interned-symbol">collect</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-10.xhtml#function-gensym">gensym</a>)</span>)</span>)</span>)</span>
                  <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-unquote">,<span class="syntax-cons">(<a class="macro-reference" href="chapter-6.xhtml#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">below</span> <span class="syntax-interned-symbol">n</span>
                               <span class="syntax-interned-symbol">collect</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-nth">nth</a> <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">temps</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">arg</span> <span class="syntax-interned-symbol">i</span>)</span>)</span>)</span></span>
                     <span class="syntax-cons">(<span class="syntax-interned-symbol">distance</span>
                       <span class="syntax-unquote">,@<span class="syntax-cons">(<a class="macro-reference" href="chapter-6.xhtml#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">below</span> <span class="syntax-interned-symbol">n</span>
                               <a class="function-reference" href="chapter-14.xhtml#function-append">append</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">key</span> <span class="syntax-interned-symbol">i</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-nth">nth</a> <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">temps</span>)</span>)</span>)</span></span>)</span>)</span></span>)</span>)</span>
               <span class="syntax-cons">(<a class="section-reference" href="chapter-26.xhtml#section-T">T</a> <span class="syntax-interned-symbol">form</span>)</span>)</span>)</span>)</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">DISTANCE</span>
 <span class="syntax-cons">(<a class="macro-reference" href="chapter-6.xhtml#macro-dolist">dolist</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">form</span>
           <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">distance</span> <span class="syntax-keyword-symbol">:x1</span> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-number">7</span>)</span> <span class="syntax-keyword-symbol">:x2</span> <span class="syntax-cons">(<a class="macro-reference" href="chapter-12.xhtml#macro-decf">decf</a> <span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-keyword-symbol">:y1</span> <span class="syntax-cons">(<a class="macro-reference" href="chapter-12.xhtml#macro-decf">decf</a> <span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-keyword-symbol">:y2</span> <span class="syntax-cons">(<a class="macro-reference" href="chapter-12.xhtml#macro-decf">decf</a> <span class="syntax-interned-symbol">x</span>)</span>)</span>
             <span class="syntax-cons">(<span class="syntax-interned-symbol">distance</span> <span class="syntax-keyword-symbol">:x1</span> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-number">7</span>)</span> <span class="syntax-keyword-symbol">:y1</span> <span class="syntax-cons">(<a class="macro-reference" href="chapter-12.xhtml#macro-decf">decf</a> <span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-keyword-symbol">:x2</span> <span class="syntax-cons">(<a class="macro-reference" href="chapter-12.xhtml#macro-decf">decf</a> <span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-keyword-symbol">:y2</span> <span class="syntax-cons">(<a class="macro-reference" href="chapter-12.xhtml#macro-decf">decf</a> <span class="syntax-interned-symbol">x</span>)</span>)</span>
             <span class="syntax-cons">(<span class="syntax-interned-symbol">distance</span> <span class="syntax-keyword-symbol">:x1</span> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-number">7</span>)</span> <span class="syntax-keyword-symbol">:y1</span> <span class="syntax-cons">(<a class="macro-reference" href="chapter-12.xhtml#macro-incf">incf</a> <span class="syntax-interned-symbol">x</span>)</span>)</span>
             <span class="syntax-cons">(<span class="syntax-interned-symbol">distance</span> <span class="syntax-keyword-symbol">:x1</span> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-number">7</span>)</span> <span class="syntax-keyword-symbol">:y1</span> <span class="syntax-cons">(<a class="macro-reference" href="chapter-12.xhtml#macro-incf">incf</a> <span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-keyword-symbol">:x1</span> <span class="syntax-cons">(<a class="macro-reference" href="chapter-12.xhtml#macro-incf">incf</a> <span class="syntax-interned-symbol">x</span>)</span>)</span>
             <span class="syntax-cons">(<span class="syntax-interned-symbol">distance</span> <span class="syntax-keyword-symbol">:x1</span> <span class="syntax-interned-symbol">a1</span> <span class="syntax-keyword-symbol">:y1</span> <span class="syntax-interned-symbol">b1</span> <span class="syntax-keyword-symbol">:x2</span> <span class="syntax-interned-symbol">a2</span> <span class="syntax-keyword-symbol">:y2</span> <span class="syntax-interned-symbol">b2</span>)</span>
             <span class="syntax-cons">(<span class="syntax-interned-symbol">distance</span> <span class="syntax-keyword-symbol">:x1</span> <span class="syntax-interned-symbol">a1</span> <span class="syntax-keyword-symbol">:x2</span> <span class="syntax-interned-symbol">a2</span> <span class="syntax-keyword-symbol">:y1</span> <span class="syntax-interned-symbol">b1</span> <span class="syntax-keyword-symbol">:y2</span> <span class="syntax-interned-symbol">b2</span>)</span>
             <span class="syntax-cons">(<span class="syntax-interned-symbol">distance</span> <span class="syntax-keyword-symbol">:x1</span> <span class="syntax-interned-symbol">a1</span> <span class="syntax-keyword-symbol">:y1</span> <span class="syntax-interned-symbol">b1</span> <span class="syntax-keyword-symbol">:z1</span> <span class="syntax-interned-symbol">c1</span> <span class="syntax-keyword-symbol">:x2</span> <span class="syntax-interned-symbol">a2</span> <span class="syntax-keyword-symbol">:y2</span> <span class="syntax-interned-symbol">b2</span> <span class="syntax-keyword-symbol">:z2</span> <span class="syntax-interned-symbol">c2</span>)</span>)</span></span>)</span>
   <span class="syntax-cons">(<a class="function-reference" href="chapter-22.xhtml#function-print">print</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-funcall">funcall</a> <span class="syntax-cons">(<a class="function-reference" href="#function-compiler-macro-function">compiler-macro-function</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">distance</span></span>)</span> <span class="syntax-interned-symbol">form</span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> (LET ((#:G6558 (SETQ X 7))
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math>       (#:G6559 (DECF X))
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math>       (#:G6560 (DECF X))
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math>       (#:G6561 (DECF X)))
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math>   (DISTANCE :X1 #:G6558 :X2 #:G6559 :Y1 #:G6560 :Y2 #:G6561)) 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> (DISTANCE-POSITIONAL (SETQ X 7) (DECF X) (DECF X) (DECF X)) 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> (LET ((#:G6567 (SETQ X 7))
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math>       (#:G6568 (INCF X)))
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math>   (DISTANCE :X1 #:G6567 :Y1 #:G6568)) 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> (DISTANCE :X1 (SETQ X 7) :Y1 (INCF X) :X1 (INCF X)) 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> (DISTANCE-POSITIONAL A1 B1 A2 B2) 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> (DISTANCE-POSITIONAL A1 B1 A2 B2) 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> (DISTANCE :X1 A1 :Y1 B1 :Z1 C1 :X2 A2 :Y2 B2 :Z2 C2) 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>
</span></code></pre><br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd><span class="none">None</span>. <br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="function-reference" href="#function-compiler-macro-function">compiler-macro-function</a>,
<a class="macro-reference" href="#macro-defmacro">defmacro</a>,
<a class="function-reference" href="chapter-25.xhtml#function-documentation">documentation</a>,
<a class="section-reference" href="#section-DocVsDecls">Syntactic Interaction of Documentation Strings and Declarations</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd>The consequences of writing a <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler macro">compiler macro</a> definition for a function
in the <a class="package-reference" href="chapter-1.xhtml#package-common-lisp">common-lisp</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-package">package</a> are undefined; it is quite possible that in some
<a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation">implementations</a> such an attempt would override an equivalent or equally
important definition.  In general, it is recommended that a programmer only
write <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler macro">compiler macro</a> definitions for <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">functions</a> he or she personally 
maintains&ndash;writing a <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler macro">compiler macro</a> definition for a function maintained
elsewhere is normally considered a violation of traditional rules of modularity
and data abstraction.<br/></dd></dl>
</div><br/><br/><br/><div class="component" id="macro-defmacro"><div class="header"><span class="left"><span class="name" id="macro-defmacro">defmacro</span></span><span class="right"><span class="ftype">Macro</span></span></div><br/>
<dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">defmacro</span>&nbsp;<span class="lambda-list">name lambda-list <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>[</mi><mi>[</mi></math> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">declaration</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>|</mi></math> <span class="parameter">documentation</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>]</mi><mi>]</mi></math> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">form</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span></span>&nbsp;â†’&nbsp;<span class="return-values">name</span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">name</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>.  
<span class="parameter">lambda-list</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro lambda list">macro lambda list</a>.<br/><span class="parameter">declaration</span>&mdash;a <a class="symbol-reference" href="#symbol-declare">declare</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-expression">expression</a>; not evaluated.<br/><span class="parameter">documentation</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-string">string</a>; not evaluated.<br/><span class="parameter">form</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>Defines <span class="parameter">name</span> as a <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a> 
by associating a <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro function">macro function</a> with that <span class="parameter">name</span>
in the global environment.
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro function">macro function</a> is defined in the same <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical environment">lexical environment</a>
in which the <a class="macro-reference" href="#macro-defmacro">defmacro</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> appears.
<br/>The parameter variables in <span class="parameter">lambda-list</span> are bound to
destructured portions of the macro call.<br/>The expansion function
accepts two arguments, a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> and an 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-environment">environment</a>.  The expansion function returns a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>.  
The body of the expansion function is specified by <span class="parameter">forms</span>.
<span class="parameter">Forms</span> are executed in order.  The value of the
last <span class="parameter">form</span> executed is returned as the expansion of the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a>.
The body <span class="parameter">forms</span> of the expansion function (but not the <span class="parameter">lambda-list</span>)
are implicitly enclosed in a <a class="glossary-reference" href="chapter-26.xhtml#glossary-block">block</a> whose name is <span class="parameter">name</span>.
 
The <span class="parameter">lambda-list</span> conforms to the requirements described in <a class="section-reference" href="#section-MacroLambdaLists">Macro Lambda Lists</a>.<br/><span class="parameter">Documentation</span> is attached as a <a class="glossary-reference" href="chapter-26.xhtml#glossary-documentation string">documentation string</a> 
    to <span class="parameter">name</span> (as kind <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-function">function</a>)
and to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro function">macro function</a>.
 
<a class="macro-reference" href="#macro-defmacro">defmacro</a> can be used to redefine a <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a> or to replace
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> definition with a <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a> definition.<br/> 
Recursive expansion of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> returned must terminate,
including the expansion of other <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macros</a> which are <a class="glossary-reference" href="chapter-26.xhtml#glossary-subform">subforms</a>
of other <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a> returned.<br/>The consequences are undefined if the result of fully macroexpanding
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>
contains any <a class="glossary-reference" href="chapter-26.xhtml#glossary-circular">circular</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-list structure">list structure</a> except in <span class="glossary-reference error">glossary:literal objects</span>.
 
If a <a class="macro-reference" href="#macro-defmacro">defmacro</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> appears as a <a class="glossary-reference" href="chapter-26.xhtml#glossary-top level form">top level form</a>,
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler">compiler</a> must store the <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a> definition at compile time,
so that occurrences of the macro later on in the file can be expanded correctly.
Users must ensure that the body of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a> can be evaluated at 
compile time if it is referenced within the <a class="glossary-reference" href="chapter-26.xhtml#glossary-file">file</a> being <a class="glossary-reference" href="chapter-26.xhtml#glossary-compile">compiled</a>.

</dd></dl><dl><dt class="label">Examples</dt><dd><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="#macro-defmacro">defmacro</a> <span class="syntax-interned-symbol">mac1</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span>)</span> <span class="syntax-string">"Mac1 multiplies and adds"</span> 
           <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-unquote">,<span class="syntax-interned-symbol">a</span></span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-*">*</a> <span class="syntax-unquote">,<span class="syntax-interned-symbol">b</span></span> <span class="syntax-number">3</span>)</span>)</span></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">MAC1</span> 
<span class="syntax-cons">(<span class="syntax-interned-symbol">mac1</span> <span class="syntax-number">4</span> <span class="syntax-number">5</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">19</span> 
<span class="syntax-cons">(<a class="function-reference" href="chapter-25.xhtml#function-documentation">documentation</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">mac1</span></span> <span class="syntax-quote">'<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-function">function</a></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"Mac1 multiplies and adds"</span> 
<span class="syntax-cons">(<a class="macro-reference" href="#macro-defmacro">defmacro</a> <span class="syntax-interned-symbol">mac2</span> <span class="syntax-cons">(<a class="lambda-list-keyword-reference" href="#lambda-list-keyword-optional">&amp;OPTIONAL</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-number">2</span> <span class="syntax-interned-symbol">b</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">c</span> <span class="syntax-number">3</span> <span class="syntax-interned-symbol">d</span>)</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-rest">&amp;REST</a> <span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-quasiquote">`<span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-unquote">,<span class="syntax-interned-symbol">a</span></span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">b</span></span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">c</span></span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">d</span></span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">x</span></span>)</span></span></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">MAC2</span> 
<span class="syntax-cons">(<span class="syntax-interned-symbol">mac2</span> <span class="syntax-number">6</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-number">6</span> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a> <span class="syntax-number">3</span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span> 
<span class="syntax-cons">(<span class="syntax-interned-symbol">mac2</span> <span class="syntax-number">6</span> <span class="syntax-number">3</span> <span class="syntax-number">8</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-number">6</span> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a> <span class="syntax-number">3</span> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a> <span class="syntax-cons">(<span class="syntax-number">8</span>)</span>)</span> 
<span class="syntax-cons">(<a class="macro-reference" href="#macro-defmacro">defmacro</a> <span class="syntax-interned-symbol">mac3</span> <span class="syntax-cons">(<a class="lambda-list-keyword-reference" href="#lambda-list-keyword-whole">&amp;WHOLE</a> <span class="syntax-interned-symbol">r</span> <span class="syntax-interned-symbol">a</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-optional">&amp;OPTIONAL</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">b</span> <span class="syntax-number">3</span>)</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-rest">&amp;REST</a> <span class="syntax-interned-symbol">x</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-key">&amp;KEY</a> <span class="syntax-interned-symbol">c</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">d</span> <span class="syntax-interned-symbol">a</span>)</span>)</span>
   <span class="syntax-quasiquote">`<span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-unquote">,<span class="syntax-interned-symbol">r</span></span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">a</span></span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">b</span></span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">c</span></span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">d</span></span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">x</span></span>)</span></span></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">MAC3</span> 
<span class="syntax-cons">(<span class="syntax-interned-symbol">mac3</span> <span class="syntax-number">1</span> <span class="syntax-number">6</span> <span class="syntax-keyword-symbol">:d</span> <span class="syntax-number">8</span> <span class="syntax-keyword-symbol">:c</span> <span class="syntax-number">9</span> <span class="syntax-keyword-symbol">:d</span> <span class="syntax-number">10</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">MAC3</span> <span class="syntax-number">1</span> <span class="syntax-number">6</span> <span class="syntax-keyword-symbol">:D</span> <span class="syntax-number">8</span> <span class="syntax-keyword-symbol">:C</span> <span class="syntax-number">9</span> <span class="syntax-keyword-symbol">:D</span> <span class="syntax-number">10</span>)</span> <span class="syntax-number">1</span> <span class="syntax-number">6</span> <span class="syntax-number">9</span> <span class="syntax-number">8</span> <span class="syntax-cons">(<span class="syntax-keyword-symbol">:D</span> <span class="syntax-number">8</span> <span class="syntax-keyword-symbol">:C</span> <span class="syntax-number">9</span> <span class="syntax-keyword-symbol">:D</span> <span class="syntax-number">10</span>)</span>)</span> 
</span></code></pre>
 
 <br/> 
The stipulation that
an embedded <a class="glossary-reference" href="chapter-26.xhtml#glossary-destructuring lambda list">destructuring lambda list</a> is permitted only
where <a class="glossary-reference" href="chapter-26.xhtml#glossary-ordinary lambda list">ordinary lambda list</a> syntax would permit a parameter name
but not a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> is made to prevent ambiguity.  For example,
the following is not valid:<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="#macro-defmacro">defmacro</a> <span class="syntax-interned-symbol">loser</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-optional">&amp;OPTIONAL</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-rest">&amp;REST</a> <span class="syntax-interned-symbol">c</span>)</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-rest">&amp;REST</a> <span class="syntax-interned-symbol">z</span>)</span>
  <span class="syntax-interned-symbol">...</span>)</span>
</span></code></pre>
because <a class="glossary-reference" href="chapter-26.xhtml#glossary-ordinary lambda list">ordinary lambda list</a> syntax does permit a 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> following <span class="lambda-list-keyword">&amp;optional</span>;
the list <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> &amp;rest <span class="syntax-interned-symbol">c</span>)</span>
</span></code></pre> would be interpreted as describing an
optional parameter named <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">a</span>
</span></code></pre> whose default value is that of the
form <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">b</span>
</span></code></pre>, with a supplied-p parameter named <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-rest">rest</a> (not valid),
and an extraneous symbol <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">c</span>
</span></code></pre> in the list (also not valid).  An almost
correct way to express this is<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="#macro-defmacro">defmacro</a> <span class="syntax-interned-symbol">loser</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-optional">&amp;OPTIONAL</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-rest">&amp;REST</a> <span class="syntax-interned-symbol">c</span>)</span>)</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-rest">&amp;REST</a> <span class="syntax-interned-symbol">z</span>)</span>
  <span class="syntax-interned-symbol">...</span>)</span>
</span></code></pre>
The extra set of parentheses removes the ambiguity.  However, the
definition is now incorrect because a macro call such as <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">loser</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-car">car</a> <span class="syntax-interned-symbol">pool</span>)</span>)</span>
</span></code></pre>
would not provide any argument form for the lambda list <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> &amp;rest <span class="syntax-interned-symbol">c</span>)</span>
</span></code></pre>,
and so the default value against which to match the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda list">lambda list</a> would be
<a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a> because no explicit default value was specified.  
The consequences of this are  unspecified
since the empty list, <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>, does not have <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a> to satisfy the
parameters <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">a</span>
</span></code></pre> and <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">b</span>
</span></code></pre>.  The fully correct definition would be either<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="#macro-defmacro">defmacro</a> <span class="syntax-interned-symbol">loser</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-optional">&amp;OPTIONAL</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-rest">&amp;REST</a> <span class="syntax-interned-symbol">c</span>)</span> <span class="syntax-quote">'<span class="syntax-cons">(<a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span></span>)</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-rest">&amp;REST</a> <span class="syntax-interned-symbol">z</span>)</span>
  <span class="syntax-interned-symbol">...</span>)</span>
</span></code></pre>
or<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="#macro-defmacro">defmacro</a> <span class="syntax-interned-symbol">loser</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-optional">&amp;OPTIONAL</a> <span class="syntax-cons">(<span class="syntax-cons">(<a class="lambda-list-keyword-reference" href="#lambda-list-keyword-optional">&amp;OPTIONAL</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-rest">&amp;REST</a> <span class="syntax-interned-symbol">c</span>)</span>)</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-rest">&amp;REST</a> <span class="syntax-interned-symbol">z</span>)</span>
  <span class="syntax-interned-symbol">...</span>)</span>
</span></code></pre>
These differ slightly: the first requires that if the macro call
specifies <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">a</span>
</span></code></pre> explicitly then it must also specify <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">b</span>
</span></code></pre> explicitly,
whereas the second does not have this requirement.  For example,<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">loser</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-car">car</a> <span class="syntax-interned-symbol">pool</span>)</span> <span class="syntax-cons">(<span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-number">1</span>)</span>)</span>)</span>
</span></code></pre>
would be a valid call for the second definition but not for the first.<br/> 
<pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="macro-reference" href="#macro-defmacro">defmacro</a> <span class="syntax-interned-symbol">dm1a</span> <span class="syntax-cons">(<a class="lambda-list-keyword-reference" href="#lambda-list-keyword-whole">&amp;WHOLE</a> <span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-quasiquote">`<span class="syntax-quote">'<span class="syntax-unquote">,<span class="syntax-interned-symbol">x</span></span></span></span>)</span>
 <span class="syntax-cons">(<a class="function-reference" href="#function-macroexpand">macroexpand</a> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">dm1a</span>)</span></span>)</span>  <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-quote">quote</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">DM1A</span>)</span>)</span>
 <span class="syntax-cons">(<a class="function-reference" href="#function-macroexpand">macroexpand</a> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">dm1a</span> <span class="syntax-interned-symbol">a</span>)</span></span>)</span> <span class="syntax-interned-symbol">is</span> <span class="syntax-interned-symbol">an</span> <span class="syntax-interned-symbol">error.</span>
 
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-defmacro">defmacro</a> <span class="syntax-interned-symbol">dm1b</span> <span class="syntax-cons">(<a class="lambda-list-keyword-reference" href="#lambda-list-keyword-whole">&amp;WHOLE</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">a</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-optional">&amp;OPTIONAL</a> <span class="syntax-interned-symbol">b</span>)</span> <span class="syntax-quasiquote">`<span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-unquote">,<span class="syntax-interned-symbol">x</span></span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">a</span></span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">b</span></span>)</span></span></span>)</span>
 <span class="syntax-cons">(<a class="function-reference" href="#function-macroexpand">macroexpand</a> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">dm1b</span>)</span></span>)</span>  <span class="syntax-interned-symbol">is</span> <span class="syntax-interned-symbol">an</span> <span class="syntax-interned-symbol">error.</span>
 <span class="syntax-cons">(<a class="function-reference" href="#function-macroexpand">macroexpand</a> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">dm1b</span> <span class="syntax-interned-symbol">q</span>)</span></span>)</span>  <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-quote">quote</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">DM1B</span> <span class="syntax-interned-symbol">Q</span>)</span> <span class="syntax-interned-symbol">Q</span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span>)</span>
 <span class="syntax-cons">(<a class="function-reference" href="#function-macroexpand">macroexpand</a> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">dm1b</span> <span class="syntax-interned-symbol">q</span> <span class="syntax-interned-symbol">r</span>)</span></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-quote">quote</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">DM1B</span> <span class="syntax-interned-symbol">Q</span> <span class="syntax-interned-symbol">R</span>)</span> <span class="syntax-interned-symbol">Q</span> <span class="syntax-interned-symbol">R</span>)</span>)</span>
 <span class="syntax-cons">(<a class="function-reference" href="#function-macroexpand">macroexpand</a> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">dm1b</span> <span class="syntax-interned-symbol">q</span> <span class="syntax-interned-symbol">r</span> <span class="syntax-interned-symbol">s</span>)</span></span>)</span> <span class="syntax-interned-symbol">is</span> <span class="syntax-interned-symbol">an</span> <span class="syntax-interned-symbol">error.</span>
</span></code></pre><br/><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="macro-reference" href="#macro-defmacro">defmacro</a> <span class="syntax-interned-symbol">dm2a</span> <span class="syntax-cons">(<a class="lambda-list-keyword-reference" href="#lambda-list-keyword-whole">&amp;WHOLE</a> <span class="syntax-interned-symbol">form</span> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span>)</span> <span class="syntax-quasiquote">`<span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">form</span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">form</span></span> <span class="syntax-interned-symbol">a</span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">a</span></span> <span class="syntax-interned-symbol">b</span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">b</span></span>)</span></span></span>)</span>
 <span class="syntax-cons">(<a class="function-reference" href="#function-macroexpand">macroexpand</a> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">dm2a</span> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-quote">quote</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">FORM</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">DM2A</span> <span class="syntax-interned-symbol">X</span> <span class="syntax-interned-symbol">Y</span>)</span> <span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">X</span> <span class="syntax-interned-symbol">B</span> <span class="syntax-interned-symbol">Y</span>)</span>)</span>
 <span class="syntax-cons">(<span class="syntax-interned-symbol">dm2a</span> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-interned-symbol">FORM</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">DM2A</span> <span class="syntax-interned-symbol">X</span> <span class="syntax-interned-symbol">Y</span>)</span> <span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">X</span> <span class="syntax-interned-symbol">B</span> <span class="syntax-interned-symbol">Y</span>)</span>

 <span class="syntax-cons">(<a class="macro-reference" href="#macro-defmacro">defmacro</a> <span class="syntax-interned-symbol">dm2b</span> <span class="syntax-cons">(<a class="lambda-list-keyword-reference" href="#lambda-list-keyword-whole">&amp;WHOLE</a> <span class="syntax-interned-symbol">form</span> <span class="syntax-interned-symbol">a</span> <span class="syntax-cons">(<a class="lambda-list-keyword-reference" href="#lambda-list-keyword-whole">&amp;WHOLE</a> <span class="syntax-interned-symbol">b</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">c</span> <span class="syntax-symbol">.</span> <span class="syntax-interned-symbol">d</span>)</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-optional">&amp;OPTIONAL</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">e</span> <span class="syntax-number">5</span>)</span>)</span> 
                 <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-body">&amp;BODY</a> <span class="syntax-interned-symbol">f</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-environment">&amp;ENVIRONMENT</a> <span class="syntax-interned-symbol">env</span>)</span>
   <span class="syntax-quasiquote">`<span class="syntax-quasiquote">`<span class="syntax-cons">(<span class="syntax-unquote">,<span class="syntax-quote">'<span class="syntax-unquote">,<span class="syntax-interned-symbol">form</span></span></span></span> <span class="syntax-unquote">,<span class="syntax-unquote">,<span class="syntax-interned-symbol">a</span></span></span> <span class="syntax-unquote">,<span class="syntax-quote">'<span class="syntax-unquote">,<span class="syntax-interned-symbol">b</span></span></span></span> <span class="syntax-unquote">,<span class="syntax-quote">'<span class="syntax-unquote">,<span class="syntax-cons">(<a class="function-reference" href="#function-macroexpand">macroexpand</a> <span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">env</span>)</span></span></span></span> <span class="syntax-unquote">,<span class="syntax-quote">'<span class="syntax-unquote">,<span class="syntax-interned-symbol">d</span></span></span></span> <span class="syntax-unquote">,<span class="syntax-quote">'<span class="syntax-unquote">,<span class="syntax-interned-symbol">e</span></span></span></span> <span class="syntax-unquote">,<span class="syntax-quote">'<span class="syntax-unquote">,<span class="syntax-interned-symbol">f</span></span></span></span>)</span></span></span>)</span>
 ;Note that because backquote is involved, implementations may differ
 ;slightly in the nature (though not the functionality) of the expansion.
 <span class="syntax-cons">(<a class="function-reference" href="#function-macroexpand">macroexpand</a> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">dm2b</span> <span class="syntax-interned-symbol">x1</span> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-cons">(<a class="macro-reference" href="chapter-12.xhtml#macro-incf">incf</a> <span class="syntax-interned-symbol">x2</span>)</span> <span class="syntax-interned-symbol">x3</span> <span class="syntax-interned-symbol">x4</span>)</span>)</span> <span class="syntax-interned-symbol">x5</span> <span class="syntax-interned-symbol">x6</span>)</span></span>)</span>
 <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list*">list*</a> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">DM2B</span> <span class="syntax-interned-symbol">X1</span> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-cons">(<a class="macro-reference" href="chapter-12.xhtml#macro-incf">incf</a> <span class="syntax-interned-symbol">X2</span>)</span> <span class="syntax-interned-symbol">X3</span> <span class="syntax-interned-symbol">X4</span>)</span>)</span>
                   <span class="syntax-interned-symbol">X5</span> <span class="syntax-interned-symbol">X6</span>)</span></span>
            <span class="syntax-interned-symbol">X1</span>
            <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-cons">(<a class="macro-reference" href="chapter-12.xhtml#macro-incf">incf</a> <span class="syntax-interned-symbol">X2</span>)</span> <span class="syntax-interned-symbol">X3</span> <span class="syntax-interned-symbol">X4</span>)</span>)</span> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">X2</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">X2</span> <span class="syntax-number">1</span>)</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">X3</span> <span class="syntax-interned-symbol">X4</span>)</span> <span class="syntax-number">5</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">X5</span> <span class="syntax-interned-symbol">X6</span>)</span>)</span></span>)</span><span class="syntax-verbatim">,</span>
     <a class="section-reference" href="chapter-26.xhtml#section-T">T</a>
 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x1</span> <span class="syntax-number">5</span>)</span>)</span>
   <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-macrolet">macrolet</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">segundo</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-cadr">cadr</a> <span class="syntax-unquote">,<span class="syntax-interned-symbol">x</span></span>)</span></span>)</span>)</span>
     <span class="syntax-cons">(<span class="syntax-interned-symbol">dm2b</span> <span class="syntax-interned-symbol">x1</span> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">segundo</span> <span class="syntax-interned-symbol">x2</span>)</span> <span class="syntax-interned-symbol">x3</span> <span class="syntax-interned-symbol">x4</span>)</span>)</span> <span class="syntax-interned-symbol">x5</span> <span class="syntax-interned-symbol">x6</span>)</span>)</span>)</span>
 <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">DM2B</span> <span class="syntax-interned-symbol">X1</span> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">SEGUNDO</span> <span class="syntax-interned-symbol">X2</span>)</span> <span class="syntax-interned-symbol">X3</span> <span class="syntax-interned-symbol">X4</span>)</span>)</span> <span class="syntax-interned-symbol">X5</span> <span class="syntax-interned-symbol">X6</span>)</span>
      <span class="syntax-number">5</span> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">SEGUNDO</span> <span class="syntax-interned-symbol">X2</span>)</span> <span class="syntax-interned-symbol">X3</span> <span class="syntax-interned-symbol">X4</span>)</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-cadr">cadr</a> <span class="syntax-interned-symbol">X2</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">X3</span> <span class="syntax-interned-symbol">X4</span>)</span> <span class="syntax-number">5</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">X5</span> <span class="syntax-interned-symbol">X6</span>)</span>)</span>
</span></code></pre><br/> 
</dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd><span class="none">None</span>.


</dd></dl><dl><dt class="label">See Also</dt><dd><a class="macro-reference" href="#macro-define-compiler-macro">define-compiler-macro</a>,
<a class="macro-reference" href="chapter-5.xhtml#macro-destructuring-bind">destructuring-bind</a>, 
<a class="function-reference" href="chapter-25.xhtml#function-documentation">documentation</a>,
<a class="function-reference" href="#function-macroexpand">macroexpand</a>,
<a class="variable-reference" href="#variable-*macroexpand-hook*">*macroexpand-hook*</a>,
<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-macrolet">macrolet</a>, 
<a class="function-reference" href="#function-macro-function">macro-function</a>, 
<a class="section-reference" href="#section-Evaluation">Evaluation</a>,
<a class="section-reference" href="#section-Compilation">Compilation</a>,
<a class="section-reference" href="#section-DocVsDecls">Syntactic Interaction of Documentation Strings and Declarations</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd><span class="none">None</span>.<br/></dd></dl>
</div><br/><br/><br/><div class="component" id="function-macro-function"><div class="header"><span class="left"><span class="name" id="function-macro-function">macro-function</span></span><span class="right"><span class="ftype">Accessor</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">macro-function</span>&nbsp;<span class="lambda-list">symbol <span class="lambda-list-keyword">&amp;optional</span> environment</span>&nbsp;â†’&nbsp;<span class="return-values">function</span></span><br/>
<span class="setf-definition">(setf (<span class="name">macro-function</span>&nbsp;<span class="lambda-list">symbol <span class="lambda-list-keyword">&amp;optional</span> environment</span>) <span class="new-value">new-function</span>)</span><br/>
</dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">symbol</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>.<br/><span class="parameter">environment</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-environment">environment</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.

<span class="parameter">function</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro function">macro function</a> or <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.<br/><span class="parameter">new-function</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro function">macro function</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>Determines whether <span class="parameter">symbol</span> has a function definition 
as a macro in the specified <span class="parameter">environment</span>.<br/>If so, the macro expansion function, a function of two arguments,
is returned.  If <span class="parameter">symbol</span> has no function definition
in the lexical environment <span class="parameter">environment</span>, or its definition
is not a <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a>, <a class="function-reference" href="#function-macro-function">macro-function</a> returns <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.<br/>
 
 
It is possible for both <a class="function-reference" href="#function-macro-function">macro-function</a> and 
<a class="function-reference" href="#function-special-operator-p">special-operator-p</a>to return <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a> of <span class="parameter">symbol</span>.  The <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a> definition must
be available for use by programs that understand only the standard 
<span class="explicit-roman">Common Lisp</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-special form">special forms</a>.<br/></dd></dl><dl><dt class="label">Examples</dt><dd><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="#macro-defmacro">defmacro</a> <span class="syntax-interned-symbol">macfun</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-quote">'<span class="syntax-cons">(<a class="function-reference" href="#function-macro-function">macro-function</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">macfun</span></span>)</span></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">MACFUN</span> 
<span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-not">not</a> <span class="syntax-cons">(<a class="function-reference" href="#function-macro-function">macro-function</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">macfun</span></span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a> 
</span></code></pre>
<pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-macrolet">macrolet</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">foo</span> <span class="syntax-cons">(<a class="lambda-list-keyword-reference" href="#lambda-list-keyword-environment">&amp;ENVIRONMENT</a> <span class="syntax-interned-symbol">env</span>)</span>
               <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-cons">(<a class="function-reference" href="#function-macro-function">macro-function</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">bar</span></span> <span class="syntax-interned-symbol">env</span>)</span>
                  <span class="syntax-quote">'<span class="syntax-quote">'<span class="syntax-interned-symbol">yes</span></span></span>
                  <span class="syntax-quote">'<span class="syntax-quote">'<span class="syntax-interned-symbol">no</span></span></span>)</span>)</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">foo</span>)</span>
          <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-macrolet">macrolet</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">bar</span> <span class="syntax-symbol">()</span> <span class="syntax-keyword-symbol">:beep</span>)</span>)</span>
             <span class="syntax-cons">(<span class="syntax-interned-symbol">foo</span>)</span>)</span>)</span>)</span>
 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-interned-symbol">NO</span> <span class="syntax-interned-symbol">YES</span>)</span>
</span></code></pre> 
</dd></dl><dl><dt class="label">Affected By</dt><dd><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> <a class="function-reference" href="#function-macro-function">macro-function</a>)</span>
</span></code></pre>, <a class="macro-reference" href="#macro-defmacro">defmacro</a>, and <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-macrolet">macrolet</a>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd>The consequences are undefined if <span class="parameter">environment</span> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-non-nil">non-nil</a>
in a use of <a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> of <span class="symbol-reference error">symbol:macro-function</span>.
 
</dd></dl><dl><dt class="label">See Also</dt><dd><a class="macro-reference" href="#macro-defmacro">defmacro</a>, <a class="section-reference" href="#section-Evaluation">Evaluation</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd><a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> can be used with <a class="function-reference" href="#function-macro-function">macro-function</a> to install
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a> as a symbol's global function definition:<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="function-reference" href="#function-macro-function">macro-function</a> <a class="symbol-reference" href="chapter-2.xhtml#symbol-symbol">symbol</a>)</span> <span class="syntax-interned-symbol">fn</span>)</span>
</span></code></pre>
The value installed must be a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> that accepts two arguments,
the entire macro call and an <a class="glossary-reference" href="chapter-26.xhtml#glossary-environment">environment</a>, 
and computes the expansion for that call.
Performing this operation causes <span class="parameter">symbol</span> to have only that
macro definition as its global function definition; any previous
definition, whether as a <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a> or as a 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a>, is lost.<br/></dd></dl></div><br/>                          <br/><br/><div class="component" id="function-macroexpand"><div class="header"><span class="left"><span class="name" id="function-macroexpand">macroexpand</span>, <span class="name" id="function-macroexpand-1">macroexpand-1</span></span><span class="right"><span class="ftype">Function</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">macroexpand</span>&nbsp;<span class="lambda-list">form <span class="lambda-list-keyword">&amp;optional</span> env</span>&nbsp;â†’&nbsp;<span class="return-values">expansion, expanded-p</span></span><br/>
<span class="function-definition"><span class="name">macroexpand-1</span>&nbsp;<span class="lambda-list">form <span class="lambda-list-keyword">&amp;optional</span> env</span>&nbsp;â†’&nbsp;<span class="return-values">expansion, expanded-p</span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">form</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>.<br/><span class="parameter">env</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-environment">environment</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.
  The default is <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.<br/><span class="parameter">expansion</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>.<br/><span class="parameter">expanded-p</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generalized boolean">generalized boolean</a>.
 
</dd></dl><dl><dt class="label">Description</dt><dd><a class="function-reference" href="#function-macroexpand">macroexpand</a> and <a class="function-reference" href="#function-macroexpand-1">macroexpand-1</a> expand <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macros</a>.<br/>If <span class="parameter">form</span> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro form">macro form</a>,
then <a class="function-reference" href="#function-macroexpand-1">macroexpand-1</a> expands the <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro form">macro form</a> call once.<br/><a class="function-reference" href="#function-macroexpand">macroexpand</a> 
repeatedly expands <span class="parameter">form</span> until it is no longer a <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro form">macro form</a>.
In effect, <a class="function-reference" href="#function-macroexpand">macroexpand</a> calls <a class="function-reference" href="#function-macroexpand-1">macroexpand-1</a> repeatedly
until the <a class="glossary-reference" href="chapter-26.xhtml#glossary-secondary value">secondary value</a> it returns is <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.<br/>If <span class="parameter">form</span> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro form">macro form</a>,
then the <span class="parameter">expansion</span> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro expansion">macro expansion</a>
 and <span class="parameter">expanded-p</span> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>.
Otherwise,
 the <span class="parameter">expansion</span> is the given <span class="parameter">form</span>
 and <span class="parameter">expanded-p</span> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>.<br/>Macro expansion is carried out as follows.  
Once <a class="function-reference" href="#function-macroexpand-1">macroexpand-1</a> has
determined that the <span class="parameter">form</span> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro form">macro form</a>,
it obtains an appropriate expansion <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> for the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a> or <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol macro">symbol macro</a>.
The value of 
<a class="variable-reference" href="#variable-*macroexpand-hook*">*macroexpand-hook*</a> is 
coerced to a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> and
then called as a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> of three arguments:
      the expansion <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a>,
      the <span class="parameter">form</span>,
  and the <span class="parameter">env</span>.
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a> returned from this call is taken to be the expansion
of the <span class="parameter">form</span>.<br/>In addition to <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a> definitions in the global environment,
any local macro definitions established within <span class="parameter">env</span> by <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-macrolet">macrolet</a> 
or <a class="special-operator-reference" href="#special-operator-symbol-macrolet">symbol-macrolet</a> are considered.
If only <span class="parameter">form</span> is supplied as an argument,
then the environment is effectively null, and only global macro definitions
as established by <a class="macro-reference" href="#macro-defmacro">defmacro</a> are considered.
<a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">Macro</a> definitions are shadowed by local <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> definitions.

</dd></dl><dl><dt class="label">Examples</dt><dd><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="macro-reference" href="#macro-defmacro">defmacro</a> <span class="syntax-interned-symbol">alpha</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span> <span class="syntax-quasiquote">`<span class="syntax-cons">(<span class="syntax-interned-symbol">beta</span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">x</span></span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">y</span></span>)</span></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">ALPHA</span>
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-defmacro">defmacro</a> <span class="syntax-interned-symbol">beta</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span> <span class="syntax-quasiquote">`<span class="syntax-cons">(<span class="syntax-interned-symbol">gamma</span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">x</span></span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">y</span></span>)</span></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">BETA</span>
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-defmacro">defmacro</a> <span class="syntax-interned-symbol">delta</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span> <span class="syntax-quasiquote">`<span class="syntax-cons">(<span class="syntax-interned-symbol">gamma</span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">x</span></span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">y</span></span>)</span></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">DELTA</span>
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-defmacro">defmacro</a> <span class="syntax-interned-symbol">expand</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">form</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-environment">&amp;ENVIRONMENT</a> <span class="syntax-interned-symbol">env</span>)</span>
   <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-multiple-value-bind">multiple-value-bind</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">expansion</span> <span class="syntax-interned-symbol">expanded-p</span>)</span>
       <span class="syntax-cons">(<a class="function-reference" href="#function-macroexpand">macroexpand</a> <span class="syntax-interned-symbol">form</span> <span class="syntax-interned-symbol">env</span>)</span>
     <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-values">values</a> <span class="syntax-quote">'<span class="syntax-unquote">,<span class="syntax-interned-symbol">expansion</span></span></span> <span class="syntax-quote">'<span class="syntax-unquote">,<span class="syntax-interned-symbol">expanded-p</span></span></span>)</span></span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">EXPAND</span>
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-defmacro">defmacro</a> <span class="syntax-interned-symbol">expand-1</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">form</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-environment">&amp;ENVIRONMENT</a> <span class="syntax-interned-symbol">env</span>)</span>
   <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-multiple-value-bind">multiple-value-bind</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">expansion</span> <span class="syntax-interned-symbol">expanded-p</span>)</span>
       <span class="syntax-cons">(<a class="function-reference" href="#function-macroexpand-1">macroexpand-1</a> <span class="syntax-interned-symbol">form</span> <span class="syntax-interned-symbol">env</span>)</span>
     <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-values">values</a> <span class="syntax-quote">'<span class="syntax-unquote">,<span class="syntax-interned-symbol">expansion</span></span></span> <span class="syntax-quote">'<span class="syntax-unquote">,<span class="syntax-interned-symbol">expanded-p</span></span></span>)</span></span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">EXPAND-1</span>

;; Simple examples involving just the global environment
 <span class="syntax-cons">(<a class="function-reference" href="#function-macroexpand-1">macroexpand-1</a> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">alpha</span> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span>)</span></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-interned-symbol">BETA</span> <span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">B</span>)</span><span class="syntax-verbatim">,</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>
 <span class="syntax-cons">(<span class="syntax-interned-symbol">expand-1</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">alpha</span> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-interned-symbol">BETA</span> <span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">B</span>)</span><span class="syntax-verbatim">,</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>
 <span class="syntax-cons">(<a class="function-reference" href="#function-macroexpand">macroexpand</a> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">alpha</span> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span>)</span></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-interned-symbol">GAMMA</span> <span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">B</span>)</span><span class="syntax-verbatim">,</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>
 <span class="syntax-cons">(<span class="syntax-interned-symbol">expand</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">alpha</span> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-interned-symbol">GAMMA</span> <span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">B</span>)</span><span class="syntax-verbatim">,</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>
 <span class="syntax-cons">(<a class="function-reference" href="#function-macroexpand-1">macroexpand-1</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">not-a-macro</span></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">NOT-A-MACRO</span><span class="syntax-verbatim">,</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>
 <span class="syntax-cons">(<span class="syntax-interned-symbol">expand-1</span> <span class="syntax-interned-symbol">not-a-macro</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">NOT-A-MACRO</span><span class="syntax-verbatim">,</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>
 <span class="syntax-cons">(<a class="function-reference" href="#function-macroexpand">macroexpand</a> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">not-a-macro</span> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span>)</span></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-interned-symbol">NOT-A-MACRO</span> <span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">B</span>)</span><span class="syntax-verbatim">,</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>
 <span class="syntax-cons">(<span class="syntax-interned-symbol">expand</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">not-a-macro</span> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-interned-symbol">NOT-A-MACRO</span> <span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">B</span>)</span><span class="syntax-verbatim">,</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>

;; Examples involving lexical environments
 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-macrolet">macrolet</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">alpha</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span> <span class="syntax-quasiquote">`<span class="syntax-cons">(<span class="syntax-interned-symbol">delta</span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">x</span></span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">y</span></span>)</span></span>)</span>)</span>
   <span class="syntax-cons">(<a class="function-reference" href="#function-macroexpand-1">macroexpand-1</a> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">alpha</span> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span>)</span></span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-interned-symbol">BETA</span> <span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">B</span>)</span><span class="syntax-verbatim">,</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>
 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-macrolet">macrolet</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">alpha</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span> <span class="syntax-quasiquote">`<span class="syntax-cons">(<span class="syntax-interned-symbol">delta</span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">x</span></span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">y</span></span>)</span></span>)</span>)</span>
   <span class="syntax-cons">(<span class="syntax-interned-symbol">expand-1</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">alpha</span> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span>)</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-interned-symbol">DELTA</span> <span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">B</span>)</span><span class="syntax-verbatim">,</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>
 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-macrolet">macrolet</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">alpha</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span> <span class="syntax-quasiquote">`<span class="syntax-cons">(<span class="syntax-interned-symbol">delta</span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">x</span></span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">y</span></span>)</span></span>)</span>)</span>
   <span class="syntax-cons">(<a class="function-reference" href="#function-macroexpand">macroexpand</a> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">alpha</span> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span>)</span></span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-interned-symbol">GAMMA</span> <span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">B</span>)</span><span class="syntax-verbatim">,</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>
 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-macrolet">macrolet</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">alpha</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span> <span class="syntax-quasiquote">`<span class="syntax-cons">(<span class="syntax-interned-symbol">delta</span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">x</span></span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">y</span></span>)</span></span>)</span>)</span>
   <span class="syntax-cons">(<span class="syntax-interned-symbol">expand</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">alpha</span> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span>)</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-interned-symbol">GAMMA</span> <span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">B</span>)</span><span class="syntax-verbatim">,</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>
 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-macrolet">macrolet</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">beta</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span> <span class="syntax-quasiquote">`<span class="syntax-cons">(<span class="syntax-interned-symbol">epsilon</span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">x</span></span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">y</span></span>)</span></span>)</span>)</span>
   <span class="syntax-cons">(<span class="syntax-interned-symbol">expand</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">alpha</span> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span>)</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-interned-symbol">EPSILON</span> <span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">B</span>)</span><span class="syntax-verbatim">,</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>
 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">3</span>)</span>)</span>)</span>
   <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-symbol-macrolet">symbol-macrolet</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-first">first</a> <span class="syntax-interned-symbol">x</span>)</span>)</span>)</span>
     <span class="syntax-cons">(<span class="syntax-interned-symbol">expand</span> <span class="syntax-interned-symbol">a</span>)</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-first">first</a> <span class="syntax-interned-symbol">X</span>)</span><span class="syntax-verbatim">,</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>
 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">3</span>)</span>)</span>)</span>
   <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-symbol-macrolet">symbol-macrolet</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-first">first</a> <span class="syntax-interned-symbol">x</span>)</span>)</span>)</span>
     <span class="syntax-cons">(<a class="function-reference" href="#function-macroexpand">macroexpand</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">a</span></span>)</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">A</span><span class="syntax-verbatim">,</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>
 <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-symbol-macrolet">symbol-macrolet</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">b</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">alpha</span> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span>)</span>)</span>
   <span class="syntax-cons">(<span class="syntax-interned-symbol">expand-1</span> <span class="syntax-interned-symbol">b</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-interned-symbol">ALPHA</span> <span class="syntax-interned-symbol">X</span> <span class="syntax-interned-symbol">Y</span>)</span><span class="syntax-verbatim">,</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>
 <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-symbol-macrolet">symbol-macrolet</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">b</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">alpha</span> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span>)</span>)</span>
   <span class="syntax-cons">(<span class="syntax-interned-symbol">expand</span> <span class="syntax-interned-symbol">b</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-interned-symbol">GAMMA</span> <span class="syntax-interned-symbol">X</span> <span class="syntax-interned-symbol">Y</span>)</span><span class="syntax-verbatim">,</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>
 <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-symbol-macrolet">symbol-macrolet</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">b</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">alpha</span> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span>)</span>
                   <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span>)</span>)</span>
   <span class="syntax-cons">(<span class="syntax-interned-symbol">expand-1</span> <span class="syntax-interned-symbol">a</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">B</span><span class="syntax-verbatim">,</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>
 <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-symbol-macrolet">symbol-macrolet</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">b</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">alpha</span> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span>)</span>
                   <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span>)</span>)</span>
   <span class="syntax-cons">(<span class="syntax-interned-symbol">expand</span> <span class="syntax-interned-symbol">a</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-interned-symbol">GAMMA</span> <span class="syntax-interned-symbol">X</span> <span class="syntax-interned-symbol">Y</span>)</span><span class="syntax-verbatim">,</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>

;; Examples of shadowing behavior
 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-flet">flet</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">beta</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span>)</span>)</span>
   <span class="syntax-cons">(<span class="syntax-interned-symbol">expand</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">alpha</span> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span>)</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-interned-symbol">BETA</span> <span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">B</span>)</span><span class="syntax-verbatim">,</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>
 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-macrolet">macrolet</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">alpha</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span> <span class="syntax-quasiquote">`<span class="syntax-cons">(<span class="syntax-interned-symbol">delta</span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">x</span></span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">y</span></span>)</span></span>)</span>)</span>
   <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-flet">flet</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">alpha</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span>)</span>)</span>
     <span class="syntax-cons">(<span class="syntax-interned-symbol">expand</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">alpha</span> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span>)</span>)</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-interned-symbol">ALPHA</span> <span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">B</span>)</span><span class="syntax-verbatim">,</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>
 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">3</span>)</span>)</span>)</span>
   <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-symbol-macrolet">symbol-macrolet</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-first">first</a> <span class="syntax-interned-symbol">x</span>)</span>)</span>)</span>
     <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">x</span>)</span>)</span>
       <span class="syntax-cons">(<span class="syntax-interned-symbol">expand</span> <span class="syntax-interned-symbol">a</span>)</span>)</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">A</span><span class="syntax-verbatim">,</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>
</span></code></pre><br/></dd></dl><dl><dt class="label">Affected By</dt><dd><a class="macro-reference" href="#macro-defmacro">defmacro</a>,
<a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> of <a class="function-reference" href="#function-macro-function">macro-function</a>,
<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-macrolet">macrolet</a>,
<a class="special-operator-reference" href="#special-operator-symbol-macrolet">symbol-macrolet</a><br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="variable-reference" href="#variable-*macroexpand-hook*">*macroexpand-hook*</a>,
<a class="macro-reference" href="#macro-defmacro">defmacro</a>,
<a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> of <a class="function-reference" href="#function-macro-function">macro-function</a>,
<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-macrolet">macrolet</a>,
<a class="special-operator-reference" href="#special-operator-symbol-macrolet">symbol-macrolet</a>,
<a class="section-reference" href="#section-Evaluation">Evaluation</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd>Neither <a class="function-reference" href="#function-macroexpand">macroexpand</a> nor <a class="function-reference" href="#function-macroexpand-1">macroexpand-1</a> 
makes any explicit attempt to expand <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro form">macro forms</a> that are
either <a class="glossary-reference" href="chapter-26.xhtml#glossary-subform">subforms</a> of the <span class="parameter">form</span> 
    or <a class="glossary-reference" href="chapter-26.xhtml#glossary-subform">subforms</a> of the <span class="parameter">expansion</span>.
Such expansion might occur implicitly, however,
due to the semantics or implementation of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro function">macro function</a>.<br/></dd></dl></div><br/><br/><br/><div class="component" id="macro-define-symbol-macro"><div class="header"><span class="left"><span class="name" id="macro-define-symbol-macro">define-symbol-macro</span></span><span class="right"><span class="ftype">Macro</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">define-symbol-macro</span>&nbsp;<span class="lambda-list">symbol expansion</span>&nbsp;â†’&nbsp;<span class="return-values">symbol</span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">symbol</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>.<br/><span class="parameter">expansion</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>Provides a mechanism for globally affecting the <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro expansion">macro expansion</a>
of the indicated <span class="parameter">symbol</span>.<br/>Globally establishes an expansion function for the <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol macro">symbol macro</a> 
named by <span class="parameter">symbol</span>.
The only guaranteed property of an expansion <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> for a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol macro">symbol macro</a>
is that when it is applied to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> and the <a class="glossary-reference" href="chapter-26.xhtml#glossary-environment">environment</a> it returns
the correct expansion.  (In particular, it is <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a> 
whether the expansion is conceptually stored in the expansion function,
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-environment">environment</a>, or both.)<br/>Each global reference to <span class="parameter">symbol</span> (<span class="explicit-italic"> i.e.</span>,  not <a class="glossary-reference" href="chapter-26.xhtml#glossary-shadow">shadowed</a><sub>2</sub> by a 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> for a <a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variable</a> or <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol macro">symbol macro</a> named by
the same <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>) is expanded by the normal macro expansion process;
see <span class="section-reference error">section:SymbolsAsForms.</span>
The expansion of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol macro">symbol macro</a> is subject to further <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro expansion">macro expansion</a>
in the same <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical environment">lexical environment</a> as the <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol macro">symbol macro</a> reference,
exactly analogous to normal <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macros</a>.<br/>The consequences are unspecified if a <a class="declaration-reference" href="#declaration-special">special</a> declaration is made for
<span class="parameter">symbol</span> while in the scope of this definition (<span class="explicit-italic"> i.e.</span>,  when it is not 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-shadow">shadowed</a><sub>2</sub> by a <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> for a <a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variable</a>
or <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol macro">symbol macro</a> named by the same <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>).<br/>Any use of <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> to set the value of 
the <span class="parameter">symbol</span>
 while in the scope of this definition
 is treated as if it were a <a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a>.
<a class="macro-reference" href="chapter-5.xhtml#macro-psetq">psetq</a> of <span class="parameter">symbol</span>
 is treated as if it were a <a class="macro-reference" href="chapter-5.xhtml#macro-psetf">psetf</a>, and
<a class="macro-reference" href="chapter-5.xhtml#macro-multiple-value-setq">multiple-value-setq</a> 
 is treated as if it were a <span class="special-operator-reference error">special-operator:setf</span> of <a class="function-reference" href="chapter-5.xhtml#function-values">values</a>.<br/>A <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> for a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol macro">symbol macro</a> can be <a class="glossary-reference" href="chapter-26.xhtml#glossary-shadow">shadowed</a><sub>2</sub>
by <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> or <a class="special-operator-reference" href="#special-operator-symbol-macrolet">symbol-macrolet</a>.<br/></dd></dl><dl><dt class="label">Examples</dt><dd><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defvar">defvar</a> <span class="syntax-interned-symbol">*things*</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">alpha</span></span> <span class="syntax-quote">'<span class="syntax-interned-symbol">beta</span></span> <span class="syntax-quote">'<span class="syntax-interned-symbol">gamma</span></span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">*THINGS*</span>

<span class="syntax-cons">(<a class="macro-reference" href="#macro-define-symbol-macro">define-symbol-macro</a> <span class="syntax-interned-symbol">thing1</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-first">first</a> <span class="syntax-interned-symbol">*things*</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">THING1</span>
<span class="syntax-cons">(<a class="macro-reference" href="#macro-define-symbol-macro">define-symbol-macro</a> <span class="syntax-interned-symbol">thing2</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-second">second</a> <span class="syntax-interned-symbol">*things*</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">THING2</span>
<span class="syntax-cons">(<a class="macro-reference" href="#macro-define-symbol-macro">define-symbol-macro</a> <span class="syntax-interned-symbol">thing3</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-third">third</a> <span class="syntax-interned-symbol">*things*</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">THING3</span>

<span class="syntax-interned-symbol">thing1</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">ALPHA</span>
<span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">thing1</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">ONE</span></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">ONE</span>
<span class="syntax-interned-symbol">*things*</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-interned-symbol">ONE</span> <span class="syntax-interned-symbol">BETA</span> <span class="syntax-interned-symbol">GAMMA</span>)</span>
<span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-multiple-value-setq">multiple-value-setq</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">thing2</span> <span class="syntax-interned-symbol">thing3</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-values">values</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">two</span></span> <span class="syntax-quote">'<span class="syntax-interned-symbol">three</span></span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">TWO</span>
<span class="syntax-interned-symbol">thing3</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">THREE</span>
<span class="syntax-interned-symbol">*things*</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-interned-symbol">ONE</span> <span class="syntax-interned-symbol">TWO</span> <span class="syntax-interned-symbol">THREE</span>)</span>

<span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">thing2</span> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">thing2</span> <span class="syntax-number">2</span>)</span>)</span> <span class="syntax-interned-symbol">thing2</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-interned-symbol">TWO</span> <span class="syntax-number">2</span>)</span>
</span></code></pre><br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd>If <span class="parameter">symbol</span> is already defined as a <a class="glossary-reference" href="chapter-26.xhtml#glossary-global variable">global variable</a>,
an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-5.xhtml#type-program-error">program-error</a> is signaled.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="special-operator-reference" href="#special-operator-symbol-macrolet">symbol-macrolet</a>,
<a class="function-reference" href="#function-macroexpand">macroexpand</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd><span class="none">None</span>.<br/></dd></dl></div><br/>
<br/><div class="component" id="special-operator-symbol-macrolet"><div class="header"><span class="left"><span class="name" id="special-operator-symbol-macrolet">symbol-macrolet</span></span><span class="right"><span class="ftype">Special Operator</span></span></div><br/> <br/><dl><dt class="label">Syntax</dt><dd><span class="special-operator-definition"><span class="name">symbol-macrolet</span>&nbsp;<span class="lambda-list"><span class="explicit-roman">(</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="explicit-roman">(</span>symbol expansion<span class="explicit-roman">)</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span><span class="explicit-roman">)</span>
			   <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">declaration</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span> 
			   <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">form</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span></span>&nbsp;â†’&nbsp;<span class="return-values"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">result</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span></span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">symbol</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>.<br/><span class="parameter">expansion</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>.<br/><span class="parameter">declaration</span>&mdash;a <a class="symbol-reference" href="#symbol-declare">declare</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-expression">expression</a>; not evaluated.
                           
<span class="parameter">forms</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-implicit progn">implicit progn</a>.<br/><span class="parameter">results</span>&mdash;the <span class="glossary-reference error">glossary:values</span> returned by the <span class="parameter">forms</span>.<br/></dd></dl><dl><dt class="label">Description</dt><dd><a class="special-operator-reference" href="#special-operator-symbol-macrolet">symbol-macrolet</a> provides a mechanism for 
affecting the <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro expansion">macro expansion</a> environment for <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbols</a>.<br/><a class="special-operator-reference" href="#special-operator-symbol-macrolet">symbol-macrolet</a> lexically establishes expansion functions
for each of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol macro">symbol macros</a> named by <span class="parameter">symbols</span>.
The only guaranteed property of an expansion <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> for a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol macro">symbol macro</a>
is that when it is applied to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> and the <a class="glossary-reference" href="chapter-26.xhtml#glossary-environment">environment</a> it returns
the correct expansion.  (In particular, it is <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a> 
whether the expansion is conceptually stored in the expansion function,
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-environment">environment</a>, or both.)

Each reference to <span class="parameter">symbol</span> as a variable within the lexical <a class="glossary-reference" href="chapter-26.xhtml#glossary-scope">scope</a>
of <a class="special-operator-reference" href="#special-operator-symbol-macrolet">symbol-macrolet</a> is expanded by the normal macro expansion process;
see <span class="section-reference error">section:SymbolsAsForms.</span>
The expansion of a symbol macro is subject to further macro expansion
in the same lexical environment as the symbol macro invocation, exactly 
analogous to normal <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macros</a>.<br/>Exactly the same <span class="parameter">declarations</span> are allowed as for <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a>
with one exception: <a class="special-operator-reference" href="#special-operator-symbol-macrolet">symbol-macrolet</a> signals an error
if a <a class="declaration-reference" href="#declaration-special">special</a> declaration names one of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbols</a> 
being defined by <a class="special-operator-reference" href="#special-operator-symbol-macrolet">symbol-macrolet</a>.  
 
When the <span class="parameter">forms</span> of the <a class="special-operator-reference" href="#special-operator-symbol-macrolet">symbol-macrolet</a> form are expanded, 
any use of <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> to set the value of one of the specified variables 
 is treated as if it were a <a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a>.
<a class="macro-reference" href="chapter-5.xhtml#macro-psetq">psetq</a> of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> defined as a symbol macro 
 is treated as if it were a <a class="macro-reference" href="chapter-5.xhtml#macro-psetf">psetf</a>, and
<a class="macro-reference" href="chapter-5.xhtml#macro-multiple-value-setq">multiple-value-setq</a> 
 is treated as if it were a <span class="special-operator-reference error">special-operator:setf</span> of <a class="function-reference" href="chapter-5.xhtml#function-values">values</a>.<br/>The use of <a class="special-operator-reference" href="#special-operator-symbol-macrolet">symbol-macrolet</a> can be shadowed by <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a>.
In other words, <a class="special-operator-reference" href="#special-operator-symbol-macrolet">symbol-macrolet</a> only substitutes for occurrences
of <span class="parameter">symbol</span> that would be in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-scope">scope</a> of a lexical binding of
<span class="parameter">symbol</span> surrounding the <span class="parameter">forms</span>.<br/></dd></dl><dl><dt class="label">Examples</dt><dd><pre><code><span class="syntax-root">;;; The following is equivalent to
;;;   (list 'foo (let ((x 'bar)) x)),
;;; not
;;;   (list 'foo (let (('foo 'bar)) 'foo))
 <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-symbol-macrolet">symbol-macrolet</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">foo</span></span>)</span>)</span>
   <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">bar</span></span>)</span>)</span> <span class="syntax-interned-symbol">x</span>)</span>)</span>)</span> 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-interned-symbol">foo</span> <span class="syntax-interned-symbol">bar</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mover>not<mi>â†’</mi></mover></math> <span class="syntax-cons">(<span class="syntax-interned-symbol">foo</span> <span class="syntax-interned-symbol">foo</span>)</span> 
 
 <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-symbol-macrolet">symbol-macrolet</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">foo</span> <span class="syntax-interned-symbol">x</span>)</span></span>)</span>)</span>
   <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">x</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">FOO</span> <span class="syntax-interned-symbol">X</span>)</span>)</span>
</span></code></pre><br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd>If an attempt is made to bind a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> that is defined as a <a class="glossary-reference" href="chapter-26.xhtml#glossary-global variable">global variable</a>,
an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-5.xhtml#type-program-error">program-error</a> is signaled.
 <br/>If <span class="parameter">declaration</span> contains a <a class="declaration-reference" href="#declaration-special">special</a> declaration 
that names one of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbols</a> being bound by <a class="special-operator-reference" href="#special-operator-symbol-macrolet">symbol-macrolet</a>,
an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-5.xhtml#type-program-error">program-error</a> is signaled.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="macro-reference" href="chapter-7.xhtml#macro-with-slots">with-slots</a>, <a class="function-reference" href="#function-macroexpand">macroexpand</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd>The special form <a class="special-operator-reference" href="#special-operator-symbol-macrolet">symbol-macrolet</a> is the basic mechanism that is used to
implement <a class="macro-reference" href="chapter-7.xhtml#macro-with-slots">with-slots</a>.<br/>If a <a class="special-operator-reference" href="#special-operator-symbol-macrolet">symbol-macrolet</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-top level form">top level form</a>,
the <span class="parameter">forms</span> are also processed as <a class="glossary-reference" href="chapter-26.xhtml#glossary-top level form">top level forms</a>.
See <span class="section-reference error">section:FileCompilation.</span><br/></dd></dl> 

</div><br/><br/><br/><div class="component" id="variable-*macroexpand-hook*"><div class="header"><span class="left"><span class="name" id="variable-*macroexpand-hook*">*macroexpand-hook*</span></span><span class="right"><span class="ftype">Variable</span></span></div><br/>
<dl><dt class="label">Value Type</dt><dd>a <a class="glossary-reference" href="chapter-26.xhtml#glossary-designator">designator</a> for a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> of three <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">arguments</a>:
  a <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro function">macro function</a>,
  a <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro form">macro form</a>,
  and an <a class="glossary-reference" href="chapter-26.xhtml#glossary-environment">environment</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.<br/></dd></dl><dl><dt class="label">Initial Value</dt><dd>a <a class="glossary-reference" href="chapter-26.xhtml#glossary-designator">designator</a> for a function that is equivalent to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="chapter-5.xhtml#function-funcall">funcall</a>,
but that might have additional <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a> side-effects.

</dd></dl><dl><dt class="label">Description</dt><dd>Used as the expansion interface hook by <a class="function-reference" href="#function-macroexpand-1">macroexpand-1</a> to 
control the <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro expansion">macro expansion</a> process.
When a <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro form">macro form</a> is to be expanded,
this <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> is called with three arguments:
  the <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro function">macro function</a>,
  the <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro form">macro form</a>,
  and the <a class="glossary-reference" href="chapter-26.xhtml#glossary-environment">environment</a> in which the <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro form">macro form</a> is to be expanded.
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-environment">environment</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> has <a class="glossary-reference" href="chapter-26.xhtml#glossary-dynamic extent">dynamic extent</a>;
the consequences are undefined if the <a class="glossary-reference" href="chapter-26.xhtml#glossary-environment">environment</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> is 
referred to outside the <a class="glossary-reference" href="chapter-26.xhtml#glossary-dynamic extent">dynamic extent</a> of the macro expansion function.
 
</dd></dl><dl><dt class="label">Examples</dt><dd><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">hook</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">expander</span> <span class="syntax-interned-symbol">form</span> <span class="syntax-interned-symbol">env</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="chapter-22.xhtml#function-format">format</a> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a> <span class="syntax-string">"Now expanding: ~S~%"</span> <span class="syntax-interned-symbol">form</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-funcall">funcall</a> <span class="syntax-interned-symbol">expander</span> <span class="syntax-interned-symbol">form</span> <span class="syntax-interned-symbol">env</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">HOOK</span> 
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-defmacro">defmacro</a> <span class="syntax-interned-symbol">machook</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span> <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-/">/</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-unquote">,<span class="syntax-interned-symbol">x</span></span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">y</span></span>)</span> <span class="syntax-number">2</span>)</span></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">MACHOOK</span> 
 <span class="syntax-cons">(<a class="function-reference" href="#function-macroexpand">macroexpand</a> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">machook</span> <span class="syntax-number">1</span> <span class="syntax-number">2</span>)</span></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-/">/</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-number">1</span> <span class="syntax-number">2</span>)</span> <span class="syntax-number">2</span>)</span><span class="syntax-verbatim">,</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a> 
 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<a class="variable-reference" href="#variable-*macroexpand-hook*">*macroexpand-hook*</a> <span class="syntax-function">#'<span class="syntax-interned-symbol">hook</span></span>)</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="#function-macroexpand">macroexpand</a> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">machook</span> <span class="syntax-number">1</span> <span class="syntax-number">2</span>)</span></span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> Now expanding (MACHOOK 1 2) 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-/">/</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-number">1</span> <span class="syntax-number">2</span>)</span> <span class="syntax-number">2</span>)</span><span class="syntax-verbatim">,</span> <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>
</span></code></pre><br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="function-reference" href="#function-macroexpand">macroexpand</a>, <a class="function-reference" href="#function-macroexpand-1">macroexpand-1</a>, <a class="function-reference" href="chapter-5.xhtml#function-funcall">funcall</a>, <a class="section-reference" href="#section-Evaluation">Evaluation</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd>The net effect of the chosen initial value is to just invoke the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-macro function">macro function</a>, giving it the <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro form">macro form</a> and
<a class="glossary-reference" href="chapter-26.xhtml#glossary-environment">environment</a> as its two arguments.<br/>Users or user programs can <a class="glossary-reference" href="chapter-26.xhtml#glossary-assign">assign</a> this <a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variable</a> to
customize or trace the <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro expansion">macro expansion</a> mechanism.  Note, however,
that this <a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variable</a> is a global resource, potentially shared by
multiple <a class="glossary-reference" href="chapter-26.xhtml#glossary-program">programs</a>; as such, if any two <a class="glossary-reference" href="chapter-26.xhtml#glossary-program">programs</a> depend for
their correctness on the setting of this <a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variable</a>, those
<a class="glossary-reference" href="chapter-26.xhtml#glossary-program">programs</a> may not be able to run in the same <a class="glossary-reference" href="chapter-26.xhtml#glossary-lisp image">Lisp image</a>.
For this reason, it is frequently best to confine its uses to debugging
situations.<br/>Users who put their own function into <a class="variable-reference" href="#variable-*macroexpand-hook*">*macroexpand-hook*</a>
should consider saving the previous value of the hook, and calling that
value from their own.

</dd></dl>
</div><br/><br/>
<br/><div class="component" id="function-proclaim"><div class="header"><span class="left"><span class="name" id="function-proclaim">proclaim</span></span><span class="right"><span class="ftype">Function</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">proclaim</span>&nbsp;<span class="lambda-list">declaration-specifier</span>&nbsp;â†’&nbsp;<span class="return-values"><a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a></span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">declaration-specifier</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration specifier">declaration specifier</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd><a class="glossary-reference" href="chapter-26.xhtml#glossary-establish">Establishes</a> the <a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration">declaration</a> specified by <span class="parameter">declaration-specifier</span>
in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-global environment">global environment</a>.<br/>Such a <a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration">declaration</a>, sometimes called a <a class="glossary-reference" href="chapter-26.xhtml#glossary-global declaration">global declaration</a> 
or a <a class="glossary-reference" href="chapter-26.xhtml#glossary-proclamation">proclamation</a>, is always in force unless locally <a class="glossary-reference" href="chapter-26.xhtml#glossary-shadow">shadowed</a>.<br/><a class="glossary-reference" href="chapter-26.xhtml#glossary-name">Names</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variables</a> and <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">functions</a> within 
<span class="parameter">declaration-specifier</span> refer to <a class="glossary-reference" href="chapter-26.xhtml#glossary-dynamic variable">dynamic variables</a> 
and global <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> definitions, respectively.<br/>Figure <span class="explicit-mono">()</span>&ndash; shows a list of <span class="parameter">declaration identifiers</span> 
that can be used with <a class="function-reference" href="#function-proclaim">proclaim</a>.<br/><span class="float" id="figure-Global Declaration Specifiers"><table><tbody><tr><td><a class="symbol-reference" href="#symbol-declaration">declaration</a></td><td><a class="declaration-reference" href="#declaration-inline">inline</a></td><td><a class="declaration-reference" href="#declaration-optimize">optimize</a></td><td><a class="symbol-reference" href="chapter-25.xhtml#symbol-type">type</a></td></tr><tr><td><a class="declaration-reference" href="#declaration-ftype">ftype</a></td><td><a class="symbol-reference" href="#symbol-notinline">notinline</a></td><td><a class="symbol-reference" href="#symbol-special">special</a></td><td/></tr></tbody></table><div class="caption">Global Declaration Specifiers</div></span>

An implementation is free to support other (<a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-defined">implementation-defined</a>)
<a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration identifier">declaration identifiers</a> as well.<br/></dd></dl><dl><dt class="label">Examples</dt><dd><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">declare-variable-types-globally</span> <span class="syntax-cons">(<a class="symbol-reference" href="chapter-25.xhtml#symbol-type">type</a> <span class="syntax-interned-symbol">vars</span>)</span>
   <span class="syntax-cons">(<a class="function-reference" href="#function-proclaim">proclaim</a> <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="symbol-reference" href="chapter-25.xhtml#symbol-type">type</a> <span class="syntax-unquote">,<a class="symbol-reference" href="chapter-25.xhtml#symbol-type">type</a></span> <span class="syntax-unquote">,@<span class="syntax-interned-symbol">vars</span></span>)</span></span>)</span>
   <a class="symbol-reference" href="chapter-25.xhtml#symbol-type">type</a>)</span>

 ;; Once this form is executed, the dynamic variable *TOLERANCE*
 ;; must always contain a float.
 <span class="syntax-cons">(<span class="syntax-interned-symbol">declare-variable-types-globally</span> <span class="syntax-quote">'<a class="function-reference" href="chapter-12.xhtml#function-float">float</a></span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">*tolerance*</span>)</span></span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="function-reference" href="chapter-12.xhtml#function-float">float</a>
</span></code></pre><br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="macro-reference" href="#macro-declaim">declaim</a>,
<a class="symbol-reference" href="#symbol-declare">declare</a>,
<a class="section-reference" href="#section-Compilation">Compilation</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd>Although the <span class="glossary-reference error">glossary:execution</span> of a <a class="function-reference" href="#function-proclaim">proclaim</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> 
has effects that might affect compilation, the compiler does not make
any attempt to recognize and specially process <a class="function-reference" href="#function-proclaim">proclaim</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a>.
A <a class="glossary-reference" href="chapter-26.xhtml#glossary-proclamation">proclamation</a> such as the following, even if a <a class="glossary-reference" href="chapter-26.xhtml#glossary-top level form">top level form</a>,
does not have any effect until it is executed:<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="#function-proclaim">proclaim</a> <span class="syntax-quote">'<span class="syntax-cons">(<a class="symbol-reference" href="#symbol-special">special</a> <span class="syntax-interned-symbol">*x*</span>)</span></span>)</span>
</span></code></pre><br/>If compile time side effects are desired, <a class="special-operator-reference" href="#special-operator-eval-when">eval-when</a> may be useful.
For example:<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-eval-when">eval-when</a> <span class="syntax-cons">(<span class="syntax-keyword-symbol">:execute</span> <span class="syntax-keyword-symbol">:compile-toplevel</span> <span class="syntax-keyword-symbol">:load-toplevel</span>)</span>
  <span class="syntax-cons">(<a class="function-reference" href="#function-proclaim">proclaim</a> <span class="syntax-quote">'<span class="syntax-cons">(<a class="symbol-reference" href="#symbol-special">special</a> <span class="syntax-interned-symbol">*x*</span>)</span></span>)</span>)</span>
</span></code></pre><br/>In most such cases, however, it is preferrable to use <a class="macro-reference" href="#macro-declaim">declaim</a> for
this purpose.<br/>Since <a class="function-reference" href="#function-proclaim">proclaim</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a> are ordinary <a class="glossary-reference" href="chapter-26.xhtml#glossary-function form">function forms</a>,
<a class="glossary-reference" href="chapter-26.xhtml#glossary-macro form">macro forms</a> can expand into them.

</dd></dl></div><br/><br/><br/><div class="component" id="macro-declaim"><div class="header"><span class="left"><span class="name" id="macro-declaim">declaim</span></span><span class="right"><span class="ftype">Macro</span></span></div><br/>
<dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">declaim</span>&nbsp;<span class="lambda-list"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">declaration-specifier</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span></span>&nbsp;â†’&nbsp;<span class="return-values"><a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a></span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">declaration-specifier</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration specifier">declaration specifier</a>; not evaluated.<br/></dd></dl><dl><dt class="label">Description</dt><dd>Establishes the <a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration">declarations</a> specified by the <span class="parameter">declaration-specifiers</span>.<br/>If a use of this macro appears as a <a class="glossary-reference" href="chapter-26.xhtml#glossary-top level form">top level form</a> in a <a class="glossary-reference" href="chapter-26.xhtml#glossary-file">file</a> 
being processed by the <a class="glossary-reference" href="chapter-26.xhtml#glossary-file compiler">file compiler</a>, the proclamations are also made
at compile-time.  As with other defining macros, it is unspecified whether or
not the compile-time side-effects of a <a class="macro-reference" href="#macro-declaim">declaim</a> persist after the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-file">file</a> has been <a class="glossary-reference" href="chapter-26.xhtml#glossary-compile">compiled</a>.<br/></dd></dl><dl><dt class="label">Examples</dt><dd/></dl><dl><dt class="label">Side Effects</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="symbol-reference" href="#symbol-declare">declare</a>,
<a class="function-reference" href="#function-proclaim">proclaim</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd><span class="none">None</span>.<br/>

</dd></dl>
</div><br/><br/><br/><div class="component" id="symbol-declare"><div class="header"><span class="left"><span class="name" id="symbol-declare">declare</span></span><span class="right"><span class="ftype">Symbol</span></span></div><br/>
<dl><dt class="label">Syntax</dt><dd><span class="special-operator-definition"><span class="name">declare</span>&nbsp;<span class="lambda-list"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">declaration-specifier</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span></span>&nbsp;â†’&nbsp;|</span><br/></dd></dl><dl><dt class="label">Arguments</dt><dd><span class="parameter">declaration-specifier</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration specifier">declaration specifier</a>; not evaluated.<br/></dd></dl><dl><dt class="label">Description</dt><dd>A <a class="symbol-reference" href="#symbol-declare">declare</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-expression">expression</a>, sometimes called a <a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration">declaration</a>,
can occur only at the beginning of the bodies of certain <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a>;
that is, it may be preceded only by other <a class="symbol-reference" href="#symbol-declare">declare</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-expression">expressions</a>,
or by a <a class="glossary-reference" href="chapter-26.xhtml#glossary-documentation string">documentation string</a> if the context permits.<br/>A <a class="symbol-reference" href="#symbol-declare">declare</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-expression">expression</a> can occur in a <a class="glossary-reference" href="chapter-26.xhtml#glossary-lambda expression">lambda expression</a>
or in any of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a> listed in Figure <span class="explicit-mono">()</span>&ndash;.<br/><span class="float" id="figure-Standardized Forms In Which Declarations Can Occur"><table><tbody><tr><td><a class="macro-reference" href="chapter-7.xhtml#macro-defgeneric">defgeneric</a></td><td><a class="macro-reference" href="chapter-11.xhtml#macro-do-external-symbols">do-external-symbols</a></td><td><a class="macro-reference" href="chapter-5.xhtml#macro-prog">prog</a></td></tr><tr><td><a class="macro-reference" href="#macro-define-compiler-macro">define-compiler-macro</a></td><td><a class="macro-reference" href="chapter-11.xhtml#macro-do-symbols">do-symbols</a></td><td><a class="macro-reference" href="chapter-5.xhtml#macro-prog*">prog*</a></td></tr><tr><td><a class="macro-reference" href="chapter-7.xhtml#macro-define-method-combination">define-method-combination</a></td><td><a class="macro-reference" href="chapter-6.xhtml#macro-dolist">dolist</a></td><td><a class="macro-reference" href="chapter-9.xhtml#macro-restart-case">restart-case</a></td></tr><tr><td><a class="macro-reference" href="chapter-5.xhtml#macro-define-setf-expander">define-setf-expander</a></td><td><a class="macro-reference" href="chapter-6.xhtml#macro-dotimes">dotimes</a></td><td><a class="special-operator-reference" href="#special-operator-symbol-macrolet">symbol-macrolet</a></td></tr><tr><td><a class="macro-reference" href="#macro-defmacro">defmacro</a></td><td><a class="special-operator-reference" href="chapter-5.xhtml#special-operator-flet">flet</a></td><td><a class="macro-reference" href="chapter-7.xhtml#macro-with-accessors">with-accessors</a></td></tr><tr><td><a class="macro-reference" href="chapter-7.xhtml#macro-defmethod">defmethod</a></td><td><a class="macro-reference" href="chapter-9.xhtml#macro-handler-case">handler-case</a></td><td><a class="macro-reference" href="chapter-18.xhtml#macro-with-hash-table-iterator">with-hash-table-iterator</a></td></tr><tr><td><a class="macro-reference" href="chapter-5.xhtml#macro-defsetf">defsetf</a></td><td><a class="special-operator-reference" href="chapter-5.xhtml#special-operator-labels">labels</a></td><td><a class="macro-reference" href="chapter-21.xhtml#macro-with-input-from-string">with-input-from-string</a></td></tr><tr><td><a class="macro-reference" href="chapter-4.xhtml#macro-deftype">deftype</a></td><td><a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a></td><td><a class="macro-reference" href="chapter-21.xhtml#macro-with-open-file">with-open-file</a></td></tr><tr><td><a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a></td><td><a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let*">let*</a></td><td><a class="macro-reference" href="chapter-21.xhtml#macro-with-open-stream">with-open-stream</a></td></tr><tr><td><a class="macro-reference" href="chapter-5.xhtml#macro-destructuring-bind">destructuring-bind</a></td><td><a class="special-operator-reference" href="#special-operator-locally">locally</a></td><td><a class="macro-reference" href="chapter-21.xhtml#macro-with-output-to-string">with-output-to-string</a></td></tr><tr><td><a class="macro-reference" href="chapter-6.xhtml#macro-do">do</a></td><td><a class="special-operator-reference" href="chapter-5.xhtml#special-operator-macrolet">macrolet</a></td><td><a class="macro-reference" href="chapter-11.xhtml#macro-with-package-iterator">with-package-iterator</a></td></tr><tr><td><a class="macro-reference" href="chapter-6.xhtml#macro-do*">do*</a></td><td><a class="macro-reference" href="chapter-5.xhtml#macro-multiple-value-bind">multiple-value-bind</a></td><td><a class="macro-reference" href="chapter-7.xhtml#macro-with-slots">with-slots</a></td></tr><tr><td><a class="macro-reference" href="chapter-11.xhtml#macro-do-all-symbols">do-all-symbols</a></td><td><a class="macro-reference" href="chapter-22.xhtml#macro-pprint-logical-block">pprint-logical-block</a></td><td/></tr></tbody></table><div class="caption">Standardized Forms In Which Declarations Can Occur</div></span>

A <a class="symbol-reference" href="#symbol-declare">declare</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-expression">expression</a> can only occur 
where specified by the syntax of these <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a>.
The consequences of attempting to evaluate a <a class="symbol-reference" href="#symbol-declare">declare</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-expression">expression</a> 
are undefined.  In situations where such <a class="glossary-reference" href="chapter-26.xhtml#glossary-expression">expressions</a> can appear, 
explicit checks are made for their presence and they are never actually evaluated;
it is for this reason that they
are called  ``<a class="symbol-reference" href="#symbol-declare">declare</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-expression">expressions</a>''
rather than ``<a class="symbol-reference" href="#symbol-declare">declare</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a>.''<br/>
<a class="glossary-reference" href="chapter-26.xhtml#glossary-macro form">Macro forms</a> cannot expand into declarations;
<a class="symbol-reference" href="#symbol-declare">declare</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-expression">expressions</a> must appear as actual <a class="glossary-reference" href="chapter-26.xhtml#glossary-subexpression">subexpressions</a> of
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> to which they refer.

Figure <span class="explicit-mono">()</span>&ndash; shows a list of <a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration identifier">declaration identifiers</a> 
that can be used with <a class="symbol-reference" href="#symbol-declare">declare</a>.<br/><span class="float" id="figure-Local Declaration Specifiers"><table><tbody><tr><td><a class="declaration-reference" href="#declaration-dynamic-extent">dynamic-extent</a></td><td><a class="declaration-reference" href="#declaration-ignore">ignore</a></td><td><a class="declaration-reference" href="#declaration-optimize">optimize</a></td></tr><tr><td><a class="declaration-reference" href="#declaration-ftype">ftype</a></td><td><a class="declaration-reference" href="#declaration-inline">inline</a></td><td><a class="symbol-reference" href="#symbol-special">special</a></td></tr><tr><td><a class="declaration-reference" href="#declaration-ignorable">ignorable</a></td><td><a class="symbol-reference" href="#symbol-notinline">notinline</a></td><td><a class="symbol-reference" href="chapter-25.xhtml#symbol-type">type</a></td></tr></tbody></table><div class="caption">Local Declaration Specifiers</div></span>

An implementation is free to support other (<a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-defined">implementation-defined</a>)
<a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration identifier">declaration identifiers</a> as well.<br/></dd></dl><dl><dt class="label">Examples</dt><dd><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">nonsense</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">k</span> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">z</span>)</span>
  <span class="syntax-cons">(<span class="syntax-interned-symbol">foo</span> <span class="syntax-interned-symbol">z</span> <span class="syntax-interned-symbol">x</span>)</span>                     <span class="syntax-line-comment syntax-comment">;First call to foo
</span>  <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">j</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">foo</span> <span class="syntax-interned-symbol">k</span> <span class="syntax-interned-symbol">x</span>)</span>)</span>           <span class="syntax-line-comment syntax-comment">;Second call to foo
</span>        <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-*">*</a> <span class="syntax-interned-symbol">k</span> <span class="syntax-interned-symbol">k</span>)</span>)</span>)</span>
    <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="declaration-reference" href="#declaration-inline">inline</a> <span class="syntax-interned-symbol">foo</span>)</span> <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-special">special</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">z</span>)</span>)</span>
    <span class="syntax-cons">(<span class="syntax-interned-symbol">foo</span> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">j</span> <span class="syntax-interned-symbol">z</span>)</span>)</span>)</span>               ;Third call to foo
</span></code></pre><br/>In this example,
the <a class="declaration-reference" href="#declaration-inline">inline</a> declaration applies
only to the third call to <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">foo</span>
</span></code></pre>, but not to the first or second ones.
The <a class="declaration-reference" href="#declaration-special">special</a> declaration of <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">x</span>
</span></code></pre> causes <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> 
to make a dynamic <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> for <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">x</span>
</span></code></pre>, and causes the reference to 
<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">x</span>
</span></code></pre>
in the body of <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> to be a dynamic reference.
The reference to <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">x</span>
</span></code></pre> in the second call to <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">foo</span>
</span></code></pre> is a local reference
to the second parameter of <span class="explicit-mono">nonsense</span>.
The reference to <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">x</span>
</span></code></pre> in the first call to <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">foo</span>
</span></code></pre> is a local
reference, not a <a class="declaration-reference" href="#declaration-special">special</a> one.  The <a class="declaration-reference" href="#declaration-special">special</a> declaration of <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">z</span>
</span></code></pre>
causes the reference to <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">z</span>
</span></code></pre> in the 
third
call
to <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">foo</span>
</span></code></pre> to be a dynamic reference; it does not
refer to the parameter to <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">nonsense</span>
</span></code></pre> named <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">z</span>
</span></code></pre>, because that
parameter <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> has not been declared to be <a class="declaration-reference" href="#declaration-special">special</a>.
(The <a class="declaration-reference" href="#declaration-special">special</a> declaration of <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">z</span>
</span></code></pre> does not appear in the body
of <a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a>,  but in an inner <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>, and therefore does not
affect the <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-parameter">parameter</a>.)<br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd>The consequences  of trying to use a <a class="symbol-reference" href="#symbol-declare">declare</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-expression">expression</a> as 
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> to be <span class="glossary-reference error">glossary:evaluated</span> are undefined.<br/><br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="function-reference" href="#function-proclaim">proclaim</a>,
<a class="section-reference" href="chapter-4.xhtml#section-TypeSpecifiers">Type Specifiers</a>,
<a class="declaration-reference" href="#declaration-declaration">declaration</a>,
<a class="declaration-reference" href="#declaration-dynamic-extent">dynamic-extent</a>,
<a class="declaration-reference" href="#declaration-ftype">ftype</a>,
<a class="declaration-reference" href="#declaration-ignorable">ignorable</a>,
<a class="declaration-reference" href="#declaration-ignore">ignore</a>,
<a class="declaration-reference" href="#declaration-inline">inline</a>,
<a class="declaration-reference" href="#declaration-notinline">notinline</a>,
<a class="declaration-reference" href="#declaration-optimize">optimize</a>,
<a class="declaration-reference" href="#declaration-type">type</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd><span class="none">None</span>.<br/>

</dd></dl></div><br/><br/>
<br/><div class="component" id="declaration-ignore"><div class="header"><span class="left"><span class="name" id="declaration-ignore">ignore</span>, <span class="name" id="declaration-ignorable">ignorable</span></span><span class="right"><span class="ftype">Declaration</span></span></div><br/>
<dl><dt class="label">Syntax</dt><dd><pre><code><span class="syntax-root"><span class="explicit-roman">(</span>ignore <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">var</span> | <span class="explicit-roman">(</span><a class="symbol-reference" href="chapter-2.xhtml#symbol-function">function</a> <span class="parameter">fn</span><span class="explicit-roman">)</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span><span class="explicit-roman">)</span>
</span></code></pre><br/><pre><code><span class="syntax-root"><span class="explicit-roman">(</span>ignorable <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">var</span> | <span class="explicit-roman">(</span><a class="symbol-reference" href="chapter-2.xhtml#symbol-function">function</a> <span class="parameter">fn</span><span class="explicit-roman">)</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span><span class="explicit-roman">)</span>
</span></code></pre><br/></dd></dl><dl><dt class="label">Arguments</dt><dd><span class="parameter">var</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variable</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a>.<br/><span class="parameter">fn</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a>.<br/></dd></dl><dl><dt class="label">Valid Context</dt><dd><a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration">declaration</a>

</dd></dl><dl><dt class="label">Binding Types Affected</dt><dd><a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variable</a>, <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a><br/></dd></dl><dl><dt class="label">Description</dt><dd>The <a class="declaration-reference" href="#declaration-ignore">ignore</a> and <a class="declaration-reference" href="#declaration-ignorable">ignorable</a> declarations
refer to <a class="glossary-reference" href="chapter-26.xhtml#glossary-for-value">for-value</a> <span class="glossary-reference error">glossary:references</span> 
    to <a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variable</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a> for the <span class="parameter">vars</span>
and to <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a> for the <span class="parameter">fns</span>.<br/>An <a class="declaration-reference" href="#declaration-ignore">ignore</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration">declaration</a> specifies that
<a class="glossary-reference" href="chapter-26.xhtml#glossary-for-value">for-value</a> <span class="glossary-reference error">glossary:references</span> to the indicated <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a>
will not
occur within the scope of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration">declaration</a>.
Within the <a class="glossary-reference" href="chapter-26.xhtml#glossary-scope">scope</a> of such a <a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration">declaration</a>,
it is desirable
for a compiler to issue a warning about 
the presence of
either a <a class="glossary-reference" href="chapter-26.xhtml#glossary-for-value">for-value</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-reference">reference</a> to any <span class="parameter">var</span> or <span class="parameter">fn</span>,
    or a <a class="declaration-reference" href="#declaration-special">special</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration">declaration</a> for any <span class="parameter">var</span>.<br/>An <a class="declaration-reference" href="#declaration-ignorable">ignorable</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration">declaration</a> specifies that 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-for-value">for-value</a> <span class="glossary-reference error">glossary:references</span> to the indicated <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a>
might or might not
occur within the scope of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration">declaration</a>.
Within the <a class="glossary-reference" href="chapter-26.xhtml#glossary-scope">scope</a> of such a <a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration">declaration</a>,
it is not desirable
for a compiler to issue a warning about
the presence or absence of
either a <a class="glossary-reference" href="chapter-26.xhtml#glossary-for-value">for-value</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-reference">reference</a> to any <span class="parameter">var</span> or <span class="parameter">fn</span>,
    or a <a class="declaration-reference" href="#declaration-special">special</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration">declaration</a> for any <span class="parameter">var</span>.<br/>When not within the <a class="glossary-reference" href="chapter-26.xhtml#glossary-scope">scope</a> 
of a <a class="declaration-reference" href="#declaration-ignore">ignore</a> or <a class="declaration-reference" href="#declaration-ignorable">ignorable</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration">declaration</a>,
it is desirable
for a compiler to issue a warning about
any <span class="parameter">var</span> for which there is 
neither a <a class="glossary-reference" href="chapter-26.xhtml#glossary-for-value">for-value</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-reference">reference</a> 
    nor a <a class="declaration-reference" href="#declaration-special">special</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration">declaration</a>,
or about
any <span class="parameter">fn</span> for which there is 
     no <a class="glossary-reference" href="chapter-26.xhtml#glossary-for-value">for-value</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-reference">reference</a>.<br/>Any warning about a ``used'' or ``unused'' <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> must be of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-9.xhtml#type-style-warning">style-warning</a>,
and may not affect program semantics.<br/>
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-stream variable">stream variables</a> established by 
     <a class="macro-reference" href="chapter-21.xhtml#macro-with-open-file">with-open-file</a>,
     <a class="macro-reference" href="chapter-21.xhtml#macro-with-open-stream">with-open-stream</a>,
     <a class="macro-reference" href="chapter-21.xhtml#macro-with-input-from-string">with-input-from-string</a>,
 and <a class="macro-reference" href="chapter-21.xhtml#macro-with-output-to-string">with-output-to-string</a>,
and all <a class="glossary-reference" href="chapter-26.xhtml#glossary-iteration variable">iteration variables</a> are, by definition, always ``used''.
Using <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="declaration-reference" href="#declaration-ignore">ignore</a> <span class="parameter">v</span>)</span>)</span>
</span></code></pre>, 
for such a <a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variable</a> <span class="parameter">v</span> has unspecified consequences.<br/></dd></dl>

<dl><dt class="label">See Also</dt><dd><a class="symbol-reference" href="#symbol-declare">declare</a>

</dd></dl></div><br/><br/>
<br/><div class="component" id="declaration-dynamic-extent"><div class="header"><span class="left"><span class="name" id="declaration-dynamic-extent">dynamic-extent</span></span><span class="right"><span class="ftype">Declaration</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="declaration-reference" href="#declaration-dynamic-extent">dynamic-extent</a> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>[</mi><mi>[</mi></math> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">var</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span> |
		               <span class="explicit-roman">(</span><a class="symbol-reference" href="chapter-2.xhtml#symbol-function">function</a> <span class="parameter">fn</span><span class="explicit-roman">)</span><span class="explicit-roman">*</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>]</mi><mi>]</mi></math>)</span>
</span></code></pre><br/></dd></dl><dl><dt class="label">Arguments</dt><dd><span class="parameter">var</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variable</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a>.<br/><span class="parameter">fn</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a>.<br/></dd></dl><dl><dt class="label">Valid Context</dt><dd><a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration">declaration</a>

</dd></dl><dl><dt class="label">Binding Types Affected</dt><dd><a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variable</a>, <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a><br/></dd></dl><dl><dt class="label">Description</dt><dd>
In some containing <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>, <span class="parameter">F</span>, this declaration
asserts for each  var<sub>i</sub> (which need not be bound by <span class="parameter">F</span>),
and for each <a class="glossary-reference" href="chapter-26.xhtml#glossary-value">value</a>  v<sub>ij</sub> that  var<sub>i</sub> takes on,
and for each <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>  x<sub>ijk</sub> that 
is
an <a class="glossary-reference" href="chapter-26.xhtml#glossary-otherwise inaccessible part">otherwise inaccessible part</a> of  v<sub>ij</sub> at any time when
 v<sub>ij</sub>
becomes the value of  var<sub>i</sub>,
that just after the execution of <span class="parameter">F</span> terminates, 
 x<sub>ijk</sub> is either <a class="glossary-reference" href="chapter-26.xhtml#glossary-inaccessible">inaccessible</a>
(if <span class="parameter">F</span> established a <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> for  var<sub>i</sub>)
or still an <a class="glossary-reference" href="chapter-26.xhtml#glossary-otherwise inaccessible part">otherwise inaccessible part</a> of the current value of 
 var<sub>i</sub> (if <span class="parameter">F</span> did not establish a <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> 
for  var<sub>i</sub>).
The same relation holds for each  fn<sub>i</sub>, 
except that the <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a> are in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-namespace">namespace</a>.

The compiler is permitted to use
this information in any way that is appropriate to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation">implementation</a>
and that does not conflict with the semantics of <span class="explicit-roman">Common Lisp</span>.<br/><a class="declaration-reference" href="#declaration-dynamic-extent">dynamic-extent</a> declarations can be <a class="glossary-reference" href="chapter-26.xhtml#glossary-free declaration">free declarations</a>
or <a class="glossary-reference" href="chapter-26.xhtml#glossary-bound declaration">bound declarations</a>.<br/>The <span class="parameter">vars</span> and <span class="parameter">fns</span> named in a <a class="declaration-reference" href="#declaration-dynamic-extent">dynamic-extent</a> 
declaration must not refer to <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol macro">symbol macro</a> or <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a> bindings.
<br/><dl><dt class="label">Examples</dt><dd>Since stack allocation of the initial value entails knowing at the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>'s creation time that the <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> can be 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-stack-allocated">stack-allocated</a>,  it is not generally useful to make a 
<a class="declaration-reference" href="#declaration-dynamic-extent">dynamic-extent</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration">declaration</a> for <a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variables</a>
which have no lexically apparent initial value. 
For example, it is probably useful to write:<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">f</span> <span class="syntax-symbol">()</span>
  <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">3</span>)</span>)</span>)</span>
    <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="declaration-reference" href="#declaration-dynamic-extent">dynamic-extent</a> <span class="syntax-interned-symbol">x</span>)</span>)</span>
        <span class="syntax-interned-symbol">...</span>)</span>)</span>
</span></code></pre><br/>This would permit those compilers that wish to do so to <a class="glossary-reference" href="chapter-26.xhtml#glossary-stack allocate">stack allocate</a>
the list held by the local variable <span class="explicit-mono">x</span>.  It is permissible,
but in practice probably not as useful, to write:<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">g</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="declaration-reference" href="#declaration-dynamic-extent">dynamic-extent</a> <span class="syntax-interned-symbol">x</span>)</span>)</span> <span class="syntax-interned-symbol">...</span>)</span>
<span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">f</span> <span class="syntax-symbol">()</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">g</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">3</span>)</span>)</span>)</span>
</span></code></pre><br/>Most compilers would probably not <a class="glossary-reference" href="chapter-26.xhtml#glossary-stack allocate">stack allocate</a> the <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">argument</a>
to <span class="explicit-mono">g</span> in <span class="explicit-mono">f</span> because it would be a modularity violation for the compiler
to assume facts about <span class="explicit-mono">g</span> from within <span class="explicit-mono">f</span>.   Only an implementation that 
was willing to be responsible for recompiling <span class="explicit-mono">f</span> if the definition of <span class="explicit-mono">g</span> 
changed incompatibly could legitimately <a class="glossary-reference" href="chapter-26.xhtml#glossary-stack allocate">stack allocate</a> the <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> 
argument to <span class="explicit-mono">g</span> in <span class="explicit-mono">f</span>.<br/>Here is another example:<br/><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="macro-reference" href="#macro-declaim">declaim</a> <span class="syntax-cons">(<a class="declaration-reference" href="#declaration-inline">inline</a> <span class="syntax-interned-symbol">g</span>)</span>)</span>
 <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">g</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="declaration-reference" href="#declaration-dynamic-extent">dynamic-extent</a> <span class="syntax-interned-symbol">x</span>)</span>)</span> <span class="syntax-interned-symbol">...</span>)</span>
 <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">f</span> <span class="syntax-symbol">()</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">g</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">3</span>)</span>)</span>)</span>
 
 <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">f</span> <span class="syntax-symbol">()</span>
   <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-flet">flet</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">g</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="declaration-reference" href="#declaration-dynamic-extent">dynamic-extent</a> <span class="syntax-interned-symbol">x</span>)</span>)</span> <span class="syntax-interned-symbol">...</span>)</span>)</span>
     <span class="syntax-cons">(<span class="syntax-interned-symbol">g</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">3</span>)</span>)</span>)</span>)</span>
 
</span></code></pre>
In the previous example, some compilers might determine that optimization was 
possible and others might not.<br/>A variant of this is the so-called ``stack allocated rest list''
that can be achieved (in implementations supporting the optimization) by:<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">f</span> <span class="syntax-cons">(<a class="lambda-list-keyword-reference" href="#lambda-list-keyword-rest">&amp;REST</a> <span class="syntax-interned-symbol">x</span>)</span>
  <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="declaration-reference" href="#declaration-dynamic-extent">dynamic-extent</a> <span class="syntax-interned-symbol">x</span>)</span>)</span>
  <span class="syntax-interned-symbol">...</span>)</span>
</span></code></pre><br/>Note that although the initial value of <span class="explicit-mono">x</span> is not explicit, the <span class="explicit-mono">f</span>
function is responsible for assembling the list <span class="explicit-mono">x</span> from the passed arguments,
so the <span class="explicit-mono">f</span> function can be optimized by the compiler to construct a 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-stack-allocated">stack-allocated</a> list instead of a heap-allocated list in implementations
that support such.<br/>In the following example,<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">a1</span></span> <span class="syntax-quote">'<span class="syntax-interned-symbol">b1</span></span> <span class="syntax-quote">'<span class="syntax-interned-symbol">c1</span></span>)</span>)</span>
      <span class="syntax-cons">(<span class="syntax-interned-symbol">y</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-cons">cons</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">a2</span></span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-cons">cons</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">b2</span></span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-cons">cons</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">c2</span></span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span>)</span>)</span>)</span>)</span>
  <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="declaration-reference" href="#declaration-dynamic-extent">dynamic-extent</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span>)</span>
  <span class="syntax-interned-symbol">...</span>)</span>
</span></code></pre>
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-otherwise inaccessible part">otherwise inaccessible parts</a> of <span class="explicit-mono">x</span> are three 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-cons">conses</a>,  and the <a class="glossary-reference" href="chapter-26.xhtml#glossary-otherwise inaccessible part">otherwise inaccessible parts</a>
of <span class="explicit-mono">y</span> are three other <a class="glossary-reference" href="chapter-26.xhtml#glossary-cons">conses</a>.  
None of the symbols <span class="explicit-mono">a1</span>,  <span class="explicit-mono">b1</span>,  <span class="explicit-mono">c1</span>,  <span class="explicit-mono">a2</span>,
<span class="explicit-mono">b2</span>,  <span class="explicit-mono">c2</span>,  or <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a> is an
<a class="glossary-reference" href="chapter-26.xhtml#glossary-otherwise inaccessible part">otherwise inaccessible part</a> of <span class="explicit-mono">x</span> or <span class="explicit-mono">y</span> because each
is <a class="glossary-reference" href="chapter-26.xhtml#glossary-interned">interned</a> and hence <a class="glossary-reference" href="chapter-26.xhtml#glossary-accessible">accessible</a> by the <a class="glossary-reference" href="chapter-26.xhtml#glossary-package">package</a>
(or <a class="glossary-reference" href="chapter-26.xhtml#glossary-package">packages</a>) in which it is <a class="glossary-reference" href="chapter-26.xhtml#glossary-interned">interned</a>.
However, if a freshly allocated <a class="glossary-reference" href="chapter-26.xhtml#glossary-uninterned">uninterned</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> had
been used, it would have been an <a class="glossary-reference" href="chapter-26.xhtml#glossary-otherwise inaccessible part">otherwise inaccessible part</a> of
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> which contained it.<br/><pre><code><span class="syntax-root">;; In this example, the implementation is permitted to \term{stack allocate}
;; the list that is bound to X.
 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">3</span>)</span>)</span>)</span>
   <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="declaration-reference" href="#declaration-dynamic-extent">dynamic-extent</a> <span class="syntax-interned-symbol">x</span>)</span>)</span>
   <span class="syntax-cons">(<a class="function-reference" href="chapter-22.xhtml#function-print">print</a> <span class="syntax-interned-symbol">x</span>)</span>
   <span class="syntax-keyword-symbol">:done</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> (1 2 3)
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-keyword-symbol">:DONE</span>
 
;; In this example, the list to be bound to L can be \term{stack-allocated}.
 <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">zap</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span> <span class="syntax-interned-symbol">z</span>)</span>
   <span class="syntax-cons">(<a class="macro-reference" href="chapter-6.xhtml#macro-do">do</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">l</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span> <span class="syntax-interned-symbol">z</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-cdr">cdr</a> <span class="syntax-interned-symbol">l</span>)</span>)</span>)</span>
       <span class="syntax-cons">(<span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-null">null</a> <span class="syntax-interned-symbol">l</span>)</span>)</span>
     <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="declaration-reference" href="#declaration-dynamic-extent">dynamic-extent</a> <span class="syntax-interned-symbol">l</span>)</span>)</span>
     <span class="syntax-cons">(<a class="function-reference" href="chapter-22.xhtml#function-prin1">prin1</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-car">car</a> <span class="syntax-interned-symbol">l</span>)</span>)</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">ZAP</span>
 <span class="syntax-cons">(<span class="syntax-interned-symbol">zap</span> <span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">3</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 123
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>

;; Some implementations might open-code LIST-ALL-PACKAGES in a way
;; that permits using \term{stack allocation} of the list to be bound to L.
 <span class="syntax-cons">(<a class="macro-reference" href="chapter-6.xhtml#macro-do">do</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">l</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-11.xhtml#function-list-all-packages">list-all-packages</a>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-cdr">cdr</a> <span class="syntax-interned-symbol">l</span>)</span>)</span>)</span>
     <span class="syntax-cons">(<span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-null">null</a> <span class="syntax-interned-symbol">l</span>)</span>)</span>
   <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="declaration-reference" href="#declaration-dynamic-extent">dynamic-extent</a> <span class="syntax-interned-symbol">l</span>)</span>)</span>
   <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">name</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-11.xhtml#function-package-name">package-name</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-car">car</a> <span class="syntax-interned-symbol">l</span>)</span>)</span>)</span>)</span>
     <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-when">when</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">string-search</span> <span class="syntax-string">"COMMON-LISP"</span> <span class="syntax-interned-symbol">name</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-22.xhtml#function-print">print</a> <span class="syntax-interned-symbol">name</span>)</span>)</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> "COMMON-LISP"
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> "COMMON-LISP-USER"
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>

;; Some implementations might have the ability to \term{stack allocate} 
;; rest lists.  A declaration such as the following should be a cue
;; to such implementations that stack-allocation of the rest list
;; would be desirable.
 <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">add</span> <span class="syntax-cons">(<a class="lambda-list-keyword-reference" href="#lambda-list-keyword-rest">&amp;REST</a> <span class="syntax-interned-symbol">x</span>)</span>
   <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="declaration-reference" href="#declaration-dynamic-extent">dynamic-extent</a> <span class="syntax-interned-symbol">x</span>)</span>)</span>
   <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-apply">apply</a> <span class="syntax-function">#'<a class="function-reference" href="chapter-12.xhtml#function-+">+</a></span> <span class="syntax-interned-symbol">x</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">ADD</span>
 <span class="syntax-cons">(<span class="syntax-interned-symbol">add</span> <span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">3</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">6</span>

 <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">zap</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">n</span> <span class="syntax-interned-symbol">m</span>)</span>
   <span class="syntax-line-comment syntax-comment">;; Computes (RANDOM (+ M 1)) at relative speed of roughly O(N).
</span>   <span class="syntax-line-comment syntax-comment">;; It may be slow, but with a good compiler at least it
</span>   <span class="syntax-line-comment syntax-comment">;; doesn't waste much heap storage.  :-}
</span>   <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-15.xhtml#function-make-array">make-array</a> <span class="syntax-interned-symbol">n</span>)</span>)</span>)</span>
     <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="declaration-reference" href="#declaration-dynamic-extent">dynamic-extent</a> <span class="syntax-interned-symbol">a</span>)</span>)</span>
     <span class="syntax-cons">(<a class="macro-reference" href="chapter-6.xhtml#macro-dotimes">dotimes</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">n</span>)</span> 
       <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="declaration-reference" href="#declaration-dynamic-extent">dynamic-extent</a> <span class="syntax-interned-symbol">i</span>)</span>)</span>
       <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-15.xhtml#function-aref">aref</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">i</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-random">random</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">i</span> <span class="syntax-number">1</span>)</span>)</span>)</span>)</span>
     <span class="syntax-cons">(<a class="function-reference" href="chapter-15.xhtml#function-aref">aref</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">m</span>)</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">ZAP</span>
 <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-&lt;">&lt;</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">zap</span> <span class="syntax-number">5</span> <span class="syntax-number">3</span>)</span> <span class="syntax-number">3</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>
</span></code></pre><br/>The following are in error, since the value of <span class="explicit-mono">x</span> is used outside of its
<a class="glossary-reference" href="chapter-26.xhtml#glossary-extent">extent</a>:<br/><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="function-reference" href="chapter-17.xhtml#function-length">length</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">3</span>)</span>)</span>)</span>  <span class="syntax-line-comment syntax-comment">; Invalid
</span>                <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="declaration-reference" href="#declaration-dynamic-extent">dynamic-extent</a> <span class="syntax-interned-symbol">x</span>)</span>)</span>
                <span class="syntax-interned-symbol">x</span>)</span>)</span>)</span>

 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-progn">progn</a> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">3</span>)</span>)</span>)</span>  <span class="syntax-line-comment syntax-comment">; Invalid
</span>          <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="declaration-reference" href="#declaration-dynamic-extent">dynamic-extent</a> <span class="syntax-interned-symbol">x</span>)</span>)</span>
          <span class="syntax-interned-symbol">x</span>)</span>
        <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span>
</span></code></pre>
</dd></dl>
</dd></dl><dl><dt class="label">See Also</dt><dd><a class="symbol-reference" href="#symbol-declare">declare</a>

</dd></dl><dl><dt class="label">Notes</dt><dd>The most common optimization is to <a class="glossary-reference" href="chapter-26.xhtml#glossary-stack allocate">stack allocate</a> the 
initial value of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">objects</a> named by the <span class="parameter">vars</span>. <br/>It is permissible for an implementation to simply ignore this declaration.<br/></dd></dl></div><br/><br/>
<br/><div class="component" id="declaration-type"><div class="header"><span class="left"><span class="name" id="declaration-type">type</span></span><span class="right"><span class="ftype">Declaration</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="symbol-reference" href="chapter-25.xhtml#symbol-type">type</a> <span class="parameter">typespec</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">var</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span>)</span>
</span></code></pre><br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="parameter">typespec</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">var</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span>)</span>
</span></code></pre><br/></dd></dl><dl><dt class="label">Arguments</dt><dd><span class="parameter">typespec</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-type specifier">type specifier</a>.<br/><span class="parameter">var</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variable</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a>.<br/></dd></dl><dl><dt class="label">Valid Context</dt><dd><a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration">declaration</a> or <a class="glossary-reference" href="chapter-26.xhtml#glossary-proclamation">proclamation</a><br/></dd></dl><dl><dt class="label">Binding Types Affected</dt><dd><a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variable</a><br/></dd></dl><dl><dt class="label">Description</dt><dd>Affects
only variable <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a> and specifies that the
<span class="parameter">vars</span> take on 
values only of the specified <span class="parameter">typespec</span>.
In particular, values assigned to the variables by <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a>,
as well as the initial values of the <span class="parameter">vars</span> must be of
the specified <span class="parameter">typespec</span>.
<a class="declaration-reference" href="#declaration-type">type</a> declarations never apply to function <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a> (see <a class="declaration-reference" href="#declaration-ftype">ftype</a>).<br/>
A type declaration of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> 
defined by <a class="special-operator-reference" href="#special-operator-symbol-macrolet">symbol-macrolet</a> is equivalent
to wrapping a <a class="special-operator-reference" href="#special-operator-the">the</a> 
expression around the expansion of that <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>,
although the <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>'s <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro expansion">macro expansion</a> is not actually affected.


The meaning of a type declaration
  is equivalent to changing each reference to 
a variable (<span class="parameter">var</span>) within the scope of the
  declaration to <span class="explicit-mono">(the <span class="parameter">typespec</span> <span class="parameter">var</span>)</span>,
changing each expression assigned to the
  variable (<span class="parameter">new-value</span>) within the scope of the declaration to 
<span class="explicit-mono">(the <span class="parameter">typespec</span> <span class="parameter">new-value</span>)</span>,
  and executing 
<span class="explicit-mono">(the <span class="parameter">typespec</span> <span class="parameter">var</span>)</span> at the moment the scope of the declaration
  is entered.<br/>A <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> declaration is valid in all declarations. The interpretation
  of a type declaration is as follows:
<ol><li>During the execution of any reference to the
  declared variable within the scope of the declaration, the consequences
are 
undefined
if
  the value of the declared variable is not of the declared <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a>.<br/></li><li>During the execution of any 
<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> of the declared variable within the scope
  of the declaration, the consequences are 
undefined
if the newly assigned value of the
  declared variable is not of the declared <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a>. <br/></li><li>At the moment the
  scope of the declaration is entered, the consequences are 
undefined
if the value of the
  declared variable is not of the declared <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a>.
</li></ol><br/>A <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> declaration affects only variable references within
its scope.

If nested <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> declarations refer to the same variable,
  then the value of the variable must be a member of the intersection of
  the declared <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">types</a>.

  If there is a local <span class="explicit-mono">type</span> declaration for a dynamic
  variable, and there is also a global <span class="explicit-mono">type</span> proclamation for that same
  variable, then the value of the variable within the scope of the local
  declaration must be a member of the intersection of the two declared
  <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">types</a>.
 
<a class="declaration-reference" href="#declaration-type">type</a> declarations can  be <a class="glossary-reference" href="chapter-26.xhtml#glossary-free declaration">free declarations</a>
or <a class="glossary-reference" href="chapter-26.xhtml#glossary-bound declaration">bound declarations</a>.<br/>A <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> cannot be both the name of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> and the name of a
declaration.  Defining a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> as the <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-class">class</a>,
<a class="glossary-reference" href="chapter-26.xhtml#glossary-structure">structure</a>, <a class="glossary-reference" href="chapter-26.xhtml#glossary-condition">condition</a>, or <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a>, when the <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>
has been <a class="glossary-reference" href="chapter-26.xhtml#glossary-declare">declared</a> as a declaration name, or vice versa, signals an error.


 
Within the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical scope">lexical scope</a> of an <a class="type-reference" href="chapter-15.xhtml#type-array">array</a> type declaration, 
all references to <a class="glossary-reference" href="chapter-26.xhtml#glossary-array">array</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-element">elements</a> are assumed to satisfy the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-expressed array element type">expressed array element type</a> (as opposed to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-upgraded array element type">upgraded array element type</a>).
A compiler can treat
the code within the scope of the <a class="type-reference" href="chapter-15.xhtml#type-array">array</a> type declaration as if each
<a class="glossary-reference" href="chapter-26.xhtml#glossary-access">access</a> of an <a class="glossary-reference" href="chapter-26.xhtml#glossary-array">array</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-element">element</a> were surrounded by an appropriate 
<a class="special-operator-reference" href="#special-operator-the">the</a> form.
 <br/></dd></dl><dl><dt class="label">Examples</dt><dd><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">f</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span>
  <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="symbol-reference" href="chapter-25.xhtml#symbol-type">type</a> <a class="type-reference" href="chapter-12.xhtml#type-fixnum">fixnum</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span>)</span>
  <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">z</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span>)</span>)</span>
    <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="symbol-reference" href="chapter-25.xhtml#symbol-type">type</a> <a class="type-reference" href="chapter-12.xhtml#type-fixnum">fixnum</a> <span class="syntax-interned-symbol">z</span>)</span>)</span>
    <span class="syntax-interned-symbol">z</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">F</span>
<span class="syntax-cons">(<span class="syntax-interned-symbol">f</span> <span class="syntax-number">1</span> <span class="syntax-number">2</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">3</span>
;; The previous definition of F is equivalent to
<span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">f</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span>
  <span class="syntax-line-comment syntax-comment">;; This declaration is a shorthand form of the TYPE declaration
</span>  <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="type-reference" href="chapter-12.xhtml#type-fixnum">fixnum</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span>)</span>
  <span class="syntax-line-comment syntax-comment">;; To declare the type of a return value, it's not necessary to
</span>  <span class="syntax-line-comment syntax-comment">;; create a named variable.  A THE special form can be used instead.
</span>  <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-the">the</a> <a class="type-reference" href="chapter-12.xhtml#type-fixnum">fixnum</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">F</span>
<span class="syntax-cons">(<span class="syntax-interned-symbol">f</span> <span class="syntax-number">1</span> <span class="syntax-number">2</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">3</span>
</span></code></pre><br/> <br/>
<pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defvar">defvar</a> <span class="syntax-interned-symbol">*one-array*</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-15.xhtml#function-make-array">make-array</a> <span class="syntax-number">10</span> <span class="syntax-keyword-symbol">:element-type</span> <span class="syntax-quote">'<span class="syntax-cons">(<a class="type-reference" href="chapter-12.xhtml#type-signed-byte">signed-byte</a> <span class="syntax-number">5</span>)</span></span>)</span>)</span>
 <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defvar">defvar</a> <span class="syntax-interned-symbol">*another-array*</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-15.xhtml#function-make-array">make-array</a> <span class="syntax-number">10</span> <span class="syntax-keyword-symbol">:element-type</span> <span class="syntax-quote">'<span class="syntax-cons">(<a class="type-reference" href="chapter-12.xhtml#type-signed-byte">signed-byte</a> <span class="syntax-number">8</span>)</span></span>)</span>)</span>
  
 <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">frob</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">an-array</span>)</span>
   <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="symbol-reference" href="chapter-25.xhtml#symbol-type">type</a> <span class="syntax-cons">(<a class="symbol-reference" href="chapter-2.xhtml#symbol-array">array</a> <span class="syntax-cons">(<a class="type-reference" href="chapter-12.xhtml#type-signed-byte">signed-byte</a> <span class="syntax-number">5</span>)</span> <span class="syntax-number">1</span>)</span> <span class="syntax-interned-symbol">an-array</span>)</span>)</span>
   <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-15.xhtml#function-aref">aref</a> <span class="syntax-interned-symbol">an-array</span> <span class="syntax-number">1</span>)</span> <span class="syntax-number">31</span>)</span>
   <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-15.xhtml#function-aref">aref</a> <span class="syntax-interned-symbol">an-array</span> <span class="syntax-number">2</span>)</span> <span class="syntax-number">127</span>)</span>
   <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-15.xhtml#function-aref">aref</a> <span class="syntax-interned-symbol">an-array</span> <span class="syntax-number">3</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-*">*</a> <span class="syntax-number">2</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-15.xhtml#function-aref">aref</a> <span class="syntax-interned-symbol">an-array</span> <span class="syntax-number">3</span>)</span>)</span>)</span>
   <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">foo</span> <span class="syntax-number">0</span>)</span>)</span>
     <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="symbol-reference" href="chapter-25.xhtml#symbol-type">type</a> <span class="syntax-cons">(<a class="type-reference" href="chapter-12.xhtml#type-signed-byte">signed-byte</a> <span class="syntax-number">5</span>)</span> <span class="syntax-interned-symbol">foo</span>)</span>)</span>
     <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-interned-symbol">foo</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-15.xhtml#function-aref">aref</a> <span class="syntax-interned-symbol">an-array</span> <span class="syntax-number">0</span>)</span>)</span>)</span>)</span>
  
 <span class="syntax-cons">(<span class="syntax-interned-symbol">frob</span> <span class="syntax-interned-symbol">*one-array*</span>)</span>
 <span class="syntax-cons">(<span class="syntax-interned-symbol">frob</span> <span class="syntax-interned-symbol">*another-array*</span>)</span>
</span></code></pre><br/><br/>The above definition of <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">frob</span>
</span></code></pre> is equivalent to:<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">frob</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">an-array</span>)</span>
  <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-the">the</a> <span class="syntax-cons">(<a class="type-reference" href="chapter-12.xhtml#type-signed-byte">signed-byte</a> <span class="syntax-number">5</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-15.xhtml#function-aref">aref</a> <span class="syntax-interned-symbol">an-array</span> <span class="syntax-number">1</span>)</span>)</span> <span class="syntax-number">31</span>)</span>
  <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-the">the</a> <span class="syntax-cons">(<a class="type-reference" href="chapter-12.xhtml#type-signed-byte">signed-byte</a> <span class="syntax-number">5</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-15.xhtml#function-aref">aref</a> <span class="syntax-interned-symbol">an-array</span> <span class="syntax-number">2</span>)</span>)</span> <span class="syntax-number">127</span>)</span>
  <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-the">the</a> <span class="syntax-cons">(<a class="type-reference" href="chapter-12.xhtml#type-signed-byte">signed-byte</a> <span class="syntax-number">5</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-15.xhtml#function-aref">aref</a> <span class="syntax-interned-symbol">an-array</span> <span class="syntax-number">3</span>)</span>)</span>
        <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-*">*</a> <span class="syntax-number">2</span> <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-the">the</a> <span class="syntax-cons">(<a class="type-reference" href="chapter-12.xhtml#type-signed-byte">signed-byte</a> <span class="syntax-number">5</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-15.xhtml#function-aref">aref</a> <span class="syntax-interned-symbol">an-array</span> <span class="syntax-number">3</span>)</span>)</span>)</span>)</span>
  <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">foo</span> <span class="syntax-number">0</span>)</span>)</span>
    <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="symbol-reference" href="chapter-25.xhtml#symbol-type">type</a> <span class="syntax-cons">(<a class="type-reference" href="chapter-12.xhtml#type-signed-byte">signed-byte</a> <span class="syntax-number">5</span>)</span> <span class="syntax-interned-symbol">foo</span>)</span>)</span>
    <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-interned-symbol">foo</span> <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-the">the</a> <span class="syntax-cons">(<a class="type-reference" href="chapter-12.xhtml#type-signed-byte">signed-byte</a> <span class="syntax-number">5</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-15.xhtml#function-aref">aref</a> <span class="syntax-interned-symbol">an-array</span> <span class="syntax-number">0</span>)</span>)</span>)</span>)</span>)</span>
</span></code></pre><br/>Given an implementation in which 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-fixnum">fixnums</a> are 29 bits but <a class="type-reference" href="chapter-12.xhtml#type-fixnum">fixnum</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-array">arrays</a> 
are upgraded to signed 32-bit <a class="glossary-reference" href="chapter-26.xhtml#glossary-array">arrays</a>,
the following 
could be compiled with all <a class="glossary-reference" href="chapter-26.xhtml#glossary-fixnum">fixnum</a> arithmetic:<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">bump-counters</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">counters</span>)</span>
  <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="symbol-reference" href="chapter-25.xhtml#symbol-type">type</a> <span class="syntax-cons">(<a class="symbol-reference" href="chapter-2.xhtml#symbol-array">array</a> <a class="type-reference" href="chapter-12.xhtml#type-fixnum">fixnum</a> <a class="function-reference" href="chapter-12.xhtml#function-*">*</a>)</span> <span class="syntax-interned-symbol">bump-counters</span>)</span>)</span>
  <span class="syntax-cons">(<a class="macro-reference" href="chapter-6.xhtml#macro-dotimes">dotimes</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">i</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-17.xhtml#function-length">length</a> <span class="syntax-interned-symbol">counters</span>)</span>)</span>
    <span class="syntax-cons">(<a class="macro-reference" href="chapter-12.xhtml#macro-incf">incf</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-15.xhtml#function-aref">aref</a> <span class="syntax-interned-symbol">counters</span> <span class="syntax-interned-symbol">i</span>)</span>)</span>)</span>)</span>
</span></code></pre> <br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="symbol-reference" href="#symbol-declare">declare</a>,
<a class="macro-reference" href="#macro-declaim">declaim</a>,
<a class="function-reference" href="#function-proclaim">proclaim</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd><pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="parameter">typespec</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">var</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span>)</span>
</span></code></pre> 
is an abbreviation for <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="symbol-reference" href="chapter-25.xhtml#symbol-type">type</a> <span class="parameter">typespec</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">var</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span>)</span>
</span></code></pre>.

A <a class="declaration-reference" href="#declaration-type">type</a> declaration for the arguments to a function does not
necessarily imply anything about the type of the result.  The following
function is not permitted to be compiled using <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a>
<a class="glossary-reference" href="chapter-26.xhtml#glossary-fixnum">fixnum</a>-only arithmetic:<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">f</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span> <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="type-reference" href="chapter-12.xhtml#type-fixnum">fixnum</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span>)</span>
</span></code></pre><br/>To see why, consider <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">f</span> <a class="constant-reference" href="chapter-12.xhtml#constant-most-positive-fixnum">most-positive-fixnum</a> <span class="syntax-number">1</span>)</span>
</span></code></pre>.
Common Lisp defines that <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">F</span>
</span></code></pre> must return a <span class="glossary-reference error">glossary:bignum</span> here, rather
than signal an error or produce a mathematically incorrect result.
If you have special knowledge such ``<a class="glossary-reference" href="chapter-26.xhtml#glossary-fixnum">fixnum</a> overflow'' cases will
not come up, you can declare the result value to be in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-fixnum">fixnum</a>
range, enabling some compilers to use more efficient arithmetic:<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">f</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span>
  <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="type-reference" href="chapter-12.xhtml#type-fixnum">fixnum</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span>)</span>
  <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-the">the</a> <a class="type-reference" href="chapter-12.xhtml#type-fixnum">fixnum</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span>)</span>)</span>
</span></code></pre><br/>Note, however, that in the three-argument case, because of the possibility
of an implicit intermediate value growing too large, the following will not
cause <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-fixnum">fixnum</a>-only arithmetic to be used:<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">f</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span>
  <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="type-reference" href="chapter-12.xhtml#type-fixnum">fixnum</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span> <span class="syntax-interned-symbol">z</span>)</span>)</span>
  <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-the">the</a> <a class="type-reference" href="chapter-12.xhtml#type-fixnum">fixnum</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span> <span class="syntax-interned-symbol">z</span>)</span>)</span>)</span>
</span></code></pre><br/>To see why, consider <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">f</span> <a class="constant-reference" href="chapter-12.xhtml#constant-most-positive-fixnum">most-positive-fixnum</a> <span class="syntax-number">1</span> <span class="syntax-number">-1</span>)</span>.
</span></code></pre>
Although the arguments and the result are all <a class="glossary-reference" href="chapter-26.xhtml#glossary-fixnum">fixnums</a>, an intermediate
value is not a <a class="glossary-reference" href="chapter-26.xhtml#glossary-fixnum">fixnum</a>.  If it is important that 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-fixnum">fixnum</a>-only arithmetic be selected
in <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation">implementations</a> that provide it, 
consider writing something like this instead:<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">f</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span>
  <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="type-reference" href="chapter-12.xhtml#type-fixnum">fixnum</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span> <span class="syntax-interned-symbol">z</span>)</span>)</span>
  <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-the">the</a> <a class="type-reference" href="chapter-12.xhtml#type-fixnum">fixnum</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-the">the</a> <a class="type-reference" href="chapter-12.xhtml#type-fixnum">fixnum</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span>)</span> <span class="syntax-interned-symbol">z</span>)</span>)</span>)</span>
</span></code></pre><br/></dd></dl></div><br/><br/>
<br/><div class="component" id="declaration-inline"><div class="header"><span class="left"><span class="name" id="declaration-inline">inline</span>, <span class="name" id="declaration-notinline">notinline</span></span><span class="right"><span class="ftype">Declaration</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><span class="explicit-mono">(inline <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">function-name</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span>)</span><br/><span class="explicit-mono">(notinline <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">function-name</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span>)</span><br/></dd></dl><dl><dt class="label">Arguments</dt><dd><span class="parameter">function-name</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function name">function name</a>.<br/></dd></dl><dl><dt class="label">Valid Context</dt><dd><a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration">declaration</a> or <a class="glossary-reference" href="chapter-26.xhtml#glossary-proclamation">proclamation</a><br/></dd></dl><dl><dt class="label">Binding Types Affected</dt><dd><a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a><br/></dd></dl><dl><dt class="label">Description</dt><dd><a class="declaration-reference" href="#declaration-inline">inline</a> specifies that
it is desirable for the compiler to produce inline calls
to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">functions</a> named by <span class="parameter">function-names</span>; 
that is, the code for a specified <span class="parameter">function-name</span>should be integrated into the calling routine, appearing ``in line''
in place of a procedure call.  
A compiler is free to ignore this declaration.
<a class="declaration-reference" href="#declaration-inline">inline</a> declarations never apply to variable <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a>. <br/>If one of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">functions</a> mentioned has a lexically apparent local definition
(as made by <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-flet">flet</a> or <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-labels">labels</a>), then the declaration
applies to that local definition and not to the global function definition.<br/>While no <a class="glossary-reference" href="chapter-26.xhtml#glossary-conforming implementation">conforming implementation</a> is required to perform inline expansion
of user-defined functions, those <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation">implementations</a> that do attempt
to recognize the following paradigm:<br/>To define a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">f</span>
</span></code></pre> that is not <a class="declaration-reference" href="#declaration-inline">inline</a> by default
but for which <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="declaration-reference" href="#declaration-inline">inline</a> <span class="syntax-interned-symbol">f</span>)</span>)</span>
</span></code></pre> will make <span class="parameter">f</span> be locally inlined,
the proper definition sequence is:<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="#macro-declaim">declaim</a> <span class="syntax-cons">(<a class="declaration-reference" href="#declaration-inline">inline</a> <span class="syntax-interned-symbol">f</span>)</span>)</span>
<span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">f</span> <span class="syntax-interned-symbol">...</span>)</span>
<span class="syntax-cons">(<a class="macro-reference" href="#macro-declaim">declaim</a> <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-notinline">notinline</a> <span class="syntax-interned-symbol">f</span>)</span>)</span>
</span></code></pre><br/>The <a class="declaration-reference" href="#declaration-inline">inline</a> proclamation preceding the <a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>
ensures that the <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler">compiler</a> has the opportunity save the information
necessary for inline expansion, and the <a class="declaration-reference" href="#declaration-notinline">notinline</a> proclamation 
following the <a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> prevents <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">f</span>
</span></code></pre> from being expanded
inline everywhere.  

<a class="declaration-reference" href="#declaration-notinline">notinline</a> specifies that it is
undesirable to compile the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">functions</a>
named by <span class="parameter">function-names</span> in-line.
A compiler is not free to ignore this declaration;
calls to the specified functions must be implemented as out-of-line subroutine calls.<br/>If one of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">functions</a>
mentioned has a lexically apparent local definition
(as made by <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-flet">flet</a> or <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-labels">labels</a>), then the declaration
applies to that local definition and not to the global function definition.<br/>In the presence of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler macro">compiler macro</a> definition for 
<span class="parameter">function-name</span>, a <a class="declaration-reference" href="#declaration-notinline">notinline</a> declaration prevents that
<a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler macro">compiler macro</a> from being used.
An <a class="declaration-reference" href="#declaration-inline">inline</a> declaration may be used to encourage use of 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler macro">compiler macro</a> definitions.  <a class="declaration-reference" href="#declaration-inline">inline</a> and <a class="declaration-reference" href="#declaration-notinline">notinline</a>
declarations otherwise have no effect when the lexically visible definition
of <span class="parameter">function-name</span> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a> definition.
<br/><a class="declaration-reference" href="#declaration-inline">inline</a> and <a class="declaration-reference" href="#declaration-notinline">notinline</a> declarations can be <a class="glossary-reference" href="chapter-26.xhtml#glossary-free declaration">free declarations</a> or
<a class="glossary-reference" href="chapter-26.xhtml#glossary-bound declaration">bound declarations</a>.                  
<a class="declaration-reference" href="#declaration-inline">inline</a> and <a class="declaration-reference" href="#declaration-notinline">notinline</a> declarations of functions that
appear before the body of a 
      <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-flet">flet</a>
 or  <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-labels">labels</a>
<a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> that defines that function are <a class="glossary-reference" href="chapter-26.xhtml#glossary-bound declaration">bound declarations</a>.  
Such declarations in other contexts are <a class="glossary-reference" href="chapter-26.xhtml#glossary-free declaration">free declarations</a>.<br/></dd></dl><dl><dt class="label">Examples</dt><dd><pre><code><span class="syntax-root">;; The globally defined function DISPATCH should be open-coded,
;; if the implementation supports inlining, unless a NOTINLINE 
;; declaration overrides this effect.
<span class="syntax-cons">(<a class="macro-reference" href="#macro-declaim">declaim</a> <span class="syntax-cons">(<a class="declaration-reference" href="#declaration-inline">inline</a> <span class="syntax-interned-symbol">dispatch</span>)</span>)</span>
<span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">dispatch</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-funcall">funcall</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-10.xhtml#function-get">get</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-car">car</a> <span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">dispatch</span></span>)</span> <span class="syntax-interned-symbol">x</span>)</span>)</span>
;; Here is an example where inlining would be encouraged.
<span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">top-level-1</span> <span class="syntax-symbol">()</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">dispatch</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">read-command</span>)</span>)</span>)</span>
;; Here is an example where inlining would be prohibited.
<span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">top-level-2</span> <span class="syntax-symbol">()</span>
  <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-notinline">notinline</a> <span class="syntax-interned-symbol">dispatch</span>)</span>)</span>
  <span class="syntax-cons">(<span class="syntax-interned-symbol">dispatch</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">read-command</span>)</span>)</span>)</span>
;; Here is an example where inlining would be prohibited.
<span class="syntax-cons">(<a class="macro-reference" href="#macro-declaim">declaim</a> <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-notinline">notinline</a> <span class="syntax-interned-symbol">dispatch</span>)</span>)</span>
<span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">top-level-3</span> <span class="syntax-symbol">()</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">dispatch</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">read-command</span>)</span>)</span>)</span>
;; Here is an example where inlining would be encouraged.
<span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">top-level-4</span> <span class="syntax-symbol">()</span> 
  <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="declaration-reference" href="#declaration-inline">inline</a> <span class="syntax-interned-symbol">dispatch</span>)</span>)</span>
  <span class="syntax-cons">(<span class="syntax-interned-symbol">dispatch</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">read-command</span>)</span>)</span>)</span>
</span></code></pre><br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="symbol-reference" href="#symbol-declare">declare</a>,
<a class="macro-reference" href="#macro-declaim">declaim</a>,
<a class="function-reference" href="#function-proclaim">proclaim</a><br/></dd></dl></div><br/><br/>
<br/><div class="component" id="declaration-ftype"><div class="header"><span class="left"><span class="name" id="declaration-ftype">ftype</span></span><span class="right"><span class="ftype">Declaration</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="declaration-reference" href="#declaration-ftype">ftype</a> <span class="parameter">type</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">function-name</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span>)</span>
</span></code></pre>
</dd></dl><dl><dt class="label">Arguments</dt><dd><span class="parameter">function-name</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function name">function name</a>.<br/><span class="parameter">type</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-type specifier">type specifier</a>.<br/></dd></dl><dl><dt class="label">Valid Context</dt><dd><a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration">declaration</a> or <a class="glossary-reference" href="chapter-26.xhtml#glossary-proclamation">proclamation</a><br/></dd></dl><dl><dt class="label">Binding Types Affected</dt><dd><a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a><br/></dd></dl><dl><dt class="label">Description</dt><dd>Specifies that the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">functions</a> named by <span class="parameter">function-names</span> are of
the functional type <span class="parameter">type</span>.
For example:<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="declaration-reference" href="#declaration-ftype">ftype</a> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-function">function</a> <span class="syntax-cons">(<a class="type-reference" href="chapter-12.xhtml#type-integer">integer</a> <a class="function-reference" href="chapter-14.xhtml#function-list">list</a>)</span> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a>)</span> <span class="syntax-interned-symbol">ith</span>)</span>
         <span class="syntax-cons">(<a class="declaration-reference" href="#declaration-ftype">ftype</a> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-function">function</a> <span class="syntax-cons">(<a class="type-reference" href="chapter-12.xhtml#type-number">number</a>)</span> <a class="function-reference" href="chapter-12.xhtml#function-float">float</a>)</span> <span class="syntax-interned-symbol">sine</span> <span class="syntax-interned-symbol">cosine</span>)</span>)</span>
</span></code></pre>
If one of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">functions</a> mentioned has a lexically apparent local definition
(as made by <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-flet">flet</a> or <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-labels">labels</a>), then the declaration
applies to that local definition and not to the global function definition.
<a class="declaration-reference" href="#declaration-ftype">ftype</a> declarations never apply to variable <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a> (see <span class="explicit-mono">type</span>). <br/>The lexically apparent bindings of <span class="parameter">function-names</span> must not be
<a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a> definitions.  (This is because <a class="declaration-reference" href="#declaration-ftype">ftype</a> declares the
functional definition of each <a class="glossary-reference" href="chapter-26.xhtml#glossary-function name">function name</a> to be of a particular
subtype of <a class="type-reference" href="chapter-4.xhtml#type-function">function</a>, and <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macros</a> do not denote 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-function">functions</a>.)


<a class="declaration-reference" href="#declaration-ftype">ftype</a> 
declarations
can be <a class="glossary-reference" href="chapter-26.xhtml#glossary-free declaration">free declarations</a> or <a class="glossary-reference" href="chapter-26.xhtml#glossary-bound declaration">bound declarations</a>.
<a class="declaration-reference" href="#declaration-ftype">ftype</a> declarations of functions that appear before the body of a 
   <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-flet">flet</a>
or <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-labels">labels</a>
<a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> that defines that function are <a class="glossary-reference" href="chapter-26.xhtml#glossary-bound declaration">bound declarations</a>.  
Such declarations in other contexts are <a class="glossary-reference" href="chapter-26.xhtml#glossary-free declaration">free declarations</a>.<br/>
</dd></dl><dl><dt class="label">See Also</dt><dd><a class="symbol-reference" href="#symbol-declare">declare</a>,
<a class="macro-reference" href="#macro-declaim">declaim</a>,
<a class="function-reference" href="#function-proclaim">proclaim</a><br/></dd></dl></div><br/><br/><br/><div class="component" id="declaration-declaration"><div class="header"><span class="left"><span class="name" id="declaration-declaration">declaration</span></span><span class="right"><span class="ftype">Declaration</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declaration">declaration</a> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">name</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span>)</span>
</span></code></pre><br/></dd></dl><dl><dt class="label">Arguments</dt><dd><span class="parameter">name</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>.<br/></dd></dl><dl><dt class="label">Binding Types Affected</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Valid Context</dt><dd><a class="glossary-reference" href="chapter-26.xhtml#glossary-proclamation">proclamation</a> only<br/></dd></dl><dl><dt class="label">Description</dt><dd>Advises the compiler that each <span class="parameter">name</span> is a valid but potentially
non-standard declaration name.  The purpose of this is to tell one
compiler not to issue warnings for declarations meant for another 
compiler or other program processor.


</dd></dl><dl><dt class="label">Examples</dt><dd><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="#macro-declaim">declaim</a> <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declaration">declaration</a> <span class="syntax-interned-symbol">author</span> <span class="syntax-interned-symbol">target-language</span> <span class="syntax-interned-symbol">target-machine</span>)</span>)</span>
<span class="syntax-cons">(<a class="macro-reference" href="#macro-declaim">declaim</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">target-language</span> <span class="syntax-interned-symbol">ada</span>)</span>)</span>
<span class="syntax-cons">(<a class="macro-reference" href="#macro-declaim">declaim</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">target-machine</span> <span class="syntax-interned-symbol">IBM-650</span>)</span>)</span>
<span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">strangep</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span>)</span>
  <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">author</span> <span class="syntax-string">"Harry Tweeker"</span>)</span>)</span>
  <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-member">member</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">strange</span> <span class="syntax-interned-symbol">weird</span> <span class="syntax-interned-symbol">odd</span> <span class="syntax-interned-symbol">peculiar</span>)</span></span>)</span>)</span>
</span></code></pre><br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="macro-reference" href="#macro-declaim">declaim</a>,
<a class="function-reference" href="#function-proclaim">proclaim</a><br/></dd></dl></div><br/><br/>
<br/><div class="component" id="declaration-optimize"><div class="header"><span class="left"><span class="name" id="declaration-optimize">optimize</span></span><span class="right"><span class="ftype">Declaration</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="declaration-reference" href="#declaration-optimize">optimize</a> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">quality</span> | (<span class="parameter">quality</span> <span class="parameter">value</span>)<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span>)</span>
</span></code></pre>
<a id="symbol-compilation-speed"></a><a id="symbol-debug"></a><a id="symbol-safety"></a><a id="symbol-space"></a><a id="symbol-speed"></a><br/></dd></dl><dl><dt class="label">Arguments</dt><dd><span class="parameter">quality</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-optimize quality">optimize quality</a>.<br/><span class="parameter">value</span>&mdash;one of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-integer">integers</a> <pre><code><span class="syntax-root"><span class="syntax-number">0</span>
</span></code></pre>, <pre><code><span class="syntax-root"><span class="syntax-number">1</span>
</span></code></pre>, <pre><code><span class="syntax-root"><span class="syntax-number">2</span>
</span></code></pre>, or <pre><code><span class="syntax-root"><span class="syntax-number">3</span>
</span></code></pre>.<br/></dd></dl><dl><dt class="label">Valid Context</dt><dd><a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration">declaration</a> or <a class="glossary-reference" href="chapter-26.xhtml#glossary-proclamation">proclamation</a><br/></dd></dl><dl><dt class="label">Binding Types Affected</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>Advises the compiler that each <span class="parameter">quality</span> should be given attention
according to the specified corresponding <span class="parameter">value</span>.
Each <span class="parameter">quality</span> must be a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> naming an <a class="glossary-reference" href="chapter-26.xhtml#glossary-optimize quality">optimize quality</a>; 
the names and meanings of the standard <span class="parameter">optimize qualities</span> are shown in 
Figure <span class="explicit-mono">()</span>&ndash;.<br/><span class="float" id="figure-Optimize qualities"><table><thead><th>Name</th><th>Meaning</th></thead><tbody><tr><td><span class="declaration-reference error">declaration:compilation-speed</span> </td><td> speed of the compilation process  </td></tr><tr><td><span class="declaration-reference error">declaration:debug</span>             </td><td> ease of debugging                 </td></tr><tr><td><span class="declaration-reference error">declaration:safety</span>	    </td><td> run-time error checking           </td></tr><tr><td><span class="declaration-reference error">declaration:space</span>             </td><td> both code size and run-time space </td></tr><tr><td><span class="declaration-reference error">declaration:speed</span>             </td><td> speed of the object code		</td></tr></tbody></table><div class="caption">Optimize qualities</div></span>
There may be other, <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-defined">implementation-defined</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-optimize quality">optimize qualities</a>.<br/>A <span class="parameter">value</span> <pre><code><span class="syntax-root"><span class="syntax-number">0</span>
</span></code></pre> means that the corresponding <span class="parameter">quality</span> is totally
unimportant, and <pre><code><span class="syntax-root"><span class="syntax-number">3</span>
</span></code></pre> that the <span class="parameter">quality</span> is extremely important;
<pre><code><span class="syntax-root"><span class="syntax-number">1</span>
</span></code></pre> and <pre><code><span class="syntax-root"><span class="syntax-number">2</span>
</span></code></pre> are intermediate values, with <pre><code><span class="syntax-root"><span class="syntax-number">1</span>
</span></code></pre> the 
neutral value.
<pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="parameter">quality</span> <span class="syntax-number">3</span>)</span>
</span></code></pre> can be abbreviated to <span class="parameter">quality</span>.

Note that <a class="glossary-reference" href="chapter-26.xhtml#glossary-code">code</a> which has the optimization <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="symbol-reference" href="#symbol-safety">safety</a> <span class="syntax-number">3</span>)</span>
</span></code></pre>,
or just <a class="symbol-reference" href="#symbol-safety">safety</a>,
is called <a class="glossary-reference" href="chapter-26.xhtml#glossary-safe">safe</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-code">code</a>.<br/>The consequences are unspecified if a <span class="parameter">quality</span> appears more than once
with <a class="glossary-reference" href="chapter-26.xhtml#glossary-different">different</a> <span class="parameter">values</span>.<br/></dd></dl><dl><dt class="label">Examples</dt><dd><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">often-used-subroutine</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span>
  <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="declaration-reference" href="#declaration-optimize">optimize</a> <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-safety">safety</a> <span class="syntax-number">2</span>)</span>)</span>)</span>
  <span class="syntax-cons">(<span class="syntax-interned-symbol">error-check</span> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span>
  <span class="syntax-cons">(<span class="syntax-interned-symbol">hairy-setup</span> <span class="syntax-interned-symbol">x</span>)</span>
  <span class="syntax-cons">(<a class="macro-reference" href="chapter-6.xhtml#macro-do">do</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">i</span> <span class="syntax-number">0</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">i</span> <span class="syntax-number">1</span>)</span>)</span>
       <span class="syntax-cons">(<span class="syntax-interned-symbol">z</span> <span class="syntax-interned-symbol">x</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-cdr">cdr</a> <span class="syntax-interned-symbol">z</span>)</span>)</span>)</span>
      <span class="syntax-cons">(<span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-null">null</a> <span class="syntax-interned-symbol">z</span>)</span>)</span>
    <span class="syntax-line-comment syntax-comment">;; This inner loop really needs to burn.
</span>    <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="declaration-reference" href="#declaration-optimize">optimize</a> <a class="symbol-reference" href="#symbol-speed">speed</a>)</span>)</span>
    <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="type-reference" href="chapter-12.xhtml#type-fixnum">fixnum</a> <span class="syntax-interned-symbol">i</span>)</span>)</span>
    )</span>)</span>
</span></code></pre><br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="symbol-reference" href="#symbol-declare">declare</a>,
<a class="macro-reference" href="#macro-declaim">declaim</a>,
<a class="function-reference" href="#function-proclaim">proclaim</a>,
<a class="section-reference" href="#section-DeclScope">Declaration Scope</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd>An <a class="declaration-reference" href="#declaration-optimize">optimize</a> declaration never applies to either a <a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variable</a> or
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a>.  An <a class="declaration-reference" href="#declaration-optimize">optimize</a> declaration can only
be a <a class="glossary-reference" href="chapter-26.xhtml#glossary-free declaration">free declaration</a>.  For more information, see <span class="section-reference error">section:DeclScope.</span><br/></dd></dl></div><br/><br/>

<br/><div class="component" id="declaration-special"><div class="header"><span class="left"><span class="name" id="declaration-special">special</span></span><span class="right"><span class="ftype">Declaration</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="symbol-reference" href="#symbol-special">special</a> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">var</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span>)</span>
</span></code></pre><br/></dd></dl><dl><dt class="label">Arguments</dt><dd><span class="parameter">var</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>.<br/></dd></dl><dl><dt class="label">Valid Context</dt><dd><a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration">declaration</a> or <a class="glossary-reference" href="chapter-26.xhtml#glossary-proclamation">proclamation</a><br/></dd></dl><dl><dt class="label">Binding Types Affected</dt><dd><a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variable</a><br/></dd></dl><dl><dt class="label">Description</dt><dd>Specifies that all of
the <span class="parameter">vars</span> named are dynamic.
This specifier affects variable <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a> and 
affects references.
All variable <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a> affected are made to be dynamic <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a>,
and affected variable references refer to the current dynamic 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a>.
For example:<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">hack</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">thing</span> <span class="syntax-interned-symbol">*mod*</span>)</span>    <span class="syntax-line-comment syntax-comment">;The binding of the parameter
</span>  <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-special">special</a> <span class="syntax-interned-symbol">*mod*</span>)</span>)</span>  <span class="syntax-line-comment syntax-comment">; *mod* is visible to hack1,
</span>  <span class="syntax-cons">(<span class="syntax-interned-symbol">hack1</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-car">car</a> <span class="syntax-interned-symbol">thing</span>)</span>)</span>)</span>       ; but not that of thing.
<span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">hack1</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">arg</span>)</span>
  <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-special">special</a> <span class="syntax-interned-symbol">*mod*</span>)</span>)</span>  <span class="syntax-line-comment syntax-comment">;Declare references to *mod*
</span>                             <span class="syntax-line-comment syntax-comment">;within hack1 to be special.
</span>  <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-atom">atom</a> <span class="syntax-interned-symbol">arg</span>)</span> <span class="syntax-interned-symbol">*mod*</span>
      <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-cons">cons</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">hack1</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-car">car</a> <span class="syntax-interned-symbol">arg</span>)</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">hack1</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-cdr">cdr</a> <span class="syntax-interned-symbol">arg</span>)</span>)</span>)</span>)</span>)</span>
</span></code></pre><br/>A <a class="declaration-reference" href="#declaration-special">special</a> declaration does not affect inner <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a> 
of a <span class="parameter">var</span>; the inner <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a> implicitly shadow
a <a class="declaration-reference" href="#declaration-special">special</a> declaration and must be explicitly re-declared to
be <a class="declaration-reference" href="#declaration-special">special</a>.
<a class="declaration-reference" href="#declaration-special">special</a> declarations never apply to function <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a>.<br/>
<a class="declaration-reference" href="#declaration-special">special</a> declarations can be either <a class="glossary-reference" href="chapter-26.xhtml#glossary-bound declaration">bound declarations</a>,
affecting both a binding and references, or <a class="glossary-reference" href="chapter-26.xhtml#glossary-free declaration">free declarations</a>,
affecting only references, depending on whether the declaration is 
attached to a variable binding.<br/>When used in a <a class="glossary-reference" href="chapter-26.xhtml#glossary-proclamation">proclamation</a>, a <a class="declaration-reference" href="#declaration-special">special</a> 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-declaration specifier">declaration specifier</a>
applies to all <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a> as well as to all references of the
mentioned variables.  For example, after<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="#macro-declaim">declaim</a> <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-special">special</a> <span class="syntax-interned-symbol">x</span>)</span>)</span>
</span></code></pre><br/>then in a function definition such as<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">example</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-interned-symbol">...</span>)</span>
</span></code></pre><br/>the parameter <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">x</span>
</span></code></pre> is bound as a dynamic variable
rather than as a lexical variable.  <br/></dd></dl><dl><dt class="label">Examples</dt><dd><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">declare-eg</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">y</span>)</span>                 <span class="syntax-line-comment syntax-comment">;this y is special
</span> <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-special">special</a> <span class="syntax-interned-symbol">y</span>)</span>)</span>
 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">y</span> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a>)</span>)</span>                         <span class="syntax-line-comment syntax-comment">;this y is lexical
</span>      <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">y</span>
            <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-locally">locally</a> <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-special">special</a> <span class="syntax-interned-symbol">y</span>)</span>)</span> <span class="syntax-interned-symbol">y</span>)</span>)</span>)</span>)</span> ;this y refers to the
                                                 ;special binding of y
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">DECLARE-EG</span> 
 <span class="syntax-cons">(<span class="syntax-interned-symbol">declare-eg</span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<a class="section-reference" href="chapter-26.xhtml#section-T">T</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span> 
</span></code></pre><br/>
<pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-10.xhtml#function-symbol-value">symbol-value</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">x</span></span>)</span> <span class="syntax-number">6</span>)</span>
<span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">foo</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span>)</span>                         <span class="syntax-line-comment syntax-comment">;a lexical binding of x
</span>  <span class="syntax-cons">(<a class="function-reference" href="chapter-22.xhtml#function-print">print</a> <span class="syntax-interned-symbol">x</span>)</span>
  <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-1+">1+</a> <span class="syntax-interned-symbol">x</span>)</span>)</span>)</span>                    <span class="syntax-line-comment syntax-comment">;a special binding of x
</span>    <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-special">special</a> <span class="syntax-interned-symbol">x</span>)</span>)</span>              <span class="syntax-line-comment syntax-comment">;and a lexical reference
</span>    <span class="syntax-cons">(<span class="syntax-interned-symbol">bar</span>)</span>)</span>
  <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-1+">1+</a> <span class="syntax-interned-symbol">x</span>)</span>)</span>
<span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">bar</span> <span class="syntax-symbol">()</span> 
  <span class="syntax-cons">(<a class="function-reference" href="chapter-22.xhtml#function-print">print</a> <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-locally">locally</a> <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-special">special</a> <span class="syntax-interned-symbol">x</span>)</span>)</span>
           <span class="syntax-interned-symbol">x</span>)</span>)</span>)</span>
<span class="syntax-cons">(<span class="syntax-interned-symbol">foo</span> <span class="syntax-number">10</span>)</span> 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 10
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 11
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">11</span>
</span></code></pre><br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-10.xhtml#function-symbol-value">symbol-value</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">x</span></span>)</span> <span class="syntax-number">6</span>)</span>
<span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">bar</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span>            <span class="syntax-line-comment syntax-comment">;[1] 1st occurrence of x
</span>  <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">old-x</span> <span class="syntax-interned-symbol">x</span>)</span>           <span class="syntax-line-comment syntax-comment">;[2] 2nd occurrence of x &ndash; same as 1st occurrence
</span>        <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span>)</span>              <span class="syntax-line-comment syntax-comment">;[3] 3rd occurrence of x
</span>    <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-special">special</a> <span class="syntax-interned-symbol">x</span>)</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">old-x</span> <span class="syntax-interned-symbol">x</span>)</span>)</span>)</span>
<span class="syntax-cons">(<span class="syntax-interned-symbol">bar</span> <span class="syntax-quote">'<a class="function-reference" href="chapter-14.xhtml#function-first">first</a></span> <span class="syntax-quote">'<a class="function-reference" href="chapter-14.xhtml#function-second">second</a></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-first">first</a> <a class="function-reference" href="chapter-14.xhtml#function-second">second</a>)</span>
</span></code></pre><br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">few</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-optional">&amp;OPTIONAL</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">y</span> <span class="syntax-interned-symbol">*foo*</span>)</span>)</span>
  <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-special">special</a> <span class="syntax-interned-symbol">*foo*</span>)</span>)</span>
  <span class="syntax-interned-symbol">...</span>)</span>
</span></code></pre>
The reference to <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">*foo*</span>
</span></code></pre>
in the first line of this example is not <a class="declaration-reference" href="#declaration-special">special</a>
even though there is a <a class="declaration-reference" href="#declaration-special">special</a> declaration in the second line.<br/><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="macro-reference" href="#macro-declaim">declaim</a> <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-special">special</a> <span class="syntax-interned-symbol">prosp</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a>
 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">prosp</span> <span class="syntax-number">1</span> <span class="syntax-interned-symbol">reg</span> <span class="syntax-number">1</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">1</span>
 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">prosp</span> <span class="syntax-number">2</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">reg</span> <span class="syntax-number">2</span>)</span>)</span>         <span class="syntax-line-comment syntax-comment">;the binding of prosp is special
</span>    <span class="syntax-cons">(<a class="function-reference" href="chapter-10.xhtml#function-set">set</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">prosp</span></span> <span class="syntax-number">3</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-10.xhtml#function-set">set</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">reg</span></span> <span class="syntax-number">3</span>)</span>   <span class="syntax-line-comment syntax-comment">;due to the preceding proclamation,
</span>    <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">prosp</span> <span class="syntax-interned-symbol">reg</span>)</span>)</span>             ;whereas the variable reg is lexical
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-number">3</span> <span class="syntax-number">2</span>)</span>
 <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">prosp</span> <span class="syntax-interned-symbol">reg</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">3</span>)</span>

 <span class="syntax-cons">(<a class="macro-reference" href="#macro-declaim">declaim</a> <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-special">special</a> <span class="syntax-interned-symbol">x</span>)</span>)</span>          ;x is always special.
 <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">example</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span>                                 
   <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-special">special</a> <span class="syntax-interned-symbol">y</span>)</span>)</span>
   <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">y</span> <span class="syntax-number">3</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-*">*</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-number">2</span>)</span>)</span>)</span>
     <span class="syntax-cons">(<a class="function-reference" href="chapter-22.xhtml#function-print">print</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">y</span> <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-locally">locally</a> <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-special">special</a> <span class="syntax-interned-symbol">y</span>)</span>)</span> <span class="syntax-interned-symbol">y</span>)</span>)</span>)</span>
     <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">y</span> <span class="syntax-number">4</span>)</span>)</span> <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-special">special</a> <span class="syntax-interned-symbol">y</span>)</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">foo</span> <span class="syntax-interned-symbol">x</span>)</span>)</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">EXAMPLE</span>
</span></code></pre>
In the contorted code above, the outermost and innermost <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a> of
<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">y</span>
</span></code></pre> are dynamic,
but the middle
binding is lexical. The two arguments to <pre><code><span class="syntax-root"><a class="function-reference" href="chapter-12.xhtml#function-+">+</a>
</span></code></pre> are different,
one being the value, which is <pre><code><span class="syntax-root"><span class="syntax-number">3</span>
</span></code></pre>, of the lexical variable
<pre><code><span class="syntax-root"><span class="syntax-interned-symbol">y</span>
</span></code></pre>, and the other being the value of the dynamic variable named <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">y</span>
</span></code></pre>
(a <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> 
of which happens, coincidentally, to lexically surround it at
an outer level).  All the <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a> 
of <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">x</span>
</span></code></pre> and references to <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">x</span>
</span></code></pre>
are dynamic, however, because of the proclamation that <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">x</span>
</span></code></pre> is
always <a class="declaration-reference" href="#declaration-special">special</a>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="macro-reference" href="chapter-5.xhtml#macro-defparameter">defparameter</a>,
<a class="macro-reference" href="chapter-5.xhtml#macro-defvar">defvar</a><br/></dd></dl></div><br/><br/><br/><div class="component" id="special-operator-locally"><div class="header"><span class="left"><span class="name" id="special-operator-locally">locally</span></span><span class="right"><span class="ftype">Special Operator</span></span></div><br/>
<dl><dt class="label">Syntax</dt><dd><span class="special-operator-definition"><span class="name">locally</span>&nbsp;<span class="lambda-list"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">declaration</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">form</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span></span>&nbsp;â†’&nbsp;<span class="return-values"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">result</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span></span></span><br/>
</dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">declaration</span>&mdash;a <a class="symbol-reference" href="#symbol-declare">declare</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-expression">expression</a>; not evaluated.<br/><span class="parameter">forms</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-implicit progn">implicit progn</a>.<br/><span class="parameter">results</span>&mdash;the <span class="glossary-reference error">glossary:values</span> of the <span class="parameter">forms</span>.

</dd></dl><dl><dt class="label">Description</dt><dd>Sequentially evaluates a body of <span class="parameter">forms</span>
in a <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical environment">lexical environment</a> where the given <span class="parameter">declarations</span> have effect.<br/></dd></dl><dl><dt class="label">Examples</dt><dd><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">sample-function</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">y</span>)</span>  <span class="syntax-line-comment syntax-comment">;this y is regarded as special
</span>   <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-special">special</a> <span class="syntax-interned-symbol">y</span>)</span>)</span>                                
   <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">y</span> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a>)</span>)</span>              <span class="syntax-line-comment syntax-comment">;this y is regarded as lexical
</span>     <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">y</span>
           <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-locally">locally</a> <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-special">special</a> <span class="syntax-interned-symbol">y</span>)</span>)</span>
             <span class="syntax-line-comment syntax-comment">;; this next y is regarded as special
</span>             <span class="syntax-interned-symbol">y</span>)</span>)</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">SAMPLE-FUNCTION</span>
 <span class="syntax-cons">(<span class="syntax-interned-symbol">sample-function</span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<a class="section-reference" href="chapter-26.xhtml#section-T">T</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span> 
 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">3</span>)</span></span> <span class="syntax-interned-symbol">y</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-number">4</span> <span class="syntax-symbol">.</span> <span class="syntax-number">5</span>)</span></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-number">4</span> <span class="syntax-symbol">.</span> <span class="syntax-number">5</span>)</span>

;;; The following declarations are not notably useful in specific.
;;; They just offer a sample of valid declaration syntax using LOCALLY.
 <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-locally">locally</a> <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="declaration-reference" href="#declaration-inline">inline</a> <a class="function-reference" href="chapter-12.xhtml#function-floor">floor</a>)</span> <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-notinline">notinline</a> <a class="function-reference" href="chapter-14.xhtml#function-car">car</a> <a class="function-reference" href="chapter-14.xhtml#function-cdr">cdr</a>)</span>)</span>
          <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="declaration-reference" href="#declaration-optimize">optimize</a> <a class="symbol-reference" href="#symbol-space">space</a>)</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-floor">floor</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-car">car</a> <span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-cdr">cdr</a> <span class="syntax-interned-symbol">y</span>)</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">0</span><span class="syntax-verbatim">,</span> <span class="syntax-number">1</span>
</span></code></pre><br/><pre><code><span class="syntax-root">;;; This example shows a definition of a function that has a particular set
;;; of OPTIMIZE settings made locally to that definition.
 <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-locally">locally</a> <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="declaration-reference" href="#declaration-optimize">optimize</a> <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-safety">safety</a> <span class="syntax-number">3</span>)</span> <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-space">space</a> <span class="syntax-number">3</span>)</span> <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-speed">speed</a> <span class="syntax-number">0</span>)</span>)</span>)</span>
   <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">frob</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">w</span> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-optional">&amp;OPTIONAL</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">z</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">foo</span> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span>)</span>)</span>
     <span class="syntax-cons">(<span class="syntax-interned-symbol">mumble</span> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span> <span class="syntax-interned-symbol">z</span> <span class="syntax-interned-symbol">w</span>)</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">FROB</span>

;;; This is like the previous example, except that the optimize settings
;;; remain in effect for subsequent definitions in the same compilation unit.
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-declaim">declaim</a> <span class="syntax-cons">(<a class="declaration-reference" href="#declaration-optimize">optimize</a> <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-safety">safety</a> <span class="syntax-number">3</span>)</span> <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-space">space</a> <span class="syntax-number">3</span>)</span> <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-speed">speed</a> <span class="syntax-number">0</span>)</span>)</span>)</span>
 <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">frob</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">w</span> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span> <a class="lambda-list-keyword-reference" href="#lambda-list-keyword-optional">&amp;OPTIONAL</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">z</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">foo</span> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span>)</span>)</span>
   <span class="syntax-cons">(<span class="syntax-interned-symbol">mumble</span> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span> <span class="syntax-interned-symbol">z</span> <span class="syntax-interned-symbol">w</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">FROB</span>
</span></code></pre>
</dd></dl><dl><dt class="label">Side Effects</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="symbol-reference" href="#symbol-declare">declare</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd>The <a class="declaration-reference" href="#declaration-special">special</a> declaration may be used with <a class="special-operator-reference" href="#special-operator-locally">locally</a>
to affect references to, rather than <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a> of, <a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variables</a>.

If a <a class="special-operator-reference" href="#special-operator-locally">locally</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-top level form">top level form</a>, the body <span class="parameter">forms</span>
are also processed as <a class="glossary-reference" href="chapter-26.xhtml#glossary-top level form">top level forms</a>.  See <span class="section-reference error">section:FileCompilation.</span>
</dd></dl>
</div><br/><br/><br/><div class="component" id="special-operator-the"><div class="header"><span class="left"><span class="name" id="special-operator-the">the</span></span><span class="right"><span class="ftype">Special Operator</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><span class="special-operator-definition"><span class="name">the</span>&nbsp;<span class="lambda-list">value-type form</span>&nbsp;â†’&nbsp;<span class="return-values"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">result</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span></span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">value-type</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-type specifier">type specifier</a>; not evaluated.<br/><span class="parameter">form</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>; evaluated.<br/><span class="parameter">results</span>&mdash;the <span class="glossary-reference error">glossary:values</span> resulting from the <a class="glossary-reference" href="chapter-26.xhtml#glossary-evaluation">evaluation</a> of <span class="parameter">form</span>.
  These <span class="glossary-reference error">glossary:values</span> must conform to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> supplied by <span class="parameter">value-type</span>;
  see below.

</dd></dl><dl><dt class="label">Description</dt><dd><a class="special-operator-reference" href="#special-operator-the">the</a> specifies that the <span class="glossary-reference error">glossary:values</span><sub>1a</sub> returned by <span class="parameter">form</span>
are of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">types</a> specified by <span class="parameter">value-type</span>.
The consequences are undefined if any <span class="parameter">result</span>
is not of the declared type.<br/>
It is permissible for <span class="parameter">form</span> to <a class="glossary-reference" href="chapter-26.xhtml#glossary-yield">yield</a> a different number of <span class="glossary-reference error">glossary:values</span> 
than are specified by <span class="parameter">value-type</span>, provided that the values
for which <span class="parameter">types</span> are declared are indeed of those <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">types</a>.
Missing values are treated as <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a> for the purposes of checking their <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">types</a>.<br/>Regardless of number of <span class="glossary-reference error">glossary:values</span> declared by <span class="parameter">value-type</span>,
the number of <span class="glossary-reference error">glossary:values</span> returned by the <a class="special-operator-reference" href="#special-operator-the">the</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-special form">special form</a> is the same as
the number of <span class="glossary-reference error">glossary:values</span> returned by <span class="parameter">form</span>. 

</dd></dl><dl><dt class="label">Examples</dt><dd><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-the">the</a> <a class="symbol-reference" href="chapter-2.xhtml#symbol-symbol">symbol</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-car">car</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-10.xhtml#function-gensym">gensym</a>)</span>)</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-uninterned-symbol">#:G9876</span>
<span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-the">the</a> <a class="type-reference" href="chapter-12.xhtml#type-fixnum">fixnum</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-number">5</span> <span class="syntax-number">7</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">12</span>
<span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-the">the</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-values">values</a>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-truncate">truncate</a> <span class="syntax-number">3.2</span> <span class="syntax-number">2</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">1</span><span class="syntax-verbatim">,</span> <span class="syntax-number">1.2</span>
<span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-the">the</a> <a class="type-reference" href="chapter-12.xhtml#type-integer">integer</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-truncate">truncate</a> <span class="syntax-number">3.2</span> <span class="syntax-number">2</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">1</span><span class="syntax-verbatim">,</span> <span class="syntax-number">1.2</span>
<span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-the">the</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-values">values</a> <a class="type-reference" href="chapter-12.xhtml#type-integer">integer</a>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-truncate">truncate</a> <span class="syntax-number">3.2</span> <span class="syntax-number">2</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">1</span><span class="syntax-verbatim">,</span> <span class="syntax-number">1.2</span>
<span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-the">the</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-values">values</a> <a class="type-reference" href="chapter-12.xhtml#type-integer">integer</a> <a class="function-reference" href="chapter-12.xhtml#function-float">float</a>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-truncate">truncate</a> <span class="syntax-number">3.2</span> <span class="syntax-number">2</span>)</span>)</span>   <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">1</span><span class="syntax-verbatim">,</span> <span class="syntax-number">1.2</span>
<span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-the">the</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-values">values</a> <a class="type-reference" href="chapter-12.xhtml#type-integer">integer</a> <a class="function-reference" href="chapter-12.xhtml#function-float">float</a> <a class="symbol-reference" href="chapter-2.xhtml#symbol-symbol">symbol</a>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-truncate">truncate</a> <span class="syntax-number">3.2</span> <span class="syntax-number">2</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">1</span><span class="syntax-verbatim">,</span> <span class="syntax-number">1.2</span>
<span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-the">the</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-values">values</a> <a class="type-reference" href="chapter-12.xhtml#type-integer">integer</a> <a class="function-reference" href="chapter-12.xhtml#function-float">float</a> <a class="symbol-reference" href="chapter-2.xhtml#symbol-symbol">symbol</a> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a> <a class="function-reference" href="chapter-14.xhtml#function-null">null</a> <a class="function-reference" href="chapter-14.xhtml#function-list">list</a>)</span> 
     <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-truncate">truncate</a> <span class="syntax-number">3.2</span> <span class="syntax-number">2</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">1</span><span class="syntax-verbatim">,</span> <span class="syntax-number">1.2</span>
<span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">i</span> <span class="syntax-number">100</span>)</span>)</span>
   <span class="syntax-cons">(<a class="symbol-reference" href="#symbol-declare">declare</a> <span class="syntax-cons">(<a class="type-reference" href="chapter-12.xhtml#type-fixnum">fixnum</a> <span class="syntax-interned-symbol">i</span>)</span>)</span>
   <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-the">the</a> <a class="type-reference" href="chapter-12.xhtml#type-fixnum">fixnum</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-1+">1+</a> <span class="syntax-interned-symbol">i</span>)</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">101</span>
<span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let*">let*</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">a</span></span> <span class="syntax-quote">'<span class="syntax-interned-symbol">b</span></span> <span class="syntax-quote">'<span class="syntax-interned-symbol">c</span></span>)</span>)</span>
       <span class="syntax-cons">(<span class="syntax-interned-symbol">y</span> <span class="syntax-number">5</span>)</span>)</span>
   <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-the">the</a> <a class="type-reference" href="chapter-12.xhtml#type-fixnum">fixnum</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-car">car</a> <span class="syntax-interned-symbol">x</span>)</span>)</span> <span class="syntax-interned-symbol">y</span>)</span>
   <span class="syntax-interned-symbol">x</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-number">5</span> <span class="syntax-interned-symbol">B</span> <span class="syntax-interned-symbol">C</span>)</span>
</span></code></pre>
</dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd>The consequences are undefined if
the <span class="glossary-reference error">glossary:values</span> <span class="glossary-reference error">glossary:yielded</span> by the <span class="parameter">form</span> 
are not of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> specified by <span class="parameter">value-type</span>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="type-reference" href="chapter-4.xhtml#type-values">values</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd>The <a class="type-reference" href="chapter-4.xhtml#type-values">values</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-type specifier">type specifier</a> can be used to indicate the types
of <a class="glossary-reference" href="chapter-26.xhtml#glossary-multiple values">multiple values</a>:<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-the">the</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-values">values</a> <a class="type-reference" href="chapter-12.xhtml#type-integer">integer</a> <a class="type-reference" href="chapter-12.xhtml#type-integer">integer</a>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-floor">floor</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span>)</span>
<span class="syntax-cons">(<a class="special-operator-reference" href="#special-operator-the">the</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-values">values</a> <a class="function-reference" href="chapter-16.xhtml#function-string">string</a> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a>)</span>
     <span class="syntax-cons">(<a class="function-reference" href="chapter-18.xhtml#function-gethash">gethash</a> <span class="syntax-interned-symbol">the-key</span> <span class="syntax-interned-symbol">the-string-table</span>)</span>)</span>
</span></code></pre><br/><a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> can be used with <a class="special-operator-reference" href="#special-operator-the">the</a> type declarations.
In this case the declaration is transferred to the form that
specifies  the new value.  The resulting <a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>
is then analyzed.<br/></dd></dl></div><br/><br/>
<br/><div class="component" id="function-special-operator-p"><div class="header"><span class="left"><span class="name" id="function-special-operator-p">special-operator-p</span></span><span class="right"><span class="ftype">Function</span></span></div><br/>
<dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">special-operator-p</span>&nbsp;<span class="lambda-list">symbol</span>&nbsp;â†’&nbsp;<span class="return-values">generalized-boolean</span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">symbol</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>.<br/><span class="parameter">generalized-boolean</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generalized boolean">generalized boolean</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>Returns <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a> if <span class="parameter">symbol</span> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-special operator">special operator</a>;
otherwise, returns <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>.<br/></dd></dl><dl><dt class="label">Examples</dt><dd><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="#function-special-operator-p">special-operator-p</a> <span class="syntax-quote">'<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-if">if</a></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>
<span class="syntax-cons">(<a class="function-reference" href="#function-special-operator-p">special-operator-p</a> <span class="syntax-quote">'<a class="function-reference" href="chapter-14.xhtml#function-car">car</a></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>
<span class="syntax-cons">(<a class="function-reference" href="#function-special-operator-p">special-operator-p</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">one</span></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>
</span></code></pre><br/></dd></dl><dl><dt class="label">Side Effects</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd>Should signal <a class="type-reference" href="chapter-4.xhtml#type-type-error">type-error</a> if its argument is not a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>.<br/></dd></dl><dl><dt class="label">See Also</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Notes</dt><dd>Historically, this function was called <pre><code><span class="syntax-root"><span class="syntax-interned-symbol">special-form-p</span>
</span></code></pre>.  The name was
finally declared a misnomer and changed, since it returned true for
<a class="glossary-reference" href="chapter-26.xhtml#glossary-special operator">special operators</a>, not <a class="glossary-reference" href="chapter-26.xhtml#glossary-special form">special forms</a>.<br/>
</dd></dl>
</div><br/><br/><br/><div class="component" id="function-constantp"><div class="header"><span class="left"><span class="name" id="function-constantp">constantp</span></span><span class="right"><span class="ftype">Function</span></span></div><br/>
<dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">constantp</span>&nbsp;<span class="lambda-list">form <span class="lambda-list-keyword">&amp;optional</span> environment</span>&nbsp;â†’&nbsp;<span class="return-values">generalized-boolean</span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">form</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>.<br/><span class="parameter">environment</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-environment">environment</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.
 The default is <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.<br/><span class="parameter">generalized-boolean</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-generalized boolean">generalized boolean</a>.<br/></dd></dl><dl><dt class="label">Description</dt><dd>Returns <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a> if <span class="parameter">form</span> can be determined
by the <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation">implementation</a> to be a <a class="glossary-reference" href="chapter-26.xhtml#glossary-constant form">constant form</a> 
in the indicated <span class="parameter">environment</span>; 
otherwise, it returns <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a> indicating either 
    that the <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> is not a <a class="glossary-reference" href="chapter-26.xhtml#glossary-constant form">constant form</a>
 or that it cannot be determined whether or not <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-constant form">constant form</a>.<br/>The following kinds of <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a> are considered <a class="glossary-reference" href="chapter-26.xhtml#glossary-constant form">constant forms</a>:
<ul><li><a class="glossary-reference" href="chapter-26.xhtml#glossary-self-evaluating object">Self-evaluating objects</a> 
  (such as <a class="glossary-reference" href="chapter-26.xhtml#glossary-number">numbers</a>, 
           <a class="glossary-reference" href="chapter-26.xhtml#glossary-character">characters</a>,
       and the various kinds of <a class="glossary-reference" href="chapter-26.xhtml#glossary-array">arrays</a>)
  are always considered <a class="glossary-reference" href="chapter-26.xhtml#glossary-constant form">constant forms</a> 
  and must be recognized as such by <a class="function-reference" href="#function-constantp">constantp</a>.<br/></li><li><a class="glossary-reference" href="chapter-26.xhtml#glossary-constant variable">Constant variables</a>, such as <a class="glossary-reference" href="chapter-26.xhtml#glossary-keyword">keywords</a>,
  symbols defined by <span class="explicit-roman">Common Lisp</span> as constant (such as <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>, <a class="symbol-reference" href="chapter-5.xhtml#symbol-t">t</a>, and <a class="constant-reference" href="chapter-12.xhtml#constant-pi">pi</a>),
  and symbols declared as constant by the user in the indicated <span class="parameter">environment</span>
   using <a class="macro-reference" href="chapter-5.xhtml#macro-defconstant">defconstant</a>
  are always considered <a class="glossary-reference" href="chapter-26.xhtml#glossary-constant form">constant forms</a>
  and must be recognized as such by <a class="function-reference" href="#function-constantp">constantp</a>.<br/></li><li><a class="special-operator-reference" href="#special-operator-quote">quote</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a> are always considered <a class="glossary-reference" href="chapter-26.xhtml#glossary-constant form">constant forms</a>
  and must be recognized as such by <a class="function-reference" href="#function-constantp">constantp</a>.<br/></li><li>An <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation">implementation</a> is permitted, but not required, to detect
  additional <a class="glossary-reference" href="chapter-26.xhtml#glossary-constant form">constant forms</a>.  If it does, it is also permitted,
  but not required, to make use of information in the <span class="parameter">environment</span>.
  Examples of <a class="glossary-reference" href="chapter-26.xhtml#glossary-constant form">constant forms</a> for which <a class="function-reference" href="#function-constantp">constantp</a> might
  or might not return <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a> are:
    <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-sqrt">sqrt</a> <a class="constant-reference" href="chapter-12.xhtml#constant-pi">pi</a>)</span>
</span></code></pre>,
    <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-number">3</span> <span class="syntax-number">2</span>)</span>
</span></code></pre>,
    <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="chapter-17.xhtml#function-length">length</a> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span>)</span></span>)</span>
</span></code></pre>,
  and
    <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-number">7</span>)</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-zerop">zerop</a> <span class="syntax-interned-symbol">x</span>)</span>)</span>
</span></code></pre>.
</li></ul><br/>If an <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation">implementation</a> chooses to make use of the <span class="parameter">environment</span>
information, such actions as expanding <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macros</a> or performing function
inlining are permitted to be used, but not required; 
however, expanding <a class="glossary-reference" href="chapter-26.xhtml#glossary-compiler macro">compiler macros</a> is not permitted.<br/></dd></dl><dl><dt class="label">Examples</dt><dd><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="#function-constantp">constantp</a> <span class="syntax-number">1</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>
<span class="syntax-cons">(<a class="function-reference" href="#function-constantp">constantp</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">temp</span></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>
<span class="syntax-cons">(<a class="function-reference" href="#function-constantp">constantp</a> <span class="syntax-quote">'<span class="syntax-quote">'<span class="syntax-interned-symbol">temp</span></span></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>
<span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defconstant">defconstant</a> <span class="syntax-interned-symbol">this-is-a-constant</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">never-changing</span></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">THIS-IS-A-CONSTANT</span> 
<span class="syntax-cons">(<a class="function-reference" href="#function-constantp">constantp</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">this-is-a-constant</span></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>
<span class="syntax-cons">(<a class="function-reference" href="#function-constantp">constantp</a> <span class="syntax-string">"temp"</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>
<span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-number">6</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">6</span> 
<span class="syntax-cons">(<a class="function-reference" href="#function-constantp">constantp</a> <span class="syntax-interned-symbol">a</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>
<span class="syntax-cons">(<a class="function-reference" href="#function-constantp">constantp</a> <span class="syntax-quote">'<span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-sin">sin</a> <a class="constant-reference" href="chapter-12.xhtml#constant-pi">pi</a>)</span></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a>
<span class="syntax-cons">(<a class="function-reference" href="#function-constantp">constantp</a> <span class="syntax-quote">'<span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-car">car</a> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span>)</span></span>)</span></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a>
<span class="syntax-cons">(<a class="function-reference" href="#function-constantp">constantp</a> <span class="syntax-quote">'<span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-eql">eql</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">x</span>)</span></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a>
<span class="syntax-cons">(<a class="function-reference" href="#function-constantp">constantp</a> <span class="syntax-quote">'<span class="syntax-cons">(<a class="function-reference" href="chapter-4.xhtml#function-typep">typep</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-quote">'<a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a></span>)</span></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a>
<span class="syntax-cons">(<a class="function-reference" href="#function-constantp">constantp</a> <span class="syntax-quote">'<span class="syntax-cons">(<a class="function-reference" href="chapter-4.xhtml#function-typep">typep</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-quote">'<a class="section-reference" href="chapter-26.xhtml#section-T">T</a></span>)</span></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a>
<span class="syntax-cons">(<a class="function-reference" href="#function-constantp">constantp</a> <span class="syntax-quote">'<span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-values">values</a> <span class="syntax-interned-symbol">this-is-a-constant</span>)</span></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a>
<span class="syntax-cons">(<a class="function-reference" href="#function-constantp">constantp</a> <span class="syntax-quote">'<span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-values">values</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">x</span></span> <span class="syntax-quote">'<span class="syntax-interned-symbol">y</span></span>)</span></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a>
<span class="syntax-cons">(<a class="function-reference" href="#function-constantp">constantp</a> <span class="syntax-quote">'<span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span>)</span></span>)</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-17.xhtml#function-length">length</a> <span class="syntax-interned-symbol">a</span>)</span> <span class="syntax-number">6</span>)</span>)</span></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a>
</span></code></pre><br/></dd></dl><dl><dt class="label">Side Effects</dt><dd><span class="none">None</span>!<br/></dd></dl><dl><dt class="label">Affected By</dt><dd>The state of the global environment (<span class="explicit-italic"> e.g.</span>,  which <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbols</a> have been
declared to be the <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">names</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-constant variable">constant variables</a>).<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd><span class="none">None</span>!<br/></dd></dl><dl><dt class="label">See Also</dt><dd><a class="macro-reference" href="chapter-5.xhtml#macro-defconstant">defconstant</a><br/></dd></dl><dl><dt class="label">Notes</dt><dd><span class="none">None</span>.<br/></dd></dl>
</div><br/><br/></section></section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>