<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” TYPE-DECLARATION-ABBREVIATION</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">TYPE-DECLARATION-ABBREVIATION</span><br/><ol class="local-toc"><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit history">Edit history</a><ol> </ol></li><li><a href="#section-Problem description">Problem description</a><ol> </ol></li><li><a href="#issue-type-declaration-abbreviation:allow-all">Proposal ALLOW-ALL</a><ol> </ol></li><li><a href="#section-Examples">Examples</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#issue-type-declaration-abbreviation:forbid-all">Proposal FORBID-ALL</a><ol> </ol></li><li><a href="#section-Current practice">Current practice</a><ol> </ol></li><li><a href="#section-Cost to Implementors of ALLOW-ALL">Cost to Implementors of ALLOW-ALL</a><ol> </ol></li><li><a href="#section-Cost to Users of ALLOW-ALL">Cost to Users of ALLOW-ALL</a><ol> </ol></li><li><a href="#section-Cost of non-adoption">Cost of non-adoption</a><ol> </ol></li><li><a href="#section-Performance impact">Performance impact</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Esthetics">Esthetics</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue TYPE-DECLARATION-ABBREVIATION [NIL] [CHANGE]</h1><h2>Related issues</h2><ul><span class="issue-reference error">issue:COMPILE-ENVIRONMENT-CONSISTENCY</span><a class="issue-reference" href="../issues/lisp-symbol-redefinition.xhtml#issue-lisp-symbol-redefinition">LISP-SYMBOL-REDEFINITION</a><a class="issue-reference" href="../issues/package-clutter.xhtml#issue-package-clutter">PACKAGE-CLUTTER</a></ul><section id="section-References" class="section"><h2 class="section-title">References</h2>CLtL p.158, and CLtL Table 4-1 (p.43) ANSI <a class="package-reference" href="../chapter-11.xhtml#package-cl">cl</a> draft spec p.6-56 (rev 7.31 of 8/29/89) ANSI <a class="package-reference" href="../chapter-11.xhtml#package-cl">cl</a> draft spec Fig 2-10, 2-11 (p.2-28, 2-29) </section><section id="section-Edit history" class="section"><h2 class="section-title">Edit history</h2>1-May-90, Version 1 by Moon 4-May-90, Version 2 by Moon (update discussion) 6-Jun-90, Version 3 by Moon (update discussion) 8-Jun-90, Version 4 by Moon (reflect the X3J13 meeting) </section><section id="section-Problem description" class="section"><h2 class="section-title">Problem description</h2>  <a class="symbol-reference" href="../chapter-25.xhtml#symbol-type">type</a> declaration abbreviation, the ability to write     <code><span class="syntax-root"><span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-declare">declare</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">&lt;type-specifier&gt;</span> <span class="syntax-interned-symbol">&lt;var&gt;</span> <span class="syntax-interned-symbol">&lt;var&gt;...</span>)</span>)</span>
</span></code>   in place of     <code><span class="syntax-root"><span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-declare">declare</a> <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-25.xhtml#symbol-type">type</a> <span class="syntax-interned-symbol">&lt;type-specifier&gt;</span> <span class="syntax-interned-symbol">&lt;var&gt;</span> <span class="syntax-interned-symbol">&lt;var&gt;...</span>)</span>)</span>
</span></code>   is allowed only for some &lt;type-specifier&gt;s, not for all of them. <br/>  CLtL allows the abbreviation only when &lt;type-specifier&gt; is a symbol   and not a user-defined or <a class="glossary-reference" href="../chapter-26.xhtml#glossary-implementation-defined">implementation-defined</a> type. <br/>  The draft ANSI <a class="package-reference" href="../chapter-11.xhtml#package-cl">cl</a> specification is unclear since it refers to the wrong   table.  If it really meant to refer to Figure 2-11 rather than 2-10, then   it says the same thing as CLtL, assuming the mistakes in Figure 2-11 get   corrected <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">e.g.</span> <a class="type-reference" href="../chapter-4.xhtml#type-standard-generic-function">standard-generic-function</a> <span class="syntax-interned-symbol">is</span> <span class="syntax-interned-symbol">missing</span>)</span>
</span></code>. <br/>  This makes a distinction between type specifiers specified by the   language standard and type specifiers defined by the user or by the   implementation.  Do programmers have to know whether types they use come   from the kernel language or from a library in order to know whether they   are allowed to use abbreviated type declarations?  Do they have to refer   to this table that currently contains 91 entries and is still growing? <br/>  This also makes an unnecessary distinction between type specifiers that   are symbols and those that are lists or classes. <br/>  This issue contains two proposals. <br/>  This is Symbolics issue #31 and is related to Loosemore's issue #8   of 27 Feb 90. <br/></section><section class="status-unknown proposal" id="issue-type-declaration-abbreviation:allow-all"><h2 class="section-title">Proposal ALLOW-ALL</h2>  Allow the word <a class="symbol-reference" href="../chapter-25.xhtml#symbol-type">type</a> to be omitted from all <a class="symbol-reference" href="../chapter-25.xhtml#symbol-type">type</a> declarations. <br/>  A symbol cannot be both the name of a type and the name of a   declaration.  Defining a symbol as a class, structure, condition,   or type name, when the symbol has been defined or proclaimed   as a declaration name, or vice versa, signals an error. <br/></section><section id="section-Examples" class="section"><h2 class="section-title">Examples</h2><pre>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">SUBSTRING</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-16.xhtml#function-string">string</a> <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-optional">&amp;OPTIONAL</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">START</span> <span class="syntax-number">0</span>)</span> <span class="syntax-interned-symbol">END</span>)</span>
    <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-declare">declare</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-16.xhtml#function-string">string</a> <a class="function-reference" href="../chapter-16.xhtml#function-string">string</a>)</span>
             <span class="syntax-cons">(<span class="syntax-cons">(<a class="type-reference" href="../chapter-12.xhtml#type-integer">integer</a> <span class="syntax-number">0</span> <a class="function-reference" href="../chapter-12.xhtml#function-*">*</a>)</span> <span class="syntax-interned-symbol">START</span>)</span>
             <span class="syntax-cons">(<span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-or">or</a> <a class="function-reference" href="../chapter-14.xhtml#function-null">null</a> <span class="syntax-cons">(<a class="type-reference" href="../chapter-12.xhtml#type-integer">integer</a> <span class="syntax-number">0</span> <a class="function-reference" href="../chapter-12.xhtml#function-*">*</a>)</span>)</span> <span class="syntax-interned-symbol">END</span>)</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="../chapter-17.xhtml#function-subseq">subseq</a> <a class="function-reference" href="../chapter-16.xhtml#function-string">string</a> <span class="syntax-interned-symbol">START</span> <span class="syntax-interned-symbol">END</span>)</span>)</span>
</span></code></pre><br/><br/>  <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">defstruct</a> <span class="syntax-interned-symbol">SHIP</span> <span class="syntax-interned-symbol">HEADING</span> <span class="syntax-interned-symbol">TONNAGE</span> <span class="syntax-interned-symbol">PASSENGER-LIST</span>)</span>
</span></code><br/><br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">EMBARK</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">P</span> <span class="syntax-interned-symbol">S</span>)</span>
    <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-declare">declare</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">SHIP</span> <span class="syntax-interned-symbol">S</span>)</span>)</span>
    <span class="syntax-cons">(<a class="macro-reference" href="../chapter-14.xhtml#macro-pushnew">pushnew</a> <span class="syntax-interned-symbol">P</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">SHIP-PASSENGER-LIST</span> <span class="syntax-interned-symbol">S</span>)</span>)</span>)</span>
</span></code></pre><br/><br/>  <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-7.xhtml#macro-defclass">defclass</a> <span class="syntax-interned-symbol">ASTRONAUT</span> <span class="syntax-symbol">()</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">HELMET-SIZE</span> <span class="syntax-interned-symbol">FAVORITE-BEVERAGE</span>)</span>)</span>
</span></code><br/><br/>  (<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a> CHECKOUT <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">A</span>)</span>
</span></code><br/>    (<a class="symbol-reference" href="../chapter-3.xhtml#symbol-declare">declare</a> (#.<code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-7.xhtml#function-find-class">find-class</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">ASTRONAUT</span></span>)</span>
</span></code> A))<br/>    <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-unless">unless</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-eq">eq</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-7.xhtml#function-slot-value">slot-value</a> <span class="syntax-interned-symbol">A</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">FAVORITE-BEVERAGE</span></span>)</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">TANG</span></span>)</span>
      <span class="syntax-cons">(<a class="function-reference" href="../chapter-9.xhtml#function-error">error</a> <span class="syntax-string">"~A is not a proper astronaut"</span> <span class="syntax-interned-symbol">A</span>)</span>)</span>
</span></code></pre>)<br/><br/></pre></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>  Arbitrary syntactic differences between built-in facilities and   user-defined extensions are not in the spirit of Lisp. <br/>  Making type names and declaration names be a single namespace   eliminates any issue of ambiguity in interpreting a decl-spec. <br/></section><section class="status-unknown proposal" id="issue-type-declaration-abbreviation:forbid-all"><h2 class="section-title">Proposal FORBID-ALL</h2>  Do not allow the word <a class="symbol-reference" href="../chapter-25.xhtml#symbol-type">type</a> to be omitted from any <a class="symbol-reference" href="../chapter-25.xhtml#symbol-type">type</a> declarations.   This would be an incompatible change. <br/></section><section id="section-Current practice" class="section"><h2 class="section-title">Current practice</h2>  I don't know of any implementation that implements either proposal. <br/></section><section id="section-Cost to Implementors of ALLOW-ALL" class="section"><h2 class="section-title">Cost to Implementors of ALLOW-ALL</h2>  Small.  It should be easy to change the declaration parser to check   whether the car of a decl-spec is a valid type-specifier, and if so   either insert the word <a class="symbol-reference" href="../chapter-25.xhtml#symbol-type">type</a> or signal an error, depending on whether it's   also a proclaimed declaration. <br/></section><section id="section-Cost to Users of ALLOW-ALL" class="section"><h2 class="section-title">Cost to Users of ALLOW-ALL</h2>  None to most users.  Some users might have programs that use the same   symbol as both a declaration name and a type name, and they would have   to rename either the declaration or the type. <br/></section><section id="section-Cost of non-adoption" class="section"><h2 class="section-title">Cost of non-adoption</h2>  An aesthetic wart on the language will remain. <br/>  Implementors will continue to have to maintain a large and seemingly   ever-changing table of type names that are acceptable as declarations. <br/></section><section id="section-Performance impact" class="section"><h2 class="section-title">Performance impact</h2>  There might be a trivial increase in compilation speed as a result of   adopting either proposal.  There should be no run-time performance impact. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>  Improved language consistency and aesthetics. <br/></section><section id="section-Esthetics" class="section"><h2 class="section-title">Esthetics</h2>  Arbitrary syntactic differences between built-in facilities and   user-defined extensions are not in the spirit of Lisp. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>  Rob MacLachlan was concerned in February about non-obvious side-effects   of allowing user types here, but never mentioned a specific problem.   From re-reading his mail, he was most likely concerned only about things   that are not in this proposal. <br/>  Another possible approach would be to eliminate type declaration   abbreviation, however no one liked that idea when it was mentioned a few   months ago. <br/>  David Gray is opposed to allowing abbreviation for all types on the   grounds that infrequently-used types might not be recognized as types by   someone reading a program.  Asked for suggestions, he said: <br/>    Well, if I had to be limited to twelve, I would choose: <br/>            <a class="symbol-reference" href="../chapter-2.xhtml#symbol-array">array</a> <a class="function-reference" href="../chapter-13.xhtml#function-character">character</a> <a class="function-reference" href="../chapter-14.xhtml#function-cons">cons</a> <a class="type-reference" href="../chapter-12.xhtml#type-fixnum">fixnum</a> <a class="function-reference" href="../chapter-12.xhtml#function-float">float</a> <a class="type-reference" href="../chapter-12.xhtml#type-integer">integer</a> <a class="function-reference" href="../chapter-14.xhtml#function-list">list</a> <a class="type-reference" href="../chapter-12.xhtml#type-number">number</a>             <a class="type-reference" href="../chapter-21.xhtml#type-stream">stream</a> <a class="function-reference" href="../chapter-16.xhtml#function-string">string</a> <a class="symbol-reference" href="../chapter-2.xhtml#symbol-symbol">symbol</a> <a class="function-reference" href="../chapter-15.xhtml#function-vector">vector</a> <br/>    but I suspect that this small a list would be too much of an incompatibility     to be acceptable since other people are sure to have a different favorite     twelve.  It might be possible to agree on a list of around twenty, such as: <br/>            <a class="symbol-reference" href="../chapter-2.xhtml#symbol-array">array</a> <a class="function-reference" href="../chapter-15.xhtml#function-bit">bit</a> <a class="symbol-reference" href="../chapter-2.xhtml#symbol-bit-vector">bit-vector</a> <a class="function-reference" href="../chapter-13.xhtml#function-character">character</a> <a class="function-reference" href="../chapter-12.xhtml#function-complex">complex</a> <a class="function-reference" href="../chapter-14.xhtml#function-cons">cons</a> <a class="type-reference" href="../chapter-12.xhtml#type-fixnum">fixnum</a> <a class="function-reference" href="../chapter-12.xhtml#function-float">float</a>              <a class="type-reference" href="../chapter-12.xhtml#type-integer">integer</a> <a class="type-reference" href="../chapter-10.xhtml#type-keyword">keyword</a> <a class="function-reference" href="../chapter-14.xhtml#function-list">list</a> <a class="type-reference" href="../chapter-12.xhtml#type-number">number</a> <a class="type-reference" href="../chapter-11.xhtml#type-package">package</a> <a class="function-reference" href="../chapter-19.xhtml#function-pathname">pathname</a> <a class="type-reference" href="../chapter-12.xhtml#type-real">real</a> <a class="type-reference" href="../chapter-17.xhtml#type-sequence">sequence</a>             <a class="type-reference" href="../chapter-21.xhtml#type-stream">stream</a> <a class="function-reference" href="../chapter-16.xhtml#function-string">string</a> <a class="symbol-reference" href="../chapter-2.xhtml#symbol-symbol">symbol</a> <a class="function-reference" href="../chapter-15.xhtml#function-vector">vector</a> <br/>  David Moon prefers not to single out some types as special cases. <br/>  Glenn Burke is not entirely comfortable with the proposal, but doesn't like   restricting programmers' use of data-abstraction by singling out some types   as special cases. <br/>  Kim Barrett is concerned that signalling an error when there is a collision   between a type name and a declaration name doesn't really solve the problem. </section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>