<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” DEFCLASS-COMPILE-FILE-HANDLING</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">DEFCLASS-COMPILE-FILE-HANDLING</span><br/><ol class="local-toc"><li><a href="#section-Status">Status</a><ol> </ol></li><li><a href="#section-Edit History">Edit History</a><ol> </ol></li><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Problem Description">Problem Description</a><ol> </ol></li><li><a href="#issue-compile-file-handling-of-defclass:none">Proposal NONE</a><ol> </ol></li><li><a href="#issue-compile-file-handling-of-defclass:none-with-subtypep">Proposal NONE-WITH-SUBTYPEP</a><ol> </ol></li><li><a href="#issue-compile-file-handling-of-defclass:compile-meta">Proposal COMPILE-META</a><ol> </ol></li><li><a href="#issue-compile-file-handling-of-defclass:alternate">Proposal ALTERNATE</a><ol> </ol></li><li><a href="#issue-compile-file-handling-of-defclass:all">Proposal ALL</a><ol> </ol></li><li><a href="#section-Examples">Examples</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Cost to Implementors">Cost to Implementors</a><ol> </ol></li><li><a href="#section-Cost to Users">Cost to Users</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Cost of non-adoption">Cost of non-adoption</a><ol> </ol></li><li><a href="#section-Aesthetics">Aesthetics</a><ol> </ol></li></ol></nav><div class="content"><h1>EXTENSION Issue DEFCLASS-COMPILE-FILE-HANDLING [Cleanup] [CLARIFICATION]</h1><section id="section-Status" class="status-unknown section"><h2 class="section-title">Status</h2>proposed </section><section id="section-Edit History" class="section"><h2 class="section-title">Edit History</h2>13-Jul-21, Version 1 by Bike. </section><section id="section-References" class="section"><h2 class="section-title">References</h2><a class="macro-reference" href="../chapter-7.xhtml#macro-defclass">defclass</a>, <a class="function-reference" href="../chapter-7.xhtml#function-find-class">find-class</a>, <a class="function-reference" href="../chapter-4.xhtml#function-subtypep">subtypep</a> </section><section id="section-Problem Description" class="section"><h2 class="section-title">Problem Description</h2>  The draft ANSI Common Lisp specification includes the following paragraph in   its description of <a class="macro-reference" href="../chapter-7.xhtml#macro-defclass">defclass</a>: <br/>    "If a defclass form appears as a top level form, the compiler must make the     class name be recognized as a valid type name in subsequent declarations     <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">as</span> <span class="syntax-interned-symbol">for</span> <a class="macro-reference" href="../chapter-4.xhtml#macro-deftype">deftype</a>)</span>
</span></code> and be recognized as a valid class name for defmethod     parameter specializers and for use as the :metaclass option of a subsequent     defclass. The compiler must make the class definition available to be     returned by <a class="function-reference" href="../chapter-7.xhtml#function-find-class">find-class</a> when its environment argument is a value received as     the environment parameter of a macro." <br/>  The behavior with respect to <a class="macro-reference" href="../chapter-4.xhtml#macro-deftype">deftype</a> and parameter specializers is reasonably   clear. However, the behavior with respect to metaclasses and <a class="function-reference" href="../chapter-7.xhtml#function-find-class">find-class</a> is   not, given the complexities of the meta-object protocol. Fully defining a   class may involve calls to MOP generic functions with methods defined in the   same file, and implementations aren't required to execute defmethod forms at   compile time <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-and">and</a> <span class="syntax-interned-symbol">generally</span> <a class="macro-reference" href="../chapter-6.xhtml#macro-do">do</a> <a class="function-reference" href="../chapter-5.xhtml#function-not">not</a>)</span>
</span></code>. If MOP generic functions were to be   called, they may have unexpected side effects; for example defining accessor   functions at compile time, or whatever other behavior is included in methods.   To support these side effects much more code might need to be evaluated by the   compiler. <br/>  It is uncommon to actually need to know during compilation that a name refers   to a class <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">whereas</span> <span class="syntax-interned-symbol">knowing</span> <span class="syntax-interned-symbol">that</span> <span class="syntax-interned-symbol">it</span> <span class="syntax-interned-symbol">refers</span> <span class="syntax-interned-symbol">to</span> <span class="syntax-interned-symbol">a</span> <a class="symbol-reference" href="../chapter-25.xhtml#symbol-type">type</a> <span class="syntax-interned-symbol">generally</span> <span class="syntax-interned-symbol">has</span> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">few</span>
  <span class="syntax-interned-symbol">more</span> <span class="syntax-interned-symbol">common</span> <span class="syntax-interned-symbol">uses</span>)</span>
</span></code></pre>. Requiring extra evaluations for functionality that is   rarely if ever used could surprise programmers. <br/>  Another thing worth noting is that in 3.2.2.3 Semantic Constraints, the draft   specification states that subclass, superclass, and metaclass relations among   classes must be the same at compile and run time. While this is a constraint   on programs rather than implementations, it may be worth keeping this in mind   as a principle of regularity. <br/>  Another relevant bit of the standard is that there does not seem to be a   requirement that <a class="function-reference" href="../chapter-4.xhtml#function-subtypep">subtypep</a> return exact or correct results if given a   compilation environment and type specifiers defined by top-level <a class="macro-reference" href="../chapter-7.xhtml#macro-defclass">defclass</a> (or   <a class="macro-reference" href="../chapter-4.xhtml#macro-deftype">deftype</a>, etc.) forms, and indeed contemplates the possibility of types that   aren't "defined fully at compile time" in the page on <a class="macro-reference" href="../chapter-7.xhtml#macro-defclass">defclass</a>. <br/>  It additionally seems to be unspecified what <a class="function-reference" href="../chapter-7.xhtml#function-find-class">find-class</a> returns if called with   a name that has been forward-referenced as a class in a compilation   environment. <br/></section><section class="status-unknown proposal" id="issue-compile-file-handling-of-defclass:none"><h2 class="section-title">Proposal NONE</h2>  Strike the requirement that <a class="function-reference" href="../chapter-7.xhtml#function-find-class">find-class</a> must return a class at compile time   after a relevant top-level <a class="macro-reference" href="../chapter-7.xhtml#macro-defclass">defclass</a> form is processed, i.e. the last sentence   of the quoted paragraph. Add a requirement that the compiler processing   top-level <a class="macro-reference" href="../chapter-7.xhtml#macro-defclass">defclass</a> forms does not affect <a class="function-reference" href="../chapter-7.xhtml#function-find-class">find-class</a> with respect to the   compilation environment. <br/></section><section class="status-unknown proposal" id="issue-compile-file-handling-of-defclass:none-with-subtypep"><h2 class="section-title">Proposal NONE-WITH-SUBTYPEP</h2>  As <a class="proposal-reference" href="#issue-compile-file-handling-of-defclass:none">NONE</a>, but additionally require that <a class="function-reference" href="../chapter-4.xhtml#function-subtypep">subtypep</a> return correct and exact   results if given the names of a class and its direct superclass, even if one   or both classes has only been in a top-level <a class="macro-reference" href="../chapter-7.xhtml#macro-defclass">defclass</a> form processed by the   compiler. (See analogous provision below in <a class="proposal-reference" href="#issue-compile-file-handling-of-defclass:compile-meta">COMPILE-META</a>.) <br/></section><section class="status-unknown proposal" id="issue-compile-file-handling-of-defclass:compile-meta"><h2 class="section-title">Proposal COMPILE-META</h2>  Clarify that the class <a class="function-reference" href="../chapter-7.xhtml#function-find-class">find-class</a> must return at compile time after a relevant   top-level <a class="macro-reference" href="../chapter-7.xhtml#macro-defclass">defclass</a> form is processed must be an instance of a new metaclass,   COMPILE-TIME-CLASS <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-or">or</a> <span class="syntax-interned-symbol">something</span>)</span>
</span></code>. CLOS/MOP generic functions with methods   for FORWARD-REFERENCED-CLASS have methods with the same behavior specialized   to COMPILE-TIME-CLASS, except that the method on CLASS-DIRECT-SUPERCLASSES   returns a list of classes (either fully defined classes, or instances of   COMPILE-TIME-CLASS or FORWARD-REFERENCED-CLASS). <br/>  Require that any class forward-referenced by a top-level <a class="macro-reference" href="../chapter-7.xhtml#macro-defclass">defclass</a> form that   has been processed be available via <a class="function-reference" href="../chapter-7.xhtml#function-find-class">find-class</a> as a FORWARD-REFERENCED-CLASS. <br/>  Require that <a class="function-reference" href="../chapter-4.xhtml#function-subtypep">subtypep</a> return correct and exact results if given a class and   its direct superclass, or their names, even if one or both classes is a   FORWARD-REFERENCED-CLASS or COMPILE-TIME-CLASS. This does not seem to be   specifically required otherwise <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-and">and</a> <span class="syntax-interned-symbol">doing</span> <span class="syntax-interned-symbol">so</span> <span class="syntax-interned-symbol">in</span> <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <span class="syntax-interned-symbol">non-compilation-related</span>
  <a class="macro-reference" href="../chapter-5.xhtml#macro-case">case</a> <span class="syntax-interned-symbol">should</span> <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-go">go</a> <span class="syntax-interned-symbol">into</span> <span class="syntax-interned-symbol">another</span> <span class="syntax-interned-symbol">proposal</span>)</span>
</span></code></pre>. <br/>  Define a new generic function called e.g. COMPILE-TIME-CLASS-FUTURE-METACLASS   of one argument; if called on a COMPILE-TIME-CLASS, the class specified by   the :METACLASS argument in the <a class="macro-reference" href="../chapter-7.xhtml#macro-defclass">defclass</a> form is returned <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">which</span> <span class="syntax-interned-symbol">may</span> <span class="syntax-interned-symbol">itself</span> <span class="syntax-interned-symbol">be</span>
  <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">COMPILE-TIME-CLASS</span>)</span>
</span></code></pre>. <br/></section><section class="status-unknown proposal" id="issue-compile-file-handling-of-defclass:alternate"><h2 class="section-title">Proposal ALTERNATE</h2>  As <a class="proposal-reference" href="#issue-compile-file-handling-of-defclass:none">NONE</a>, but additionally define new operators to deal specifically with   information of this kind in compilation environments. For example, an operator   could be defined that, given a class name and compilation environment, returns   a boolean indicating whether that name will be defined as a class at runtime.   And, again for example, <a class="function-reference" href="../chapter-4.xhtml#function-subtypep">subtypep</a> could be defined to give exact results given   compile time class names and a compilation environment. As in <a class="function-reference" href="../chapter-5.xhtml#function-some">some</a>, it would   probably be useful to also define that <a class="function-reference" href="../chapter-4.xhtml#function-subtypep">subtypep</a> work with direct superclasses   even if they are forward referenced. <br/></section><section class="status-unknown proposal" id="issue-compile-file-handling-of-defclass:all"><h2 class="section-title">Proposal ALL</h2>  Clarify that top-level <a class="macro-reference" href="../chapter-7.xhtml#macro-defclass">defclass</a> forms must be fully evaluated by the compiler,   analogous to <a class="macro-reference" href="../chapter-3.xhtml#macro-defmacro">defmacro</a>. Add a requirement, similar to that in <a class="macro-reference" href="../chapter-4.xhtml#macro-deftype">deftype</a>, that   top-level <a class="macro-reference" href="../chapter-7.xhtml#macro-defclass">defclass</a> forms be fully evaluable at compile time. <br/></section><section id="section-Examples" class="section"><h2 class="section-title">Examples</h2><pre>  ;;; It is assumed that <a class="index/code-reference" href="../chapter-1.xhtml#index/code-foo">foo</a>, <a class="index/code-reference" href="../chapter-1.xhtml#index/code-bar">bar</a>, and META are not defined as classes before<br/>  ;;; a file containing this code is <a class="function-reference" href="../chapter-24.xhtml#function-compile-file">compile-file</a>'d.<br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-eval-when">eval-when</a> <span class="syntax-cons">(<span class="syntax-keyword-symbol">:compile-toplevel</span> <span class="syntax-keyword-symbol">:load-toplevel</span> <span class="syntax-keyword-symbol">:execute</span>)</span>
    <span class="syntax-cons">(<a class="macro-reference" href="../chapter-7.xhtml#macro-defclass">defclass</a> <span class="syntax-interned-symbol">meta</span> <span class="syntax-cons">(<a class="type-reference" href="../chapter-4.xhtml#type-standard-class">standard-class</a>)</span> <span class="syntax-symbol">()</span>)</span>)</span>
</span></code></pre><br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-7.xhtml#macro-defclass">defclass</a> <span class="syntax-interned-symbol">foo</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">bar</span>)</span>
    <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">%slot</span> <span class="syntax-keyword-symbol">:initarg</span> <span class="syntax-keyword-symbol">:slot</span> <span class="syntax-keyword-symbol">:reader</span> <span class="syntax-interned-symbol">slot</span>)</span>)</span>
    <span class="syntax-cons">(<span class="syntax-keyword-symbol">:metaclass</span> <span class="syntax-interned-symbol">meta</span>)</span>)</span>
</span></code></pre><br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-3.xhtml#macro-defmacro">defmacro</a> <span class="syntax-interned-symbol">test</span> <span class="syntax-cons">(<a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-environment">&amp;ENVIRONMENT</a> <span class="syntax-interned-symbol">env</span>)</span>
    <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">f</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-7.xhtml#function-find-class">find-class</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">foo</span></span> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-interned-symbol">env</span>)</span>)</span>
          <span class="syntax-cons">(<span class="syntax-interned-symbol">b</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-7.xhtml#function-find-class">find-class</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">bar</span></span> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-interned-symbol">env</span>)</span>)</span>
          <span class="syntax-cons">(<span class="syntax-interned-symbol">m</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-7.xhtml#function-find-class">find-class</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">meta</span></span> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-interned-symbol">env</span>)</span>)</span>)</span>
    <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-list">list</a> <span class="syntax-quote">'<span class="syntax-unquote">,<span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-interned-symbol">f</span> <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>)</span></span></span>
           <span class="syntax-quote">'<span class="syntax-unquote">,<span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-multiple-value-list">multiple-value-list</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-4.xhtml#function-subtypep">subtypep</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">foo</span></span> <span class="syntax-quote">'<span class="syntax-interned-symbol">bar</span></span> <span class="syntax-interned-symbol">env</span>)</span>)</span></span></span>
           <span class="syntax-quote">'<span class="syntax-unquote">,<span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-and">and</a> <span class="syntax-interned-symbol">f</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-multiple-value-list">multiple-value-list</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-4.xhtml#function-subtypep">subtypep</a> <span class="syntax-interned-symbol">f</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">env</span>)</span>)</span>)</span></span></span>
           <span class="syntax-quote">'<span class="syntax-unquote">,<span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-and">and</a> <span class="syntax-interned-symbol">f</span>
                  <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-list">list</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-mapcar">mapcar</a> <span class="syntax-function">#'<a class="function-reference" href="../chapter-7.xhtml#function-class-name">class-name</a></span> <span class="syntax-cons">(<span class="syntax-interned-symbol">mop:class-direct-superclasses</span> <span class="syntax-interned-symbol">f</span>)</span>)</span>
                        <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>)</span>)</span></span></span>
           <span class="syntax-quote">'<span class="syntax-unquote">,<span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-and">and</a> <span class="syntax-interned-symbol">f</span> <span class="syntax-interned-symbol">m</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-4.xhtml#function-typep">typep</a> <span class="syntax-interned-symbol">f</span> <span class="syntax-interned-symbol">m</span>)</span>)</span></span></span>
           <span class="syntax-quote">'<span class="syntax-unquote">,<span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-and">and</a> <span class="syntax-interned-symbol">f</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-7.xhtml#function-class-name">class-name</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-7.xhtml#function-class-of">class-of</a> <span class="syntax-interned-symbol">f</span>)</span>)</span>)</span></span></span>
           <span class="syntax-quote">'<span class="syntax-unquote">,<span class="syntax-cons">(<a class="function-reference" href="../chapter-4.xhtml#function-typep">typep</a> <span class="syntax-interned-symbol">b</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">mop:forward-referenced-class</span></span>)</span></span></span>
           <span class="syntax-quote">'<span class="syntax-unquote">,<span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-and">and</a> <span class="syntax-interned-symbol">f</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-17.xhtml#function-length">length</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">mop:class-direct-slots</span> <span class="syntax-interned-symbol">f</span>)</span>)</span>)</span></span></span>)</span></span>)</span>)</span>
</span></code></pre><br/>  ;;; Results of <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">test</span>)</span>
</span></code> under each proposal, where <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a> true, F <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a> false,<br/>  ;;; and U <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a> undefined:<br/>  ;;; <a class="proposal-reference" href="#issue-compile-file-handling-of-defclass:none">NONE</a>: <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">F</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">U</span> <span class="syntax-interned-symbol">U</span>)</span> <span class="syntax-interned-symbol">F</span> <span class="syntax-interned-symbol">F</span> <span class="syntax-interned-symbol">F</span> <span class="syntax-interned-symbol">F</span> <span class="syntax-interned-symbol">F</span> <span class="syntax-interned-symbol">F</span>)</span>
</span></code><br/>  ;;; <a class="proposal-reference" href="#issue-compile-file-handling-of-defclass:none-with-subtypep">NONE-WITH-SUBTYPEP</a>, <a class="proposal-reference" href="#issue-compile-file-handling-of-defclass:alternate">ALTERNATE</a>: <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">F</span> <span class="syntax-cons">(<a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>)</span> <span class="syntax-interned-symbol">F</span> <span class="syntax-interned-symbol">F</span> <span class="syntax-interned-symbol">F</span> <span class="syntax-interned-symbol">F</span> <span class="syntax-interned-symbol">F</span> <span class="syntax-interned-symbol">F</span>)</span>
</span></code><br/>  ;;; <a class="proposal-reference" href="#issue-compile-file-handling-of-defclass:compile-meta">COMPILE-META</a>: <code><span class="syntax-root"><span class="syntax-cons">(<a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> <span class="syntax-cons">(<a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>)</span> <span class="syntax-cons">(<a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>)</span> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">BAR</span>)</span> <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>)</span> <span class="syntax-interned-symbol">F</span> <span class="syntax-interned-symbol">COMPILE-TIME-CLASS</span> <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> <span class="syntax-number">0</span>)</span>
</span></code><br/>  ;;; <a class="proposal-reference" href="#issue-compile-file-handling-of-defclass:all">ALL</a>: <code><span class="syntax-root"><span class="syntax-cons">(<a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> <span class="syntax-cons">(<a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>)</span> <span class="syntax-cons">(<a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>)</span> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">BAR</span>)</span> <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>)</span> <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> <span class="syntax-interned-symbol">META</span> <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> <span class="syntax-number">1</span>)</span>
</span></code><br/><br/>  ;;; Results under some real implementations:<br/>  ;;; SBCL, Clasp: <code><span class="syntax-root"><span class="syntax-cons">(<a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-cons">(<a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>)</span> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>)</span>
</span></code>, indicating <a class="proposal-reference" href="#issue-compile-file-handling-of-defclass:none">NONE</a><br/>  ;;;  <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-and">and</a> <span class="syntax-interned-symbol">apparently</span> <span class="syntax-interned-symbol">violating</span> <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <span class="syntax-interned-symbol">existing</span> <a class="symbol-reference" href="../chapter-7.xhtml#symbol-standard">standard</a> <span class="syntax-interned-symbol">requirement</span>)</span>
</span></code>.<br/>  ;;; CCL: <code><span class="syntax-root"><span class="syntax-cons">(<a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> <span class="syntax-cons">(<a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>)</span> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-cons">(<a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>)</span> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-two-package-markers syntax-interned-symbol">CCL::COMPILE-TIME-CLASS</span> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-number">0</span>)</span>
</span></code><br/>  ;;;  This is similar to <a class="proposal-reference" href="#issue-compile-file-handling-of-defclass:compile-meta">COMPILE-META</a>; CCL defines <a class="index/code-reference" href="../chapter-1.xhtml#index/code-foo">foo</a> as an instance of<br/>  ;;;  CCL::COMPILE-TIME-CLASS. It does not however define a class for <a class="index/code-reference" href="../chapter-1.xhtml#index/code-bar">bar</a>, and<br/>  ;;;  the reasoning for the first <a class="function-reference" href="../chapter-4.xhtml#function-subtypep">subtypep</a> returning <code><span class="syntax-root"><span class="syntax-cons">(<a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>)</span>
</span></code> is not clear.<br/>  ;;; [todo: other implementations]<br/><br/>  ;;; An example of actually using the result of <a class="function-reference" href="../chapter-7.xhtml#function-find-class">find-class</a>. Under <a class="proposal-reference" href="#issue-compile-file-handling-of-defclass:none">NONE</a>,<br/>  ;;; <a class="proposal-reference" href="#issue-compile-file-handling-of-defclass:none-with-subtypep">NONE-WITH-SUBTYPEP</a>, <a class="proposal-reference" href="#issue-compile-file-handling-of-defclass:compile-meta">COMPILE-META</a>, and <a class="proposal-reference" href="#issue-compile-file-handling-of-defclass:all">ALL</a>, this works for classes defined<br/>  ;;; already. Under <a class="proposal-reference" href="#issue-compile-file-handling-of-defclass:compile-meta">COMPILE-META</a> using a class only known from a top-level<br/>  ;;; <a class="macro-reference" href="../chapter-7.xhtml#macro-defclass">defclass</a> form will result in an error at compiler-macroexpansion time,<br/>  ;;; when CLASS-PRECEDENCE-LIST is called on a COMPILE-TIME-CLASS. Under<br/>  ;;; <a class="proposal-reference" href="#issue-compile-file-handling-of-defclass:alternate">ALTERNATE</a> it could be possible with some other operators. Under <a class="proposal-reference" href="#issue-compile-file-handling-of-defclass:all">ALL</a> it<br/>  ;;; would work for classes only known from top-level <a class="macro-reference" href="../chapter-7.xhtml#macro-defclass">defclass</a> forms.<br/>  <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">classp</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">object</span> <a class="type-reference" href="../chapter-4.xhtml#type-class">class</a>)</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-4.xhtml#function-typep">typep</a> <span class="syntax-interned-symbol">object</span> <a class="type-reference" href="../chapter-4.xhtml#type-class">class</a>)</span>)</span>
</span></code><br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-3.xhtml#macro-define-compiler-macro">define-compiler-macro</a> <span class="syntax-interned-symbol">classp</span> <span class="syntax-cons">(<a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-whole">&amp;WHOLE</a> <span class="syntax-interned-symbol">whole</span> <span class="syntax-interned-symbol">object</span> <a class="type-reference" href="../chapter-4.xhtml#type-class">class</a> <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-environment">&amp;ENVIRONMENT</a> <span class="syntax-interned-symbol">env</span>)</span>
    <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<a class="type-reference" href="../chapter-4.xhtml#type-class">class</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-7.xhtml#function-find-class">find-class</a> <a class="type-reference" href="../chapter-4.xhtml#type-class">class</a> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-interned-symbol">env</span>)</span>)</span>)</span>
      <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-if">if</a> <a class="type-reference" href="../chapter-4.xhtml#type-class">class</a>
          <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-member">member</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-7.xhtml#function-class-of">class-of</a> <span class="syntax-unquote">,<span class="syntax-interned-symbol">object</span></span>)</span> <span class="syntax-quote">'<span class="syntax-unquote">,<span class="syntax-cons">(<span class="syntax-interned-symbol">mop:class-precedence-list</span> <a class="type-reference" href="../chapter-4.xhtml#type-class">class</a>)</span></span></span>)</span></span>
          <span class="syntax-interned-symbol">whole</span>)</span>)</span>)</span>
</span></code></pre><br/><br/>  ;;; An example of possibly unintuitive behaviors resulting from the existing<br/>  ;;; ambiguity in relation to proposal <a class="proposal-reference" href="#issue-compile-file-handling-of-defclass:all">ALL</a>, taken from Clasp's issue #736,<br/>  ;;; and cl-python's issue #23, using LispWorks or ECL:<br/>  <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-7.xhtml#macro-defclass">defclass</a> <span class="syntax-interned-symbol">foo</span> <span class="syntax-cons">(<a class="type-reference" href="../chapter-4.xhtml#type-standard-class">standard-class</a>)</span> <span class="syntax-symbol">()</span>)</span>
</span></code><br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-7.xhtml#macro-defmethod">defmethod</a> <span class="syntax-interned-symbol">mop:validate-superclass</span> <span class="syntax-cons">(<span class="syntax-cons">(<a class="type-reference" href="../chapter-4.xhtml#type-class">class</a> <span class="syntax-interned-symbol">foo</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">superclass</span> <a class="type-reference" href="../chapter-4.xhtml#type-standard-class">standard-class</a>)</span>)</span>
    <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>)</span>
</span></code></pre><br/>  <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-7.xhtml#macro-defclass">defclass</a> <span class="syntax-interned-symbol">super</span> <span class="syntax-symbol">()</span> <span class="syntax-symbol">()</span>)</span>
</span></code><br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-7.xhtml#macro-defclass">defclass</a> <span class="syntax-interned-symbol">bar</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">super</span>)</span>
    <span class="syntax-symbol">()</span>
    <span class="syntax-cons">(<span class="syntax-keyword-symbol">:metaclass</span> <span class="syntax-interned-symbol">foo</span>)</span>)</span>
</span></code></pre><br/>  ;;; Under proposal <a class="proposal-reference" href="#issue-compile-file-handling-of-defclass:all">ALL</a>, this is an error, as the validate-superclass method<br/>  ;;; is not defined when the <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-7.xhtml#macro-defclass">defclass</a> <span class="syntax-interned-symbol">BAR</span>)</span>
</span></code> form is evaluated by the compiler.<br/>  ;;; The programmer would have to wrap the <a class="macro-reference" href="../chapter-7.xhtml#macro-defmethod">defmethod</a> form in an <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-eval-when">eval-when</a>,<br/>  ;;; which is in fact how the cl-python issue was resolved.<br/>  ;;; Under the other proposals listed here, behavior is defined and is not an<br/>  ;;; error, as the implementation is not permitted to fully evaluate the<br/>  ;;; top-level <a class="macro-reference" href="../chapter-7.xhtml#macro-defclass">defclass</a> forms.<br/>  ;;; With the current standard, the situation is ambiguous, since some<br/>  ;;; implementations fully evaluate and some do not.<br/><br/></pre></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>  For <a class="proposal-reference" href="#issue-compile-file-handling-of-defclass:none">NONE</a>: Easiest to implement while giving programmers clear semantics. <br/>  For <a class="proposal-reference" href="#issue-compile-file-handling-of-defclass:none-with-subtypep">NONE-WITH-SUBTYPEP</a>: Only slightly harder to implement than <a class="proposal-reference" href="#issue-compile-file-handling-of-defclass:none">NONE</a> and gives   programmers a possibly-useful tool. <br/>  For <a class="proposal-reference" href="#issue-compile-file-handling-of-defclass:compile-meta">COMPILE-META</a>: Allows somewhat detailed introspection of classes known to   the compiler with only a small number of added classes and operators. <br/>  For <a class="proposal-reference" href="#issue-compile-file-handling-of-defclass:alternate">ALTERNATE</a>: Allows separation of runtime and compile time concerns. <br/>  For <a class="proposal-reference" href="#issue-compile-file-handling-of-defclass:all">ALL</a>: Easy to implement while giving programmers clear semantics and full   introspection. <br/></section><section id="section-Cost to Implementors" class="section"><h2 class="section-title">Cost to Implementors</h2>  For <a class="proposal-reference" href="#issue-compile-file-handling-of-defclass:none">NONE</a>, <a class="proposal-reference" href="#issue-compile-file-handling-of-defclass:none-with-subtypep">NONE-WITH-SUBTYPEP</a>, <a class="proposal-reference" href="#issue-compile-file-handling-of-defclass:all">ALL</a>: Very little. <br/>  For <a class="proposal-reference" href="#issue-compile-file-handling-of-defclass:compile-meta">COMPILE-META</a>, <a class="proposal-reference" href="#issue-compile-file-handling-of-defclass:alternate">ALTERNATE</a>: A decent amount of extra code. <br/></section><section id="section-Cost to Users" class="section"><h2 class="section-title">Cost to Users</h2>  For <a class="proposal-reference" href="#issue-compile-file-handling-of-defclass:none">NONE</a>, <a class="proposal-reference" href="#issue-compile-file-handling-of-defclass:none-with-subtypep">NONE-WITH-SUBTYPEP</a>: Disallows introspection on compiler classes. <br/>  For <a class="proposal-reference" href="#issue-compile-file-handling-of-defclass:compile-meta">COMPILE-META</a>, <a class="proposal-reference" href="#issue-compile-file-handling-of-defclass:alternate">ALTERNATE</a>: Probably zero; the most non-introspective code   is valid under either of these two proposals. <br/>  For <a class="proposal-reference" href="#issue-compile-file-handling-of-defclass:all">ALL</a>: Programs using MOP may have to be rewritten to insert <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-eval-when">eval-when</a>   judiciously. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>  Any proposal would help clarify the standard. <br/>  For <a class="proposal-reference" href="#issue-compile-file-handling-of-defclass:compile-meta">COMPILE-META</a>, <a class="proposal-reference" href="#issue-compile-file-handling-of-defclass:alternate">ALTERNATE</a>, <a class="proposal-reference" href="#issue-compile-file-handling-of-defclass:all">ALL</a>: Better introspection capabilities. <br/></section><section id="section-Cost of non-adoption" class="section"><h2 class="section-title">Cost of non-adoption</h2>  See the last example. <br/></section><section id="section-Aesthetics" class="section"><h2 class="section-title">Aesthetics</h2>  For <a class="proposal-reference" href="#issue-compile-file-handling-of-defclass:none">NONE</a>, <a class="proposal-reference" href="#issue-compile-file-handling-of-defclass:none-with-subtypep">NONE-WITH-SUBTYPEP</a>, <a class="proposal-reference" href="#issue-compile-file-handling-of-defclass:alternate">ALTERNATE</a>: Entails a contradiction between what   <a class="function-reference" href="../chapter-7.xhtml#function-find-class">find-class</a> and the compiler "know" about classes, which is weird. <br/>  I (Bike) think <a class="proposal-reference" href="#issue-compile-file-handling-of-defclass:compile-meta">COMPILE-META</a> is the aesthetically nicest proposal, since it   allows reasonable introspection through a mechanism similar to the existing   FORWARD-REFERENCED-CLASS, while not requiring users to make their compilers   evaluate all their MOP machinery. </section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>