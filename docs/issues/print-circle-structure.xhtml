<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” PRINT-CIRCLE-STRUCTURE</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">PRINT-CIRCLE-STRUCTURE</span><br/><ol class="local-toc"><li><a href="#section-Status">Status</a><ol> </ol></li><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit history">Edit history</a><ol> </ol></li><li><a href="#section-Problem description">Problem description</a><ol> </ol></li><li><a href="#issue-print-circle-structure:user-functions-work">Proposal USER-FUNCTIONS-WORK</a><ol> </ol></li><li><a href="#section-Test Cases/Examples">Test Cases/Examples</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Current practice">Current practice</a><ol> </ol></li><li><a href="#section-Cost to Implementors">Cost to Implementors</a><ol> </ol></li><li><a href="#section-Cost to Users">Cost to Users</a><ol> </ol></li><li><a href="#section-Cost of non-adoption">Cost of non-adoption</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Esthetics">Esthetics</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue PRINT-CIRCLE-STRUCTURE [NIL] [CLARIFICATION]</h1><section id="section-Status" class="status-passed section"><h2 class="section-title">Status</h2>Passed, Jan 89 X3J13, as amended </section><section id="section-References" class="section"><h2 class="section-title">References</h2>pp. 370-371 </section><section id="section-Edit history" class="section"><h2 class="section-title">Edit history</h2>Version 4, Masinter, 17-Mar-89 (as amended) Version 3, Masinter 10/8/88 (minor cleanup) Version 2, Chris McConnell 10/05/88 Version 1, Chris McConnell 09/20/88 </section><section id="section-Problem description" class="section"><h2 class="section-title">Problem description</h2>When a lisp object is printed that points to a structure with a user defined print-function and there is a pointer back to the containing object, the printer will recurse infinitely even when <a class="symbol-reference" href="../chapter-2.xhtml#symbol-*print-circle*">*print-circle*</a> is set to <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>.  This prevents printing circular structures that point to objects that cannot be printed and prevents the development of new printed representations that can be read by the reader. <br/></section><section class="status-passed proposal" id="issue-print-circle-structure:user-functions-work"><h2 class="section-title">Proposal USER-FUNCTIONS-WORK</h2>When <a class="symbol-reference" href="../chapter-2.xhtml#symbol-*print-circle*">*print-circle*</a> is <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>, a user defined print-function can print objects to the supplied stream using <a class="function-reference" href="../chapter-22.xhtml#function-write">write</a>, <a class="function-reference" href="../chapter-22.xhtml#function-prin1">prin1</a>, <a class="function-reference" href="../chapter-22.xhtml#function-princ">princ</a>, or <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> and expect circularities to be detected and printed using #n# syntax. If a user defined print-function prints to a stream other than the one that was supplied, then circularity detection starts over for that stream. This applies to methods on <a class="function-reference" href="../chapter-22.xhtml#function-print-object">print-object</a> in addition to :PRINT-FUNCTION options. <br/></section><section id="section-Test Cases/Examples" class="section"><h2 class="section-title">Test Cases/Examples</h2><pre>;;;<br/>;;; Define a structure that can be circular and that has a slot with a<br/>;;; value that cannot be printed.<br/>;;;<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">defstruct</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">TEST</span> <span class="syntax-cons">(<span class="syntax-keyword-symbol">:print-function</span> <span class="syntax-interned-symbol">print-test</span>)</span>)</span>
  <span class="syntax-interned-symbol">ptr</span>
  <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> <span class="syntax-function">#'<span class="syntax-cons">(<a class="macro-reference" href="../chapter-3.xhtml#macro-lambda">lambda</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span>)</span> 
		<span class="syntax-cons">(<a class="function-reference" href="../chapter-9.xhtml#function-error">error</a> <span class="syntax-string">"No function is defined."</span>)</span>)</span></span>)</span>)</span>
</span></code></pre><br/><br/>;;;<br/>;;; This print function generates a machine readable printed<br/>;;; representation for a structure with a slot that cannot be printed.<br/>;;;<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">PRINT-TEST</span> <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-2.xhtml#symbol-structure">structure</a> <a class="type-reference" href="../chapter-21.xhtml#type-stream">stream</a> <span class="syntax-interned-symbol">depth</span>)</span>
  <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> <a class="type-reference" href="../chapter-21.xhtml#type-stream">stream</a> <span class="syntax-string">"#S(TEST PTR ~S)"</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">test-ptr</span> <a class="symbol-reference" href="../chapter-2.xhtml#symbol-structure">structure</a>)</span>)</span>)</span>
</span></code></pre><br/><br/>;;;<br/>;;; Define two structures that point to each other.  If this<br/>;;; expression successfully evaluates at the top level, then the<br/>;;; printed result should look like:<br/>;;; #1<a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>#S(TEST PTR #S(TEST PTR #1#))<br/>;;;<br/>;;; If it does not work then it will generate an infinite printed<br/>;;; representation. <br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <a class="symbol-reference" href="../chapter-2.xhtml#symbol-*print-circle*">*print-circle*</a> <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>
      <span class="syntax-interned-symbol">*a</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">make-test</span>)</span>
      <span class="syntax-interned-symbol">*b</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">make-test</span>)</span>
      <span class="syntax-cons">(<span class="syntax-interned-symbol">test-ptr</span> <span class="syntax-interned-symbol">*a</span>)</span> <span class="syntax-interned-symbol">*b</span>
      <span class="syntax-cons">(<span class="syntax-interned-symbol">test-ptr</span> <span class="syntax-interned-symbol">*b</span>)</span> <span class="syntax-interned-symbol">*a</span>)</span>
</span></code></pre><br/><br/></pre></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>Many structures are circular and point to complex data structures that may include things like closures that cannot be printed.  It should be possible to define a way to print these data structures such that they can be read back in.  Common <a class="package-reference" href="../chapter-A.xhtml#package-lisp">lisp</a> provides two mechanisms for these problems <code><span class="syntax-root"><span class="syntax-cons">(<a class="symbol-reference" href="../chapter-2.xhtml#symbol-*print-circle*">*print-circle*</a> <a class="macro-reference" href="../chapter-5.xhtml#macro-and">and</a> <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <span class="syntax-keyword-symbol">:print-function</span> <span class="syntax-interned-symbol">option</span> <span class="syntax-interned-symbol">to</span> <a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">defstruct</a>)</span>
</span></code>, but they do not currently work together in most implementations. <br/></section><section id="section-Current practice" class="section"><h2 class="section-title">Current practice</h2>Lucid 3.0 and the Genera do work on the test case.  (Previous versions did not.)  KCL, Coral and Franz do not work. <br/></section><section id="section-Cost to Implementors" class="section"><h2 class="section-title">Cost to Implementors</h2>Lucid and Symbolics have done it, so they could give an idea of the difficulty.  Possible techniques include passing the printer state information by dynamic binding rather than by explicit parameters or by supplying an internal stream to the user print function. <br/></section><section id="section-Cost to Users" class="section"><h2 class="section-title">Cost to Users</h2>None </section><section id="section-Cost of non-adoption" class="section"><h2 class="section-title">Cost of non-adoption</h2>Currently this problem causes an infinite recursion whenever a user print-function prints a lisp object that contains the structure that is being printed by the user print function.  If nothing is done, this error will remain and the whole effort to provide a portable printed representation of <a class="package-reference" href="../chapter-A.xhtml#package-lisp">lisp</a> structures is of minimal usefulness.  In almost any real application, there are circular structures with non printable objects such as closures and hash tables that need to be printed.  In addition the development of printers for new reader macros becomes much more of an effort then it should be since it requires reimplementing the complete circularity detection mechanism. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>If the proposal is adopted, then it becomes easier to define new printed representations that are compact and that still capture the information needed to rebuild data structure instances.  It allows a printed representation to hide the actual details of how a data structure is implemented in terms of underlying <a class="package-reference" href="../chapter-A.xhtml#package-lisp">lisp</a> data structures. <br/></section><section id="section-Esthetics" class="section"><h2 class="section-title">Esthetics</h2>This proposal increases the uniformity of the language by making <a class="symbol-reference" href="../chapter-2.xhtml#symbol-*print-circle*">*print-circle*</a> work in all cases including where a user has defined a new print function. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>At least three members of the cleanup committee read this and think it looks good. </section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>