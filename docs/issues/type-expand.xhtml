<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp — TYPE-EXPAND</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">TYPE-EXPAND</span><br/><ol class="local-toc"><li><a href="#section-Status">Status</a><ol> </ol></li><li><a href="#section-Edit history">Edit history</a><ol> </ol></li><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Problem Description">Problem Description</a><ol> </ol></li><li><a href="#issue-type-expand:two-new-operators">Proposal TWO-NEW-OPERATORS</a><ol> <li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Current Practice">Current Practice</a><ol> </ol></li><li><a href="#section-Cost to Implementors">Cost to Implementors</a><ol> </ol></li><li><a href="#section-Cost to Users">Cost to Users</a><ol> </ol></li><li><a href="#section-Cost of Non-Adoption">Cost of Non-Adoption</a><ol> </ol></li><li><a href="#section-Aesthetics">Aesthetics</a><ol> </ol></li></ol></li><li><a href="#issue-type-expand:three-new-operators">Proposal THREE-NEW-OPERATORS</a><ol> <li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Cost to Implementors">Cost to Implementors</a><ol> </ol></li></ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>EXTENSION Issue TYPE-EXPAND [Extension] [ADDITION]</h1><section id="section-Status" class="status-unknown section"><h2 class="section-title">Status</h2>proposed </section><section id="section-Edit history" class="section"><h2 class="section-title">Edit history</h2>2021-07-16, version 1 by Bike </section><section id="section-References" class="section"><h2 class="section-title">References</h2><a class="macro-reference" href="../chapter-4.xhtml#macro-deftype">DEFTYPE</a> </section><section id="section-Problem Description" class="section"><h2 class="section-title">Problem Description</h2>  Common Lisp defines a macro mechanism for types, and the glossary mentions a   "type expansion", but access to these by programmers is limited. Programmers   cannot determine if a type specifier is a derived type, or the expansion of   that type. <br/>  Some metaprogramming projects could use this information.   Implementation-specific type expansion functions are used by, for example, Jan   Moringen's configuration.options project, Massimiliano Ghilardi's   cl-parametric-types project, and Masataro Asai's type-i project. <br/>  Additionally, the type macro mechanism is opaque compared to the form macro   mechanism. deftype is described as defining a function to perform the   expansion, but this function is not accessible to programmers or defined in   detail. <br/></section><section class="status-unknown proposal" id="issue-type-expand:two-new-operators"><h2 class="section-title">Proposal TWO-NEW-OPERATORS</h2>  Add the <a class="function-reference" href="../chapter-4.xhtml#function-type-expand">TYPE-EXPAND</a> and <a class="function-reference" href="../chapter-4.xhtml#function-type-expand-1">TYPE-EXPAND-1</a> functions defined in the accompanying   documents. Edit the glossary entry on "type expand" to indicate the existence   of these functions. Add text, probably in 4.2.3, saying that any standardized   type specifier may be implemented as a type macro, analogously to how special   operators may be implemented as macros. <br/><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>  Improves the regularity of the language, and expands the capability of   advanced programmers to do metaprogramming relating to types. <br/></section><section id="section-Current Practice" class="section"><h2 class="section-title">Current Practice</h2>  SBCL exports these functions in its miscellaneous extensions package, under   the names typexpand and typexpand-1, as well as an additional typexpand-all. <br/></section><section id="section-Cost to Implementors" class="section"><h2 class="section-title">Cost to Implementors</h2>  Low. All implementations already include some means of macroexpanding types   to implement Common Lisp, but several do not export a simple interface like   this. For example, CCL and CMUCL only have ccl::%deftype-expander and   ext:info <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">respectively</span>)</span>
</span></code> enabling access to type macro functions, which must   be called manually. In short, some implementations would have to do a bit of   work to present this clean interface. <br/></section><section id="section-Cost to Users" class="section"><h2 class="section-title">Cost to Users</h2>  Assuming the new symbols wouldn't be external symbols of <a class="package-reference" href="../chapter-11.xhtml#package-cl">CL</a>, none. If they   were, code defining functions by those names in packages that :use <a class="package-reference" href="../chapter-11.xhtml#package-cl">CL</a> would   have errors, easily fixed by shadowing. <br/></section><section id="section-Cost of Non-Adoption" class="section"><h2 class="section-title">Cost of Non-Adoption</h2>  Some metaprogrammers have to rely on unstable and/or implementation   dependent interfaces to accomplish something any implementation can do   easily. <br/></section><section id="section-Aesthetics" class="section"><h2 class="section-title">Aesthetics</h2>  This is obviously closely analogous to <a class="function-reference" href="../chapter-3.xhtml#function-macroexpand">MACROEXPAND</a> and <a class="function-reference" href="../chapter-3.xhtml#function-macroexpand-1">MACROEXPAND-1</a>,   clarifies the type system, and allows programmers uniform access to   something implementations mostly have already. <br/></section></section><section class="status-unknown proposal" id="issue-type-expand:three-new-operators"><h2 class="section-title">Proposal THREE-NEW-OPERATORS</h2>  As <a class="proposal-reference" href="#issue-type-expand:two-new-operators">TWO-NEW-OPERATORS</a>, but also include the <a class="function-reference" href="../chapter-4.xhtml#function-type-macro-function">TYPE-MACRO-FUNCTION</a> accessor   defined in the accompanying file. Edit the description of <a class="macro-reference" href="../chapter-4.xhtml#macro-deftype">DEFTYPE</a> to refer to   type macro functions more explicitly, analogous to the description of   <a class="macro-reference" href="../chapter-3.xhtml#macro-defmacro">DEFMACRO</a>. <br/>  Add a glossary entry: "type macro function n. a function of two arguments, a   type specifier and an environment, that implements type expansion by producing   a type specifier to be used in place of the original argument type specifier." <br/><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>  Ditto <a class="proposal-reference" href="#issue-type-expand:two-new-operators">TWO-NEW-OPERATORS</a>, and the rest of that analysis applies here as well,   except the Cost to Implementors. <br/></section><section id="section-Cost to Implementors" class="section"><h2 class="section-title">Cost to Implementors</h2>  While implementations must in general have some kind of type macro function   already, the form of that function, and whether it is used for all <a class="macro-reference" href="../chapter-4.xhtml#macro-deftype">DEFTYPE</a>   definitions, is not uniform. For example, SBCL type macro functions do not   accept an environment. ECL type macro functions do not accept an environment   and take the <a class="function-reference" href="../chapter-14.xhtml#function-cdr">CDR</a> of a type specifier rather than the whole specifier. In   either case it shouldn't be too much effort to change, though, and in fact   Clasp has already rewritten ECL's code so that type macro functions accept   the convention given here. <br/></section></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>  TYPEEXPAND and TYPEXPAND are possible alternate names. TYPEEXPAND is closer to   <a class="function-reference" href="../chapter-3.xhtml#function-macroexpand">MACROEXPAND</a> but has a double E. TYPEXPAND eliminates the double E but is a   little collapsed looking. <a class="function-reference" href="../chapter-4.xhtml#function-type-expand">TYPE-EXPAND</a> is the lengthiest. "The two hardest   problems in computer science" etc. </section></div></main><footer>Copyright © 2021 Jan Moringen</footer></body></html>