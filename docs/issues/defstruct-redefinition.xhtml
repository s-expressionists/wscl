<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” DEFSTRUCT-REDEFINITION</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">DEFSTRUCT-REDEFINITION</span><br/><ol class="local-toc"><li><a href="#section-Status">Status</a><ol> </ol></li><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit history">Edit history</a><ol> </ol></li><li><a href="#section-Problem Description">Problem Description</a><ol> </ol></li><li><a href="#issue-defstruct-redefinition:error">Proposal ERROR</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Current Practice">Current Practice</a><ol> </ol></li><li><a href="#section-Cost to Implementors">Cost to Implementors</a><ol> </ol></li><li><a href="#section-Cost to Users">Cost to Users</a><ol> </ol></li><li><a href="#section-Cost of Non-Adoption">Cost of Non-Adoption</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Aesthetics">Aesthetics</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue DEFSTRUCT-REDEFINITION [NIL] [CLARIFICATION]</h1><h2>Related issues</h2><ul><li><span class="issue-reference error">issue:DEFSTRUCT-ACCESS-FUNCTIONS-INLINE</span></li></ul><section id="section-Status" class="status-passed section"><h2 class="section-title">Status</h2>Passed (as amended) Jan 89 X3J13 </section><section id="section-References" class="section"><h2 class="section-title">References</h2><a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">DEFSTRUCT</a> (CLtL pp 305-320) </section><section id="section-Edit history" class="section"><h2 class="section-title">Edit history</h2>Version 1 by Skona Brittain 07/26/88 Version 2 by Larry Masinter  7-Jan-89 Version 3 by Masinter 6-Feb-89 as per Jan 89 X3J13 amendment </section><section id="section-Problem Description" class="section"><h2 class="section-title">Problem Description</h2>The case of a structure type being redefined is not discussed in CLtL. Is it legal to redefine a <a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">DEFSTRUCT</a>? What happens to DEFSTRUCTS that :INCLUDE the one defined. What things might be "wired in" in compiled code that refered to the previous <a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">DEFSTRUCT</a>? <br/></section><section class="status-passed proposal" id="issue-defstruct-redefinition:error"><h2 class="section-title">Proposal ERROR</h2>The results of redefining a <a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">DEFSTRUCT</a> structure are undefined. <br/></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2><a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">DEFSTRUCT</a> is intended as "the most efficient" structure class. <a class="macro-reference" href="../chapter-7.xhtml#macro-defclass">DEFCLASS</a> allows much more flexible structures to be defined. Thus, implementations should be free to "wire in" much of the behavior of a <a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">DEFSTRUCT</a> into compiled code. <br/>The issue of redefinition should be addressed since there are always consequences that affect use of the structures. <br/></section><section id="section-Current Practice" class="section"><h2 class="section-title">Current Practice</h2>None of KCL, Lucid, &amp; Symbolics detect a redefinition. <br/>Envos Medley goes to some effort to detect if a new structure is "compatible" with the old &ndash; e.g., slots might change names, initial values, but, since the space allocated in an instance is determined by the :TYPE, an incompatible set of :TYPE forms would cause old instances to be marked "obsolete". (The <a class="function-reference" href="../chapter-4.xhtml#function-type-of">TYPE-OF</a> an old instance changes to **OBSOLETE**, for example.) <br/></section><section id="section-Cost to Implementors" class="section"><h2 class="section-title">Cost to Implementors</h2>This proposal attempts to be consistent with current practice. <br/></section><section id="section-Cost to Users" class="section"><h2 class="section-title">Cost to Users</h2>It is doubtful that any current programs actually define structures more than once. Thus, constraints on <a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">DEFSTRUCT</a> redefinition primarily affect the debugging environment. <br/></section><section id="section-Cost of Non-Adoption" class="section"><h2 class="section-title">Cost of Non-Adoption</h2>Confusion. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>Clarity. <br/></section><section id="section-Aesthetics" class="section"><h2 class="section-title">Aesthetics</h2>Something that is not well-defined and leads to erratic behavior should be explicitly considered an error. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>Common implementation techniques may cause the following behavior if a <a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">DEFSTRUCT</a> is redefined: <br/>If the new <a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">DEFSTRUCT</a> is identical to the old <a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">DEFSTRUCT</a> except for the initialization forms for slots,  previous structure objects probably can continue to be accessed with previously compiled slot accessors. <a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">DEFSTRUCT</a> constructor, test functions are proclaimed <a class="declaration-reference" href="../chapter-3.xhtml#declaration-inline">INLINE</a>, and if these have changed, previously compiled occurrences of them may behave unpredictably. <br/>If any change is made to the definiton of the slots (either in number, name, or :TYPE), attempting to execute a slot accessor of the old definition may behave unpredictably: if a slot name of the old definition also names a slot of the new definition, any "compiled" code might use the old definition instead.  <br/><a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">DEFSTRUCT</a> constructor, test functions may also be proclaimed <a class="declaration-reference" href="../chapter-3.xhtml#declaration-inline">INLINE</a>, and may behave unpredictably if previously compiled. In particular, a compiled occurance of a constructor might have the previously slot initial values "wired in". <br/>If the new <a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">DEFSTRUCT</a> differs from the old in any aspect other than the initialization forms for slots, the results of attempting to access any old instance might result in unspecified behavior. For example, if the size of the structure became considerably shorter, an old accessor might "access off the end" of an instance of a new object; it might signal an error or have other unpredictable results. <br/>Masinter supports this proposal.  If users want more flexibility than <a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">DEFSTRUCT</a> allows, they should use <a class="macro-reference" href="../chapter-7.xhtml#macro-defclass">DEFCLASS</a>. <br/>Some felt strongly that  just saying it's an error to redefine a structure but not requiring the error to be signalled will cause users to be confused by the differing seemingly erratic behavior and code.  <br/>Programming environments are allowed, encouraged, etc. to allow such redefinition, perhaps with warning messages. It is beyond the scope of the language standard to define those interactions, except to note that they are not portable.  <br/>Here's an example where reexecuting an <a class="function-reference" href="../chapter-5.xhtml#function-equal">EQUAL</a> <a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">DEFSTRUCT</a> might result in different behavior: <br/><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defvar">defvar</a> <span class="syntax-interned-symbol">*token-counter*</span> <span class="syntax-number">0</span>)</span>
</span></code> <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">defstruct</a> <span class="syntax-interned-symbol">token</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">cookie</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-string">"unique-string"</span>)</span></span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">counter</span> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-12.xhtml#macro-incf">incf</a>
<span class="syntax-interned-symbol">*token-counter*</span>)</span>)</span>)</span>
</span></code></pre> <br/><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defvar">defvar</a> <span class="syntax-interned-symbol">*first-token*</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">make-token</span>)</span>)</span>
</span></code> <br/><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-eql">eql</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">token-cookie</span> <span class="syntax-interned-symbol">*first-token*</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">token-cookie</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">make-token</span>)</span>)</span>)</span>
</span></code> <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; true <br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">defstruct</a> <span class="syntax-interned-symbol">token</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">cookie</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-string">"unique-string"</span>)</span></span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">counter</span> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-12.xhtml#macro-incf">incf</a>
<span class="syntax-interned-symbol">*token-counter*</span>)</span>)</span>)</span>
</span></code></pre> <br/><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-eql">eql</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">token-cookie</span> <span class="syntax-interned-symbol">*first-token*</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">token-cookie</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">make-token</span>)</span>)</span>)</span>
</span></code> <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; false <br/>I.e., even though the second <a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">DEFSTRUCT</a> is <a class="function-reference" href="../chapter-5.xhtml#function-equal">EQUAL</a> to the first, the structures are not <a class="function-reference" href="../chapter-5.xhtml#function-eql">EQL</a>. <br/>This is related to the compiler <span class="issue-reference error">issue:QUOTE-MAY-COPY</span>, but is not the same issue, since that proposal isn't proposing that <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-quote">QUOTE</a> might copy its value *every time* it is executed. <br/></section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>