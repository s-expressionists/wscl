<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” CLOS-CONDITIONS</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">CLOS-CONDITIONS</span><br/><ol class="local-toc"><li><a href="#section-Status">Status</a><ol> </ol></li><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit history">Edit history</a><ol> </ol></li><li><a href="#section-Problem Description">Problem Description</a><ol> </ol></li><li><a href="#issue-clos-conditions:integrate">Proposal INTEGRATE</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Examples">Examples</a><ol> </ol></li><li><a href="#section-Current Practice">Current Practice</a><ol> </ol></li><li><a href="#section-Cost to Implementors">Cost to Implementors</a><ol> </ol></li><li><a href="#section-Cost to Users">Cost to Users</a><ol> </ol></li><li><a href="#section-Cost of Non-Adoption">Cost of Non-Adoption</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Aesthetics">Aesthetics</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue CLOS-CONDITIONS [NIL] [ADDITION]</h1><section id="section-Status" class="status-passed section"><h2 class="section-title">Status</h2>Passed, Mar 89 X3J13 </section><section id="section-References" class="section"><h2 class="section-title">References</h2>Condition System (Revision 18) </section><section id="section-Edit history" class="section"><h2 class="section-title">Edit history</h2>26-Sep-88, Version 1 by Pitman 06-Oct-88, Version 2 by Pitman 09-Oct-88, Version 3 by Pitman 10-Mar-89, Version 4 by Pitman (remove unsupported options) </section><section id="section-Problem Description" class="section"><h2 class="section-title">Problem Description</h2>  The description of the Common Lisp condition system presupposes   only <a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">DEFSTRUCT</a> and not <a class="macro-reference" href="../chapter-7.xhtml#macro-defclass">DEFCLASS</a> because it was written when   CLOS had not been adopted. It is stylistically out of step with   CLOS in a few places and places some restrictions which are not   necessary if CLOS can be presupposed. <br/></section><section class="status-passed proposal" id="issue-clos-conditions:integrate"><h2 class="section-title">Proposal INTEGRATE</h2><ol><li> Define that condition types are CLOS classes. </li><li> Define that condition objects are CLOS instances. </li><li> Functions such as <a class="function-reference" href="../chapter-9.xhtml#function-signal">SIGNAL</a>, which take arguments of class names, are  permitted to take class objects. Such class objects must still be  subclasses of <a class="type-reference" href="../chapter-9.xhtml#type-condition">CONDITION</a>. <br/></li><li> Define that slots in condition objects are normal CLOS slots. Note  that <a class="macro-reference" href="../chapter-7.xhtml#macro-with-slots">WITH-SLOTS</a> can be used to provide more convenient access to the  slots where slot accessors are undesirable. <br/></li><li> Incompatibly change the syntax of a slot in <a class="macro-reference" href="../chapter-9.xhtml#macro-define-condition">DEFINE-CONDITION</a>  to be compatible with a <a class="macro-reference" href="../chapter-7.xhtml#macro-defclass">DEFCLASS</a> slot specification. <br/> An implication of this change is that forms like   <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-9.xhtml#macro-define-condition">DEFINE-CONDITION</a> <span class="syntax-interned-symbol">FOO</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">BAR</span>)</span> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">A</span> <span class="syntax-number">1</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">B</span> <span class="syntax-number">2</span>)</span>)</span>)</span>
</span></code>  would have to be written   <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-9.xhtml#macro-define-condition">DEFINE-CONDITION</a> <span class="syntax-interned-symbol">FOO</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">BAR</span>)</span>
        <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">A</span> <span class="syntax-keyword-symbol">:INITARG</span> <span class="syntax-keyword-symbol">:A</span> <span class="syntax-keyword-symbol">:READER</span> <span class="syntax-interned-symbol">FOO-A</span> <span class="syntax-keyword-symbol">:INITFORM</span> <span class="syntax-number">1</span>)</span>
         <span class="syntax-cons">(<span class="syntax-interned-symbol">B</span> <span class="syntax-keyword-symbol">:INITARG</span> <span class="syntax-keyword-symbol">:B</span> <span class="syntax-keyword-symbol">:READER</span> <span class="syntax-interned-symbol">FOO-B</span> <span class="syntax-keyword-symbol">:INITFORM</span> <span class="syntax-number">2</span>)</span>)</span>)</span>
</span></code></pre> <br/></li><li> Permit multiple parent-types to be named in the list of parent types.  Define that these parent types are treated the same as the superior  class list in a CLOS <a class="macro-reference" href="../chapter-7.xhtml#macro-defclass">DEFCLASS</a> expression. <br/></li><li> Eliminate the :CONC-NAME option to <a class="macro-reference" href="../chapter-9.xhtml#macro-define-condition">DEFINE-CONDITION</a>. </li><li> Define that condition reporting is mediated through the <a class="function-reference" href="../chapter-22.xhtml#function-print-object">PRINT-OBJECT</a>  method for the condition type <code><span class="syntax-root"><span class="syntax-cons">(<a class="type-reference" href="../chapter-4.xhtml#type-class">class</a>)</span>
</span></code> in question, with <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-escape*">*PRINT-ESCAPE*</a>  always being <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>. Specifying <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-keyword-symbol">:REPORT</span> <span class="syntax-interned-symbol">fn</span>)</span>
</span></code> in the definition of a  condition type C is equivalent to doing    <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-7.xhtml#macro-defmethod">DEFMETHOD</a> <a class="function-reference" href="../chapter-22.xhtml#function-print-object">PRINT-OBJECT</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">X</span> <span class="syntax-interned-symbol">c</span>)</span> <a class="type-reference" href="../chapter-21.xhtml#type-stream">STREAM</a>)</span>
        <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-if">IF</a> <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-escape*">*PRINT-ESCAPE*</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-7.xhtml#function-call-next-method">CALL-NEXT-METHOD</a>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">fn</span> <span class="syntax-interned-symbol">X</span> <a class="type-reference" href="../chapter-21.xhtml#type-stream">STREAM</a>)</span>)</span>)</span>
</span></code></pre> <br/></li></ol></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>  These changes are consistent with the intent of the X3J13 endorsement   of CLOS and the Common Lisp Condition System. <br/>  Although items 5 and 7 are incompatible with the interim condition   handling which we've been working with, the overall proposal significantly   improves compatibility with CLOS. <br/>  This compatibility will make the language seem less fragmented, and   probably more learnable because there will be fewer paradigms to learn. <br/>  Also, items 5 and 7 in particular are an improvement for reasons   unrelated to CLOS if only because they get rid of the need for symbol   concatenation, a process which has been seen to cause problems because   of the transient nature of the binding of <a class="variable-reference" href="../chapter-11.xhtml#variable-*package*">*PACKAGE*</a>. <br/></section><section id="section-Examples" class="section"><h2 class="section-title">Examples</h2><pre>  Slot specifiers...<br/><br/>    A slot specifier of X is still valid but is incompatibly<br/>    changed to mean what CLOS has it mean; no :INITARG or <br/>    :READER would be supplied.<br/><br/>    A slot specifier of <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">X</span>)</span>
</span></code> is still valid but is incompatibly<br/>    changed to mean what CLOS has it mean; no :INITARG or <br/>    :READER would be supplied.<br/><br/>    A slot specifier of <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">X</span> <span class="syntax-interned-symbol">V</span>)</span>
</span></code> would no longer be valid.<br/><br/>    In addition, other slot specifiers such as<br/>     <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">X</span> <span class="syntax-keyword-symbol">:INITARG</span> <span class="syntax-keyword-symbol">:EX</span> <span class="syntax-keyword-symbol">:TYPE</span> <a class="type-reference" href="../chapter-12.xhtml#type-fixnum">FIXNUM</a>)</span>
</span></code><br/>    are permitted as in <a class="macro-reference" href="../chapter-7.xhtml#macro-defclass">DEFCLASS</a>.<br/><br/> Conc names ...<br/><br/>   <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-9.xhtml#macro-define-condition">DEFINE-CONDITION</a> <span class="syntax-interned-symbol">FOOBAR</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">FOO</span> <span class="syntax-interned-symbol">BAR</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">X</span> <span class="syntax-interned-symbol">Y</span>)</span> <span class="syntax-cons">(<span class="syntax-keyword-symbol">:CONC-NAME</span> <span class="syntax-interned-symbol">FUBAR</span>)</span>)</span>
</span></code><br/>   would be rewritten<br/>   <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-9.xhtml#macro-define-condition">DEFINE-CONDITION</a> <span class="syntax-interned-symbol">FOOBAR</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">FOO</span> <span class="syntax-interned-symbol">BAR</span>)</span>
     <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">X</span> <span class="syntax-keyword-symbol">:INITARG</span> <span class="syntax-keyword-symbol">:X</span> <span class="syntax-keyword-symbol">:READER</span> <span class="syntax-interned-symbol">FUBAR-X</span>)</span>
      <span class="syntax-cons">(<span class="syntax-interned-symbol">Y</span> <span class="syntax-keyword-symbol">:INITARG</span> <span class="syntax-keyword-symbol">:Y</span> <span class="syntax-keyword-symbol">:READER</span> <span class="syntax-interned-symbol">FUBAR-Y</span>)</span>)</span>)</span>
</span></code></pre><br/><br/> Report methods ...<br/><br/>   <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-9.xhtml#macro-define-condition">DEFINE-CONDITION</a> <span class="syntax-interned-symbol">OOPS</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-9.xhtml#function-error">ERROR</a>)</span> <span class="syntax-symbol">()</span>)</span>
</span></code><br/>   <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-7.xhtml#macro-defmethod">DEFMETHOD</a> <a class="function-reference" href="../chapter-22.xhtml#function-print-object">PRINT-OBJECT</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">X</span> <span class="syntax-interned-symbol">OOPS</span>)</span> <a class="type-reference" href="../chapter-21.xhtml#type-stream">STREAM</a>)</span>
     <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-if">IF</a> <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-escape*">*PRINT-ESCAPE*</a> 
	 <span class="syntax-cons">(<a class="function-reference" href="../chapter-7.xhtml#function-call-next-method">CALL-NEXT-METHOD</a>)</span>
	 <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-format">FORMAT</a> <a class="type-reference" href="../chapter-21.xhtml#type-stream">STREAM</a> <span class="syntax-string">"Oops! Something went wrong."</span>)</span>)</span>)</span>
</span></code></pre><br/>   <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-9.xhtml#function-error">ERROR</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">OOPS</span></span>)</span>
</span></code><br/>   &gt;&gt;Error: Oops! Something went wrong.<br/><br/></pre></section><section id="section-Current Practice" class="section"><h2 class="section-title">Current Practice</h2>  Some implementations supporting CLOS probably already do this,   or something very similar. <br/></section><section id="section-Cost to Implementors" class="section"><h2 class="section-title">Cost to Implementors</h2>  If you really have CLOS, this is very straightforward. <br/></section><section id="section-Cost to Users" class="section"><h2 class="section-title">Cost to Users</h2>  Small, but tractable. <br/>  The main potential problems are: <br/>   <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> :CONC-NAME. There is nothing that keeps an implementation from      continuing to support :CONC-NAME for a short while until old code      has been upgraded. <br/>   <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> The incompatible change to slot syntax. Again, it is possible to      unambiguously recognize a 2-list as old-style syntax and an      implementation can provide interim compatibility support during      a transition period. <br/>  Even if implementations did not provide the recommended compatibility   support, users could trivially shadow <a class="macro-reference" href="../chapter-9.xhtml#macro-define-condition">DEFINE-CONDITION</a> and provide the   support themselves, expanding into the native <a class="macro-reference" href="../chapter-9.xhtml#macro-define-condition">DEFINE-CONDITION</a> in the   proper syntax. <br/>  In any case, the total number of uses of <a class="macro-reference" href="../chapter-9.xhtml#macro-define-condition">DEFINE-CONDITION</a> at this    point is probably quite small. Searching for them and repairing   each by hand is probably not an expensive operation. <br/></section><section id="section-Cost of Non-Adoption" class="section"><h2 class="section-title">Cost of Non-Adoption</h2>  Conditions will seem harder to manipulate than other user-defined types. <br/>  People will wonder if CLOS is really something we're committed to. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>  A more regular, more learnable language. <br/></section><section id="section-Aesthetics" class="section"><h2 class="section-title">Aesthetics</h2>  Improved. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>  Gregor, Pierson, Moon, and Pitman support this proposal. <br/>  People seem to disagree about the status that CLOS might occupy   in the upcoming standard. In spite of a vote of support, they seem   to think it might be optional in some way. Passing this proposal   establishes a clear precedent for the full integration of CLOS into   the emerging language. <br/>  The sense of the cleanup committee was that it was acceptable for   a vendor to identify a CLOS-free subset of Common Lisp, but that since   the position of X3J13 seems to be that no resources should be devoted   to work on subsets, it was inappropriate for us to work out the details   of that subset ourselves.  Since nothing about this proposal would   impede such a subset, we took that to be adequate basis for presenting   this single proposal. <br/>  Moon thinks we might want to add condition types for the errors   CLOS might signal. Richard Mlynarik thinks we should add a generic   function, REPORT-CONDITION, which is used for reporting conditions.   Both of these issues should probably be pursued under separate cover. <br/>! "One comment is that you should explicitly mention bootstrapping concerns under cost to implementors.  If you just leave it out, someone may think it is a difficult problem. " <br/>"This isn't any sort of clarification.  The actual clarification required &ndash; which has been requested several times, and not just by myself &ndash; is what the *METACLASS* of condition types is. <br/>Condition types may be "CLOS classes" without being STANDARD-CLASSes Condition objects may be "CLOS instances" without being <a class="type-reference" href="../chapter-4.xhtml#type-standard-object">STANDARD-OBJECT</a>s. Just what are "normal CLOS slots"?  As I see it, the "normalcy" or otherwise of slots is determined by the metaclass. <br/>My opinion for some time has been that condition types should not be STANDARD-CLASSes but instead something like READ-ONLY-CLASS. Conceptually, It Is An Error to modify the slots of condition objects, which are supposed to be immutable descriptions of part of the state of a computation.  Implementationally, <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-7.xhtml#function-slot-value">slot-value</a> <span class="syntax-interned-symbol">&lt;condition-object&gt;</span> <span class="syntax-interned-symbol">&lt;slot-name&gt;</span>)</span> <span class="syntax-interned-symbol">&lt;new-value&gt;</span>)</span>
</span></code> should signal an error. <br/>(I also think that conditions in particular have a strong need for something like :REQUIRED-INIT-KEYWORDS, but that's another story.) <br/>Even if you decide to make condition classes' metaclass <a class="type-reference" href="../chapter-4.xhtml#type-standard-class">STANDARD-CLASS</a>, the point is that you need to state this, so that users may define condition classes and mixins using <a class="macro-reference" href="../chapter-7.xhtml#macro-defclass">DEFCLASS</a>." <br/>"I do not agree that it is a -necessary<a class="function-reference" href="../chapter-12.xhtml#function--">-</a> thing to specify the Meta-Class of conditions because all intended uses of conditions can be done without this information. <br/>I agree that it is a -possibly useful<a class="function-reference" href="../chapter-12.xhtml#function--">-</a> thing to do, but there is a down side to it &ndash; it would unnecessarily tie the hands of people who want implementation flexibility for one reason or another." <br/>"... If we don't specify the metaclass, then users won't know what other classes they can mix in when defining condition classes.  It may seem weird, but I can imagine someone wanting to mix in an arbitrary class into a condition class. <br/>I think we should just say that the class <a class="type-reference" href="../chapter-9.xhtml#type-condition">CONDITION</a> is an instance of <a class="type-reference" href="../chapter-4.xhtml#type-standard-class">STANDARD-CLASS</a>, and that by default <a class="macro-reference" href="../chapter-9.xhtml#macro-define-condition">DEFINE-CONDITION</a> defines standard classes.  Sure it might be nice to do the read only class thing but I don't think this is a good time to design a special purpose metaclass for this.  " <br/><br/><br/>     &mdash;&ndash; End Forwarded Messages &mdash;&ndash; </section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>