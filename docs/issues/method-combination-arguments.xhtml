<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” METHOD-COMBINATION-ARGUMENTS</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">METHOD-COMBINATION-ARGUMENTS</span><br/><ol class="local-toc"><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit history">Edit history</a><ol> </ol></li><li><a href="#section-Problem description">Problem description</a><ol> </ol></li><li><a href="#issue-method-combination-arguments:clarify">Proposal CLARIFY</a><ol> </ol></li><li><a href="#section-Examples">Examples</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Current practice">Current practice</a><ol> </ol></li><li><a href="#section-Cost to Implementors">Cost to Implementors</a><ol> </ol></li><li><a href="#section-Cost to Users">Cost to Users</a><ol> </ol></li><li><a href="#section-Cost of non-adoption">Cost of non-adoption</a><ol> </ol></li><li><a href="#section-Performance impact">Performance impact</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Esthetics">Esthetics</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue METHOD-COMBINATION-ARGUMENTS [NIL] [CLARIFICATION]</h1><section id="section-References" class="section"><h2 class="section-title">References</h2>Draft ANSI <a class="package-reference" href="../chapter-11.xhtml#package-cl">CL</a> specification p.6-71 88-002R p.2-34 </section><section id="section-Edit history" class="section"><h2 class="section-title">Edit history</h2>29-Apr-90, Version 1 by Moon 30-Apr-90, Version 2 by Moon (rewrite more clearly) 1-May-90, Version 3 by Moon (minor wording improvements) 4-May-90, Version 4 by Moon (update current practice) 6-Jun-90, Version 5 by Moon (add <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-whole">&amp;WHOLE</a>, update current practice) 8-Jun-90, Version 6 by Moon (include one-word amendment to <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-whole">&amp;WHOLE</a> that was passed by X3J13 meeting) </section><section id="section-Problem description" class="section"><h2 class="section-title">Problem description</h2>  The :ARGUMENTS option to <a class="macro-reference" href="../chapter-7.xhtml#macro-define-method-combination">DEFINE-METHOD-COMBINATION</a> is not specified very   clearly.  In particular, different generic functions using the type of   method combination being defined might accept different argument   patterns, so the lambda-list in the :ARGUMENTS option is unlikely to be   congruent to the generic function's lambda-list; the behavior when they   are not congruent should be clearly specified.  Such mismatches often   occur in practice, as in the example on p.6-74 where the generic function   would typically have more than one argument. <br/>  88-002R says: <br/>    If lambda-list is not congruent to the generic function's lambda-list,     additional ignored parameters are automatically inserted until it is     congruent.  Thus it is permissible for lambda-list to receive fewer     arguments than the number that the generic function expects. <br/>  The current ANSI <a class="package-reference" href="../chapter-11.xhtml#package-cl">CL</a> draft says: <br/>    If the arguments supplied to the generic function do not match     lambda-list, extra arguments are ignored and missing arguments are     defaulted to nil.  Thus it is permissible for lambda-list to receive     fewer arguments than the number of required arguments for the generic     function. <br/>  This is Symbolics issue #10. <br/></section><section class="status-unknown proposal" id="issue-method-combination-arguments:clarify"><h2 class="section-title">Proposal CLARIFY</h2>  Replace the sentences quoted above with the following sentences.  Note   that these sentences immediately follow "When this form is evaluated   during execution of the effective method, its value is the corresponding   argument to the generic function." <br/>    This correspondence is computed by dividing the :ARGUMENTS lambda-list     and the generic function lambda-list into three sections: the required     parameters, the optional parameters, and the keyword/rest parameters.     The arguments supplied to the generic function for a particular call     are also divided into three sections; the required arguments section     contains as many arguments as the generic function has required     parameters, the optional arguments section contains as many arguments     as the generic function has optional parameters, and the keyword/rest     arguments section contains the remaining arguments.  Each parameter in     the required and optional sections of the :ARGUMENTS lambda-list     accesses the argument at the same position in the corresponding section     of the arguments.  If the section of the :ARGUMENTS lambda-list is     shorter, extra arguments are ignored.  If the section of the :ARGUMENTS     lambda-list is longer, excess required parameters are bound to forms     that evaluate to <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> and excess optional parameters are bound to their     initforms.  The keyword/rest parameters in the :ARGUMENTS lambda-list     access the keyword/rest section of the arguments.  If the :ARGUMENTS     lambda-list contains <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-key">&amp;KEY</a>, it behaves as if it also contained     <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-allow-other-keys">&amp;ALLOW-OTHER-KEYS</a>. <br/>    In addition, <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-whole">&amp;WHOLE</a> &lt;var&gt; can be placed first in the :ARGUMENTS     lambda-list.  It causes &lt;var&gt; to be bound to a form that evaluates to     a list of all of the arguments supplied to the generic function.  This     is different from <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-rest">&amp;REST</a> because it accesses all of the arguments, not     just the keyword/rest arguments. <br/></section><section id="section-Examples" class="section"><h2 class="section-title">Examples</h2><pre>  The example in both documents is:<br/><br/>    ;;; Example of the use of :arguments<br/>    <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-7.xhtml#macro-define-method-combination">define-method-combination</a> <span class="syntax-interned-symbol">progn-with-lock</span> <span class="syntax-symbol">()</span>
            <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">methods</span> <span class="syntax-symbol">()</span>)</span>)</span>
      <span class="syntax-cons">(<span class="syntax-keyword-symbol">:arguments</span> <span class="syntax-interned-symbol">object</span>)</span>
      <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-unwind-protect">unwind-protect</a>
           <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-progn">progn</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">lock</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">object-lock</span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">object</span></span>)</span>)</span>
                  <span class="syntax-unquote">,@<span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-mapcar">mapcar</a> <span class="syntax-function">#'<span class="syntax-cons">(<a class="macro-reference" href="../chapter-3.xhtml#macro-lambda">lambda</a> <span class="syntax-cons">(<a class="type-reference" href="../chapter-4.xhtml#type-method">method</a>)</span>
                                <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="macro-reference" href="../chapter-7.xhtml#macro-call-method">call-method</a> <span class="syntax-unquote">,<a class="type-reference" href="../chapter-4.xhtml#type-method">method</a></span>)</span></span>)</span></span>
                            <span class="syntax-interned-symbol">methods</span>)</span></span>)</span>
         <span class="syntax-cons">(<span class="syntax-interned-symbol">unlock</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">object-lock</span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">object</span></span>)</span>)</span>)</span></span>)</span>
</span></code></pre><br/><br/>  This would be used as follows:<br/><br/>    <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-7.xhtml#macro-defgeneric">defgeneric</a> <span class="syntax-interned-symbol">send</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">channel</span> <span class="syntax-interned-symbol">buffer</span> <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-optional">&amp;optional</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">start</span> <span class="syntax-number">0</span>)</span> <span class="syntax-interned-symbol">end</span>)</span>
      <span class="syntax-cons">(<span class="syntax-keyword-symbol">:method-combination</span> <span class="syntax-interned-symbol">progn-with-lock</span>)</span>)</span>
</span></code></pre><br/><br/>    where each channel class has an object-lock method.<br/><br/>  A variation that uses non-required arguments in :arguments is:<br/><br/>    <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-7.xhtml#macro-define-method-combination">define-method-combination</a> <span class="syntax-interned-symbol">progn-with-lock-2</span> <span class="syntax-symbol">()</span>
            <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">methods</span> <span class="syntax-symbol">()</span>)</span>)</span>
      <span class="syntax-cons">(<span class="syntax-keyword-symbol">:arguments</span> <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-key">&amp;key</a> <span class="syntax-interned-symbol">lock</span>)</span>
      <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-unwind-protect">unwind-protect</a>
          <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-progn">progn</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">lock</span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">lock</span></span>)</span>
                 <span class="syntax-unquote">,@<span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-mapcar">mapcar</a> <span class="syntax-function">#'<span class="syntax-cons">(<a class="macro-reference" href="../chapter-3.xhtml#macro-lambda">lambda</a> <span class="syntax-cons">(<a class="type-reference" href="../chapter-4.xhtml#type-method">method</a>)</span>
                               <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="macro-reference" href="../chapter-7.xhtml#macro-call-method">call-method</a> <span class="syntax-unquote">,<a class="type-reference" href="../chapter-4.xhtml#type-method">method</a></span>)</span></span>)</span></span>
                           <span class="syntax-interned-symbol">methods</span>)</span></span>)</span>
         <span class="syntax-cons">(<span class="syntax-interned-symbol">unlock</span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">lock</span></span>)</span>)</span></span>)</span>
</span></code></pre><br/><br/>  This would be used as follows:<br/><br/>    <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-7.xhtml#macro-defgeneric">defgeneric</a> <span class="syntax-interned-symbol">send</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">channel</span> <span class="syntax-interned-symbol">buffer</span>
                      <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-optional">&amp;optional</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">start</span> <span class="syntax-number">0</span>)</span> <span class="syntax-interned-symbol">end</span>
                      <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-key">&amp;key</a> <span class="syntax-interned-symbol">lock</span> <span class="syntax-interned-symbol">character-set-translation</span>)</span>
      <span class="syntax-cons">(<span class="syntax-keyword-symbol">:method-combination</span> <span class="syntax-interned-symbol">progn-with-lock-2</span>)</span>)</span>
</span></code></pre><br/><br/>  The :lock keyword argument comes from the third section of the arguments,<br/>  which for this generic function starts at the fourth argument.<br/><br/>  To show how lambda-list mismatch works:<br/><br/>    If <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-keyword-symbol">:ARGUMENTS</span> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span>)</span>
</span></code> meets <a class="macro-reference" href="../chapter-7.xhtml#macro-defgeneric">DEFGENERIC</a> <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span> <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-optional">&amp;optional</a> <span class="syntax-interned-symbol">z</span>)</span>
</span></code>, the value of<br/>    the value of C will be <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>, not the value of Z.<br/><br/>  To show the use of <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-whole">&amp;WHOLE</a>:<br/><br/>    <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-7.xhtml#macro-define-method-combination">define-method-combination</a> <span class="syntax-interned-symbol">progn-with-gf-lock</span> <span class="syntax-symbol">()</span>
            <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">methods</span> <span class="syntax-symbol">()</span>)</span>)</span>
      <span class="syntax-cons">(<span class="syntax-keyword-symbol">:arguments</span> <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-whole">&amp;whole</a> <span class="syntax-interned-symbol">args</span>)</span>
      <span class="syntax-cons">(<span class="syntax-keyword-symbol">:generic-function</span> <span class="syntax-interned-symbol">gf</span>)</span>
      <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-unwind-protect">unwind-protect</a>
           <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-progn">progn</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">lock-gf-args</span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">gf</span></span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">args</span></span>)</span> 
                  <span class="syntax-unquote">,@<span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-mapcar">mapcar</a> <span class="syntax-function">#'<span class="syntax-cons">(<a class="macro-reference" href="../chapter-3.xhtml#macro-lambda">lambda</a> <span class="syntax-cons">(<a class="type-reference" href="../chapter-4.xhtml#type-method">method</a>)</span>
                                <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="macro-reference" href="../chapter-7.xhtml#macro-call-method">call-method</a> <span class="syntax-unquote">,<a class="type-reference" href="../chapter-4.xhtml#type-method">method</a></span>)</span></span>)</span></span>
                            <span class="syntax-interned-symbol">methods</span>)</span></span>)</span>
         <span class="syntax-cons">(<span class="syntax-interned-symbol">unlock</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">unlock-gf-args</span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">gf</span></span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">args</span></span>)</span>)</span>)</span></span>)</span>
</span></code></pre><br/><br/></pre></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>  This seems the only useful way to allow <a class="constant-reference" href="../chapter-5.xhtml#constant-lambda-list-keywords">lambda-list-keywords</a> in the   :ARGUMENTS lambda-list while solving the congruency problems.  It's likely   that this is not a change from what was originally intended, but just a   more precise way of describing it.  The examples show why both <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-whole">&amp;WHOLE</a> and   <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-rest">&amp;REST</a> are needed; using <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-rest">&amp;REST</a> in the progn-with-gf-lock example is not   consistent with using <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-key">&amp;KEY</a> in the progn-with-lock-2 example. <br/></section><section id="section-Current practice" class="section"><h2 class="section-title">Current practice</h2>  Symbolics Genera 8.0.1 <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">to</span> <span class="syntax-interned-symbol">be</span> <span class="syntax-interned-symbol">released</span> <span class="syntax-interned-symbol">in</span> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">few</span> <span class="syntax-interned-symbol">months</span>)</span>
</span></code> will implement the   proposal, possibly omitting <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-whole">&amp;WHOLE</a>.  In Symbolics Genera 8.0 the :ARGUMENTS   option to <a class="macro-reference" href="../chapter-7.xhtml#macro-define-method-combination">DEFINE-METHOD-COMBINATION</a> does not work at all <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">it</span> <span class="syntax-interned-symbol">produces</span>
  <span class="syntax-interned-symbol">incorrect</span> <span class="syntax-interned-symbol">code</span> <span class="syntax-interned-symbol">that</span> <span class="syntax-interned-symbol">does</span> <a class="function-reference" href="../chapter-5.xhtml#function-not">not</a> <a class="function-reference" href="../chapter-3.xhtml#function-compile">compile</a>)</span>
</span></code></pre>. <br/>  TI Explorer release 6 has :ARGUMENTS in <a class="macro-reference" href="../chapter-7.xhtml#macro-define-method-combination">DEFINE-METHOD-COMBINATION</a>, but   its status relative to the proposed clarification is unknown at present. <br/>  Recent versions of PCL support :ARGUMENTS in <a class="macro-reference" href="../chapter-7.xhtml#macro-define-method-combination">DEFINE-METHOD-COMBINATION</a>   but do not seem to conform to the proposal &ndash; I think PCL just   effectively appends "&amp;rest ignore" to the :arguments lambda-list. <br/>  I did not discover any other CLOS implementations that support   :ARGUMENTS. <br/></section><section id="section-Cost to Implementors" class="section"><h2 class="section-title">Cost to Implementors</h2>  This does not make supporting :ARGUMENTS more difficult. <br/></section><section id="section-Cost to Users" class="section"><h2 class="section-title">Cost to Users</h2>  None. <br/></section><section id="section-Cost of non-adoption" class="section"><h2 class="section-title">Cost of non-adoption</h2>  :ARGUMENTS will be specified in a way that can't be understood. <br/></section><section id="section-Performance impact" class="section"><h2 class="section-title">Performance impact</h2>  None. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>  :ARGUMENTS will be usable in the relatively rare circumstances where it   is needed. <br/></section><section id="section-Esthetics" class="section"><h2 class="section-title">Esthetics</h2>  A specification that can be understood is more esthetic than one that   cannot be. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>  None. </section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>