<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” FLOAT-UNDERFLOW</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">FLOAT-UNDERFLOW</span><br/><ol class="local-toc"><li><a href="#section-Status">Status</a><ol> </ol></li><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit history">Edit history</a><ol> </ol></li><li><a href="#section-Problem description">Problem description</a><ol> </ol></li><li><a href="#issue-float-underflow:add-controls">Proposal ADD-CONTROLS</a><ol> </ol></li><li><a href="#section-Example">Example</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Current practice">Current practice</a><ol> </ol></li><li><a href="#section-Cost to Implementors">Cost to Implementors</a><ol> </ol></li><li><a href="#section-Cost to Users">Cost to Users</a><ol> </ol></li><li><a href="#section-Cost of non-adoption">Cost of non-adoption</a><ol> </ol></li><li><a href="#section-Performance impact">Performance impact</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Esthetics">Esthetics</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue FLOAT-UNDERFLOW [NIL] [ADDITION and CLARIFICATION]</h1><h2>Related issues</h2><ul><span class="issue-reference error">issue:LEAST-POSITIVE-SINGLE-FLOAT-NORMALIZATION</span><span class="issue-reference error">issue:ERROR-CHECKING-IN-NUMBERS-CHAPTER</span></ul><section id="section-Status" class="status-passed section"><h2 class="section-title">Status</h2>Parts 1 and 2 of this proposal (<a class="proposal-reference" href="#issue-float-underflow:add-controls">ADD-CONTROLS</a>) passed Jun89 X3J13. (Parts 3,4,5 tabled "indefinitely") </section><section id="section-References" class="section"><h2 class="section-title">References</h2>CLtL p.231 </section><section id="section-Edit history" class="section"><h2 class="section-title">Edit history</h2>Version 1, 9-May-89, by Moon (suggested in January, but the writeup was late) Version 2, 23-May-89, by Moon (final cleanup for post-CLtL changes to Common Lisp) Version 3, 18-Jun-89, by Moon (update based on discussion within the cleanup subcommittee) </section><section id="section-Problem description" class="section"><h2 class="section-title">Problem description</h2>  In implementations with denormalized floating point numbers <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">as</span> <span class="syntax-interned-symbol">in</span> <span class="syntax-interned-symbol">IEEE</span>
  <span class="syntax-interned-symbol">floating</span> <span class="syntax-interned-symbol">point</span>)</span>
</span></code></pre>, which are closer to zero than any non-zero normalized   floating point numbers, should the LEAST-POSITIVE- and   MOST-POSITIVE-XXX-FLOAT constants be the normalized or denormalized   values?  Which is preferred depends on the application.  Note that in   IEEE floating point, denormalized results are normally only produced   as a result of underflow. <br/>  Also, there is no portable way to control what happens when a floating   point number underflows.  Sometimes this is an error, sometimes not.   Indeed there is no mention at all of underflow or overflow in CLtL.   Pending <span class="issue-reference error">issue:Issue ERROR-CHECKING-IN-NUMBERS-CHAPTER</span> does not mention floating   point overflow or underflow.  Draft ANSI Common Lisp specifies error   conditions named <a class="type-reference" href="../chapter-12.xhtml#type-floating-point-overflow">floating-point-overflow</a> and <a class="type-reference" href="../chapter-12.xhtml#type-floating-point-underflow">floating-point-underflow</a>   but does not specify the circumstances in which they are signalled and   does not provide any way to suppress underflow checking. <br/></section><section class="status-unknown proposal" id="issue-float-underflow:add-controls"><h2 class="section-title">Proposal ADD-CONTROLS</h2><ol><li> Clarify that the existing LEAST-POSITIVE-XXX-FLOAT and LEAST-NEGATIVE-XXX-FLOAT constants are literally as defined, and therefore can be denormalized numbers in implementations that have denormalized numbers. <br/></li><li> Add the following constants, whose values are the normalized floating point numbers closest in value to <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">but</span> <a class="function-reference" href="../chapter-5.xhtml#function-not">not</a> <a class="function-reference" href="../chapter-5.xhtml#function-equal">equal</a> <span class="syntax-interned-symbol">to</span>)</span>
</span></code></pre> zero.  In implementations that don't have denormalized numbers, the values of these constants are the same as the values of the other constants. <br/>  <a class="constant-reference" href="../chapter-12.xhtml#constant-least-negative-normalized-double-float">least-negative-normalized-double-float</a> [Constant]   <a class="constant-reference" href="../chapter-12.xhtml#constant-least-negative-normalized-long-float">least-negative-normalized-long-float</a> [Constant]   <a class="constant-reference" href="../chapter-12.xhtml#constant-least-negative-normalized-short-float">least-negative-normalized-short-float</a> [Constant]   <a class="constant-reference" href="../chapter-12.xhtml#constant-least-negative-normalized-single-float">least-negative-normalized-single-float</a> [Constant]   <a class="constant-reference" href="../chapter-12.xhtml#constant-least-positive-normalized-double-float">least-positive-normalized-double-float</a> [Constant]   <a class="constant-reference" href="../chapter-12.xhtml#constant-least-positive-normalized-long-float">least-positive-normalized-long-float</a> [Constant]   <a class="constant-reference" href="../chapter-12.xhtml#constant-least-positive-normalized-short-float">least-positive-normalized-short-float</a> [Constant]   <a class="constant-reference" href="../chapter-12.xhtml#constant-least-positive-normalized-single-float">least-positive-normalized-single-float</a> [Constant] <br/></li><li> Add the following macro: </li></ol><br/>  WITHOUT-FLOATING-UNDERFLOW-TRAPS &amp;body body                   [Macro] <br/>    Within the dynamic extent of the body, the result of a floating point     computation which would otherwise underflow is a denormalized number     <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-interned-symbol">they</span> <span class="syntax-interned-symbol">are</span> <span class="syntax-interned-symbol">supported</span> <span class="syntax-interned-symbol">in</span> <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <span class="syntax-interned-symbol">implementation</span>)</span>
</span></code></pre> or zero, whichever is     closest to the mathematical result. <br/>    The values of WITHOUT-FLOATING-UNDERFLOW-TRAPS are the values of the     last body form, or <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> if there are no body forms. <br/>  4. Clarify that outside the dynamic extent of   WITHOUT-FLOATING-UNDERFLOW-TRAPS, a floating point computation that   underflows should signal an error of type <a class="type-reference" href="../chapter-12.xhtml#type-floating-point-underflow">floating-point-underflow</a>.  A   result that can only be represented in denormalized form is considered an   underflow in implementations that support denormalized floating point   numbers. <br/>  5. Clarify that a floating point computation that overflows should signal   an error of type <a class="type-reference" href="../chapter-12.xhtml#type-floating-point-overflow">floating-point-overflow</a>. <br/></section><section id="section-Example" class="section"><h2 class="section-title">Example</h2><pre>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-not">not</a> <span class="syntax-interned-symbol">portable</span> <span class="syntax-interned-symbol">of</span> <span class="syntax-interned-symbol">course</span>)</span>
</span></code></pre><br/><br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-expt">expt</a> <span class="syntax-number">0.1</span> <span class="syntax-number">40</span>)</span>
</span></code></pre> <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; <a class="type-reference" href="../chapter-12.xhtml#type-floating-point-underflow">floating-point-underflow</a> error<br/><br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-25.xhtml#function-describe">describe</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">without-floating-underflow-traps</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-expt">expt</a> <span class="syntax-number">0.1</span> <span class="syntax-number">40</span>)</span>)</span>)</span>
</span></code></pre> <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; <br/><ol><li>0e-40 is a single-precision floating-point number.<br/>Sign 0, exponent 0, 23-bit fraction 213302 <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">denormalized</span>)</span>
</span></code></pre><br/><br/></li></ol></pre></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>  The ANSI Common Lisp standard should be compatible with the widely used   IEEE Floating Point standard. <br/>  WITHOUT-FLOATING-UNDERFLOW-TRAPS is provided as a macro to allow   implementation flexibility.  It could expand into <a class="macro-reference" href="../chapter-9.xhtml#macro-handler-bind">handler-bind</a> for   <a class="type-reference" href="../chapter-12.xhtml#type-floating-point-underflow">floating-point-underflow</a>, but in most implementations it will probably   expand into <a class="glossary-reference" href="../chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a> code that sets a hardware mode bit. <br/>  Specifying "should signal" rather than "signals" or "might signal" for   floating-point overflows and underflows seems the best balance between   safety and implementation freedom.  It wouldn't harm the proposal to   change it to one of the other two phrases. <br/></section><section id="section-Current practice" class="section"><h2 class="section-title">Current practice</h2>  The proposal exactly matches Symbolics Genera release 7 except for   the names of the conditions. <br/>  Lucid Common Lisp 3.0 implements parts 1, 2, 4, and 5 of the proposal.   Instead of point 3 of the proposal, Lucid Common Lisp 3.0 has a macro   <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">WITH-FLOATING-POINT-TRAPS</span> <span class="syntax-interned-symbol">enable-condition-list</span> <span class="syntax-interned-symbol">disable-condition-list</span>
  <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-body">&amp;BODY</a> <span class="syntax-interned-symbol">body</span>)</span>
</span></code></pre> that enables and disables a variety of floating-point-related   conditions, a function ENABLED-FLOATING-POINT-TRAPS that returns a list   of condition names, a constant SUPPORTED-FLOATING-POINT-CONDITIONS whose   value is a list of condition names, and several additional condition   names (the exact set of condition names varies, depending on the   hardware). <br/></section><section id="section-Cost to Implementors" class="section"><h2 class="section-title">Cost to Implementors</h2>  Adding the constants and the macro is easy.  Since it was never clarified   that floating point underflow is to be detected in safe code, implementors   who had not already implemented that might have to go to some expense.   In the laissez-faire spirit of floating point in Common Lisp, we could   relax the specification and say only that underflow might signal rather   than should signal. <br/></section><section id="section-Cost to Users" class="section"><h2 class="section-title">Cost to Users</h2>  None. <br/></section><section id="section-Cost of non-adoption" class="section"><h2 class="section-title">Cost of non-adoption</h2>  Each Common Lisp implementation that uses IEEE Floating Point will have   to invent its own way to deal with underflow and denormalized numbers. <br/></section><section id="section-Performance impact" class="section"><h2 class="section-title">Performance impact</h2>  No effect on code optimized for speed rather than safety. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>  Increased portability and correctness of floating point code. <br/></section><section id="section-Esthetics" class="section"><h2 class="section-title">Esthetics</h2>  Neutral. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>  Maybe point 3 of the proposal should be replaced by the more complex   feature from Lucid.  This would allow re-enabling underflow checking   after it had been disabled, and would allow control over other traps such   as overflow and inexact result.  Moon would prefer to keep it simple,   but if others support the more general mechanism, he can accept it.   If the group cannot agree on this, Moon suggests dropping point 3 from   the proposal and passing points 1, 2, 4, and 5. </section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>