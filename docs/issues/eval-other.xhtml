<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp — EVAL-OTHER</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">EVAL-OTHER</span><br/><ol class="local-toc"><li><a href="#section-Status">Status</a><ol> </ol></li><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit history">Edit history</a><ol> </ol></li><li><a href="#section-Problem Description">Problem Description</a><ol> </ol></li><li><a href="#issue-eval-other:self-evaluate">Proposal SELF-EVALUATE</a><ol> </ol></li><li><a href="#section-Test Case">Test Case</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Current Practice">Current Practice</a><ol> </ol></li><li><a href="#section-Cost to Implementors">Cost to Implementors</a><ol> </ol></li><li><a href="#section-Cost to Users">Cost to Users</a><ol> </ol></li><li><a href="#section-Cost of Non-Adoption">Cost of Non-Adoption</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Aesthetics">Aesthetics</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue EVAL-OTHER [NIL] [ADDITION/CLARIFICATION]</h1><section id="section-Status" class="status-passed section"><h2 class="section-title">Status</h2>Passed, Oct-88 </section><section id="section-References" class="section"><h2 class="section-title">References</h2>5.1.1 Self-Evaluating Forms (p55) </section><section id="section-Edit history" class="section"><h2 class="section-title">Edit history</h2>07-Mar-88, Version 1 by Pitman 8-Jun-88, Version 2 by Masinter (correct typo, add to discussion) </section><section id="section-Problem Description" class="section"><h2 class="section-title">Problem Description</h2>  CLtL does not specify what the evaluation behavior of some data types. <br/></section><section class="status-passed proposal" id="issue-eval-other:self-evaluate"><h2 class="section-title">Proposal SELF-EVALUATE</h2>  Standard data types (those mentioned by CLtL) other than those for which   a more explicit evaluation rule exists would be defined to <a class="proposal-reference" href="#issue-eval-other:self-evaluate">SELF-EVALUATE</a>.   Such data types include, for example, structures, arrays, vectors, and   pathnames. <br/>  Structure types defined by users using <a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">defstruct</a> should also <a class="proposal-reference" href="#issue-eval-other:self-evaluate">SELF-EVALUATE</a>   unless an explicit implementation type for the structure is given in the   <a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">defstruct</a>, in which case the rule for evaluation of that type should be   used. (This is important in the case of type <a class="function-reference" href="../chapter-14.xhtml#function-list">list</a>.) <br/></section><section id="section-Test Case" class="section"><h2 class="section-title">Test Case</h2><pre>  <code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">TEMP</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-make-pathname">make-pathname</a>)</span>)</span>)</span>  <span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-eq">eq</a> <span class="syntax-interned-symbol">TEMP</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-3.xhtml#function-eval">eval</a> <span class="syntax-interned-symbol">TEMP</span>)</span>)</span>)</span>
</span></code> <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a><br/>  <code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">TEMP</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-15.xhtml#function-make-array">make-array</a> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>)</span>)</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-eq">eq</a> <span class="syntax-interned-symbol">TEMP</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-3.xhtml#function-eval">eval</a> <span class="syntax-interned-symbol">TEMP</span>)</span>)</span>)</span>
</span></code> <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a><br/><br/></pre></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>  There are numerous possible positions that could be taken, from   requiring that an error be signalled for all of these cases to   requiring that these all have some useful behavior. <br/>  By making implementations agree, code portability is enhanced.   By biasing the decision away from the "signal   an error" end of the choice spectrum, the least interruption is   caused to implementations which already have working code. <br/>  There is still some chance that implementations will have some other   behavior than either signalling an error or self-evaluating, but there   are probably few if any. <br/></section><section id="section-Current Practice" class="section"><h2 class="section-title">Current Practice</h2>  In many implementations, the other data types besides those mentioned in   CLtL will <a class="proposal-reference" href="#issue-eval-other:self-evaluate">SELF-EVALUATE</a>. <br/></section><section id="section-Cost to Implementors" class="section"><h2 class="section-title">Cost to Implementors</h2>  The cost is probably small. This is probably an "upward compatible"   change for most or all implementations &ndash; a few lines of change in the   interpreter and/or compiler. Some code walkers may be affected as well. <br/></section><section id="section-Cost to Users" class="section"><h2 class="section-title">Cost to Users</h2>  None, if they are not exploiting <a class="glossary-reference" href="../chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a> features of   some implementation that is being forced to make an incompatible change. <br/>  There should be no performance impact since the evaluator's test for these   new data types can simply be made to follow other tests already in place,   so existing code will not be slowed. <br/></section><section id="section-Cost of Non-Adoption" class="section"><h2 class="section-title">Cost of Non-Adoption</h2>  Implementations will continue to differ in this relatively   user-visible way. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>  Portability will be enhanced because implementations will tend to agree   in places where they have traditionally not always agreed. <br/></section><section id="section-Aesthetics" class="section"><h2 class="section-title">Aesthetics</h2>  Some fans of 3<a class="package-reference" href="../chapter-A.xhtml#package-lisp">lisp</a> may find this invasive to their sense of distinction   between objects and the notation used to describe objects. In general,   however, this is a fairly picky detail that is not likely to trouble the   average programmer. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>This idea for this proposal was suggested by the Japanese community. Pitman drafted the formal proposal and supports <a class="issue-reference" href="#issue-eval-other:self-evaluate">EVAL-OTHER:SELF-EVALUATE</a>. <br/>Fahlman: "... I do remember the original design discussions.  It was proposed that everything but lists and symbols evaluate to themselves, but at the time <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">this</span> <span class="syntax-interned-symbol">was</span> <span class="syntax-interned-symbol">quite</span> <span class="syntax-interned-symbol">early</span> <span class="syntax-interned-symbol">in</span> <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <span class="syntax-interned-symbol">process</span>)</span>
</span></code> some people felt that this might close out interesting parts of the design space that might turn out to be useful for something.  This hasn't happened, and I think it would be reasonable to close this door now.  Some users do find it confusing that you have to quote vectors but not strings." <br/>There has been some additional discussion of this proposal (for example, an explaination of why a similar proposal in Scheme might be a bad design.) </section></div></main><footer>Copyright © 2021 Jan Moringen</footer></body></html>