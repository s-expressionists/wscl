<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” DATA-IO</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">DATA-IO</span><br/><ol class="local-toc"><li><a href="#section-Status">Status</a><ol> </ol></li><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit history">Edit history</a><ol> </ol></li><li><a href="#section-Problem description">Problem description</a><ol> </ol></li><li><a href="#issue-data-io:add-support">Proposal ADD-SUPPORT</a><ol> </ol></li><li><a href="#section-Examples">Examples</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Current practice">Current practice</a><ol> </ol></li><li><a href="#section-Cost to Implementors">Cost to Implementors</a><ol> </ol></li><li><a href="#section-Cost to Users">Cost to Users</a><ol> </ol></li><li><a href="#section-Cost of non-adoption">Cost of non-adoption</a><ol> </ol></li><li><a href="#section-Performance impact">Performance impact</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Esthetics">Esthetics</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue DATA-IO [NIL] [ADDITION]</h1><h2>Related issues</h2><ul><span class="issue-reference error">issue:CONSTANT-COMPILABLE-TYPES</span></ul><section id="section-Status" class="status-passed section"><h2 class="section-title">Status</h2>Passed, Jun 89 X3J13 </section><section id="section-References" class="section"><h2 class="section-title">References</h2>CLtL pp.360, 370, 382 </section><section id="section-Edit history" class="section"><h2 class="section-title">Edit history</h2>Version 1,  9-May-89, by Moon Version 2, 10-May-89, by Moon (clarify ambiguities, add <a class="macro-reference" href="../chapter-22.xhtml#macro-print-unreadable-object">print-unreadable-object</a>) Version 3, 18-May-89, by Moon (respond to KMP's comments) Version 4, 21-May-89, by Moon (almost-final cleanup) Version 5, 22-May-89, by Pitman (``never say never'') Version 6, 23-May-89, by Moon (final cleanup) Version 7, 18-Jun-89, by Moon (more fixes based on discussion in the cleanup subcommittee) Version 8, 23-Jun-89, by Moon (fixes based on discussion) </section><section id="section-Problem description" class="section"><h2 class="section-title">Problem description</h2>  Storing data in textual form in files, as Lisp expressions, is common   practice but has some pitfalls.  Files can be unreadable if #&lt;...&gt; syntax   is written by the printer, or if the reader syntax or package varies   between writing and reading.  Files of data intended to be carried from   one Lisp implementation to another can fail to read correctly if   <a class="glossary-reference" href="../chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a> syntax extensions get used when not intended. <br/>  CLtL p.370 recommends that unreadable objects be printed with #&lt;...&gt;   syntax including <a class="glossary-reference" href="../chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a> information.  Now that users   can write their own <a class="function-reference" href="../chapter-22.xhtml#function-print-object">print-object</a> methods, a way is needed for such   methods to print this syntax without any <a class="glossary-reference" href="../chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a> coding. <br/></section><section class="status-passed proposal" id="issue-data-io:add-support"><h2 class="section-title">Proposal ADD-SUPPORT</h2>  1a. Add a new variable <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-readably*">*print-readably*</a>.  Add a corresponding keyword   argument :READABLY to <a class="function-reference" href="../chapter-22.xhtml#function-write">write</a>.  The default value of <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-readably*">*print-readably*</a> is   <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>.  If <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-readably*">*print-readably*</a> is true, then printing any object produces a   printed representation that the reader will accept.  The reader will   produce an object that is "similar as a constant" to the object that   was printed.  The term "similar as a constant" is defined in the   already accepted compiler <span class="issue-reference error">issue:Issue CONSTANT-COMPILABLE-TYPES:SPECIFY</span>. <br/>  If <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-readably*">*print-readably*</a> is true and printing a readable printed   representation is not possible, the printer signals an error of type   <a class="type-reference" href="../chapter-22.xhtml#type-print-not-readable">print-not-readable</a> rather than using an unreadable syntax such as #&lt;...&gt;.   The printed representation produced when <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-readably*">*print-readably*</a> is true might   or might not be the same as the printed representation produced when   <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-readably*">*print-readably*</a> is false. <br/>  1b. All methods for <a class="function-reference" href="../chapter-22.xhtml#function-print-object">print-object</a> must obey <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-readably*">*print-readably*</a>.  This   includes both user-defined methods and <a class="glossary-reference" href="../chapter-26.xhtml#glossary-implementation-defined">implementation-defined</a> methods. <br/>  1c. If <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-readably*">*print-readably*</a> is true and another printer control variable   (<a class="variable-reference" href="../chapter-22.xhtml#variable-*print-length*">*print-length*</a>, <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-level*">*print-level*</a>, <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-escape*">*print-escape*</a>, <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-gensym*">*print-gensym*</a>,   <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-array*">*print-array*</a>, or an <a class="glossary-reference" href="../chapter-26.xhtml#glossary-implementation-defined">implementation-defined</a> printer control variable)   would cause the requirements of point 1a to be violated, that other   printer control variable is ignored. <br/>  1d. The printing of interned symbols is not affected by <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-readably*">*print-readably*</a>,   regardless of the outcome of <span class="issue-reference error">issue:Issue COMPILE-FILE-SYMBOL-HANDLING</span>   <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">referenced</span> <span class="syntax-interned-symbol">by</span> <span class="syntax-interned-symbol">issue</span> <span class="syntax-interned-symbol">CONSTANT-COMPILABLE-TYPES</span>)</span>
</span></code>. <br/>  1e. Note that the "similar as a constant" rule for readable printing   implies that #A or #( syntax cannot be used for arrays of element-type   other than <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>.  An implementation will have to use another syntax or   signal a <a class="type-reference" href="../chapter-22.xhtml#type-print-not-readable">print-not-readable</a> error.  A <a class="type-reference" href="../chapter-22.xhtml#type-print-not-readable">print-not-readable</a> error will not   be signalled for strings or bit-vectors. <br/>  1f. Readable printing of structures and standard-objects is controlled   by their <a class="function-reference" href="../chapter-22.xhtml#function-print-object">print-object</a> method, not by their <a class="function-reference" href="../chapter-7.xhtml#function-make-load-form">make-load-form</a> method.   "Similarity as a constant" for these objects is application dependent   and hence is defined to be whatever these methods do. <br/>  2. Add a new reader control variable, <a class="symbol-reference" href="../chapter-2.xhtml#symbol-*read-eval*">*read-eval*</a>, whose default value is   <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>.  If <a class="symbol-reference" href="../chapter-2.xhtml#symbol-*read-eval*">*read-eval*</a> is <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>, the #. reader macro signals an error.  If   <a class="symbol-reference" href="../chapter-2.xhtml#symbol-*read-eval*">*read-eval*</a> is false and <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-readably*">*print-readably*</a> is true, any <a class="function-reference" href="../chapter-22.xhtml#function-print-object">print-object</a>   method that would output a #. reader macro either outputs something   different or signals an error of type <a class="type-reference" href="../chapter-22.xhtml#type-print-not-readable">print-not-readable</a>. <br/>  3. Add a new macro: <br/>  <a class="macro-reference" href="../chapter-23.xhtml#macro-with-standard-io-syntax">with-standard-io-syntax</a> &amp;body body                             [Macro] <br/>    Within the dynamic extent of &lt;body&gt;, all reader/printer control     variables, including any <a class="glossary-reference" href="../chapter-26.xhtml#glossary-implementation-defined">implementation-defined</a> ones not specified by     Common Lisp, are bound to values that produce standard read/print     behavior.  The values for Common Lisp specified variables are: <br/>      <a class="variable-reference" href="../chapter-11.xhtml#variable-*package*">*package*</a>                            The <a class="package-reference" href="../chapter-A.xhtml#package-user">user</a> package       <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-array*">*print-array*</a>                        <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>       <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-base*">*print-base*</a>                         10       <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-case*">*print-case*</a>                         :UPCASE       <a class="symbol-reference" href="../chapter-2.xhtml#symbol-*print-circle*">*print-circle*</a>                       <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>       <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-escape*">*print-escape*</a>                       <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>       <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-gensym*">*print-gensym*</a>                       <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>       <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-length*">*print-length*</a>                       <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>       <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-level*">*print-level*</a>                        <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>       <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-pretty*">*print-pretty*</a>                       <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>       <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-radix*">*print-radix*</a>                        <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>       <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-readably*">*print-readably*</a>                     <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>       <a class="symbol-reference" href="../chapter-2.xhtml#symbol-*read-base*">*read-base*</a>                          10       <a class="variable-reference" href="../chapter-23.xhtml#variable-*read-default-float-format*">*read-default-float-format*</a>          <a class="type-reference" href="../chapter-12.xhtml#type-single-float">single-float</a>       <a class="symbol-reference" href="../chapter-2.xhtml#symbol-*read-eval*">*read-eval*</a>                          <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>       <a class="variable-reference" href="../chapter-23.xhtml#variable-*read-suppress*">*read-suppress*</a>                      <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>       <a class="variable-reference" href="../chapter-23.xhtml#variable-*readtable*">*readtable*</a>                          The standard readtable <br/>    The values returned by <a class="macro-reference" href="../chapter-23.xhtml#macro-with-standard-io-syntax">with-standard-io-syntax</a> are the values     of the last body form, or <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> if there are no body forms. <br/>  4. Add a new macro: <br/>  <a class="macro-reference" href="../chapter-22.xhtml#macro-print-unreadable-object">print-unreadable-object</a> <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">object</span> <a class="type-reference" href="../chapter-21.xhtml#type-stream">stream</a> <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-key">&amp;KEY</a> <a class="symbol-reference" href="../chapter-25.xhtml#symbol-type">type</a> <a class="function-reference" href="../chapter-5.xhtml#function-identity">identity</a>)</span>
</span></code>      [Macro]                            &amp;body body <br/>    Output a printed representation of &lt;object&gt; on &lt;stream&gt;, beginning with     "#&lt;" and ending with "&gt;".  Everything output to &lt;stream&gt; by the &lt;body&gt;     forms is enclosed in the angle brackets.  If :type is true, the body     output is preceded by a brief description of the object's type and a     space character.  If :identity is true, the body output is followed by     a space character and a representation of the object's identity,     typically a storage address. <br/>    If <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-readably*">*print-readably*</a> is true, <a class="macro-reference" href="../chapter-22.xhtml#macro-print-unreadable-object">print-unreadable-object</a> signals an error     of type <a class="type-reference" href="../chapter-22.xhtml#type-print-not-readable">print-not-readable</a> without printing anything. <br/>    The &lt;object&gt;, &lt;stream&gt;, :type, and :identity arguments are all evaluated     normally.  :type and :identity default to false.  It is valid to omit     the &lt;body&gt; forms.  If :type and :identity are both true and there are no     &lt;body&gt; forms, only one space character separates the type and the identity. <br/>    The value returned by <a class="macro-reference" href="../chapter-22.xhtml#macro-print-unreadable-object">print-unreadable-object</a> is <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>. <br/>  5. Add a new condition type: <br/>  <a class="type-reference" href="../chapter-22.xhtml#type-print-not-readable">print-not-readable</a>                                             [Type] <br/>    Errors which occur during output while <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-readably*">*print-readably*</a> is true, as a     result of attempting to output a printed representation that cannot be     read back, should inherit from this type.  This is a subtype of <a class="function-reference" href="../chapter-9.xhtml#function-error">error</a>.     The init keyword :OBJECT is supported to initialize the slot containing     the object being printed, which can be accessed using     <a class="function-reference" href="../chapter-22.xhtml#function-print-not-readable-object">print-not-readable-object</a>. <br/></section><section id="section-Examples" class="section"><h2 class="section-title">Examples</h2><pre>  ;; Example #1: Reliable Write-Read<br/><br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-21.xhtml#macro-with-open-file">with-open-file</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">FILE</span> <a class="function-reference" href="../chapter-19.xhtml#function-pathname">pathname</a> <span class="syntax-keyword-symbol">:DIRECTION</span> <span class="syntax-keyword-symbol">:OUTPUT</span>)</span>
    <span class="syntax-cons">(<a class="macro-reference" href="../chapter-23.xhtml#macro-with-standard-io-syntax">with-standard-io-syntax</a>
      <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-print">print</a> <span class="syntax-interned-symbol">DATA</span> <span class="syntax-interned-symbol">FILE</span>)</span>)</span>)</span>
</span></code></pre><br/><br/>  ; ... Later, in another Lisp:<br/><br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-21.xhtml#macro-with-open-file">with-open-file</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">FILE</span> <a class="function-reference" href="../chapter-19.xhtml#function-pathname">pathname</a> <span class="syntax-keyword-symbol">:DIRECTION</span> <span class="syntax-keyword-symbol">:INPUT</span>)</span>
    <span class="syntax-cons">(<a class="macro-reference" href="../chapter-23.xhtml#macro-with-standard-io-syntax">with-standard-io-syntax</a>
      <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">DATA</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-23.xhtml#function-read">read</a> <span class="syntax-interned-symbol">FILE</span>)</span>)</span>)</span>)</span>
</span></code></pre><br/><br/>  ;; Example #2: Use of <a class="macro-reference" href="../chapter-22.xhtml#macro-print-unreadable-object">print-unreadable-object</a><br/>  ;; Note that in this example, the precise form of the output<br/>  ;; is really <a class="glossary-reference" href="../chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a>.<br/><br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-7.xhtml#macro-defmethod">defmethod</a> <a class="function-reference" href="../chapter-22.xhtml#function-print-object">print-object</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">OBJ</span> <span class="syntax-interned-symbol">AIRPLANE</span>)</span> <a class="type-reference" href="../chapter-21.xhtml#type-stream">stream</a>)</span>
    <span class="syntax-cons">(<a class="macro-reference" href="../chapter-22.xhtml#macro-print-unreadable-object">print-unreadable-object</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">OBJ</span> <a class="type-reference" href="../chapter-21.xhtml#type-stream">stream</a> <span class="syntax-keyword-symbol">:TYPE</span> <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> <span class="syntax-keyword-symbol">:IDENTITY</span> <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>)</span>
      <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-princ">princ</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">TAIL-NUMBER</span> <span class="syntax-interned-symbol">OBJ</span>)</span> <a class="type-reference" href="../chapter-21.xhtml#type-stream">stream</a>)</span>)</span>)</span>
</span></code></pre><br/><br/>  <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-print">print</a> <span class="syntax-interned-symbol">MY-AIRPLANE</span>)</span>
</span></code><br/>  #&lt;Airplane NW0773 36000123135&gt;        ;in Implementation A<br/>  ;or<br/>  #&lt;<span class="issue-reference error">issue:FAA:AIRPLANE</span> NW0773 17&gt;             ;in Implementation B<br/><br/></pre></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2><ol><li> <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-readably*">*print-readably*</a> is important so that errors involving data with no readable printed representation are detected when writing the file, not later on when the file is read. <br/><a class="variable-reference" href="../chapter-22.xhtml#variable-*print-readably*">*print-readably*</a> is different from <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-escape*">*print-escape*</a> because output printed with escapes only has to be generally recognizable by humans, whereas output printed readably has to be reliably recognizable by computers. <br/></li><li> Binding <a class="symbol-reference" href="../chapter-2.xhtml#symbol-*read-eval*">*read-eval*</a> to <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> is useful when reading data that came from an untrusted source, such as a network or a user-supplied data file, to prevent the #. reader macro from being exploited as a "Trojan horse" to cause arbitrary forms to be evaluated. <br/></li><li> Providing the <a class="macro-reference" href="../chapter-23.xhtml#macro-with-standard-io-syntax">with-standard-io-syntax</a> macro to bind all the variables, instead of using <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a> and explicit bindings of the existing variables, ensures that nothing is overlooked and avoids problems with <a class="glossary-reference" href="../chapter-26.xhtml#glossary-implementation-defined">implementation-defined</a> reader/printer control variables. <br/>If the user wishes to use a non-standard value for some variable, such as <a class="variable-reference" href="../chapter-11.xhtml#variable-*package*">*package*</a> or <a class="symbol-reference" href="../chapter-2.xhtml#symbol-*read-eval*">*read-eval*</a>, it can be bound by <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a> inside the body of <a class="macro-reference" href="../chapter-23.xhtml#macro-with-standard-io-syntax">with-standard-io-syntax</a>.  Similarly, if the user dislikes the somewhat arbitrary choices of values for <a class="symbol-reference" href="../chapter-2.xhtml#symbol-*print-circle*">*print-circle*</a> and <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-pretty*">*print-pretty*</a>, they can be bound to the preferred values inside the body. <br/></li><li> <a class="macro-reference" href="../chapter-22.xhtml#macro-print-unreadable-object">print-unreadable-object</a> allows user-written PRINT-OBEJCT methods to adhere to implementation-specific style without requiring users to write <a class="glossary-reference" href="../chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a> code. <br/></li><li> Defining a specific condition type associated with <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-readably*">*print-readably*</a> makes it possible for programs to handle the condition and recognize the offending object. <br/></li></ol></section><section id="section-Current practice" class="section"><h2 class="section-title">Current practice</h2>  Symbolics Genera has had these features for many years, except with   different names.  For instance, <a class="macro-reference" href="../chapter-23.xhtml#macro-with-standard-io-syntax">with-standard-io-syntax</a> is named   WITH-STANDARD-IO-ENVIRONMENT and binds <a class="variable-reference" href="../chapter-11.xhtml#variable-*package*">*package*</a> to a non-standard   package.  The proposed new names are better than the Genera names. <br/>  Genera's WITH-STANDARD-IO-ENVIRONMENT also disables #., to prevent trojan   horses, since #. could evaluate an arbitrary form.  This is particularly   important for network protocols.  <a class="macro-reference" href="../chapter-23.xhtml#macro-with-standard-io-syntax">with-standard-io-syntax</a> does not bind   <a class="symbol-reference" href="../chapter-2.xhtml#symbol-*read-eval*">*read-eval*</a> to <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>, because that would prevent using #. in the printer   for common datatypes, which is current practice in some implementations   for printing <a class="function-reference" href="../chapter-19.xhtml#function-pathname">pathname</a>s or <a class="type-reference" href="../chapter-12.xhtml#type-random-state">random-state</a>s. <br/>  In Genera, <a class="macro-reference" href="../chapter-22.xhtml#macro-print-unreadable-object">print-unreadable-object</a> is called <span class="issue-reference error">issue:SYS:PRINTING-RANDOM-OBJECT</span>   and takes slightly different arguments. In PCL, <a class="macro-reference" href="../chapter-22.xhtml#macro-print-unreadable-object">print-unreadable-object</a>   is called <span class="issue-reference error">issue:PCL:PRINTING-RANDOM-THING</span>. <br/></section><section id="section-Cost to Implementors" class="section"><h2 class="section-title">Cost to Implementors</h2>  Very small, these features are all easy to add.  If #. is output by any   system-supplied print methods, they might want to invent a different   syntax, however that is not required by this proposal. <br/></section><section id="section-Cost to Users" class="section"><h2 class="section-title">Cost to Users</h2>  None if they don't use the feature.  Otherwise just the cost of   supporting <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-readably*">*print-readably*</a> or using <a class="macro-reference" href="../chapter-22.xhtml#macro-print-unreadable-object">print-unreadable-object</a> in their   <a class="function-reference" href="../chapter-22.xhtml#function-print-object">print-object</a> methods. <br/></section><section id="section-Cost of non-adoption" class="section"><h2 class="section-title">Cost of non-adoption</h2>  There will be no reliable, standard way to write data into a file. <br/></section><section id="section-Performance impact" class="section"><h2 class="section-title">Performance impact</h2>  Negligible.  Entering <a class="function-reference" href="../chapter-22.xhtml#function-write">write</a> may be slightly slower since there is   one more keyword argument to parse and one more special variable   to bind before calling <a class="function-reference" href="../chapter-22.xhtml#function-print-object">print-object</a>. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>  Data can be written into files reliably without resorting to   implementation-specific programming. <br/></section><section id="section-Esthetics" class="section"><h2 class="section-title">Esthetics</h2>  Mildly improved. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>  Pitman and Moon support this proposal. </section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>