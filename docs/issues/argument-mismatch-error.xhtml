<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” ARGUMENT-MISMATCH-ERROR</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">ARGUMENT-MISMATCH-ERROR</span><br/><ol class="local-toc"><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit history">Edit history</a><ol> </ol></li><li><a href="#section-Status">Status</a><ol> </ol></li><li><a href="#section-Problem description">Problem description</a><ol> </ol></li><li><a href="#issue-argument-mismatch-error:must-signal-when-safe-or-system">Proposal MUST-SIGNAL-WHEN-SAFE-OR-SYSTEM</a><ol> </ol></li><li><a href="#section-Examples">Examples</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Current practice">Current practice</a><ol> </ol></li><li><a href="#section-Cost to Implementors">Cost to Implementors</a><ol> </ol></li><li><a href="#section-Cost to Users">Cost to Users</a><ol> </ol></li><li><a href="#section-Cost of non-adoption">Cost of non-adoption</a><ol> </ol></li><li><a href="#section-Performance impact">Performance impact</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Aesthetics">Aesthetics</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue ARGUMENT-MISMATCH-ERROR [Cleanup] [CHANGE]</h1><section id="section-References" class="section"><h2 class="section-title">References</h2>ANSI <a class="package-reference" href="../chapter-11.xhtml#package-cl">cl</a> spec (Aug 29, 1989 draft) pp.4-11,4-12,4-13,4-15,1-10 88-002R p.1-26 (appears also on p.4-20 of ANSI <a class="package-reference" href="../chapter-11.xhtml#package-cl">cl</a> draft)  </section><section id="section-Edit history" class="section"><h2 class="section-title">Edit history</h2>1-Feb-90, Version 1 by Moon 9-May-90, Version 2 by Moon  (address another inconsistency, found by Kim Barrett) 30-Oct-90, Version 3 by Pitman  (first attempt to formalize X3J13 amendments to v2) 01-Nov-90, Version 4 by Pitman (comments by Moon, Barrett) 01-Nov-90, Version 5 by Pitman (more comments by Moon, Barrett) </section><section id="section-Status" class="status-passed section"><h2 class="section-title">Status</h2>v2+amendments (reflected in v5) accepted by X3J13, June 1990 </section><section id="section-Problem description" class="section"><h2 class="section-title">Problem description</h2>  The draft ANSI Common Lisp specification is inconsistent about what kind    of error handling occurs when a function is called with arguments that    do not match its definition. <br/><ol><li> For too few arguments, p.4-11 says "there must be at least n passed arguments," which probably <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">page</span> <span class="syntax-interned-symbol">1-10</span>)</span>
</span></code></pre> means "the consequences are undefined" if there are too few arguments. <br/></li><li> For too many arguments, p.4-12 says "an error of type error is  signalled." <br/></li><li> For unrecognized keyword arguments, p.4-13 says "the consequences  are undefined."  On the other hand, p.4-15 says "and error would be signalled." <br/></li><li> For keyword argument names that are not symbols, p.4-13 says "the consequences are undefined." <br/></li><li> For unrecognized keyword arguments supplied to generic functions,  p.4-20 and 88-002R p.1-26 say "an error is signalled." <br/></li></ol>  This is Symbolics issue #5. <br/></section><section class="status-passed proposal" id="issue-argument-mismatch-error:must-signal-when-safe-or-system"><h2 class="section-title">Proposal MUST-SIGNAL-WHEN-SAFE-OR-SYSTEM</h2>  Define that an error must be signalled in cases 1, 2, 3, and 5 of the   argument mismatch situations in the problem description if the caller,   the callee, and the point of functional evaluation all appear in a   context where a `safe' optimization setting is in effect (i.e.,    SAFETY=3).  In all other scenarios for these situations, the    consequences are undefined. <br/>  Case 4 is treated the same, except that when :allow-other-keys t or   <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-allow-other-keys">&amp;allow-other-keys</a> is involved, error detection is optional (i.e., the   consequences are undefined if the keyword argument names are not symbols). <br/>  If any of the caller, the callee, or the point of functional evaluation   was not user code, and was instead supplied by the implementation as a   pre-defined definition, or as automatically generated code (e.g., as   in method combination), then it must be treated as safe unless some    user code involved in the scenario is not safe. <br/>  Clarify that a reference to the symbolic name of the function or to the    contents of the <a class="function-reference" href="../chapter-10.xhtml#function-symbol-function">symbol-function</a> of a symbol does not count as a functional   evaluation.  For the purposes of this definition, functional evaluation   occurs either explicitly due to a use of the <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> special form, or    implicitly due to the use of a function name in the car of a normal   functional form. <br/>  The naive model which is intended is that the user can rely on error    checking in these situations if he has taken all reasonable steps to   ensure that the situations will be safe. <br/>  The exact time that the error will be signalled is <a class="glossary-reference" href="../chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a>,   but will always be prior to the execution of the body of the function being   called. <br/>Clarifications: <br/>  The error might be signalled at compile time or at run time.  If the   error is signalled at run time, it might be signalled by either the   caller or the callee. <br/>  The reason that this terminology is used, and not the normal, "should   signal" terminology is because system code may be involved, and the   user may not know in general whether system code was compiled `safe'   or `unsafe'.  An implication of this definition is that all code   compiled by the system will behave as if compiled safe unless some   user code involved in the scenario is not. So, for example, if a user   calls <a class="function-reference" href="../chapter-14.xhtml#function-mapcar">mapcar</a> from safe code and passes a function which was compiled   safe, the system is required to ensure that <a class="function-reference" href="../chapter-14.xhtml#function-mapcar">mapcar</a> will make a safe   call as well. <br/></section><section id="section-Examples" class="section"><h2 class="section-title">Examples</h2><pre><ol><li> Given ...<br/></li></ol><br/>    <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-3.xhtml#macro-declaim">declaim</a> <span class="syntax-cons">(<a class="declaration-reference" href="../chapter-3.xhtml#declaration-optimize">optimize</a> <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-safety">safety</a> <span class="syntax-number">3</span>)</span>)</span>)</span>
</span></code></pre><br/><br/>    <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a>     <span class="syntax-interned-symbol">foo</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span>)</span>                  <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-print">print</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">test-failed</span></span>)</span> <span class="syntax-interned-symbol">x</span>)</span>
</span></code></pre><br/>    <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a>     <span class="syntax-interned-symbol">bar</span> <span class="syntax-cons">(<a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-key">&amp;KEY</a> <span class="syntax-interned-symbol">x</span>)</span>             <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-print">print</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">test-failed</span></span>)</span> <span class="syntax-interned-symbol">x</span>)</span>
</span></code></pre><br/>    <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-7.xhtml#macro-defmethod">defmethod</a> <span class="syntax-interned-symbol">baz</span> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <a class="type-reference" href="../chapter-12.xhtml#type-integer">integer</a>)</span> <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-key">&amp;KEY</a> <span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-print">print</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">test-failed</span></span>)</span> <span class="syntax-interned-symbol">x</span>)</span>
</span></code></pre><br/><br/>    <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">funcall-it</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-funcall">funcall</a> <span class="syntax-interned-symbol">x</span>)</span>)</span>
</span></code></pre><br/><br/>    Then every implementation must arrange for an error to be signalled<br/>    no later than the body (i.e., before <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-print">print</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">test-failed</span></span>)</span>
</span></code></pre> is executed)<br/>    if the following forms also occur in safe code:<br/><br/><ol><li>1:  <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">foo</span>)</span>
</span></code></pre><br/>A.2:  <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">foo</span> <span class="syntax-number">1</span> <span class="syntax-number">2</span>)</span>
</span></code></pre><br/>A.3:  <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">bar</span> <span class="syntax-keyword-symbol">:y</span> <span class="syntax-number">1</span>)</span>
</span></code></pre><br/>A.4:  <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">bar</span> <span class="syntax-number">1</span> <span class="syntax-number">2</span>)</span>
</span></code></pre><br/>A.5:  <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">baz</span> <span class="syntax-number">1</span> <span class="syntax-keyword-symbol">:y</span> <span class="syntax-number">7</span>)</span>
</span></code></pre><br/>A.6:  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-funcall">funcall</a> <span class="syntax-function">#'<span class="syntax-interned-symbol">foo</span></span>)</span>
</span></code></pre><br/>A.7:  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-funcall">funcall</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">foo</span></span>)</span>
</span></code></pre><br/>A.8:  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-mapcar">mapcar</a> <span class="syntax-function">#'<span class="syntax-interned-symbol">foo</span></span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">2</span>)</span></span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">2</span>)</span></span>)</span>
</span></code></pre><br/>A.9:  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-mapcar">mapcar</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">foo</span></span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">2</span>)</span></span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">2</span>)</span></span>)</span>
</span></code></pre><br/>A.8:  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-mapcar">mapcar</a> <span class="syntax-function">#'<a class="function-reference" href="../chapter-12.xhtml#function-1+">1+</a></span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">2</span>)</span></span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">2</span>)</span></span>)</span>
</span></code></pre><br/>A.9:  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-mapcar">mapcar</a> <span class="syntax-quote">'<a class="function-reference" href="../chapter-12.xhtml#function-1+">1+</a></span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">2</span>)</span></span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">2</span>)</span></span>)</span>
</span></code></pre><br/>A.10: <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">funcall-it</span> <span class="syntax-function">#'<span class="syntax-interned-symbol">foo</span></span>)</span>
</span></code></pre><br/>A.10: <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">funcall-it</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">foo</span></span>)</span>
</span></code></pre><br/>A.11: <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">funcall-it</span> <span class="syntax-function">#'<a class="function-reference" href="../chapter-12.xhtml#function-1+">1+</a></span>)</span>
</span></code></pre><br/>A.12: <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">funcall-it</span> <span class="syntax-quote">'<a class="function-reference" href="../chapter-12.xhtml#function-1+">1+</a></span>)</span>
</span></code></pre><br/>A.13: <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-locally">locally</a> <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-declare">declare</a> <span class="syntax-cons">(<a class="declaration-reference" href="../chapter-3.xhtml#declaration-optimize">optimize</a> <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-safety">safety</a> <span class="syntax-number">0</span>)</span>)</span>)</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">foo</span></span>)</span>)</span>)</span>
             <span class="syntax-cons">(<span class="syntax-interned-symbol">funcall-it</span> <span class="syntax-interned-symbol">x</span>)</span>)</span>
</span></code></pre><br/>A.14: <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-locally">locally</a> <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-declare">declare</a> <span class="syntax-cons">(<a class="declaration-reference" href="../chapter-3.xhtml#declaration-optimize">optimize</a> <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-safety">safety</a> <span class="syntax-number">0</span>)</span>)</span>)</span> <span class="syntax-quote">'<a class="function-reference" href="../chapter-12.xhtml#function-1+">1+</a></span>)</span>)</span>)</span>
             <span class="syntax-cons">(<span class="syntax-interned-symbol">funcall-it</span> <span class="syntax-interned-symbol">x</span>)</span>)</span>
</span></code></pre><br/>A.15: <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-locally">locally</a> <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-declare">declare</a> <span class="syntax-cons">(<a class="declaration-reference" href="../chapter-3.xhtml#declaration-optimize">optimize</a> <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-safety">safety</a> <span class="syntax-number">0</span>)</span>)</span>)</span>
		      <span class="syntax-cons">(<a class="function-reference" href="../chapter-10.xhtml#function-symbol-function">symbol-function</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">foo</span></span>)</span>)</span>)</span>)</span>
             <span class="syntax-cons">(<span class="syntax-interned-symbol">funcall-it</span> <span class="syntax-interned-symbol">x</span>)</span>)</span>
</span></code></pre><br/>A.16: <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-locally">locally</a> <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-declare">declare</a> <span class="syntax-cons">(<a class="declaration-reference" href="../chapter-3.xhtml#declaration-optimize">optimize</a> <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-safety">safety</a> <span class="syntax-number">0</span>)</span>)</span>)</span>
		      <span class="syntax-cons">(<a class="function-reference" href="../chapter-10.xhtml#function-symbol-function">symbol-function</a> <span class="syntax-quote">'<a class="function-reference" href="../chapter-12.xhtml#function-1+">1+</a></span>)</span>)</span>)</span>)</span>
             <span class="syntax-cons">(<span class="syntax-interned-symbol">funcall-it</span> <span class="syntax-interned-symbol">x</span>)</span>)</span>
</span></code></pre><br/><br/></li></ol> B. Here are some examples of situations that might signal an error, but <br/>    are not required to signal an error.  In effect, the consequences are<br/>    undefined in these cases, even if the surrounding code is declared safe:<br/><br/>          ;; Functional evaluation is not safe:<br/>    B.1:  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-locally">locally</a> <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-declare">declare</a> <span class="syntax-cons">(<a class="declaration-reference" href="../chapter-3.xhtml#declaration-optimize">optimize</a> <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-safety">safety</a> <span class="syntax-number">2</span>)</span>)</span>)</span> <span class="syntax-function">#'<span class="syntax-interned-symbol">foo</span></span>)</span>)</span>)</span>
            <span class="syntax-cons">(<span class="syntax-interned-symbol">funcall-it</span> <span class="syntax-interned-symbol">x</span>)</span>)</span>
</span></code></pre><br/>    B.2:  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-locally">locally</a> <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-declare">declare</a> <span class="syntax-cons">(<a class="declaration-reference" href="../chapter-3.xhtml#declaration-optimize">optimize</a> <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-safety">safety</a> <span class="syntax-number">2</span>)</span>)</span>)</span> <span class="syntax-function">#'<a class="function-reference" href="../chapter-12.xhtml#function-1+">1+</a></span>)</span>)</span>)</span>
            <span class="syntax-cons">(<span class="syntax-interned-symbol">funcall-it</span> <span class="syntax-interned-symbol">x</span>)</span>)</span>
</span></code></pre><br/><br/>          ;; Point of call is not safe:<br/>    B.3:  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-function">#'<span class="syntax-interned-symbol">foo</span></span>)</span>)</span>
            <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-locally">locally</a> <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-declare">declare</a> <span class="syntax-cons">(<a class="declaration-reference" href="../chapter-3.xhtml#declaration-optimize">optimize</a> <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-safety">safety</a> <span class="syntax-number">2</span>)</span>)</span>)</span>
              <span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-funcall">funcall</a> <span class="syntax-interned-symbol">x</span>)</span>)</span>)</span>
</span></code></pre><br/>    B.4:  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-function">#'<a class="function-reference" href="../chapter-12.xhtml#function-1+">1+</a></span>)</span>)</span>
            <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-locally">locally</a> <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-declare">declare</a> <span class="syntax-cons">(<a class="declaration-reference" href="../chapter-3.xhtml#declaration-optimize">optimize</a> <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-safety">safety</a> <span class="syntax-number">2</span>)</span>)</span>)</span>
              <span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-funcall">funcall</a> <span class="syntax-interned-symbol">x</span>)</span>)</span>)</span>
</span></code></pre><br/><br/>          ;; Callee is not safe:<br/>          <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-locally">locally</a> <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-declare">declare</a> <span class="syntax-cons">(<a class="declaration-reference" href="../chapter-3.xhtml#declaration-optimize">optimize</a> <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-safety">safety</a> <span class="syntax-number">2</span>)</span>)</span>)</span>
            <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">foo1</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-interned-symbol">x</span>)</span>)</span>
</span></code></pre><br/>    B.5:  <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">foo1</span>)</span>
</span></code></pre><br/>    B.6:  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-mapcar">mapcar</a> <span class="syntax-function">#'<span class="syntax-interned-symbol">foo1</span></span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">2</span>)</span></span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">2</span>)</span></span>)</span>
</span></code></pre><br/>    B.6:  <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">funcall-it</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">foo1</span></span>)</span>
</span></code></pre><br/><br/></pre></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>  It's important for the document to be consistent and always say the   same thing about each individual error situation.  It also seems   important for the five error situations to be treated equally. <br/>  Further, it's important that programmers be able to debug their code   conveniently in a safe environment.  Once they start tampering with   safety, they may run immediately into situations that expose   variations in how implementations deal with function calling, but   where safety is uniformly requested by the code, they should be able   to insulate themselves from such differences. <br/>  An exception is made in the name of efficiency for case 4 when   :ALLOW-OTHER-KEYS <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> or <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-allow-other-keys">&amp;ALLOW-OTHER-KEYS</a> is used. <br/></section><section id="section-Current practice" class="section"><h2 class="section-title">Current practice</h2>  CLtL did not require this level of error checking, so it's entirely    likely that there are implementations which do not conform. <br/>  Symbolics Genera conforms to this proposal. <br/></section><section id="section-Cost to Implementors" class="section"><h2 class="section-title">Cost to Implementors</h2>  Some implementations already implement most or all of this, so their   cost will be minimal. <br/>  A few implementations may not implement this.  The cost will vary   depending on the implementation. In some cases, it could take a fairly   substantial amount of work to make these changes. <br/>  An implementation not willing to make these changes might prefer to   identify itself as implementing only a low-safety subset of the   language, and simply refuse to compile code which was declared high   safety.  This might be appropriate for certain delivery situations. <br/></section><section id="section-Cost to Users" class="section"><h2 class="section-title">Cost to Users</h2>  More robust code. <br/></section><section id="section-Cost of non-adoption" class="section"><h2 class="section-title">Cost of non-adoption</h2>  The specification document will not even be self-consistent. <br/></section><section id="section-Performance impact" class="section"><h2 class="section-title">Performance impact</h2>  None. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>  Language consistency. <br/></section><section id="section-Aesthetics" class="section"><h2 class="section-title">Aesthetics</h2>  This is an improvement over the inconsistent situation which preceded it. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>  The idea of making this merely "undefined" was discussed and rejected   at the June 1990 meeting.  There was consensus that signalling an   error was fine, but the main sticking points were saying under what   situations the user could depend on such signalling, and at what time   the signalling might be permitted to occur.  The following `amendment'   to the previous proposal was proposed and adopted, with the intent   that it be clarified later: <br/>    "should signal"            <a class="function-reference" href="../chapter-12.xhtml#function-+">+</a>     [ efunctuation ]     [ caller       ]  [ system or safe ]     [ callee       ]            <a class="function-reference" href="../chapter-12.xhtml#function-+">+</a>     "and no later than the body of the callee" <br/>  Versions 3-5 were an attempt to clarify what was voted upon. <br/>  Moon says:     I'm not sure what the callee is when calling a generic function.  Is     it the <a class="macro-reference" href="../chapter-7.xhtml#macro-defgeneric">defgeneric</a> or the <a class="macro-reference" href="../chapter-7.xhtml#macro-defmethod">defmethod</a>?  What if there is no <a class="macro-reference" href="../chapter-7.xhtml#macro-defgeneric">defgeneric</a>?     It's best to say that the generic function definition, if it was     defined explicitly, and the method definitions for all the     applicable methods, and the <a class="symbol-reference" href="../chapter-25.xhtml#symbol-method-combination">method-combination</a> definition must all     be safe or system-defined for the callee to be considered safe. <br/>  To which Barrett responds:     This is the area I was concerned about when I first poked Kent about     getting an updated version of this proposal.  I think for the most     part the requirement stated above covers my concerns and fits what I     think the intent of X3J13 was when the proposal was voted up.     However, I'm not certain that this restriction covers the thing that     processes the form returned by the effective method function.  Also,     I'm not sure where <a class="symbol-reference" href="../chapter-3.xhtml#symbol-safety">safety</a> is determed from when a generic function is     created by a bare call to <a class="function-reference" href="../chapter-7.xhtml#function-ensure-generic-function">ensure-generic-function</a> or <a class="function-reference" href="../chapter-7.xhtml#function-make-instance">make-instance</a>     rather than through one of the definitional forms.  Perhaps <a class="symbol-reference" href="../chapter-3.xhtml#symbol-safety">safety</a>     ought to be a quality accepted by <a class="macro-reference" href="../chapter-7.xhtml#macro-defgeneric">defgeneric</a> and similar places?   but then later adds:     After thinking about it some more, I no longer think the thing that     processes the form returned by the <a class="symbol-reference" href="../chapter-25.xhtml#symbol-method-combination">method-combination</a> function is a     problem, since without the MOP it must be `system'. <br/>  Barrett also says:     There are quite a few other ways of performing functional evaluation: <ol><li> <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-4.xhtml#function-coerce">coerce</a> <span class="syntax-interned-symbol">lambda-expression</span> <span class="syntax-quote">'<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a></span>)</span>
</span></code></pre> </li><li> <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">ENCLOSE</span> <span class="syntax-interned-symbol">lambda-expression</span> <span class="syntax-interned-symbol">environment</span>)</span>
</span></code></pre> </li><li> <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="type-reference" href="../chapter-4.xhtml#type-generic-function">generic-function</a> <span class="syntax-symbol">.</span> <span class="syntax-interned-symbol">whatever-goes-here</span>)</span>
</span></code></pre> </li><li> <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-7.xhtml#function-ensure-generic-function">ensure-generic-function</a> <span class="syntax-symbol">.</span> <span class="syntax-interned-symbol">arguments</span>)</span>
</span></code></pre> </li><li> {possibly} <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-7.xhtml#function-make-instance">make-instance</a> <span class="syntax-interned-symbol">subtype-of-function</span> <span class="syntax-symbol">.</span> <span class="syntax-interned-symbol">arguments</span>)</span>
</span></code></pre> {any others I haven't thought of} </li></ol>    I think that for these, the environment used to determine <a class="symbol-reference" href="../chapter-3.xhtml#symbol-safety">safety</a>      level is <ol><li> <a class="function-reference" href="../chapter-4.xhtml#function-coerce">coerce</a> &ndash; <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> </li><li> ENCLOSE &ndash; second argument </li><li> <a class="type-reference" href="../chapter-4.xhtml#type-generic-function">generic-function</a> &ndash; expansion environment </li><li> <a class="function-reference" href="../chapter-7.xhtml#function-ensure-generic-function">ensure-generic-function</a> &ndash; :environment argument </li><li> <a class="function-reference" href="../chapter-7.xhtml#function-make-instance">make-instance</a> &ndash; ?? </li></ol><br/> Both on the issue of functional evaluation and on the issue of <a class="macro-reference" href="../chapter-7.xhtml#macro-defgeneric">defgeneric</a>,  KMP agrees there are some lingering issues which need to be resolved, but  wants to see open debate on them and some clear consensus before putting  something into the proposal. </section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>