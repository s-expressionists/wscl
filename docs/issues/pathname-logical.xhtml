<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” PATHNAME-LOGICAL</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">PATHNAME-LOGICAL</span><br/><ol class="local-toc"><li><a href="#section-Status">Status</a><ol> </ol></li><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit history">Edit history</a><ol> </ol></li><li><a href="#section-Problem description">Problem description</a><ol> </ol></li><li><a href="#issue-pathname-logical:add">Proposal ADD</a><ol> </ol></li><li><a href="#section-Examples">Examples</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Current practice">Current practice</a><ol> </ol></li><li><a href="#section-Cost to Implementors">Cost to Implementors</a><ol> </ol></li><li><a href="#section-Cost to Users">Cost to Users</a><ol> </ol></li><li><a href="#section-Cost of non-adoption">Cost of non-adoption</a><ol> </ol></li><li><a href="#section-Performance impact">Performance impact</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Esthetics">Esthetics</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue PATHNAME-LOGICAL [Cleanup] [ADDITION]</h1><h2>Related issues</h2><ul><li><span class="issue-reference error">issue:PATHNAME-CANONICAL-TYPE</span></li><li><span class="issue-reference error">issue:PATHNAME-COMPONENT-VALUES</span></li><li><a class="issue-reference" href="../issues/pathname-subdirectory-list.xhtml#issue-pathname-subdirectory-list">PATHNAME-SUBDIRECTORY-LIST</a></li><li><a class="issue-reference" href="../issues/pathname-wild.xhtml#issue-pathname-wild">PATHNAME-WILD</a></li></ul><section id="section-Status" class="status-passed section"><h2 class="section-title">Status</h2>Passed, Jun 89 X3J13 </section><section id="section-References" class="section"><h2 class="section-title">References</h2>Pathnames (pp410-413) <a class="function-reference" href="../chapter-21.xhtml#function-open">OPEN</a> (p.418), <a class="macro-reference" href="../chapter-21.xhtml#macro-with-open-file">WITH-OPEN-FILE</a> (p.422), <a class="function-reference" href="../chapter-20.xhtml#function-rename-file">RENAME-FILE</a> (p.423), <a class="function-reference" href="../chapter-20.xhtml#function-delete-file">DELETE-FILE</a> (p.424), <a class="function-reference" href="../chapter-20.xhtml#function-probe-file">PROBE-FILE</a> (p.424), <a class="function-reference" href="../chapter-20.xhtml#function-file-write-date">FILE-WRITE-DATE</a> (p.424), <a class="function-reference" href="../chapter-20.xhtml#function-file-author">FILE-AUTHOR</a> (p.424), <a class="function-reference" href="../chapter-24.xhtml#function-load">LOAD</a> (p.426), <a class="function-reference" href="../chapter-24.xhtml#function-compile-file">COMPILE-FILE</a> (p.439), <a class="function-reference" href="../chapter-20.xhtml#function-directory">DIRECTORY</a> (p.427), <a class="function-reference" href="../chapter-19.xhtml#function-pathname">PATHNAME</a> (p.413), <a class="function-reference" href="../chapter-20.xhtml#function-truename">TRUENAME</a> (p.413), <a class="function-reference" href="../chapter-19.xhtml#function-merge-pathnames">MERGE-PATHNAMES</a> (p.415),  <a class="function-reference" href="../chapter-19.xhtml#function-make-pathname">MAKE-PATHNAME</a> (p.416), and <a class="function-reference" href="../chapter-19.xhtml#function-parse-namestring">PARSE-NAMESTRING</a> (p.414). </section><section id="section-Edit history" class="section"><h2 class="section-title">Edit history</h2>Version 1, 11-May-89, by Moon Version 2, 18-May-89, by Moon Version 3, 21-Jun-89, by Moon (revise based on discussion in the cleanup committee) Version 4, 23-Jun-89, by Moon (remove backtranslation) </section><section id="section-Problem description" class="section"><h2 class="section-title">Problem description</h2>  Pathname values are not portable, but they are sometimes part of a   program, for example the names of files containing the program and the   data used by the program.  Moving large programs between sites would   be easier if pathname values did not have to be translated. <br/>  Pathname values are nonportable because not all Common Lisp   implementations use the same operating system and file name syntax varies   widely among operating systems.  In addition, corresponding files at two   different sites may have different names even when the operating system   is the same; for example, they may be on different directories or   different devices. <br/>  The issue of portable pathname values is separate from the issues of   portable pathname operations.  See the related issues listed above.   For inter-issue interactions, see the discussion section below. <br/>  Note that <a class="issue-reference" href="#issue-pathname-logical">X3J13 Issue PATHNAME-LOGICAL</a> fundamentally depends on issue   <a class="issue-reference" href="../issues/pathname-wild.xhtml#issue-pathname-wild">PATHNAME-WILD</a>.  If <a class="issue-reference" href="../issues/pathname-wild.xhtml#issue-pathname-wild:new-functions">PATHNAME-WILD:NEW-FUNCTIONS</a> does not pass,   <a class="issue-reference" href="#issue-pathname-logical">PATHNAME-LOGICAL</a> cannot pass. <br/></section><section class="status-passed proposal" id="issue-pathname-logical:add"><h2 class="section-title">Proposal ADD</h2><ol><li> Define a "logical" file system that looks the same at every site. This file system is implemented by translating each logical pathname into a physical pathname on a real file system.  The logical pathnames are the same at all sites, but the translations are different at each site, thus the physical pathnames can be different at each site. <br/>2a. The syntax of a logical pathname namestring is as follows: <br/>[ host ":" ] [ ";" ] { directory ";" }* [ name ] [ "." type [ "." version ]] <br/>2b. Terminology: <br/>A &lt;word&gt; consists of one or more uppercase letters, digits, and hyphens. <br/>A &lt;wildcard word&gt; consists of one or more asterisks, uppercase letters, digits, and hyphens, including at least one asterisk, with no two asterisks adjacent.  Each asterisk matches a sequence of zero or more characters.  The &lt;wildcard word&gt; "*" parses into :WILD, the others parse into strings. <br/>In &lt;words&gt; and &lt;wildcard words&gt; lowercase letters are translated to uppercase.  The consequences of using other characters are unspecified. <br/>2c. Logical pathname components: <br/>The host is a &lt;word&gt; that has been defined as a logical pathname host by using <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">SETF</a> of <a class="function-reference" href="../chapter-19.xhtml#function-logical-pathname-translations">LOGICAL-PATHNAME-TRANSLATIONS</a>. <br/>There is no device, so the device component of a logical pathname is always :UNSPECIFIC.  No other component can be :UNSPECIFIC. <br/>Each directory is a &lt;word&gt;, a &lt;wildcard word&gt;, or "**" <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-keyword-symbol">:WILD-INFERIORS</span>)</span>
</span></code>. If a semicolon precedes the directories, the directory component is relative, otherwise it is absolute. <br/>The name is a &lt;word&gt; or a &lt;wildcard word&gt;. <br/>The type is a &lt;word&gt; or a &lt;wildcard word&gt;. <br/>The version is a positive decimal integer or "NEWEST" <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-keyword-symbol">:NEWEST</span>)</span>
</span></code> or "*" <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-keyword-symbol">:WILD</span>)</span>
</span></code>.  The letters in "NEWEST" can be in either alphabetic case. <br/>The consequences of using any value not specified here as a logical pathname component are unspecified. <br/>The null string "" is not a valid value for any component of a logical pathname, since "" is not a &lt;word&gt; and not a &lt;wildcard word&gt;. <br/>3. Parsing of logical pathname namestrings into logical pathnames operates as follows: <br/>3a. Logical pathname namestrings are recognized by the <a class="function-reference" href="../chapter-19.xhtml#function-logical-pathname">LOGICAL-PATHNAME</a> and <a class="function-reference" href="../chapter-19.xhtml#function-translate-logical-pathname">TRANSLATE-LOGICAL-PATHNAME</a> functions.  In this case the host portion of the logical pathname namestring and its following colon are required. <br/>3b. The <a class="function-reference" href="../chapter-19.xhtml#function-parse-namestring">PARSE-NAMESTRING</a> function recognizes a logical pathname namestring when the host argument is logical or the defaults argument is a logical pathname.  In this case the host portion of the logical pathname namestring and its following colon are optional.  If the host portion of the namestring and the host argument are both present and do not match, an error is signalled. <br/>The host argument is logical if it is supplied and came from <a class="function-reference" href="../chapter-19.xhtml#function-pathname-host">PATHNAME-HOST</a> of a logical pathname.  Whether a host argument is logical if it is a string equal to a logical pathname host name is <a class="glossary-reference" href="../chapter-26.xhtml#glossary-implementation-defined">implementation-defined</a>. <br/>3c. The <a class="function-reference" href="../chapter-19.xhtml#function-merge-pathnames">MERGE-PATHNAMES</a> function recognizes a logical pathname namestring when the defaults argument is a logical pathname.  In this case the host portion of the logical pathname namestring and its following colon are optional. <br/>3d. Whether the other functions that coerce strings to pathnames (<a class="function-reference" href="../chapter-19.xhtml#function-pathname">PATHNAME</a>, <a class="function-reference" href="../chapter-20.xhtml#function-truename">TRUENAME</a>, <a class="function-reference" href="../chapter-19.xhtml#function-parse-namestring">PARSE-NAMESTRING</a> in other circumstances than those described in point 3b, <a class="function-reference" href="../chapter-19.xhtml#function-merge-pathnames">MERGE-PATHNAMES</a> in other circumstances than those described in point 3c, the :DEFAULTS argument to <a class="function-reference" href="../chapter-19.xhtml#function-make-pathname">MAKE-PATHNAME</a>, <a class="function-reference" href="../chapter-19.xhtml#function-pathname-host">PATHNAME-HOST</a>, <a class="function-reference" href="../chapter-19.xhtml#function-pathname-device">PATHNAME-DEVICE</a>, <a class="function-reference" href="../chapter-19.xhtml#function-pathname-directory">PATHNAME-DIRECTORY</a>, <a class="function-reference" href="../chapter-19.xhtml#function-pathname-name">PATHNAME-NAME</a>, <a class="function-reference" href="../chapter-19.xhtml#function-pathname-type">PATHNAME-TYPE</a>, <a class="function-reference" href="../chapter-19.xhtml#function-pathname-version">PATHNAME-VERSION</a>, <a class="function-reference" href="../chapter-19.xhtml#function-namestring">NAMESTRING</a>, <a class="function-reference" href="../chapter-19.xhtml#function-file-namestring">FILE-NAMESTRING</a>, <a class="function-reference" href="../chapter-19.xhtml#function-directory-namestring">DIRECTORY-NAMESTRING</a>, <a class="function-reference" href="../chapter-19.xhtml#function-host-namestring">HOST-NAMESTRING</a>, <a class="function-reference" href="../chapter-19.xhtml#function-enough-namestring">ENOUGH-NAMESTRING</a>, <a class="function-reference" href="../chapter-21.xhtml#function-open">OPEN</a>, <a class="macro-reference" href="../chapter-21.xhtml#macro-with-open-file">WITH-OPEN-FILE</a>, <a class="function-reference" href="../chapter-20.xhtml#function-rename-file">RENAME-FILE</a>, <a class="function-reference" href="../chapter-20.xhtml#function-delete-file">DELETE-FILE</a>, <a class="function-reference" href="../chapter-20.xhtml#function-probe-file">PROBE-FILE</a>, <a class="function-reference" href="../chapter-20.xhtml#function-file-write-date">FILE-WRITE-DATE</a>, <a class="function-reference" href="../chapter-20.xhtml#function-file-author">FILE-AUTHOR</a>, <a class="function-reference" href="../chapter-24.xhtml#function-load">LOAD</a>, <a class="function-reference" href="../chapter-20.xhtml#function-directory">DIRECTORY</a>, <a class="function-reference" href="../chapter-24.xhtml#function-compile-file">COMPILE-FILE</a>, <a class="function-reference" href="../chapter-25.xhtml#function-ed">ED</a>, <a class="function-reference" href="../chapter-25.xhtml#function-dribble">DRIBBLE</a>, <a class="function-reference" href="../chapter-19.xhtml#function-wild-pathname-p">WILD-PATHNAME-P</a>, <a class="function-reference" href="../chapter-19.xhtml#function-pathname-match-p">PATHNAME-MATCH-P</a>, <a class="function-reference" href="../chapter-19.xhtml#function-translate-pathname">TRANSLATE-PATHNAME</a>, and <a class="function-reference" href="../chapter-24.xhtml#function-compile-file-pathname">COMPILE-FILE-PATHNAME</a>) recognize logical pathname namestrings is implementation defined. <br/>4. Some real file systems do not have versions.  Logical pathname translation to such a file system ignores the version.  This implies that a program cannot rely on being able to store more than one version of a file named by a logical pathname. <br/>5. The type of a logical pathname for a Common Lisp source file is "<a class="package-reference" href="../chapter-A.xhtml#package-lisp">LISP</a>". This should be translated into whatever type is appropriate in a physical pathname. <br/>6. The logical pathname host name "SYS" is reserved for the implementation. The existence and meaning of SYS: logical pathnames is <a class="glossary-reference" href="../chapter-26.xhtml#glossary-implementation-defined">implementation-defined</a>. <br/>7. File manipulation functions operate with logical pathnames as follows: <br/>7a. The functions <a class="function-reference" href="../chapter-21.xhtml#function-open">OPEN</a> <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-and">and</a> <a class="macro-reference" href="../chapter-21.xhtml#macro-with-open-file">WITH-OPEN-FILE</a>)</span>
</span></code>, <a class="function-reference" href="../chapter-20.xhtml#function-rename-file">RENAME-FILE</a>, <a class="function-reference" href="../chapter-20.xhtml#function-delete-file">DELETE-FILE</a>, <a class="function-reference" href="../chapter-20.xhtml#function-probe-file">PROBE-FILE</a>, <a class="function-reference" href="../chapter-20.xhtml#function-file-write-date">FILE-WRITE-DATE</a>, <a class="function-reference" href="../chapter-20.xhtml#function-file-author">FILE-AUTHOR</a>, <a class="function-reference" href="../chapter-24.xhtml#function-load">LOAD</a>, <a class="function-reference" href="../chapter-20.xhtml#function-directory">DIRECTORY</a>, <a class="function-reference" href="../chapter-24.xhtml#function-compile-file">COMPILE-FILE</a>, <a class="function-reference" href="../chapter-25.xhtml#function-ed">ED</a>, <a class="function-reference" href="../chapter-25.xhtml#function-dribble">DRIBBLE</a>, <a class="function-reference" href="../chapter-24.xhtml#function-compile-file-pathname">COMPILE-FILE-PATHNAME</a>, and <a class="function-reference" href="../chapter-20.xhtml#function-truename">TRUENAME</a> accept logical pathnames and translate them into physical pathnames, as if by calling the <a class="function-reference" href="../chapter-19.xhtml#function-translate-logical-pathname">TRANSLATE-LOGICAL-PATHNAME</a> function. <br/>7b. <a class="function-reference" href="../chapter-19.xhtml#function-pathname">PATHNAME</a> of a stream created by <a class="function-reference" href="../chapter-21.xhtml#function-open">OPEN</a> <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-or">or</a> <a class="macro-reference" href="../chapter-21.xhtml#macro-with-open-file">WITH-OPEN-FILE</a>)</span>
</span></code> of a logical pathname is a logical pathname. <br/>7c. <a class="function-reference" href="../chapter-20.xhtml#function-truename">TRUENAME</a>, <a class="function-reference" href="../chapter-20.xhtml#function-probe-file">PROBE-FILE</a>, and <a class="function-reference" href="../chapter-20.xhtml#function-directory">DIRECTORY</a> never return logical pathnames. <br/>7d. <a class="function-reference" href="../chapter-20.xhtml#function-rename-file">RENAME-FILE</a> with a logical pathname as the second argument returns a logical pathname as the first value. <br/>7e. <a class="function-reference" href="../chapter-19.xhtml#function-merge-pathnames">MERGE-PATHNAMES</a> returns a logical pathname if and only if its first argument is a logical pathname or its first argument does not specify a host and the default is a logical pathname. <br/>7f. <a class="function-reference" href="../chapter-19.xhtml#function-make-pathname">MAKE-PATHNAME</a> returns a logical pathname if and only if the host is logical.  If the :host argument to <a class="function-reference" href="../chapter-19.xhtml#function-make-pathname">MAKE-PATHNAME</a> is supplied, the host is logical if it came from <a class="function-reference" href="../chapter-19.xhtml#function-pathname-host">PATHNAME-HOST</a> of a logical pathname.  Whether a :host argument is logical if it is a string equal to a logical pathname host name is <a class="glossary-reference" href="../chapter-26.xhtml#glossary-implementation-defined">implementation-defined</a>. <br/>7g. <a class="function-reference" href="../chapter-19.xhtml#function-parse-namestring">PARSE-NAMESTRING</a> returns a logical pathname according to points 3b and 3d. <br/>Add these defined names to Common Lisp in support of logical pathnames: <br/>8. <a class="function-reference" href="../chapter-19.xhtml#function-logical-pathname">LOGICAL-PATHNAME</a>                                            [Class] <br/>  <a class="function-reference" href="../chapter-19.xhtml#function-logical-pathname">LOGICAL-PATHNAME</a> is a subclass of <a class="function-reference" href="../chapter-19.xhtml#function-pathname">PATHNAME</a>. <br/>9. <a class="function-reference" href="../chapter-19.xhtml#function-logical-pathname">LOGICAL-PATHNAME</a> pathname                                   [Function] <br/>  Converts the argument to a logical pathname and returns it.  The   argument can be a logical pathname, a logical pathname namestring   containing a host component, or a stream for which the <a class="function-reference" href="../chapter-19.xhtml#function-pathname">PATHNAME</a>   function returns a logical pathname.  For any other argument,   <a class="function-reference" href="../chapter-19.xhtml#function-logical-pathname">LOGICAL-PATHNAME</a> signals an error of type <a class="type-reference" href="../chapter-4.xhtml#type-type-error">TYPE-ERROR</a>. <br/>10. <a class="function-reference" href="../chapter-19.xhtml#function-translate-logical-pathname">TRANSLATE-LOGICAL-PATHNAME</a> pathname &amp;key                   [Function] <br/>  Translates a logical pathname to the corresponding physical pathname.   The pathname argument is first coerced to a pathname.  If it is not a   pathname, string, or file stream an error of type <a class="type-reference" href="../chapter-4.xhtml#type-type-error">TYPE-ERROR</a> is   signalled. <br/>  If the coerced argument is a physical pathname, it is returned. <br/>  If the coerced argument is a logical pathname, the first matching   translation <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">according</span> <span class="syntax-interned-symbol">to</span> <a class="function-reference" href="../chapter-19.xhtml#function-pathname-match-p">PATHNAME-MATCH-P</a>)</span>
</span></code> of the logical pathname   host is applied, as if by calling <a class="function-reference" href="../chapter-19.xhtml#function-translate-pathname">TRANSLATE-PATHNAME</a>.  If the result is   a logical pathname, this process is repeated.  When the result is   finally a physical pathname, it is returned. <br/>  If no translation matches, an error of type <a class="type-reference" href="../chapter-20.xhtml#type-file-error">FILE-ERROR</a> is signalled. <br/>  <a class="function-reference" href="../chapter-19.xhtml#function-translate-logical-pathname">TRANSLATE-LOGICAL-PATHNAME</a> might perform additional translations,   typically to provide translation of file types to local naming   conventions, to accomodate physical file systems with limited length   names, or to deal with special character requirements such as   translating hyphens to underscores or uppercase letters to lowercase.   Any such additional translations are implementation defined.  Some   implementations do no additional translations. <br/>  There are no specified keyword arguments for   <a class="function-reference" href="../chapter-19.xhtml#function-translate-logical-pathname">TRANSLATE-LOGICAL-PATHNAME</a>, but implementations are permitted to extend   it by adding keyword arguments.  There is one specified return value   from <a class="function-reference" href="../chapter-19.xhtml#function-translate-logical-pathname">TRANSLATE-LOGICAL-PATHNAME</a>; implementations are permitted to   extend it by returning additional values. <br/>11. <a class="function-reference" href="../chapter-19.xhtml#function-logical-pathname-translations">LOGICAL-PATHNAME-TRANSLATIONS</a> host                         [Function] <br/>  If &lt;host&gt; is not the host component of a logical pathname and not a   string that has been defined as a logical pathname host name by <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">SETF</a> of   <a class="function-reference" href="../chapter-19.xhtml#function-logical-pathname-translations">LOGICAL-PATHNAME-TRANSLATIONS</a>, signals an error of type <a class="type-reference" href="../chapter-4.xhtml#type-type-error">TYPE-ERROR</a>.   Otherwise returns the host's list of translations.  Each translation is   a list of at least two elements: from-wildcard and to-wildcard.  Any   additional elements are implementation defined.  From-wildcard is a   logical pathname whose host is &lt;host&gt;.  To-wildcard is a pathname.   Translations are searched in the order listed, so more specific   from-wildcards must precede more general ones. <br/>  <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">SETF</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-logical-pathname-translations">LOGICAL-PATHNAME-TRANSLATIONS</a> <span class="syntax-interned-symbol">host</span>)</span> <span class="syntax-interned-symbol">translations</span>)</span>
</span></code> sets a logical   pathname host's list of translations.  If &lt;host&gt; is a string that has   not been previously used as logical pathname host, a new logical   pathname host is defined, otherwise an existing host's translations are   replaced.  Logical pathname host names are compared with <a class="function-reference" href="../chapter-16.xhtml#function-string-equal">STRING-EQUAL</a>. <br/>  When setting the translations list, each from-wildcard can be a logical   pathname whose host is &lt;host&gt; or a logical pathname namestring   parseable by <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-parse-namestring">PARSE-NAMESTRING</a> <a class="function-reference" href="../chapter-16.xhtml#function-string">string</a> <span class="syntax-interned-symbol">&lt;&lt;host&gt;&gt;</span>)</span>
</span></code>, where &lt;&lt;host&gt;&gt;   represents the appropriate object as defined in point 3b.  Each   to-wildcard can be anything coercible to a pathname by   <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-pathname">PATHNAME</a> <span class="syntax-interned-symbol">to-wildcard</span>)</span>
</span></code>.  If to-wildcard coerces to a logical pathname,   <a class="function-reference" href="../chapter-19.xhtml#function-translate-logical-pathname">TRANSLATE-LOGICAL-PATHNAME</a> will perform repeated translation steps when   it uses it. <br/>  Implementations can define additional functions that operate on   logical pathname hosts, for example to specify additional translation   rules or options. <br/>12. <a class="function-reference" href="../chapter-19.xhtml#function-load-logical-pathname-translations">LOAD-LOGICAL-PATHNAME-TRANSLATIONS</a> host                    [Function] <br/>  If a logical pathname host named &lt;host&gt; <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <a class="function-reference" href="../chapter-16.xhtml#function-string">string</a>)</span>
</span></code> is already defined,   return <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>.  Otherwise, search for a logical pathname host definition   in an implementation defined manner.  If none is found, signal an   error.  If a definition is found, install it and return <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>. <br/>  The search used by <a class="function-reference" href="../chapter-19.xhtml#function-load-logical-pathname-translations">LOAD-LOGICAL-PATHNAME-TRANSLATIONS</a> should be   documented, as logical pathname definitions will be created by users,   not only by Lisp implementors.  A typical search technique is to   look in a certain directory for a file whose name is derived from   the host name in an <a class="glossary-reference" href="../chapter-26.xhtml#glossary-implementation-defined">implementation-defined</a> fashion. <br/>13. <a class="function-reference" href="../chapter-24.xhtml#function-compile-file-pathname">COMPILE-FILE-PATHNAME</a> pathname &amp;key :output-file           [Function] <br/>  Returns the pathname that <a class="function-reference" href="../chapter-24.xhtml#function-compile-file">COMPILE-FILE</a> would write into, if given the   same arguments.  If the pathname argument is a logical pathname and the   :output-file argument is unspecified, the result is a logical pathname.   If an implementation supports additional keyword arguments to   <a class="function-reference" href="../chapter-24.xhtml#function-compile-file">COMPILE-FILE</a>, <a class="function-reference" href="../chapter-24.xhtml#function-compile-file-pathname">COMPILE-FILE-PATHNAME</a> must accept the same arguments. <br/></li></ol></section><section id="section-Examples" class="section"><h2 class="section-title">Examples</h2><pre>  ;A very simple example of setting up a logical pathname host.  No<br/>  ;translations are necessary to get around file system restrictions, so<br/>  ;all that is necessary is to specify the root of the physical directory<br/>  ;tree that contains the logical file system.<br/>  ;The namestring syntax on the right-hand side is implementation-specific.<br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-logical-pathname-translations">logical-pathname-translations</a> <span class="syntax-string">"foo"</span>)</span>
        <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-string">"**;*.*.*"</span>              <span class="syntax-string">"MY-LISPM:&gt;library&gt;foo&gt;**&gt;"</span>)</span>)</span></span>)</span>
</span></code></pre><br/><br/>  ;Sample use of that logical pathname.  All return values<br/>  ;are of course implementation-specific.<br/>  <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-translate-logical-pathname">translate-logical-pathname</a> <span class="syntax-string">"foo:bar;baz;mum.quux.3"</span>)</span>
</span></code><br/>  <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; MY-LISPM:&gt;library&gt;foo&gt;bar&gt;baz&gt;mum.quux.3<br/><br/>  ;A more complex example, dividing the files among two file servers<br/>  ;and several different directories.  This Unix doesn't support<br/>  ;:WILD-INFERIORS in the directory, so each directory level must<br/>  ;be translated individually.  No file name or type translations<br/>  ;are required except for .MAIL to .MBX.<br/>  ;The namestring syntax on the right-hand side is implementation-specific.<br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-logical-pathname-translations">logical-pathname-translations</a> <span class="syntax-string">"prog"</span>)</span>
        <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-string">"RELEASED;*.*.*"</span>        <span class="syntax-string">"MY-UNIX:/sys/bin/my-prog/"</span>)</span>
          <span class="syntax-cons">(<span class="syntax-string">"RELEASED;*;*.*.*"</span>      <span class="syntax-string">"MY-UNIX:/sys/bin/my-prog/*/"</span>)</span>
          <span class="syntax-cons">(<span class="syntax-string">"EXPERIMENTAL;*.*.*"</span>    <span class="syntax-string">"MY-UNIX:/usr/Joe/development/prog/"</span>)</span>
          <span class="syntax-cons">(<span class="syntax-string">"EXPERIMENTAL;DOCUMENTATION;*.*.*"</span>
                                   <span class="syntax-string">"MY-VAX:SYS$DISK:[JOE.DOC]"</span>)</span>
          <span class="syntax-cons">(<span class="syntax-string">"EXPERIMENTAL;*;*.*.*"</span>  <span class="syntax-string">"MY-UNIX:/usr/Joe/development/prog/*/"</span>)</span>
          <span class="syntax-cons">(<span class="syntax-string">"MAIL;**;*.MAIL"</span>        <span class="syntax-string">"MY-VAX:SYS$DISK:[JOE.MAIL.PROG...]*.MBX"</span>)</span>)</span></span>)</span>
</span></code></pre><br/><br/>  ;Sample use of that logical pathname.  All return values<br/>  ;are of course implementation-specific.<br/>  <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-translate-logical-pathname">translate-logical-pathname</a> <span class="syntax-string">"prog:mail;save;ideas.mail.3"</span>)</span>
</span></code><br/>  <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; <span class="issue-reference error">issue:MY-VAX</span>$DISK:[JOE.MAIL.<a class="macro-reference" href="../chapter-5.xhtml#macro-prog">PROG</a>.SAVE]IDEAS.MBX.3<br/><br/>  ;Example translations for a program that uses three files main.lisp,<br/>  ;auxiliary.lisp, and documentation.lisp.  These translations might be<br/>  ;supplied by a software supplier as examples.<br/><br/>  ;For Unix with long file names<br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-logical-pathname-translations">logical-pathname-translations</a> <span class="syntax-string">"prog"</span>)</span>
        <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-string">"CODE;*.*.*"</span>             <span class="syntax-string">"/lib/prog/"</span>)</span>)</span></span>)</span>
</span></code></pre><br/><br/>  ;Sample use of that logical pathname.  All return values<br/>  ;are of course implementation-specific.<br/>  <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-translate-logical-pathname">translate-logical-pathname</a> <span class="syntax-string">"prog:code;documentation.lisp"</span>)</span>
</span></code><br/>  <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; /lib/prog/documentation.lisp<br/><br/>  ;For Unix with 14-character file names, using .lisp as the type<br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-logical-pathname-translations">logical-pathname-translations</a> <span class="syntax-string">"prog"</span>)</span>
        <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-string">"CODE;DOCUMENTATION.*.*"</span> <span class="syntax-string">"/lib/prog/docum.*"</span>)</span>
          <span class="syntax-cons">(<span class="syntax-string">"CODE;*.*.*"</span>             <span class="syntax-string">"/lib/prog/"</span>)</span>)</span></span>)</span>
</span></code></pre><br/><br/>  ;Sample use of that logical pathname.  All return values<br/>  ;are of course implementation-specific.<br/>  <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-translate-logical-pathname">translate-logical-pathname</a> <span class="syntax-string">"prog:code;documentation.lisp"</span>)</span>
</span></code><br/>  <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; /lib/prog/docum.lisp<br/><br/>  ;For Unix with 14-character file names, using .l as the type<br/>  ;The second translation shortens the compiled file type to .b<br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-logical-pathname-translations">logical-pathname-translations</a> <span class="syntax-string">"prog"</span>)</span>
        <span class="syntax-quasiquote">`<span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-string">"**;*.LISP.*"</span>            <span class="syntax-unquote">,<span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-logical-pathname">logical-pathname</a> <span class="syntax-string">"PROG:**;*.L.*"</span>)</span></span>)</span>
          <span class="syntax-cons">(<span class="syntax-unquote">,<span class="syntax-cons">(<a class="function-reference" href="../chapter-24.xhtml#function-compile-file-pathname">compile-file-pathname</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-logical-pathname">logical-pathname</a> <span class="syntax-string">"PROG:**;*.LISP.*"</span>)</span>)</span></span>
                                    <span class="syntax-unquote">,<span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-logical-pathname">logical-pathname</a> <span class="syntax-string">"PROG:**;*.B.*"</span>)</span></span>)</span>
          <span class="syntax-cons">(<span class="syntax-string">"CODE;DOCUMENTATION.*.*"</span> <span class="syntax-string">"/lib/prog/documentatio.*"</span>)</span>
          <span class="syntax-cons">(<span class="syntax-string">"CODE;*.*.*"</span>             <span class="syntax-string">"/lib/prog/"</span>)</span>)</span></span>)</span>
</span></code></pre><br/><br/>  ;Sample use of that logical pathname.  All return values<br/>  ;are of course implementation-specific.<br/>  <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-translate-logical-pathname">translate-logical-pathname</a> <span class="syntax-string">"prog:code;documentation.lisp"</span>)</span>
</span></code><br/>  <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; /lib/prog/documentatio.l<br/><br/>  ;For a Cray with 6 character names and no directories, types, or versions.<br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-logical-pathname-translations">logical-pathname-translations</a> <span class="syntax-string">"prog"</span>)</span>
        <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">l</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-string">"MAIN"</span> <span class="syntax-string">"PGMN"</span>)</span>
                   <span class="syntax-cons">(<span class="syntax-string">"AUXILIARY"</span> <span class="syntax-string">"PGAUX"</span>)</span>
                   <span class="syntax-cons">(<span class="syntax-string">"DOCUMENTATION"</span> <span class="syntax-string">"PGDOC"</span>)</span>)</span></span>)</span>
              <span class="syntax-cons">(<span class="syntax-interned-symbol">logpath</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-logical-pathname">logical-pathname</a> <span class="syntax-string">"prog:code;"</span>)</span>)</span>
              <span class="syntax-cons">(<span class="syntax-interned-symbol">phypath</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-pathname">pathname</a> <span class="syntax-string">"XXX"</span>)</span>)</span>)</span>
          <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-append">append</a>
            <span class="syntax-line-comment syntax-comment">;; Translations for source files
</span>            <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-mapcar">mapcar</a> <span class="syntax-function">#'<span class="syntax-cons">(<a class="macro-reference" href="../chapter-3.xhtml#macro-lambda">lambda</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span>)</span>
                        <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-log">log</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-first">first</a> <span class="syntax-interned-symbol">x</span>)</span>)</span>
                              <span class="syntax-cons">(<span class="syntax-interned-symbol">phy</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-second">second</a> <span class="syntax-interned-symbol">x</span>)</span>)</span>)</span>
                          <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-list">list</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-make-pathname">make-pathname</a> <span class="syntax-keyword-symbol">:name</span> <a class="function-reference" href="../chapter-12.xhtml#function-log">log</a>
                                               <span class="syntax-keyword-symbol">:type</span> <span class="syntax-string">"LISP"</span>
                                               <span class="syntax-keyword-symbol">:version</span> <span class="syntax-keyword-symbol">:wild</span>
                                               <span class="syntax-keyword-symbol">:defaults</span> <span class="syntax-interned-symbol">logpath</span>)</span>
                                <span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-make-pathname">make-pathname</a> <span class="syntax-keyword-symbol">:name</span> <span class="syntax-interned-symbol">phy</span>
                                               <span class="syntax-keyword-symbol">:defaults</span> <span class="syntax-interned-symbol">phypath</span>)</span>)</span>)</span>)</span></span>
                    <span class="syntax-interned-symbol">l</span>)</span>
            <span class="syntax-line-comment syntax-comment">;; Translations for compiled files
</span>            <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-mapcar">mapcar</a> <span class="syntax-function">#'<span class="syntax-cons">(<a class="macro-reference" href="../chapter-3.xhtml#macro-lambda">lambda</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span>)</span>
                        <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let*">let*</a> <span class="syntax-cons">(<span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-log">log</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-first">first</a> <span class="syntax-interned-symbol">x</span>)</span>)</span>
                               <span class="syntax-cons">(<span class="syntax-interned-symbol">phy</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-second">second</a> <span class="syntax-interned-symbol">x</span>)</span>)</span>
                               <span class="syntax-cons">(<span class="syntax-interned-symbol">com</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-24.xhtml#function-compile-file-pathname">compile-file-pathname</a>
                                      <span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-make-pathname">make-pathname</a> <span class="syntax-keyword-symbol">:name</span> <a class="function-reference" href="../chapter-12.xhtml#function-log">log</a>
                                                     <span class="syntax-keyword-symbol">:type</span> <span class="syntax-string">"LISP"</span>
                                                     <span class="syntax-keyword-symbol">:version</span> <span class="syntax-keyword-symbol">:wild</span>
                                                     <span class="syntax-keyword-symbol">:defaults</span> <span class="syntax-interned-symbol">logpath</span>)</span>)</span>)</span>)</span>
                          <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">phy</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-17.xhtml#function-concatenate">concatenate</a> <span class="syntax-quote">'<a class="function-reference" href="../chapter-16.xhtml#function-string">string</a></span> <span class="syntax-interned-symbol">phy</span> <span class="syntax-string">"B"</span>)</span>)</span>
                          <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">com</span>
                                <span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-make-pathname">make-pathname</a> <span class="syntax-keyword-symbol">:name</span> <span class="syntax-interned-symbol">phy</span>
                                               <span class="syntax-keyword-symbol">:defaults</span> <span class="syntax-interned-symbol">phypath</span>)</span>)</span>)</span>)</span></span>
                    <span class="syntax-interned-symbol">l</span>)</span>)</span>)</span>)</span>
</span></code></pre><br/><br/>  ;Sample use of that logical pathname.  All return values<br/>  ;are of course implementation-specific.<br/>  <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-translate-logical-pathname">translate-logical-pathname</a> <span class="syntax-string">"prog:code;documentation.lisp"</span>)</span>
</span></code><br/>  <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; PGDOC<br/><br/></pre></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2><ol><li> Large programs can be moved between sites without changing any pathnames, provided all pathnames used are logical.  A portable system construction tool can be created that operates on programs defined as sets of files named by logical pathnames. <br/></li><li> Logical pathname syntax was chosen to be easily translated into most popular file systems, while still being powerful enough for storing large programs.  Although they have hierarchical directories, extended wildcard matching, versions, and no limit on the length of names, they can be mapped onto a less capable real file file system by translating each directory that is used into a flat directory name, doing wildcards in Lisp rather than in the file system, treating all versions as :newest, and/or using translations to shorten long names. <br/>Logical pathname words are restricted to non-case-sensitive letters, digits, and hyphens to avoid creating problems with real file systems that support limited character sets for file naming.  Other characters could have been mapped onto such file systems through translations, but that didn't seem worth the trouble.  Logical pathnames have to be non-case-sensitive or it would be very difficult to map them onto a non-case-sensitive file system. <br/>Features such as :UP and :BACK relative directories and a namestring syntax for the root directory were not felt to be necessary in logical pathnames.  They could be added later if a need emerges. <br/>It is not a goal of logical pathnames to be able to represent all possible file names.  Their goal is rather to represent just enough file names to be useful for storing software.  Real pathnames, in contrast, need to provide a uniform interface to all possible file names, including names and naming conventions that are not under the control of Common Lisp. <br/>The choice of logical pathname syntax, using colon, semicolon, and period, was guided by the goals of being visually distinct from real file systems and minimizing the use of special characters. <br/>The consequences of using any value not specified here as a logical pathname component are unspecified, for the benefit of the Explorer. <br/></li><li> The <a class="function-reference" href="../chapter-19.xhtml#function-logical-pathname">LOGICAL-PATHNAME</a> function is separate from the <a class="function-reference" href="../chapter-19.xhtml#function-pathname">PATHNAME</a> function so that the syntax of logical pathname namestrings does not constrain the syntax of physical pathname namestrings in any way.  Logical pathname syntax must be defined by Common Lisp so that logical pathnames can be conveniently exchanged between implementations, but physical pathname syntax is dictated by forces outside our control. <br/>3b,c. Allowing <a class="function-reference" href="../chapter-19.xhtml#function-parse-namestring">PARSE-NAMESTRING</a> and <a class="function-reference" href="../chapter-19.xhtml#function-merge-pathnames">MERGE-PATHNAMES</a> to recognize logical pathname namestrings in these situations provides for natural operations on logical pathnames.  Frequently a string containing just a name, or a name and a type, will be recognized as a logical pathname by merging it against a default containing a logical pathname host and directory. <br/>3d. Recognition of logical pathname namestrings by <a class="function-reference" href="../chapter-19.xhtml#function-pathname">PATHNAME</a> and related functions is left up to each implementation because some implementations definitely require this, other implementations don't want to do this, and nobody wants to change.  In any case, Common Lisp historically has avoided saying anything about the syntax of the strings accepted by the <a class="function-reference" href="../chapter-19.xhtml#function-pathname">PATHNAME</a> function, and point 3d preserves that position. <br/>3b,7f. Leaving it implementation defined whether a string, used as the host argument to <a class="function-reference" href="../chapter-19.xhtml#function-parse-namestring">PARSE-NAMESTRING</a> or the :host argument to <a class="function-reference" href="../chapter-19.xhtml#function-make-pathname">MAKE-PATHNAME</a>, can be recognized as logical pathname host name is for the same reason as point 3d.  It allows each implementation to decide whether there is one namespace or two.  The correct way to write this is: <br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-make-pathname">MAKE-PATHNAME</a> <span class="syntax-keyword-symbol">:HOST</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-pathname-host">PATHNAME-HOST</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-logical-pathname">LOGICAL-PATHNAME</a> <span class="syntax-string">"hostname:"</span>)</span>)</span>
                   <span class="syntax-interned-symbol">...</span>)</span>
</span></code></pre> <br/></li><li> Logical pathname versions could have been supported on real file systems that do not have versions by defining a kind of translation to encode the version number in the name.  However, the typical use of versions is such that on a file system without versions, people would rather just store one version of a file, and not preserve the version information by encoding it somehow in the name.  This is different from the typical use of types or directories, where the files with different values in those components are truly distinct and everything would break if you only kept one file. <br/>5,13. The <a class="function-reference" href="../chapter-24.xhtml#function-compile-file-pathname">COMPILE-FILE-PATHNAME</a> function and the specification of "<a class="package-reference" href="../chapter-A.xhtml#package-lisp">LISP</a>" as the type of a logical pathname for a Common Lisp source file together provide enough information about compilation for a portable system construction tool that uses logical pathnames to work.  Suppose you want to call <a class="function-reference" href="../chapter-24.xhtml#function-compile-file">COMPILE-FILE</a> only if the source file is newer than the compiled file.  To do that, you have to have a way to know the name of the compiled file without actually calling <a class="function-reference" href="../chapter-24.xhtml#function-compile-file">COMPILE-FILE</a>. No standard file type for compiler output is proposed, because in some implementations the compiler produces one of several file types, depending on a variety of <a class="glossary-reference" href="../chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a> circumstances. <a class="function-reference" href="../chapter-24.xhtml#function-compile-file-pathname">COMPILE-FILE-PATHNAME</a> provides access to the "default[ing] in a manner appropriate to the implementation's file system conventions" mentioned in the CLtL documentation of <a class="function-reference" href="../chapter-24.xhtml#function-compile-file">COMPILE-FILE</a>. <br/>6. The use of the logical pathname host name "SYS" for the implementation is current practice.  Standardizing on this name helps users choose logical pathname host names that avoid conflicting with <a class="glossary-reference" href="../chapter-26.xhtml#glossary-implementation-defined">implementation-defined</a> names. <br/>7. Accepting logical pathnames for file access is a natural extension of the file access functions and makes it easier to program using only logical pathnames in situations where that is appropriate. <br/>8. The <a class="function-reference" href="../chapter-19.xhtml#function-logical-pathname">LOGICAL-PATHNAME</a> class exists so that methods can distinguish logical pathnames from regular pathnames. <br/>9. See point 3 above. <br/>10. <a class="function-reference" href="../chapter-19.xhtml#function-translate-logical-pathname">TRANSLATE-LOGICAL-PATHNAME</a> is the heart of the logical pathname feature.  Allowing <a class="function-reference" href="../chapter-19.xhtml#function-translate-logical-pathname">TRANSLATE-LOGICAL-PATHNAME</a> on a physical pathname, simply returning the argument, makes some programs easier to write. Additional implementation defined translations make it possible for implementations with unusual file systems to offer some help to the user in setting up the translations for a logical pathname host, by handling some of the work automatically.  Logical pathnames that translate to other logical pathnames are a feature that several people have requested. <br/>11. <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">SETF</a> of <a class="function-reference" href="../chapter-19.xhtml#function-logical-pathname-translations">LOGICAL-PATHNAME-TRANSLATIONS</a> is a simple way for a user to define a new logical pathname host.  Using <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">SETF</a> makes it possible to add to or modify the translations of an existing logical pathname host. <br/>It is always up to the person who writes the translation rules for a particular logical pathname host to a particular physical file system to make sure that the logical pathnames that are actually going to be used translate to valid pathnames for the particular file system, and that no two logical pathnames that are supposed to be distinct translate to the same physical pathname. <br/>12. Loading of logical pathname translations from a site-dependent file allows software to be distributed using logical pathnames.  The assumed model of software distribution is a division of labor between the supplier of the software and the user installing it.  The supplier chooses logical pathnames to name all the files used or created by the software, and supplies examples of logical pathname translations for a few popular file systems.  Each example uses an assumed directory and/or device name, assumes local file naming conventions, and provides translations that will translate all the logical pathnames used or generated by the particular software into valid physical pathnames. For a powerful file system these translations can be quite simple.  For a more restricted file system, it may be necessary to list an explicit translation for every logical pathname used, for example when dealing with restrictions on the maximum length of a file name. <br/>The user installing the software decides on which device and/or directory to store the files and edits the example logical pathname translations accordingly.  If necessary, the user also adjusts the translations for local file naming conventions and any other special aspects of the user's local file system policy and local Common Lisp implementation.  For example, the files might be divided among several file server hosts to share the load.  The process of defining site-customized logical pathname translations is quite easy for a user of a popular file system for which the software supplier has provided an example.  A user of a more unusual file system might have to take more time; the supplier can help by providing a list of all the logical pathnames used or generated by the software. <br/>Once the user has created a suitable <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">SETF</a> of <a class="function-reference" href="../chapter-19.xhtml#function-logical-pathname-translations">LOGICAL-PATHNAME-TRANSLATIONS</a> form, he can evaluate that form and then load and run the software.  It may be necessary to use the translations again, or on another workstation at the same site, so it is best to save the <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">SETF</a> form in the standard place where it can be found later by <a class="function-reference" href="../chapter-19.xhtml#function-load-logical-pathname-translations">LOAD-LOGICAL-PATHNAME-TRANSLATIONS</a>. Often a software supplier will include a program for restoring software from the distribution medium to the file system, and a program for loading the software from the file system into a Common Lisp, and these programs will start by calling <a class="function-reference" href="../chapter-19.xhtml#function-load-logical-pathname-translations">LOAD-LOGICAL-PATHNAME-TRANSLATIONS</a> to make sure that the logical pathname host is defined. <br/>Note that the <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">SETF</a> of <a class="function-reference" href="../chapter-19.xhtml#function-logical-pathname-translations">LOGICAL-PATHNAME-TRANSLATIONS</a> form isn't part of the program, it's separate.  It's written by the user, not by the software supplier.  That separation, and a uniform convention for how to do the separation, are the key aspects of logical pathnames.  For small programs involving only a handful of files, it doesn't matter much.  The real benefits come with large programs with hundreds or thousands of files and more complicated situations such as program-generated file names or porting a program developed on a system with long file names onto a system with a very restrictive limit on the length of file names. <br/></li></ol></section><section id="section-Current practice" class="section"><h2 class="section-title">Current practice</h2>  Symbolics Genera has had a similar facility for many years.  It is used   extensively for software distribution by Symbolics and its customers.   The Genera facility uses the same logical pathname syntax but different   function names, and is somewhat more complicated.  The extra complexity   is not necessary in the Common Lisp standard. <br/>  The <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>.I. Explorer also has a comparable logical pathname facility,   although the translation mechanism is unfortunately less general than   proposed here.  The namestring syntax used is slightly different: <br/>    host ":" [{directory "."}* directory ";"] [name] ["." type] ["#" version] <br/>  The newest version is indicated by "&gt;" instead of "newest". <br/>  Macintosh Allegro Common Lisp) has a logical pathname feature which is   somewhat simpler but aimed at solving the same problems.  It has logical   directory names, to simplify access to sets of files in differently named   directories <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">an</span> <span class="syntax-interned-symbol">especially</span> <span class="syntax-interned-symbol">severe</span> <span class="syntax-interned-symbol">problem</span> <span class="syntax-interned-symbol">on</span> <span class="syntax-interned-symbol">micros</span> <span class="syntax-interned-symbol">where</span> <span class="syntax-interned-symbol">everybody</span> <span class="syntax-interned-symbol">just</span>
  <span class="syntax-interned-symbol">has</span> <span class="syntax-interned-symbol">to</span> <span class="syntax-interned-symbol">have</span> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">different</span> <span class="syntax-interned-symbol">pet</span> <span class="syntax-interned-symbol">name</span> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">their</span> <span class="syntax-interned-symbol">hard</span> <span class="syntax-interned-symbol">disk</span>)</span>
</span></code></pre>.  This isn't really   the same as simplifying access to different file systems, although of   course solving the latter automatically solves the former.  In general,   access to different file systems requires translating names and types,   not just translating directories. <br/>  Symbolics Genera offers a function for translating from a physical   pathname back to a logical pathname.  There are a number of problems with   this, and so it has not been proposed here.  An earlier version specified   <a class="function-reference" href="../chapter-19.xhtml#function-translate-logical-pathname">TRANSLATE-LOGICAL-PATHNAME</a> to return enough information to allow the user   program to perform the backtranslation itself, but that hsd problems   so it was removed. <br/>  The Genera equivalent of <a class="function-reference" href="../chapter-19.xhtml#function-load-logical-pathname-translations">LOAD-LOGICAL-PATHNAME-TRANSLATIONS</a> looks for   a file named <span class="issue-reference error">issue:SYS</span>;hostname.TRANSLATIONS. <br/>  Current practice in Genera, Explorer, and Macintosh has one namespace for   both logical and physical namestrings.  This proposal allows an   implementation to choose to have one namespace or to have two separate   namespaces for namestrings. <br/></section><section id="section-Cost to Implementors" class="section"><h2 class="section-title">Cost to Implementors</h2>  This is a fairly complex facility, but its performance is unimportant   so a straightforward implementation should suffice.  Most of the   complexity comes in dealing with unusual file systems, such as ones   that don't allow long file names. <br/></section><section id="section-Cost to Users" class="section"><h2 class="section-title">Cost to Users</h2>  None. <br/></section><section id="section-Cost of non-adoption" class="section"><h2 class="section-title">Cost of non-adoption</h2>  Portable software construction and distribution will have to rely on   <a class="glossary-reference" href="../chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a> kludges.  Lisp software will continue to be   difficult to install. <br/></section><section id="section-Performance impact" class="section"><h2 class="section-title">Performance impact</h2>  None. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>  Avoid cost of non-adoption. <br/></section><section id="section-Esthetics" class="section"><h2 class="section-title">Esthetics</h2>  Improved portability of large programs. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>  <a class="issue-reference" href="#issue-pathname-logical">X3J13 Issue PATHNAME-LOGICAL</a> fundamentally depends on <a class="issue-reference" href="../issues/pathname-wild.xhtml#issue-pathname-wild">X3J13 Issue PATHNAME-WILD</a>.  If   <a class="issue-reference" href="../issues/pathname-wild.xhtml#issue-pathname-wild:new-functions">PATHNAME-WILD:NEW-FUNCTIONS</a> does not pass, <a class="issue-reference" href="#issue-pathname-logical">PATHNAME-LOGICAL</a> cannot pass. <br/>  If <span class="issue-reference error">issue:PATHNAME-CANONICAL-TYPE</span> passes, it will affect the   behavior of the function <a class="function-reference" href="../chapter-19.xhtml#function-translate-pathname">TRANSLATE-PATHNAME</a> and therefore the behavior of   the function <a class="function-reference" href="../chapter-19.xhtml#function-translate-logical-pathname">TRANSLATE-LOGICAL-PATHNAME</a>.  When a logical pathname   translation has from-wildcard and to-wildcard type components that are   :WILD or omitted, translation of the type will be guided by canonical   types.  If <span class="issue-reference error">issue:PATHNAME-CANONICAL-TYPE</span> fails to pass, it will   either have to be done behind the scenes by <a class="function-reference" href="../chapter-19.xhtml#function-translate-pathname">TRANSLATE-PATHNAME</a> or users   will have to write more verbose translations that individually specify   the handling of each file type <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">as</span> <span class="syntax-interned-symbol">shown</span> <span class="syntax-interned-symbol">in</span> <a class="function-reference" href="../chapter-5.xhtml#function-some">some</a> <span class="syntax-interned-symbol">of</span> <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <span class="syntax-interned-symbol">examples</span> <span class="syntax-interned-symbol">here</span>)</span>
</span></code>. </section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>