<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” UNDEFINED-VARIABLES-AND-FUNCTIONS</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">UNDEFINED-VARIABLES-AND-FUNCTIONS</span><br/><ol class="local-toc"><li><a href="#section-Status">Status</a><ol> </ol></li><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit history">Edit history</a><ol> </ol></li><li><a href="#section-Problem Description">Problem Description</a><ol> </ol></li><li><a href="#issue-undefined-variables-and-functions:compromise">Proposal COMPROMISE</a><ol> </ol></li><li><a href="#section-Test Case">Test Case</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Current Practice">Current Practice</a><ol> </ol></li><li><a href="#section-Cost to Implementors">Cost to Implementors</a><ol> </ol></li><li><a href="#section-Cost to Users">Cost to Users</a><ol> </ol></li><li><a href="#section-Cost of Non-Adoption">Cost of Non-Adoption</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Aesthetics">Aesthetics</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue UNDEFINED-VARIABLES-AND-FUNCTIONS [NIL] [CHANGE]</h1><section id="section-Status" class="status-passed section"><h2 class="section-title">Status</h2>Passed, as amended, Jun89 X3J13 </section><section id="section-References" class="section"><h2 class="section-title">References</h2>5.1.2 Variables (CLtL pp55-56), Slots (88-002R, p1-10) </section><section id="section-Edit history" class="section"><h2 class="section-title">Edit history</h2>29-Nov-88, Version 1 by Pitman 3-Jul-89, Version 2 by Masinter (as per Jun89X3J13) </section><section id="section-Problem Description" class="section"><h2 class="section-title">Problem Description</h2>  CLtL does not specify what happens if you attempt to call a named function   which is in fact undefined. In most implementations, it would be devastating to   actually jump to code which you had not verified to be a function, so this error   should be easily caught &ndash; yet, CLtL does not guarantee that an error will be   signalled even in the safest, least fast <a class="declaration-reference" href="../chapter-3.xhtml#declaration-optimize">optimize</a> settings. <br/>  CLtL <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">p56</span>)</span>
</span></code></pre> specifies that "it is an error to refer to a variable that is unbound." <br/>  CLOS <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">p1-10</span>)</span>
</span></code></pre> specifies that "when an unbound slot is read, the generic function   <a class="function-reference" href="../chapter-7.xhtml#function-slot-unbound">slot-unbound</a> is invoked. The system-supplied primary method for <a class="function-reference" href="../chapter-7.xhtml#function-slot-unbound">slot-unbound</a>   signals an error." <br/>  CLOS and CLtL are not in agreement on their treatment of unbound variables. <br/>  CLtL is very weak in that it guarantees no support for reliably detecting   and signalling an error when the error situation occurs, even in the safest,   least fast <a class="declaration-reference" href="../chapter-3.xhtml#declaration-optimize">optimize</a> setting. <br/>  CLOS is very strong in that it forces detection of the error in all   situations &ndash; even in the fastest, least safe <a class="declaration-reference" href="../chapter-3.xhtml#declaration-optimize">optimize</a> setting. <br/>  The disparate positions for treatment of variables and slots should be   reconciled, either by finding a compromise or by justifying the apparent   inconsistency. The final story should explain function references as well. <br/></section><section class="status-passed proposal" id="issue-undefined-variables-and-functions:compromise"><h2 class="section-title">Proposal COMPROMISE</h2>  Define that reading an undefined function or an unbound variable   must be detected in the highest safety setting,   but the effect is undefined in any other safety setting. That is,    <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> Reading an undefined function should signal an error.    <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> Reading an an unbound variable should signal an error. <br/>  By ``reading an undefined function'' in the above, we mean to    include both references to the function using the <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a>    special form, such as F in <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> <span class="syntax-interned-symbol">F</span>)</span>
</span></code></pre> and references to the   function in a call, such as F in <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">F</span> <span class="syntax-interned-symbol">X</span>)</span>
</span></code></pre>. <br/>  For the case of <a class="declaration-reference" href="../chapter-3.xhtml#declaration-inline">inline</a> functions <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">in</span> <span class="syntax-interned-symbol">implementations</span> <span class="syntax-interned-symbol">where</span> <span class="syntax-interned-symbol">they</span> <span class="syntax-interned-symbol">are</span>
  <span class="syntax-interned-symbol">supported</span>)</span>
</span></code></pre>, it is permissible to consider that performing the inlining   constitutes the read, so that an <a class="function-reference" href="../chapter-5.xhtml#function-fboundp">fboundp</a> check need not be done at   execution time. Put another way, the effect of <a class="function-reference" href="../chapter-5.xhtml#function-fmakunbound">fmakunbound</a> of a function   on potentially inlined references to that function is undefined. <br/>  Specify that the type of error signalled when an undefined function   is detected is <a class="type-reference" href="../chapter-5.xhtml#type-undefined-function">undefined-function</a>, and that the <a class="glossary-reference" href="../chapter-26.xhtml#glossary-name">name</a> slot of the   <a class="type-reference" href="../chapter-5.xhtml#type-undefined-function">undefined-function</a> condition is initialized to the name of the   offending function. <br/>  Specify that the type of error signalled when a unbound variable    is detected is <a class="type-reference" href="../chapter-10.xhtml#type-unbound-variable">unbound-variable</a>, and that the <a class="glossary-reference" href="../chapter-26.xhtml#glossary-name">name</a> slot of the   <a class="type-reference" href="../chapter-10.xhtml#type-unbound-variable">unbound-variable</a> condition is initialized to the name of the   offending variable. <br/>  Introduce a new condition type, <a class="type-reference" href="../chapter-7.xhtml#type-unbound-slot">unbound-slot</a>, which inherits from   <a class="type-reference" href="../chapter-9.xhtml#type-cell-error">cell-error</a>. This new type has an additional slot, <a class="glossary-reference" href="../chapter-26.xhtml#glossary-instance">instance</a>, which   can be initialized using the :INSTANCE keyword to <a class="function-reference" href="../chapter-9.xhtml#function-make-condition">make-condition</a>.   Introdue a new function <a class="function-reference" href="../chapter-7.xhtml#function-unbound-slot-instance">unbound-slot-instance</a> to access <a class="glossary-reference" href="../chapter-26.xhtml#glossary-instance">instance</a> slot. <br/>  Specify that the type of error signalled by the default primary   method for the <a class="function-reference" href="../chapter-7.xhtml#function-slot-unbound">slot-unbound</a> generic function is <a class="type-reference" href="../chapter-7.xhtml#type-unbound-slot">unbound-slot</a>,   and that the <a class="glossary-reference" href="../chapter-26.xhtml#glossary-name">name</a> slot of the <a class="type-reference" href="../chapter-7.xhtml#type-unbound-slot">unbound-slot</a> condition is initialized   to the name of the offending variable, and that the <a class="glossary-reference" href="../chapter-26.xhtml#glossary-instance">instance</a> slot   of the <a class="type-reference" href="../chapter-7.xhtml#type-unbound-slot">unbound-slot</a> condition is initialized to the offending instance. <br/></section><section id="section-Test Case" class="section"><h2 class="section-title">Test Case</h2><pre>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-3.xhtml#function-proclaim">proclaim</a> <span class="syntax-quote">'<span class="syntax-cons">(<a class="declaration-reference" href="../chapter-3.xhtml#declaration-optimize">optimize</a> <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-safety">safety</a> <span class="syntax-number">3</span>)</span> <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-speed">speed</a> <span class="syntax-number">0</span>)</span>)</span></span>)</span>
</span></code></pre><br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">FOO</span> <span class="syntax-symbol">()</span> <span class="syntax-interned-symbol">X</span>)</span>
</span></code></pre><br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">FOO</span>)</span>
</span></code></pre><br/>  &gt;&gt;Error: The variable X is not bound.<br/>  ...<br/><br/></pre></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>  This makes it easier to treat slots like variables. <br/>  This makes it possible to better rely on an unbound variable error being   signalled when one has occurred. <br/>  This makes it possible to compile out useless error checking in CLOS   code where the code is debugged and the checking is redundant. <br/>  For the case of undefined functions, blindly jumping to an undefined   function is an incredibly dangerous thing to do. Every implementation   should guarantee at least some way to get error checking of undefined   functions. <br/></section><section id="section-Current Practice" class="section"><h2 class="section-title">Current Practice</h2>  Until recently, Symbolics Cloe did not ever signal an error on unbound   variable, even in the safest case. The excuse was that this was a CLtL   didn't require it, but it was sometimes an impediment to debugging. <br/>  Some benchmarks for Symbolics Cloe (which currently only claims to   implement New Flavors, not CLOS) could be faster if checking for unbound   instance variables could be optimized away. <br/>  Symbolics Genera doesn't care about safety issues in variable access   because the check can be done by microcode. <br/></section><section id="section-Cost to Implementors" class="section"><h2 class="section-title">Cost to Implementors</h2>  This change does not force a change to any current implementation, except   those which do not yet signal unbound variable or undefined function errors   even in the safest setting. <br/></section><section id="section-Cost to Users" class="section"><h2 class="section-title">Cost to Users</h2>  This checking might slow down some code which is written for the safest   setting yet does not need this check. <br/>  Any implementation-specific code which depended on these references not   signalling would be broken. Such code was not portable, of course. <br/>  Any CLOS code which depends on <a class="function-reference" href="../chapter-7.xhtml#function-slot-unbound">slot-unbound</a> being called even in low safety   settings would be broken. The amount of such code at this point is likely   to be little or none. If such cases did exist, local or global changes to   safety settings would correct the problem <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">at</span> <a class="function-reference" href="../chapter-5.xhtml#function-some">some</a> <span class="syntax-interned-symbol">cost</span> <span class="syntax-interned-symbol">in</span> <a class="symbol-reference" href="../chapter-3.xhtml#symbol-speed">speed</a>)</span>
</span></code></pre>. <br/></section><section id="section-Cost of Non-Adoption" class="section"><h2 class="section-title">Cost of Non-Adoption</h2>  Some important error checking would not occur.   Some important optimizations could not be done.   The language would seem internally less consistent. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>  The costs of non-adoption would be avoided. <br/></section><section id="section-Aesthetics" class="section"><h2 class="section-title">Aesthetics</h2>  This would regularize things a little. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>  Pitman thinks this would be a good idea. </section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>