<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp — DEFMACRO-BLOCK-SCOPE</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">DEFMACRO-BLOCK-SCOPE</span><br/><ol class="local-toc"><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit History">Edit History</a><ol> </ol></li><li><a href="#section-Problem Description">Problem Description</a><ol> </ol></li><li><a href="#issue-defmacro-block-scope:includes-bindings">Proposal INCLUDES-BINDINGS</a><ol> <li><a href="#section-Rationale">Rationale</a><ol> </ol></li></ol></li><li><a href="#issue-defmacro-block-scope:excludes-bindings">Proposal EXCLUDES-BINDINGS</a><ol> <li><a href="#section-Rationale">Rationale</a><ol> </ol></li></ol></li><li><a href="#section-Current Practice">Current Practice</a><ol> </ol></li><li><a href="#section-Cost to implementors">Cost to implementors</a><ol> </ol></li><li><a href="#section-Cost to users">Cost to users</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue DEFMACRO-BLOCK-SCOPE [Cleanup] [CLARIFICATION]</h1><section id="section-References" class="section"><h2 class="section-title">References</h2><a class="issue-reference" href="../issues/flet-implicit-block.xhtml#issue-flet-implicit-block">X3J13 Issue FLET-IMPLICIT-BLOCK</a> </section><section id="section-Edit History" class="section"><h2 class="section-title">Edit History</h2>V1, 24 Oct 1989, Sandra Loosemore <br/></section><section id="section-Problem Description" class="section"><h2 class="section-title">Problem Description</h2>Does the scope of the implicit <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-block">block</a> that surrounds the body of <a class="macro-reference" href="../chapter-3.xhtml#macro-defmacro">defmacro</a>, <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-macrolet">macrolet</a>, DEFINE-SETF-METHOD, <a class="macro-reference" href="../chapter-4.xhtml#macro-deftype">deftype</a>, and <a class="macro-reference" href="../chapter-3.xhtml#macro-define-compiler-macro">define-compiler-macro</a> <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <span class="syntax-interned-symbol">forms</span> <span class="syntax-interned-symbol">that</span> <span class="syntax-interned-symbol">define</span> <span class="syntax-interned-symbol">functional</span> <span class="syntax-interned-symbol">objects</span> <span class="syntax-interned-symbol">that</span>
<span class="syntax-interned-symbol">also</span> <span class="syntax-interned-symbol">support</span> <span class="syntax-interned-symbol">destructuring</span>)</span>
</span></code></pre> include the bindings of the variables in the destructuring pattern?  In other words, is the <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-block">block</a> visible during the evaluation of initialization forms included in the lambda list? <br/>It seems clear that in forms such as <a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a> which do not support destructuring, the <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-block">block</a> surrounds only the body and includes none of the lambda-variable binding forms. <br/>There are two proposals, <a class="proposal-reference" href="#issue-defmacro-block-scope:includes-bindings">INCLUDES-BINDINGS</a> and <a class="proposal-reference" href="#issue-defmacro-block-scope:excludes-bindings">EXCLUDES-BINDINGS</a>. <br/></section><section class="status-unknown proposal" id="issue-defmacro-block-scope:includes-bindings"><h2 class="section-title">Proposal INCLUDES-BINDINGS</h2>Clarify that the scope of the implicit <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-block">block</a> in the functions defined by the forms listed above does include the initialization forms within the lambda list as well as the body forms. <br/><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>One can view the destructuring code which binds the variables in the lambda list as part of the body of the function (for example, as  equivalent to a <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let*">let*</a> or <a class="macro-reference" href="../chapter-5.xhtml#macro-destructuring-bind">destructuring-bind</a> construct), which would be inside the scope of the <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-block">block</a> in an ordinary function-defining form. Some users might find this behavior marginally more useful than the other alternative. <br/></section></section><section class="status-unknown proposal" id="issue-defmacro-block-scope:excludes-bindings"><h2 class="section-title">Proposal EXCLUDES-BINDINGS</h2>Clarify that the scope of the implicit <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-block">block</a> in the functions defined by the forms listed above includes only the body forms and not the initialization forms within the lambda list. <br/><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>One can view the destructuring code which binds the variables in the lambda list as part of the ordinary lambda-list processing <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">example</span><span class="syntax-interned-symbol">,
  as</span> <span class="syntax-interned-symbol">equivalent</span> <span class="syntax-interned-symbol">to</span> <span class="syntax-interned-symbol">binding</span> <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-aux">&amp;AUX</a> <span class="syntax-interned-symbol">variables</span>)</span>
</span></code></pre>, which would be outside the scope of the <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-block">block</a> in an ordinary function-defining form.  Some people might find this to be more consistent with the scoping of the <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-block">block</a>  in the non-destructuring cases. <br/></section></section><section id="section-Current Practice" class="section"><h2 class="section-title">Current Practice</h2>Lucid <a class="package-reference" href="../chapter-11.xhtml#package-cl">cl</a>, Utah <a class="package-reference" href="../chapter-11.xhtml#package-cl">cl</a>, and CMU Common Lisp currently implement proposal <a class="proposal-reference" href="#issue-defmacro-block-scope:includes-bindings">INCLUDES-BINDINGS</a>.  Kyoto <a class="package-reference" href="../chapter-11.xhtml#package-cl">cl</a> implements proposal <a class="proposal-reference" href="#issue-defmacro-block-scope:excludes-bindings">EXCLUDES-BINDINGS</a>. <br/></section><section id="section-Cost to implementors" class="section"><h2 class="section-title">Cost to implementors</h2>Probably not too much effort involved to fix it. <br/></section><section id="section-Cost to users" class="section"><h2 class="section-title">Cost to users</h2>Currently nonportable user programs that depend on this being done the other way will break, but this is a rather obscure point and it is unlikely that there would be many programs affected. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>The specification of the language is made more precise. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>Sandra Loosemore says:   I don't think this issue is worth spending a lot of time arguing over,   since both alternatives seem equally plausible to me.  I suggest we   just adopt whichever alternative that is closest to current practice.   I'm missing information on several implementations. &mdash;&mdash;<a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <br/></section></div></main><footer>Copyright © 2021 Jan Moringen</footer></body></html>