<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” PATHNAME-COMPONENT-VALUE</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">PATHNAME-COMPONENT-VALUE</span><br/><ol class="local-toc"><li><a href="#section-Status">Status</a><ol> </ol></li><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit history">Edit history</a><ol> </ol></li><li><a href="#section-Problem description">Problem description</a><ol> </ol></li><li><a href="#issue-pathname-component-value:specify">Proposal SPECIFY</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Current practice">Current practice</a><ol> </ol></li><li><a href="#section-Cost to Implementors">Cost to Implementors</a><ol> </ol></li><li><a href="#section-Cost to Users">Cost to Users</a><ol> </ol></li><li><a href="#section-Cost of non-adoption">Cost of non-adoption</a><ol> </ol></li><li><a href="#section-Performance impact">Performance impact</a><ol> </ol></li><li><a href="#section-Benefits/Esthetics">Benefits/Esthetics</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue PATHNAME-COMPONENT-VALUE [NIL] [CLARIFICATION and CHANGE]</h1><h2>Related issues</h2><ul><span class="issue-reference error">issue:PATHNAME-CANONICAL-TYPE</span><a class="issue-reference" href="../issues/pathname-subdirectory-list.xhtml#issue-pathname-subdirectory-list">PATHNAME-SUBDIRECTORY-LIST</a><a class="issue-reference" href="../issues/pathname-unspecific-component.xhtml#issue-pathname-unspecific-component">PATHNAME-UNSPECIFIC-COMPONENT</a><a class="issue-reference" href="../issues/pathname-wild.xhtml#issue-pathname-wild">PATHNAME-WILD</a></ul><section id="section-Status" class="status-passed section"><h2 class="section-title">Status</h2>Passed, Jun 89 X3J13 </section><section id="section-References" class="section"><h2 class="section-title">References</h2>CLtL pp.410-3 </section><section id="section-Edit history" class="section"><h2 class="section-title">Edit history</h2>Version 1, 20-Mar-89, by Moon Version 2,  9-May-89, by Moon (rewrite based on mail) Version 3, 17-Jun-89, by Moon (add discussion, current practice) </section><section id="section-Problem description" class="section"><h2 class="section-title">Problem description</h2>  CLtL is overly restrictive on the possible values for pathname components.   These restrictions are described in a funny way that makes it unclear   whether they are requirements, guidelines, or just an example. <br/>  The restrictions are not all written down in one place, but they appear   to be as follows: <br/>  Host          nil, :wild, string, or list of strings   Device        nil, :wild, string, or something else <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-string">"structured"</span>)</span>
</span></code>   Directory     nil, :wild, string, or something else <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-string">"structured"</span>)</span>
</span></code>   Name          nil, :wild, string, or something else <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-string">"structured"</span>)</span>
</span></code>   Type          nil, :wild, or string   Version       nil, :wild, :newest, positive integer, implementation                 dependent symbol, or <a class="glossary-reference" href="../chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a> integer                 less than or equal to zero.  Suggestions include :oldest,                 :previous, :installed, 0, and -1. <br/>  <a class="issue-reference" href="../issues/pathname-unspecific-component.xhtml#issue-pathname-unspecific-component:new-token">PATHNAME-UNSPECIFIC-COMPONENT:NEW-TOKEN</a> allowed implementations to   allow any component to be :UNSPECIFIC.  This has been voted in. <br/>  <a class="issue-reference" href="../issues/pathname-subdirectory-list.xhtml#issue-pathname-subdirectory-list">pathname-subdirectory-list</a> proposes a list of strings and keyword   symbols for the directory component. <br/>  PATHNAME-CANONICAL-TYPE proposes some new operations but does not   change the possible values of the type component. <br/>  <a class="issue-reference" href="../issues/pathname-wild.xhtml#issue-pathname-wild">pathname-wild</a> proposes a portable way to test for implementation   dependent component values that indicate wildcard matching.  It   does not change the possible values of any component. <br/></section><section class="status-passed proposal" id="issue-pathname-component-value:specify"><h2 class="section-title">Proposal SPECIFY</h2>  The points of the proposal have been numbered/lettered to facilitate   discussion of individual points. <br/>  0. Pathname component value strings never contain the punctuation   characters that are used to separate pathname fields (e.g. slashes and   dots in Unix).  Punctuation characters appear only in namestrings.   Characters used as punctuation can appear in pathname component values   with a non-punctuation meaning if the file system allows it (e.g. a Unix   file name that begins with a dot). <br/>  When examining pathname components, conforming programs must be prepared   to encounter any of the following values: <br/><ol><li> Any component can be <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>, which means the component has not been specified. <br/></li><li> Any component can be :UNSPECIFIC, which means the component has no meaning in this particular pathname. <br/></li><li> The device, directory, name, and type can be strings. </li><li> The host can be any object, at the discretion of the implementation. </li><li> The directory can be a list of strings and symbols as detailed in <a class="issue-reference" href="../issues/pathname-subdirectory-list.xhtml#issue-pathname-subdirectory-list">pathname-subdirectory-list</a> (this assumes that it passes.) <br/></li><li> The version can be any symbol or any integer.  The symbol :NEWEST refers to the largest version number that already exists in the file system when reading, overwriting, appending, superseding, or directory listing an existing file, and refers to the smallest version number greater than any existing version number when creating a new file. Other symbols and integers have <a class="glossary-reference" href="../chapter-26.xhtml#glossary-implementation-defined">implementation-defined</a> meaning. It is suggested, but not required, that implementations use positive integers starting at 1 as version numbers, recognize the symbol :OLDEST to designate the smallest existing version number, and use keyword symbols for other special versions. <br/></li></ol>  Wildcard pathnames can be used with <a class="function-reference" href="../chapter-20.xhtml#function-directory">directory</a> but not with <a class="function-reference" href="../chapter-21.xhtml#function-open">open</a>, and   return true from <a class="function-reference" href="../chapter-19.xhtml#function-wild-pathname-p">wild-pathname-p</a> <code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-interned-symbol">issue</span> <span class="syntax-interned-symbol">PATHNAME-WILD</span> <span class="syntax-interned-symbol">passes</span>)</span>
</span></code>.  When   examining wildcard components of a wildcard pathname, conforming programs   must be prepared to encounter any of the following additional values   in any component or any element of a list that is the directory component: <br/>    7. :WILD, which matches anything. <br/>    8. A string containing <a class="glossary-reference" href="../chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a> special wildcard     characters. <br/>    9. Any object, representing an <a class="glossary-reference" href="../chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a> wildcard     pattern. <br/>  When constructing a pathname from components, conforming programs   must follow these rules: <br/><ol><li> Any component can be <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>.  <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> in the host may mean a default host rather than an actual <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> in some implementations. <br/></li><li> The host, device, directory, name, and type can be strings.  There are <a class="glossary-reference" href="../chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a> limits on the number and type of characters in these strings. <br/></li><li> The directory can be a list of strings and symbols as detailed in <a class="issue-reference" href="../issues/pathname-subdirectory-list.xhtml#issue-pathname-subdirectory-list">pathname-subdirectory-list</a> (this assumes that it passes.)  There are <a class="glossary-reference" href="../chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a> limits on the list's length and contents. <br/></li><li> The version can be :NEWEST. </li><li> Any component can be taken from the corresponding component of another pathname.  When the two pathnames are for different file systems <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">in</span> <span class="syntax-interned-symbol">implementations</span> <span class="syntax-interned-symbol">that</span> <span class="syntax-interned-symbol">support</span> <span class="syntax-interned-symbol">multiple</span> <span class="syntax-interned-symbol">file</span>
    <span class="syntax-interned-symbol">systems</span>)</span>
</span></code></pre>, an appropriate translation occurs.  If no meaningful translation is possible, an error is signalled.  The definitions of "appropriate" and "meaningful" are <a class="glossary-reference" href="../chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a>. <br/></li><li> When constructing a wildcard pathname, the name, type, or version can be :WILD, which matches anything. <br/></li><li> An implementation might support other values for some components, but a portable program cannot use those values.  A conforming program can use <a class="glossary-reference" href="../chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a> values but this can make it non-portable, for example, it might work only with Unix file systems. <br/></li></ol>Consequences: <br/>  The changes relative to CLtL plus <a class="issue-reference" href="../issues/pathname-unspecific-component.xhtml#issue-pathname-unspecific-component">pathname-unspecific-component</a>   are as follows: <br/>  The removal of punctuation characters during parsing is specified. <br/>  "Structured" components are disallowed in non-wildcard pathnames,   except for the specific structuring of directories specified   in <a class="issue-reference" href="../issues/pathname-subdirectory-list.xhtml#issue-pathname-subdirectory-list">X3J13 Issue PATHNAME-SUBDIRECTORY-LIST</a>. <br/>  "Structured" hosts are allowed, a generalization of CLtL's list   of strings. <br/>  The type and version can be "structured" in wildcard pathnames. <br/>  The difference between what component values a program can depend   on being able to use, versus what component values a program must   be prepared to encounter, is clarified. <br/>  The <a class="glossary-reference" href="../chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a> variations are identified explicitly. <br/></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>  This should make it easier to write portable programs that deal with   pathnames and make it easier for implementors by clarifying the   framework into which they must fit.  Also it should make it easier   to write the Common Lisp language specification by resolving some   things that were unclear about the status quo. <br/>  Adding "structured" hosts conforms to current practice. <br/>  Substituting a default host for <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> conforms to current practice   in implementations that require all pathnames to have a specific host. <br/>  Confining "structured" devices and names to wildcard pathnames, and   replacing "structured" directories with an explicit specification of   the form of the directory value, should improve portability without causing   any harm. <br/>  :WILD is only required to be supported in the name, type, or version,   which are the easiest to implement and the most useful in applications. <br/></section><section id="section-Current practice" class="section"><h2 class="section-title">Current practice</h2>  All versions of Symbolics Genera violate CLtL in the matter of hosts,   since it uses standard-objects as the host component.  Genera deviates   slightly from <a class="issue-reference" href="../issues/pathname-subdirectory-list.xhtml#issue-pathname-subdirectory-list">pathname-subdirectory-list</a>, but otherwise conforms to   <a class="issue-reference" href="#issue-pathname-component-value:specify">PATHNAME-COMPONENT-VALUE:SPECIFY</a>. <br/>  Like Genera, the Explorer current practice is to use an object instead of   a string for the host component.  The directory component is a list of   strings, not yet supporting the symbols specified in proposal   <a class="issue-reference" href="../issues/pathname-subdirectory-list.xhtml#issue-pathname-subdirectory-list">pathname-subdirectory-list</a>; other than that, the Explorer conforms to   proposal <a class="issue-reference" href="#issue-pathname-component-value:specify">PATHNAME-COMPONENT-VALUE:SPECIFY</a>. <br/>  Macintosh Allegro Common Lisp 1.2.2 uses <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> and "" for :UNSPECIFIC,   and uses a string with punctuation characters instead of a list for   the directory.  <a class="function-reference" href="../chapter-19.xhtml#function-make-pathname">make-pathname</a> won't set a component to <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> when   :DEFAULTS is used, it merges with the defaults instead.   Otherwise it seems consistent with what is proposed. <br/>  Lucid Common Lisp 3.0.1 under Unix uses <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> for :UNSPECIFIC, and uses   a list for directories of somewhat different form from what is proposed   in <a class="issue-reference" href="../issues/pathname-subdirectory-list.xhtml#issue-pathname-subdirectory-list">pathname-subdirectory-list</a>.  Lucid lets you store arbitrary information   in the version field with <a class="function-reference" href="../chapter-19.xhtml#function-make-pathname">make-pathname</a> :VERSION and will return it with   <a class="function-reference" href="../chapter-19.xhtml#function-pathname-version">pathname-version</a> <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">as</span> <span class="syntax-interned-symbol">long</span> <span class="syntax-interned-symbol">as</span> <span class="syntax-interned-symbol">it</span><span class="syntax-quote">'<span class="syntax-interned-symbol">s</span></span> <span class="syntax-interned-symbol">a</span> <a class="symbol-reference" href="../chapter-2.xhtml#symbol-symbol">symbol</a> <a class="macro-reference" href="../chapter-5.xhtml#macro-or">or</a> <span class="syntax-interned-symbol">an</span> <a class="type-reference" href="../chapter-12.xhtml#type-integer">integer</a>)</span>
</span></code>, even though   it's not used.  Otherwise it seems consistent with what is proposed. <br/>  Ibuki Common Lisp Release 01/01 behaves the same as Lucid, including the   same form of structured directory, except it doesn't have the ability to   store information in the unused pathname version field, and it has the   same bug in <a class="function-reference" href="../chapter-19.xhtml#function-make-pathname">make-pathname</a> that the Macintosh has.  Otherwise it seems   consistent with what is proposed. <br/>  Other implementations were not surveyed. <br/>  This proposal assumes that no current or planned implementation   uses "structured" names except possibly for wildcards. <br/></section><section id="section-Cost to Implementors" class="section"><h2 class="section-title">Cost to Implementors</h2>  Most implementations already conform, except for the changes required   by <a class="issue-reference" href="../issues/pathname-unspecific-component.xhtml#issue-pathname-unspecific-component">pathname-unspecific-component</a> and <a class="issue-reference" href="../issues/pathname-subdirectory-list.xhtml#issue-pathname-subdirectory-list">pathname-subdirectory-list</a>, so   the cost of this proposal itself should be minimal.  It is conceivable   that an implementation may exist that has to change its pathname   representation, for example one that uses numbers as "structured" devices.   Some implementations may have to change their treatment of punctuation   characters. <br/></section><section id="section-Cost to Users" class="section"><h2 class="section-title">Cost to Users</h2>  None. <br/></section><section id="section-Cost of non-adoption" class="section"><h2 class="section-title">Cost of non-adoption</h2>  Pathnames will continue to be a poorly specified part of the language. <br/></section><section id="section-Performance impact" class="section"><h2 class="section-title">Performance impact</h2>  None of any significance. <br/></section><section id="section-Benefits/Esthetics" class="section"><h2 class="section-title">Benefits/Esthetics</h2>  The boundary between the specified behavior of pathnames and the   <a class="glossary-reference" href="../chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a> behavior of pathnames will be more clear. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>  Sandra Loosemore comments: <br/>    As I've said before, I don't think that trying to construct or pick     apart pathnames by component can be accomplished portably in any case,     because even if you restrict the representation of what can appear in     the various components, the objects you stuff in may or may not make     sense for a particular file system.  Instead, I would much prefer to     deprecate <a class="function-reference" href="../chapter-19.xhtml#function-make-pathname">make-pathname</a> and the PATHNAME-xxx accessors and leave the     question of representation of components unspecified in the standard. <br/>    I realize that this position may be seen as being too extreme.  In     that case I'd be willing to shut up and go along with proposal <a class="proposal-reference" href="#issue-pathname-component-value:specify">SPECIFY</a>     as long as my position gets noted in the writeup. <br/>  Larry Masinter and Dave Moon both feel that we should be able to   prescribe exact pathname component values for popular file systems, so   that multiple implementations will behave the same way when using the   same file system.  Obvious candidates as the key file systems are MS/DOS,   Macintosh, Unix, and VAX/VMS.  A call for volunteers to write up tables   for any of them produced absolutely no response, however. </section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>