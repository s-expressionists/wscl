<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” CLOS-CONDITIONS-AGAIN</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">CLOS-CONDITIONS-AGAIN</span><br/><ol class="local-toc"><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit history">Edit history</a><ol> </ol></li><li><a href="#section-Problem description">Problem description</a><ol> </ol></li><li><a href="#issue-clos-conditions-again:allow-subset">Proposal ALLOW-SUBSET</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Current practice">Current practice</a><ol> </ol></li><li><a href="#section-Cost to Implementors">Cost to Implementors</a><ol> </ol></li><li><a href="#section-Cost to Users">Cost to Users</a><ol> </ol></li><li><a href="#section-Cost of non-adoption">Cost of non-adoption</a><ol> </ol></li><li><a href="#section-Performance impact">Performance impact</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Esthetics">Esthetics</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue CLOS-CONDITIONS-AGAIN [NIL] [ADDITION and CHANGE]</h1><h2>Related issues</h2><ul><li><a class="issue-reference" href="../issues/clos-conditions.xhtml#issue-clos-conditions">CLOS-CONDITIONS</a></li></ul><section id="section-References" class="section"><h2 class="section-title">References</h2>ANSI <a class="package-reference" href="../chapter-11.xhtml#package-cl">CL</a> draft specification, page 5-4 </section><section id="section-Edit history" class="section"><h2 class="section-title">Edit history</h2>30-Apr-90, Version 1 by Moon (for Pitman) 30-Apr-90, Version 2 by Moon (deal with slots) 2-May-90, Version 3 by Pitman (minor wording clarifications) 2-May-90, Version 4 by Moon (final check for typos) 5-Jun-90, Version 5 by Moon (mention multiple inheritance) 8-Jun-90, Version 6, by Moon (as amended at X3J13 meeting) </section><section id="section-Problem description" class="section"><h2 class="section-title">Problem description</h2>  The condition system should not be too tightly integrated into CLOS, for   two reasons:  Some implementations already have a native condition system   that is not based on CLOS, and it should be possible to integrate the   native conditions and the ANSI <a class="package-reference" href="../chapter-11.xhtml#package-cl">CL</a> conditions.  Some people would like to   define an ANSI Common Lisp subset that does not contain CLOS but does   contain conditions. <br/>  The problem areas are the use of <a class="macro-reference" href="../chapter-7.xhtml#macro-defclass">DEFCLASS</a>, <a class="function-reference" href="../chapter-7.xhtml#function-make-instance">MAKE-INSTANCE</a>, and <a class="macro-reference" href="../chapter-7.xhtml#macro-defmethod">DEFMETHOD</a>   to define and create conditions, rather than using more abstract macros   that conceal the implementation of conditions in terms of CLOS, and   exposure of the implementation of condition slots as CLOS slots.  If user   code was written in a more abstract way, it could run in a subset language   that did not contain CLOS. <br/>  This is Symbolics issue #7. <br/></section><section class="status-unknown proposal" id="issue-clos-conditions-again:allow-subset"><h2 class="section-title">Proposal ALLOW-SUBSET</h2><ol><li> Specify that conforming code must use <a class="macro-reference" href="../chapter-9.xhtml#macro-define-condition">DEFINE-CONDITION</a> <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-not">not</a> <a class="macro-reference" href="../chapter-7.xhtml#macro-defclass">DEFCLASS</a>)</span>
</span></code> to define conditions, and <a class="function-reference" href="../chapter-9.xhtml#function-make-condition">MAKE-CONDITION</a> <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-not">not</a> <a class="function-reference" href="../chapter-7.xhtml#function-make-instance">MAKE-INSTANCE</a>)</span>
</span></code> to make conditions.  (These two operators already exist in ANSI Common Lisp.) <br/></li><li> Specify that conforming code must use the :REPORT option of <a class="macro-reference" href="../chapter-9.xhtml#macro-define-condition">DEFINE-CONDITION</a> <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-not">not</a> <a class="macro-reference" href="../chapter-7.xhtml#macro-defmethod">DEFMETHOD</a> <span class="syntax-interned-symbol">for</span> <a class="function-reference" href="../chapter-22.xhtml#function-print-object">PRINT-OBJECT</a>)</span>
</span></code> to define a condition reporter. <br/></li><li> Specify that conforming code must not use <a class="function-reference" href="../chapter-7.xhtml#function-slot-value">SLOT-VALUE</a>, <a class="function-reference" href="../chapter-7.xhtml#function-slot-boundp">SLOT-BOUNDP</a>, <a class="function-reference" href="../chapter-7.xhtml#function-slot-makunbound">SLOT-MAKUNBOUND</a>, or <a class="macro-reference" href="../chapter-7.xhtml#macro-with-slots">WITH-SLOTS</a> on condition objects.  Instead it must call the accessor functions defined by <a class="macro-reference" href="../chapter-9.xhtml#macro-define-condition">DEFINE-CONDITION</a>. <br/></li><li> Clarify that this proposal does not rule out the use of multiple parent-types in <a class="macro-reference" href="../chapter-9.xhtml#macro-define-condition">DEFINE-CONDITION</a>. <br/></li></ol></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2><ol><li> The reasons are two:  <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> permit flexibility in making the native class system compatible    with the ANSI <a class="package-reference" href="../chapter-11.xhtml#package-cl">CL</a> one  <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> permit dialects that don't want CLOS to be available to run most    common condition-related code. <br/></li><li> The reasons are three:  <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> isolate the report part without forcing the user to deal with the    case of <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-escape*">*PRINT-ESCAPE*</a> being true.  <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> keep a <a class="package-reference" href="../chapter-11.xhtml#package-cl">CL</a> subset from having to implement <a class="macro-reference" href="../chapter-7.xhtml#macro-defmethod">DEFMETHOD</a> to get this    important functionality.  <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> don't define two ways to do the same thing. <br/></li><li> Using the existing accessor functions seems more conservative than  requiring non-CLOS subsets to implement an ersatz <a class="function-reference" href="../chapter-7.xhtml#function-slot-value">SLOT-VALUE</a> function. <br/> Note also that the requirement here (in #3) is on conforming -code<a class="function-reference" href="../chapter-12.xhtml#function--">-</a>.  An -implementation<a class="function-reference" href="../chapter-12.xhtml#function--">-</a> can permit the use of <a class="function-reference" href="../chapter-7.xhtml#function-slot-value">SLOT-VALUE</a>, <a class="function-reference" href="../chapter-7.xhtml#function-slot-boundp">SLOT-BOUNDP</a>,  <a class="function-reference" href="../chapter-7.xhtml#function-slot-makunbound">SLOT-MAKUNBOUND</a>, and/or <a class="macro-reference" href="../chapter-7.xhtml#macro-with-slots">WITH-SLOTS</a> as an extension and still be   conforming.  Programs which used such an extension would not be  conforming and might not be portable to all implementations. <br/></li><li> There is no substitute for multiple inheritance, and given the  limited set of operations that can be performed on conditions, it  is easy to fake it. <br/></li></ol></section><section id="section-Current practice" class="section"><h2 class="section-title">Current practice</h2><ol><li> <a class="macro-reference" href="../chapter-9.xhtml#macro-define-condition">DEFINE-CONDITION</a> and <a class="function-reference" href="../chapter-9.xhtml#function-make-condition">MAKE-CONDITION</a> are already in the language. </li><li> The :REPORT option to <a class="macro-reference" href="../chapter-9.xhtml#macro-define-condition">DEFINE-CONDITION</a> exists. </li><li> Some implementations support use of <a class="macro-reference" href="../chapter-7.xhtml#macro-with-slots">WITH-SLOTS</a> and some do not.  Programs that use <a class="macro-reference" href="../chapter-7.xhtml#macro-with-slots">WITH-SLOTS</a> are not yet portable. <br/></li><li> <a class="macro-reference" href="../chapter-9.xhtml#macro-define-condition">DEFINE-CONDITION</a> is already specified to support multiple inheritance. </li></ol><br/></section><section id="section-Cost to Implementors" class="section"><h2 class="section-title">Cost to Implementors</h2>  Trivial. <br/></section><section id="section-Cost to Users" class="section"><h2 class="section-title">Cost to Users</h2>  They have to write their programs in terms of the condition abstractions   if they want them to be portable. <br/></section><section id="section-Cost of non-adoption" class="section"><h2 class="section-title">Cost of non-adoption</h2>  Condition-using programs will not be portable to Common Lisp subsets that   don't have CLOS. <br/></section><section id="section-Performance impact" class="section"><h2 class="section-title">Performance impact</h2>  None. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>  See rationale. <br/></section><section id="section-Esthetics" class="section"><h2 class="section-title">Esthetics</h2>  Abstraction is more esthetic than revealing the implementation. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>  Pitman and Moon support this proposal. </section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>