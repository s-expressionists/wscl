<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” SUBTYPEP-TOO-VAGUE</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">SUBTYPEP-TOO-VAGUE</span><br/><ol class="local-toc"><li><a href="#section-Status">Status</a><ol> </ol></li><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit History">Edit History</a><ol> </ol></li><li><a href="#section-Problem Description">Problem Description</a><ol> </ol></li><li><a href="#issue-subtypep-too-vague:clarify-more">Proposal CLARIFY-MORE</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Current Practice">Current Practice</a><ol> </ol></li><li><a href="#section-Cost to implementors">Cost to implementors</a><ol> </ol></li><li><a href="#section-Cost to users">Cost to users</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue SUBTYPEP-TOO-VAGUE [NIL] [CLARIFICATION]</h1><section id="section-Status" class="status-passed section"><h2 class="section-title">Status</h2>Passed, as amended, Jun89 X3J13 </section><section id="section-References" class="section"><h2 class="section-title">References</h2>CLtL p. 72-73 </section><section id="section-Edit History" class="section"><h2 class="section-title">Edit History</h2>Version 1, 11 Jul 1988 (Sandra Loosemore) Version 2, 19 Jul 1988 (Sandra Loosemore) Version 3,  6-Oct-88 (Masinter) Version 4,  7-Oct-88 (Masinter, per Moon's comments) Version 5, 15-Mar-89 Steele Version 6, 2-Jul-89 Masinter (as per Jun89X3J13) </section><section id="section-Problem Description" class="section"><h2 class="section-title">Problem Description</h2>[From version 4] <br/>The description of <a class="function-reference" href="../chapter-4.xhtml#function-subtypep">subtypep</a> allows it to return a second value of <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> when the relationship between the two types cannot be determined.  In some cases this is a reasonable thing to do because it is impossible to tell <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-if">if</a> <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <a class="type-reference" href="../chapter-4.xhtml#type-satisfies">satisfies</a> <a class="symbol-reference" href="../chapter-25.xhtml#symbol-type">type</a> <span class="syntax-interned-symbol">specifier</span> <span class="syntax-interned-symbol">is</span> <span class="syntax-interned-symbol">involved</span>)</span>
</span></code></pre>, and in other cases the relationships between types are not well-defined (for example, the <a class="function-reference" href="../chapter-5.xhtml#function-values">values</a> type specifier or the list form of the <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> type specifier).  <br/>Some implementations, however, have apparently interpreted this to mean that it is permissible for <a class="function-reference" href="../chapter-4.xhtml#function-subtypep">subtypep</a> to "give up" and return a second value of <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> in some cases where it actually would be possible to determine the relationship.  This makes it difficult to depend on subtype relationships in portable code. <br/>[Addition for version 5] <br/>There are two problems with version 4.  First is that of the first three bulleted points in the version 4 proposal: <br/>    * Clarify that <a class="function-reference" href="../chapter-4.xhtml#function-subtypep">subtypep</a> will return a second value of <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>     only when either of the type specifiers involves the <a class="type-reference" href="../chapter-4.xhtml#type-satisfies">satisfies</a>, <a class="function-reference" href="../chapter-5.xhtml#function-not">not</a>,      <a class="macro-reference" href="../chapter-5.xhtml#macro-and">and</a>, <a class="macro-reference" href="../chapter-5.xhtml#macro-or">or</a>, <a class="function-reference" href="../chapter-14.xhtml#function-member">member</a>. <a class="function-reference" href="../chapter-4.xhtml#function-subtypep">subtypep</a> will not return a second     value of <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> when both arguments involve only the words in Table 4-1, or     names of DEFSTRUCT- or DEFCLASS-defined types, or user-defined deftypes     that expand into only those words and/or names. <br/>    * <a class="function-reference" href="../chapter-4.xhtml#function-subtypep">subtypep</a> should signal an error when handed <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">either</span> <span class="syntax-interned-symbol">argument</span>)</span>
</span></code></pre>     a type specifier that involves <a class="function-reference" href="../chapter-5.xhtml#function-values">values</a> or the list form of the <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a>     type. <br/>    * <a class="function-reference" href="../chapter-4.xhtml#function-subtypep">subtypep</a> must always return values <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> in the case where the two     type specifiers <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-or">or</a> <span class="syntax-interned-symbol">their</span> <span class="syntax-interned-symbol">expansions</span>)</span>
</span></code></pre> are <a class="function-reference" href="../chapter-5.xhtml#function-equal">equal</a>. <br/>any two have significant overlap, and indeed all three can overlap; version 4 contained no indication of how this conflict should be resolved. <br/>Second is that version 4 calls for <a class="function-reference" href="../chapter-4.xhtml#function-subtypep">subtypep</a> to signal an error <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">at</span> <span class="syntax-interned-symbol">least</span> <span class="syntax-interned-symbol">at</span>
<span class="syntax-interned-symbol">high</span> <a class="symbol-reference" href="../chapter-3.xhtml#symbol-safety">safety</a>)</span>
</span></code></pre>even when the arguments are valid type specifiers, but this can make it harder to use <a class="function-reference" href="../chapter-4.xhtml#function-subtypep">subtypep</a>.  These are cases that returning <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> was supposed to cover. <br/>This version replaces the three bulleted points above with a single point and some observations about its consequences.  This version eliminates the requirement to signal an error. <br/></section><section class="status-passed proposal" id="issue-subtypep-too-vague:clarify-more"><h2 class="section-title">Proposal CLARIFY-MORE</h2>A type specifier "involves" a word like <a class="type-reference" href="../chapter-4.xhtml#type-satisfies">satisfies</a>, <a class="function-reference" href="../chapter-14.xhtml#function-member">member</a>, <a class="function-reference" href="../chapter-5.xhtml#function-not">not</a>, etc. if it either contains it directly as a type specifier,  or as the result of expansion of a <a class="macro-reference" href="../chapter-4.xhtml#macro-deftype">deftype</a>  defined type specifier.  (While the type specifiers listed in CLtL Table 4-1 and names of <a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">defstruct</a> or DEFCLASS-defined types may, in some cases, be implemented in terms of <a class="macro-reference" href="../chapter-4.xhtml#macro-deftype">deftype</a>, they are to be regarded for this purpose as not being "user-defined". Therefore, <a class="function-reference" href="../chapter-4.xhtml#function-subtypep">subtypep</a> must regard elements as primitive with respect to the question of returning <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>.) <br/>* Clarify that <a class="function-reference" href="../chapter-4.xhtml#function-subtypep">subtypep</a> is permitted to return <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> only when   at least one argument involves <a class="type-reference" href="../chapter-4.xhtml#type-satisfies">satisfies</a>, <a class="macro-reference" href="../chapter-5.xhtml#macro-and">and</a>, <a class="macro-reference" href="../chapter-5.xhtml#macro-or">or</a>, <a class="function-reference" href="../chapter-5.xhtml#function-not">not</a>, <a class="function-reference" href="../chapter-14.xhtml#function-member">member</a>,   <a class="function-reference" href="../chapter-5.xhtml#function-values">values</a>, or the list form of <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a>. <br/>  Note that one consequence of this is that if neither argument   involves any of these type specifiers, then <a class="function-reference" href="../chapter-4.xhtml#function-subtypep">subtypep</a> is obliged   to determine the relationship accurately.  In particular, <a class="function-reference" href="../chapter-4.xhtml#function-subtypep">subtypep</a>   must return <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> if the arguments are <a class="function-reference" href="../chapter-5.xhtml#function-equal">equal</a> and do not involve   any of the above-stated type specifiers. <br/>* Clarify that the relationships between types reflected by <a class="function-reference" href="../chapter-4.xhtml#function-subtypep">subtypep</a> are those specific to the particular implementation.  For example, if an implementation supports only a single type of floating-point numbers, in that implementation <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-4.xhtml#function-subtypep">subtypep</a> <span class="syntax-quote">'<a class="function-reference" href="../chapter-12.xhtml#function-float">float</a></span> <span class="syntax-quote">'<a class="type-reference" href="../chapter-12.xhtml#type-long-float">long-float</a></span>)</span>
</span></code></pre> would return <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">since</span> <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <span class="syntax-interned-symbol">two</span> <span class="syntax-interned-symbol">types</span> <span class="syntax-interned-symbol">would</span> <span class="syntax-interned-symbol">be</span> <span class="syntax-interned-symbol">identical</span>)</span>
</span></code></pre>. <br/></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>Specifying the behavior of <a class="function-reference" href="../chapter-4.xhtml#function-subtypep">subtypep</a> makes it more useful. Otherwise, programs cannot rely on any more than <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> as return values. <br/>It is generally conceded that it is impossible to determine the relationships between types defined with the <a class="type-reference" href="../chapter-4.xhtml#type-satisfies">satisfies</a> specifier. <a class="function-reference" href="../chapter-14.xhtml#function-member">member</a>, <a class="macro-reference" href="../chapter-5.xhtml#macro-and">and</a>, <a class="macro-reference" href="../chapter-5.xhtml#macro-or">or</a>, and <a class="function-reference" href="../chapter-5.xhtml#function-not">not</a> are messy to deal with.    <br/></section><section id="section-Current Practice" class="section"><h2 class="section-title">Current Practice</h2>The implementation of <a class="function-reference" href="../chapter-4.xhtml#function-subtypep">subtypep</a> in <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <span class="syntax-interned-symbol">original</span>)</span>
</span></code></pre> HPCL does not try to expand type specifiers defined with <a class="macro-reference" href="../chapter-4.xhtml#macro-deftype">deftype</a> and does not recognize <a class="function-reference" href="../chapter-5.xhtml#function-equal">equal</a> type specifiers as being equivalent.  Most other implementations appear to be substantially in conformance with the proposal. <br/></section><section id="section-Cost to implementors" class="section"><h2 class="section-title">Cost to implementors</h2>Some implementations will have to rewrite and/or extend parts of <a class="function-reference" href="../chapter-4.xhtml#function-subtypep">subtypep</a>. <br/></section><section id="section-Cost to users" class="section"><h2 class="section-title">Cost to users</h2>Its hard to imagine a portable program that depends heavily on <a class="function-reference" href="../chapter-4.xhtml#function-subtypep">subtypep</a>. This proposal does not require any implementation to "handle" fewer cases of <a class="function-reference" href="../chapter-4.xhtml#function-subtypep">subtypep</a>. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>An area of confusion in the language is cleared up.  Usages of <a class="function-reference" href="../chapter-4.xhtml#function-subtypep">subtypep</a> will be more portable. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>The handling of <a class="function-reference" href="../chapter-12.xhtml#function-float">float</a> and <a class="type-reference" href="../chapter-12.xhtml#type-single-float">single-float</a>  appeared to be the  consensus from a discussion on the <a class="package-reference" href="../chapter-1.xhtml#package-common-lisp">common-lisp</a> mailing list some  time ago. <br/>It would not be too onerous to require implementations to handle the cases where one but not the other type specifier involves <a class="macro-reference" href="../chapter-5.xhtml#macro-or">or</a>, <a class="macro-reference" href="../chapter-5.xhtml#macro-and">and</a>, <a class="function-reference" href="../chapter-5.xhtml#function-not">not</a> or <a class="function-reference" href="../chapter-14.xhtml#function-member">member</a>, but the specification becomes  cumbersome. <br/>A related issue is clarifying what kinds of type specifiers must be recognized by functions such as <a class="function-reference" href="../chapter-17.xhtml#function-make-sequence">make-sequence</a> and <a class="function-reference" href="../chapter-4.xhtml#function-coerce">coerce</a>.  For example, HPCL complains that <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="type-reference" href="../chapter-15.xhtml#type-simple-array">simple-array</a> <span class="syntax-cons">(<a class="type-reference" href="../chapter-12.xhtml#type-unsigned-byte">unsigned-byte</a> <a class="function-reference" href="../chapter-12.xhtml#function-*">*</a>)</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-*">*</a>)</span>)</span>
</span></code></pre> is not a valid sequence type when passed to <a class="function-reference" href="../chapter-17.xhtml#function-make-sequence">make-sequence</a>, although <a class="function-reference" href="../chapter-4.xhtml#function-subtypep">subtypep</a> does recognize it to be a subtype of <a class="type-reference" href="../chapter-17.xhtml#type-sequence">sequence</a>.  Should this proposal be extended to deal with these issues, or is another proposal in order? <br/>The rules for comparing the various type specifiers <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">such</span> <span class="syntax-interned-symbol">as</span> <a class="symbol-reference" href="../chapter-2.xhtml#symbol-array">array</a>)</span>
</span></code></pre> need to be spelled out in detail. </section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>