<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” SETF-MULTIPLE-STORE-VARIABLES</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">SETF-MULTIPLE-STORE-VARIABLES</span><br/><ol class="local-toc"><li><a href="#section-Status">Status</a><ol> </ol></li><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit history">Edit history</a><ol> </ol></li><li><a href="#section-Problem description">Problem description</a><ol> </ol></li><li><a href="#issue-setf-multiple-store-variables:allow">Proposal ALLOW</a><ol> </ol></li><li><a href="#section-Test Cases/Examples">Test Cases/Examples</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Current practice">Current practice</a><ol> </ol></li><li><a href="#section-Cost to Implementors">Cost to Implementors</a><ol> </ol></li><li><a href="#section-Cost to Users">Cost to Users</a><ol> </ol></li><li><a href="#section-Cost of non-adoption">Cost of non-adoption</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Aesthetics">Aesthetics</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue SETF-MULTIPLE-STORE-VARIABLES [NIL] [ADDITION]</h1><section id="section-Status" class="status-passed section"><h2 class="section-title">Status</h2>Passed, Jun 89 X3J13 </section><section id="section-References" class="section"><h2 class="section-title">References</h2>CLtL, pp.93-107 Lisp Pointers, v2n2, pp.27-41 </section><section id="section-Edit history" class="section"><h2 class="section-title">Edit history</h2>Version 1,  5-Dec-88, Pavel Version 2, 22-Mar-89, Moon, simplify, update from discussion </section><section id="section-Problem description" class="section"><h2 class="section-title">Problem description</h2>  The description of GET-SETF-METHOD-MULTIPLE-VALUE on page 107 of CLtL   states that there are no cases in Common Lisp that allow multiple values   to be stored into a generalized variable.  This is seen by some as an   arbitrary decision in light of the fact that a very reasonable semantics   exists for multiple values being assigned by several Common Lisp macros,   including <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a>.  The rationale on page 103 of CLtL suggests that this   decision might be changed in the future. <br/></section><section class="status-passed proposal" id="issue-setf-multiple-store-variables:allow"><h2 class="section-title">Proposal ALLOW</h2>  Extend the semantics of the macros <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a>, <a class="macro-reference" href="../chapter-5.xhtml#macro-psetf">psetf</a>, <a class="macro-reference" href="../chapter-5.xhtml#macro-shiftf">shiftf</a>, <a class="macro-reference" href="../chapter-5.xhtml#macro-rotatef">rotatef</a>, and   <a class="macro-reference" href="../chapter-9.xhtml#macro-assert">assert</a> to allow "places" whose <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> methods have more than one "store   variable".  In such cases, the macros accept as many values from the   newvalue form as there are store variables.  As usual, extra values   are ignored and missing values default to <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>. <br/>  Extend the long form of <a class="macro-reference" href="../chapter-5.xhtml#macro-defsetf">defsetf</a> to allow the specification of more   than one "store variable", with the obvious semantics. <br/>  Clarify that GET-SETF-METHOD signals an error if there would be more   than one store-variable. <br/></section><section id="section-Test Cases/Examples" class="section"><h2 class="section-title">Test Cases/Examples</h2><pre>  <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">defstruct</a> <span class="syntax-interned-symbol">region</span> <span class="syntax-interned-symbol">width</span> <span class="syntax-interned-symbol">height</span>)</span>
</span></code><br/><br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">region-size</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">region</span>)</span>
     <span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-values">values</a>
        <span class="syntax-cons">(<span class="syntax-interned-symbol">region-width</span> <span class="syntax-interned-symbol">region</span>)</span>
        <span class="syntax-cons">(<span class="syntax-interned-symbol">region-height</span> <span class="syntax-interned-symbol">region</span>)</span>)</span>)</span>
</span></code></pre><br/><br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defsetf">defsetf</a> <span class="syntax-interned-symbol">region-size</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">region</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">width</span> <span class="syntax-interned-symbol">height</span>)</span>
     <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-values">values</a>
         <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">region-width</span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">region</span></span>)</span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">width</span></span>)</span>
         <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">region-height</span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">region</span></span>)</span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">height</span></span>)</span>)</span></span>)</span>
</span></code></pre><br/><br/>  <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-interned-symbol">my-reg</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">make-region</span> <span class="syntax-keyword-symbol">:width</span> <span class="syntax-number">10</span> <span class="syntax-keyword-symbol">:height</span> <span class="syntax-number">20</span>)</span>)</span>
</span></code><br/>  <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; #S<code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">REGION</span> <span class="syntax-keyword-symbol">:WIDTH</span> <span class="syntax-number">10</span> <span class="syntax-keyword-symbol">:HEIGHT</span> <span class="syntax-number">20</span>)</span>
</span></code><br/><br/>  <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">region-size</span> <span class="syntax-interned-symbol">my-reg</span>)</span>
</span></code><br/>  <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; 10<br/>     20<br/><br/>  <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">region-size</span> <span class="syntax-interned-symbol">my-reg</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-values">values</a> <span class="syntax-number">30</span> <span class="syntax-number">40</span>)</span>)</span>
</span></code><br/>  <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; 30<br/>     40<br/><br/>  <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">region-size</span> <span class="syntax-interned-symbol">my-reg</span>)</span>
</span></code><br/>  <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; 30<br/>     40        <br/><br/></pre></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>  This change removes an artificial restriction on the semantics of   several Common Lisp macros, allowing a broader set of contexts in   which generalized variables can be used.  For example, it is not   difficult to write a reasonable <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> method for the <a class="function-reference" href="../chapter-5.xhtml#function-values">values</a> function,   yielding a powerful MULTIPLE-VALUE-SETF form: <br/>        <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-values">values</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-car">car</a> <span class="syntax-interned-symbol">a</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-18.xhtml#function-gethash">gethash</a> <span class="syntax-interned-symbol">b</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">c</span></span>)</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-15.xhtml#function-aref">aref</a> <span class="syntax-interned-symbol">d</span> <span class="syntax-number">13</span>)</span>)</span>
              <span class="syntax-cons">(<span class="syntax-interned-symbol">some-hairy-computation</span>)</span>)</span>
</span></code></pre> <br/>  In the language as currently defined, this example would have to be   written: <br/>        <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-multiple-value-bind">multiple-value-bind</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span> <span class="syntax-interned-symbol">z</span>)</span>
                             <span class="syntax-cons">(<span class="syntax-interned-symbol">some-hairy-computation</span>)</span>
           <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-car">car</a> <span class="syntax-interned-symbol">a</span>)</span>        <span class="syntax-interned-symbol">x</span>
                 <span class="syntax-cons">(<a class="function-reference" href="../chapter-18.xhtml#function-gethash">gethash</a> <span class="syntax-interned-symbol">b</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">c</span></span>)</span> <span class="syntax-interned-symbol">y</span>
                 <span class="syntax-cons">(<a class="function-reference" href="../chapter-15.xhtml#function-aref">aref</a> <span class="syntax-interned-symbol">d</span> <span class="syntax-number">13</span>)</span>    <span class="syntax-interned-symbol">z</span>)</span>)</span>
</span></code></pre> <br/>  Many other <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">perhaps</span> <span class="syntax-interned-symbol">more</span> <span class="syntax-interned-symbol">compelling</span>)</span>
</span></code> examples of generalized variables   holding more than one value can easily be imagined.  Their use,   however, is severely discouraged by Common Lisp as defined in CLtL,   since none of the built-in macros will accept them. <br/>  The clarification of GET-SETF-METHOD makes explicit what is implied   by CLtL (CLtL uses the word "guarantee", whose relationship to   signalling of errors is unclear). <br/></section><section id="section-Current practice" class="section"><h2 class="section-title">Current practice</h2>  I do not know of any implementations that allow all of this extension.   Xerox Lisp does not signal an error, but this is probably due to a bug   in GET-SETF-METHOD.  Lucid signals an error in GET-SETF-METHOD.   Symbolics Genera supports the proposal in <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> and <a class="macro-reference" href="../chapter-5.xhtml#macro-psetf">psetf</a>, but not in   <a class="macro-reference" href="../chapter-5.xhtml#macro-shiftf">shiftf</a>, <a class="macro-reference" href="../chapter-5.xhtml#macro-rotatef">rotatef</a>, and <a class="macro-reference" href="../chapter-9.xhtml#macro-assert">assert</a>. <br/></section><section id="section-Cost to Implementors" class="section"><h2 class="section-title">Cost to Implementors</h2>  A relatively minor fix to each of the affected macros suffices.  For   example, to fix <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> itself, one need only call   GET-SETF-METHOD-MULTIPLE-VALUE instead of GET-SETF-METHOD and emit a   <a class="macro-reference" href="../chapter-5.xhtml#macro-multiple-value-bind">multiple-value-bind</a> instead of a <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a> for binding the store variables. <br/></section><section id="section-Cost to Users" class="section"><h2 class="section-title">Cost to Users</h2>  This is an upward-compatible change; no user code must change. <br/></section><section id="section-Cost of non-adoption" class="section"><h2 class="section-title">Cost of non-adoption</h2>  Yet another non-uniformity in the language, yet another piece of   mechanism without a clear use <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">GET-SETF-METHOD-MULTIPLE-VALUE</span>)</span>
</span></code>. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>  Wider applicability of a reasonably nice abstraction, the removal of   an artificial prohibition. <br/></section><section id="section-Aesthetics" class="section"><h2 class="section-title">Aesthetics</h2>  People may disagree about whether this is a simplification or not.  I   am firmly on the side that believes that such removal of   non-uniformities is a simplifying force in the language. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>  Pavel supports this proposal. <br/>  Moon supports this proposal except he is not sure about the   inclusion of <a class="macro-reference" href="../chapter-9.xhtml#macro-assert">assert</a>. <br/>  GSB suggests that this is a clarification rather than an addition,   because the lack of any predefined setf-methods that use multiple   store variables should not mean that <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a>, etc. should not work with   such a setf-method if the user defined one.  The problem is that CLtL   examples such as the ones for <a class="macro-reference" href="../chapter-5.xhtml#macro-shiftf">shiftf</a> on p.98 and the simplified   definition for <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> on p.107 contradict this proposal, and might have   been taken as specifications, rather than simplified examples, by   some readers. <br/>  Predefined <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> methods for such functions as <a class="function-reference" href="../chapter-5.xhtml#function-values">values</a>, <a class="function-reference" href="../chapter-14.xhtml#function-cons">cons</a>, and <a class="function-reference" href="../chapter-15.xhtml#function-vector">vector</a>   could have been proposed, but we refrained.  This proposal is necessary   to allow the user to write such methods for himself, but if this   proposal is adopted those setf-methods are very easy to write in   a portable fashion. </section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>