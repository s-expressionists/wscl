<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” DEFPACKAGE</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">DEFPACKAGE</span><br/><ol class="local-toc"><li><a href="#section-Status">Status</a><ol> </ol></li><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit history">Edit history</a><ol> </ol></li><li><a href="#section-Problem description">Problem description</a><ol> </ol></li><li><a href="#issue-defpackage:addition">Proposal ADDITION</a><ol> </ol></li><li><a href="#section-Examples">Examples</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Current practice">Current practice</a><ol> </ol></li><li><a href="#section-Cost to Implementors">Cost to Implementors</a><ol> </ol></li><li><a href="#section-Cost to Users">Cost to Users</a><ol> </ol></li><li><a href="#section-Cost of non-adoption">Cost of non-adoption</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Esthetics">Esthetics</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue DEFPACKAGE [NIL] [ADDITION]</h1><section id="section-Status" class="status-passed section"><h2 class="section-title">Status</h2>Passed, Jan 89 X3J13 </section><section id="section-References" class="section"><h2 class="section-title">References</h2>CLtL section 11.7. Issue: <a class="issue-reference" href="../issues/in-package-functionality.xhtml#issue-in-package-functionality">in-package-functionality</a> Issue: MAKE-PACKAGE-USE-DEFAULT Issue: <a class="issue-reference" href="../issues/package-deletion.xhtml#issue-package-deletion">package-deletion</a> </section><section id="section-Edit history" class="section"><h2 class="section-title">Edit history</h2>Version 1, 12-Mar-88, Moon Version 2, 23-Mar-88, Moon, changes based on discussion Version 3, 27-Sep-88, JonL  (remove :import, :shadowing-import; allow :export to work on imported and inherited; update references to <a class="macro-reference" href="../chapter-11.xhtml#macro-in-package">in-package</a>, etc.) Version 4,  1-Oct-88, Masinter Version 5, 6-Oct-88, Moon Version 6, 6-Oct-88, JonL (little nits) Version 7, 2-Nov-88, JonL  (incorporate further discussion; simplify handling of syntactic errors; specify ordering constraints). </section><section id="section-Problem description" class="section"><h2 class="section-title">Problem description</h2>Many users incorrectly think that package operations can be performed in any order.  CLtL <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">p.192</span>)</span>
</span></code></pre> contributes to this misconception. Programmers need direction on the ordering constraint, especially for creating packages, since doing things out of order can lead to confusing or even intractable problems. <br/>If the definition of a package is scattered throughout a program as a  number of individual forms, it is very easy to read a symbol before the  package setup needed to read that symbol correctly has been accomplished.  Three examples: an inherited symbol that should have been shadowed might  be accessed; a single-colon prefix might be used for a symbol that hasn't yet been exported; an internal symbol might be created afresh where a  symbol that will later be imported or inherited was intended.  These  problems can be difficult to understand or even to recognize; in some  cases it is difficult or impossible to correct the situation in the same Lisp image. <br/></section><section class="status-passed proposal" id="issue-defpackage:addition"><h2 class="section-title">Proposal ADDITION</h2>Add a <a class="macro-reference" href="../chapter-11.xhtml#macro-defpackage">defpackage</a> macro to the language.  In the description below, '<a class="function-reference" href="../chapter-11.xhtml#function-package-name">package-name</a>' and '<a class="function-reference" href="../chapter-10.xhtml#function-symbol-name">symbol-name</a>' can be a symbol or a string; if a  symbol, only its name matters, not what package it is in. <br/>The syntax of <a class="macro-reference" href="../chapter-11.xhtml#macro-defpackage">defpackage</a> is <br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-11.xhtml#macro-defpackage">defpackage</a> <a class="function-reference" href="../chapter-11.xhtml#function-package-name">package-name</a> <span class="syntax-interned-symbol">{option}*</span>)</span>
</span></code></pre> <br/>where each option is a list of a keyword and arguments.  Nothing in a <a class="macro-reference" href="../chapter-11.xhtml#macro-defpackage">defpackage</a> form is evaluated. <br/>Standard options for <a class="macro-reference" href="../chapter-11.xhtml#macro-defpackage">defpackage</a> are listed below.   Except for :SIZE,  options may appear more than once <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">this</span> <span class="syntax-interned-symbol">is</span> <span class="syntax-interned-symbol">useful</span> <span class="syntax-interned-symbol">primarily</span> <span class="syntax-interned-symbol">for</span> 
<span class="syntax-keyword-symbol">:IMPORT-FROM</span> <a class="macro-reference" href="../chapter-5.xhtml#macro-and">and</a> <span class="syntax-keyword-symbol">:SHADOWING-IMPORT-FROM</span>)</span>
</span></code></pre>. <br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-keyword-symbol">:NICKNAMES</span> <span class="syntax-interned-symbol">{package-name}*</span>)</span>
</span></code></pre>         Set the package's nicknames to the specified names. <br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-keyword-symbol">:USE</span> <span class="syntax-interned-symbol">{package-name}*</span>)</span>
</span></code></pre>         The package is to "use" the other designated packages; that is,         it will inherit from them.  The default value for this option          should be the same as it is for <a class="function-reference" href="../chapter-11.xhtml#function-make-package">make-package</a> <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">also</span> <span class="syntax-interned-symbol">see</span> <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <span class="syntax-interned-symbol">issue</span>
        <span class="syntax-interned-symbol">MAKE-PACKAGE-USE-DEFAULT</span>)</span>
</span></code></pre>. <br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-keyword-symbol">:SHADOW</span> <span class="syntax-interned-symbol">{symbol-name}*</span>)</span>
</span></code></pre>         Create the specified symbols in the package being defined,          making them shadows, just as the function <a class="function-reference" href="../chapter-11.xhtml#function-shadow">shadow</a> would do. <br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-keyword-symbol">:SHADOWING-IMPORT-FROM</span> <a class="function-reference" href="../chapter-11.xhtml#function-package-name">package-name</a> <span class="syntax-interned-symbol">{symbol-name}*</span>)</span>
</span></code></pre>         Find the specified symbols in the specified package, import         them into the package being defined, and place them on the          shadowing symbols list.  In no case will symbols be created in          any package other than the one being defined; a continuable error          is signaled if no symbol is accessible in the package named          <a class="function-reference" href="../chapter-11.xhtml#function-package-name">package-name</a> for one of the symbol-names. <br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-keyword-symbol">:IMPORT-FROM</span> <a class="function-reference" href="../chapter-11.xhtml#function-package-name">package-name</a> <span class="syntax-interned-symbol">{symbol-name}*</span>)</span>
</span></code></pre>         Find the specified symbols in the specified package and import         them into the package being defined.  In no case will symbols be          created in a package other than the one being defined; a continuable         error is signaled if no symbol is accessible in the package named          <a class="function-reference" href="../chapter-11.xhtml#function-package-name">package-name</a> for one of the symbol-names. <br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-keyword-symbol">:EXPORT</span> <span class="syntax-interned-symbol">{symbol-name}*</span>)</span>
</span></code></pre>         Find or create symbols with the specified names and export them.         Note an interaction with the :USE option, since inherited symbols          can be used rather than new ones created;  note also an interaction          with the :IMPORT-FROM and :SHADOWING-IMPORT-FROM options, since  	imported symbols can be used rather than new ones created. <br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-keyword-symbol">:INTERN</span> <span class="syntax-interned-symbol">{symbol-name}*</span>)</span>
</span></code></pre>         Find or create symbols with the specified names.  Note an          interaction with the :USE option, since inherited symbols          can be used rather than new ones created.  This option is useful if          an :IMPORT-FROM or a :SHADOWING-IMPORT-FROM option in a subsequent          call to <a class="macro-reference" href="../chapter-11.xhtml#macro-defpackage">defpackage</a> <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">for</span> <a class="function-reference" href="../chapter-5.xhtml#function-some">some</a> <span class="syntax-interned-symbol">other</span> <a class="type-reference" href="../chapter-11.xhtml#type-package">package</a>)</span>
</span></code></pre> expects to find these          symbols accessible but not necessarily external. <br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-keyword-symbol">:SIZE</span> <a class="type-reference" href="../chapter-12.xhtml#type-integer">integer</a>)</span>
</span></code></pre>         Declare the approximate number of symbols expected in the package.         This is an efficiency hint only, so that the package's table will         not have to be frequently re-expanded when new symbols are added         to it (e.g., by reading in a large file "in" that package). <br/>The order in which the options occur in a <a class="macro-reference" href="../chapter-11.xhtml#macro-defpackage">defpackage</a> form is irrelevant; but since the effects of the entry-making options are context-sensitive,  the order in which they will be executed is as follows: <ol><li> :SHADOW and :SHADOWING-IMPORT-FROM  </li><li> :USE  </li><li> :IMPORT-FROM and :INTERN </li><li> :EXPORT </li></ol>Shadows are established first, since they may be necessary to block  spurious name conflicts when the use link is established.  Use links are  established next so that :intern and :export may refer to normally  inherited symbols.  The :export is done last so that it may refer to  symbols created by any of the other options; in particular, shadows and  imported symbols can be made external.  Note also the prescription on CLtL  p.178 to cover the case of calling <a class="function-reference" href="../chapter-11.xhtml#function-export">export</a> on an inherited symbol. <br/><a class="macro-reference" href="../chapter-11.xhtml#macro-defpackage">defpackage</a> creates the package as specified and returns it as its value. It has no other side effects; e.g., it does not alter the value of <a class="variable-reference" href="../chapter-11.xhtml#variable-*package*">*package*</a>. The function <a class="function-reference" href="../chapter-24.xhtml#function-compile-file">compile-file</a> should treat top-level <a class="macro-reference" href="../chapter-11.xhtml#macro-defpackage">defpackage</a> forms the same way it treats the other package-effecting functions (see CLtL p.182). <br/>If the specified name already refers to an existing package, then the  name-to-package mapping for that name is not changed.   At most, the  existing package will be modified to reflect the new definition;  it is  undefined what happens if the new definition is at variance with the  current state of that package.  If one of the specified nicknames already refers to an existing package, then an error is signaled just the same as <a class="function-reference" href="../chapter-11.xhtml#function-make-package">make-package</a> would.  See the <a class="issue-reference" href="../issues/package-deletion.xhtml#issue-package-deletion">X3J13 Issue PACKAGE-DELETION</a> for undoing the name-to-package mapping. <br/>Some <a class="macro-reference" href="../chapter-11.xhtml#macro-defpackage">defpackage</a> errors are, however,  purely syntactic. <ol><li> An error should be signaled if :SIZE appears than once. </li><li> Since extended options might be allowed by other implementations,   an error should be signaled if an option is present that is not   actually supported in this implementation. </li><li> The collection of <a class="function-reference" href="../chapter-10.xhtml#function-symbol-name">symbol-name</a> arguments given to the options   :SHADOW, :INTERN, :IMPORT-FROM, and :SHADOWING-IMPORT-FROM must   all be disjoint; additionally, the <a class="function-reference" href="../chapter-10.xhtml#function-symbol-name">symbol-name</a> arguments given to   :EXPORT and :INTERN must be disjoint. If either condition is   violated, an error should be signaled. </li></ol>Name conflict errors will, of course, be handled by the underlying calls to  <a class="function-reference" href="../chapter-11.xhtml#function-use-package">use-package</a>, <a class="function-reference" href="../chapter-11.xhtml#function-import">import</a>, and <a class="function-reference" href="../chapter-11.xhtml#function-export">export</a>. <br/></section><section id="section-Examples" class="section"><h2 class="section-title">Examples</h2><pre>;;; An example that "plays it super-safe" by using only strings as names; <br/>;;;  does not even assume that the package it is read in to "uses" <a class="package-reference" href="../chapter-A.xhtml#package-lisp">lisp</a>; <br/>;;   *never* creates any symbols whatsoever in the package that it is read <br/>;;     in to.<br/><br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">LISP:DEFPACKAGE</span> <span class="syntax-string">"MY-PACKAGE"</span>
  <span class="syntax-cons">(<span class="syntax-keyword-symbol">:NICKNAMES</span> <span class="syntax-string">"MYPKG"</span> <span class="syntax-string">"MY-PKG"</span>)</span>
  <span class="syntax-cons">(<span class="syntax-keyword-symbol">:USE</span> <span class="syntax-string">"LISP"</span>)</span>
  <span class="syntax-cons">(<span class="syntax-keyword-symbol">:SHADOW</span> <span class="syntax-string">"CAR"</span> <span class="syntax-string">"CDR"</span>)</span>
  <span class="syntax-cons">(<span class="syntax-keyword-symbol">:SHADOWING-IMPORT-FROM</span> <span class="syntax-string">"VENDOR-COMMON-LISP"</span>  <span class="syntax-string">"CONS"</span>)</span>
  <span class="syntax-cons">(<span class="syntax-keyword-symbol">:IMPORT-FROM</span>           <span class="syntax-string">"VENDOR-COMMON-LISP"</span>  <span class="syntax-string">"GC"</span>)</span>
  <span class="syntax-cons">(<span class="syntax-keyword-symbol">:EXPORT</span> <span class="syntax-string">"EQ"</span> <span class="syntax-string">"CONS"</span> <span class="syntax-string">"FROBOLA"</span>)</span>
  )</span>
</span></code></pre><br/><br/>;;; A similar call, mostly using symbols rather than strings as names.<br/>;;; Expects to be read in to a package that "uses" <a class="package-reference" href="../chapter-A.xhtml#package-lisp">lisp</a> and *may* create<br/>;;;  random internal symbols in that package <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">such</span> <span class="syntax-interned-symbol">as</span> <span class="syntax-interned-symbol">MY-PACKAGE</span> <span class="syntax-interned-symbol">etc</span>)</span>
</span></code></pre>.<br/><br/>(defpackage my-package<br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-keyword-symbol">:nicknames</span> <span class="syntax-interned-symbol">mypkg</span> <span class="syntax-keyword-symbol">:MY-PKG</span>)</span>
</span></code></pre>		;remember <a class="package-reference" href="../chapter-11.xhtml#package-cl">cl</a> conventions for case<br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-keyword-symbol">:use</span> <span class="syntax-interned-symbol">lisp</span>)</span>
</span></code></pre>				; conversion on symbols<br/>  (:shadow <a class="function-reference" href="../chapter-14.xhtml#function-car">car</a> :cdr #:cons)<br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-keyword-symbol">:export</span> <span class="syntax-string">"CONS"</span>)</span>
</span></code></pre>			;yes, this is the shadowed one.<br/>  )<br/><br/></pre></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>The availability of <a class="macro-reference" href="../chapter-11.xhtml#macro-defpackage">defpackage</a> encourages putting the entire package  definition in a single place.  It also encourages putting all the package  definitions of a program in a single file, which can be loaded before  loading or compiling anything else that depends on those packages; such a file can be read in the <a class="package-reference" href="../chapter-A.xhtml#package-user">user</a> package, avoiding any initial state issues. <br/>In addition, <a class="macro-reference" href="../chapter-11.xhtml#macro-defpackage">defpackage</a> allows a programming environment to process the whole package setup as a unit, providing better error-checking and more assistance with package problems, by dint of global knowledge of the package setup. <br/></section><section id="section-Current practice" class="section"><h2 class="section-title">Current practice</h2>Symbolics Common Lisp <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">SCL</span>)</span>
</span></code></pre> has always had a <a class="macro-reference" href="../chapter-11.xhtml#macro-defpackage">defpackage</a>, and users prefer it to individual calls to <a class="function-reference" href="../chapter-11.xhtml#function-export">export</a>, <a class="function-reference" href="../chapter-11.xhtml#function-import">import</a>, <a class="function-reference" href="../chapter-11.xhtml#function-shadow">shadow</a>, etc.  The SCL version of <a class="macro-reference" href="../chapter-11.xhtml#macro-defpackage">defpackage</a> has quite a few additional options, but none of them appears to be necessary to propose for Common Lisp at this time. This proposal is incompatible with Symbolics <a class="macro-reference" href="../chapter-11.xhtml#macro-defpackage">defpackage</a> in some ways that will probably not cause major problems. <br/></section><section id="section-Cost to Implementors" class="section"><h2 class="section-title">Cost to Implementors</h2>Small--DEFPACKAGE can be implemented simply as a bunch of calls to existing functions. <br/></section><section id="section-Cost to Users" class="section"><h2 class="section-title">Cost to Users</h2>Small, this is upward compatible. <br/></section><section id="section-Cost of non-adoption" class="section"><h2 class="section-title">Cost of non-adoption</h2>Packages continue to be difficult to use correctly. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>Guide users away from using packages in ways that get them into trouble. <br/></section><section id="section-Esthetics" class="section"><h2 class="section-title">Esthetics</h2>Neutral. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>It has been suggested that the "Put IN Seven EXtremely Random USEr Interface COmmands" mnemonic described in CLtL p.191 could be removed; and with possibly a few exceptions, the special handling of them by <a class="function-reference" href="../chapter-24.xhtml#function-compile-file">compile-file</a> could be removed.  As this would be an incompatible change,  it is not part of this proposal.  However, a new mnemonic can be offered,  to help remember the ordering constraints mentioned above:           I REmember Six USEr Interface Expressions Each word in the sentence corresponds to one operation listed below:    I				<a class="macro-reference" href="../chapter-11.xhtml#macro-in-package">in-package</a>	;"foot" to stand on    REmember			<a class="function-reference" href="../chapter-24.xhtml#function-require">require</a>		;ensure pre-requisite packages    Six				<a class="function-reference" href="../chapter-11.xhtml#function-shadow">shadow</a>		;block multiple-inheritances    USEr				<a class="function-reference" href="../chapter-11.xhtml#function-use-package">use-package</a>	;go for it!    Interface			<a class="function-reference" href="../chapter-11.xhtml#function-import">import</a>		;bring in "foreign" symbols    EXpressions			<a class="function-reference" href="../chapter-11.xhtml#function-export">export</a>		;a "face" to show to others. <br/>It is noted that <a class="macro-reference" href="../chapter-11.xhtml#macro-defpackage">defpackage</a> cannot be used to create two "mutually recursive" packages, such as:     <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-11.xhtml#macro-defpackage">defpackage</a> <span class="syntax-interned-symbol">my-package</span>
      <span class="syntax-cons">(<span class="syntax-keyword-symbol">:use</span> <span class="syntax-interned-symbol">lisp</span> <span class="syntax-interned-symbol">your-package</span>)</span>	      <span class="syntax-line-comment syntax-comment">;requires 'your-package' to exist first
</span>      <span class="syntax-cons">(<span class="syntax-keyword-symbol">:export</span> <span class="syntax-string">"MY-FUN"</span>)</span>)</span>
</span></code></pre>     <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-11.xhtml#macro-defpackage">defpackage</a> <span class="syntax-interned-symbol">your-package</span>
      <span class="syntax-cons">(<span class="syntax-keyword-symbol">:use</span> <span class="syntax-interned-symbol">lisp</span>)</span>
      <span class="syntax-cons">(<span class="syntax-keyword-symbol">:import-from</span> <span class="syntax-interned-symbol">my-package</span> <span class="syntax-string">"MY-FUN"</span>)</span> <span class="syntax-line-comment syntax-comment">;requires 'my-package' to exist first
</span>      <span class="syntax-cons">(<span class="syntax-keyword-symbol">:export</span> <span class="syntax-string">"MY-FUN"</span>)</span>)</span>
</span></code></pre> However, nothing prevents one from using the package-effecting functions  such as <a class="function-reference" href="../chapter-11.xhtml#function-use-package">use-package</a>, <a class="function-reference" href="../chapter-11.xhtml#function-import">import</a>, and <a class="function-reference" href="../chapter-11.xhtml#function-export">export</a> to establish such links <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">which</span>
<span class="syntax-interned-symbol">ought</span> <span class="syntax-interned-symbol">to</span> <span class="syntax-interned-symbol">be</span> <span class="syntax-interned-symbol">very</span> <span class="syntax-interned-symbol">rare</span>)</span>
</span></code></pre> after a more standard use of <a class="macro-reference" href="../chapter-11.xhtml#macro-defpackage">defpackage</a>. <br/>The macroexpansion of <a class="macro-reference" href="../chapter-11.xhtml#macro-defpackage">defpackage</a> could usefully canonicalize the names into strings, so that even if a source file has random symbols in the <a class="macro-reference" href="../chapter-11.xhtml#macro-defpackage">defpackage</a> form, the compiled file would only contain strings. <br/>Frequently additional <a class="glossary-reference" href="../chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a> options take the form of a keyword standing by itself as an abbreviation for a list <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="type-reference" href="../chapter-10.xhtml#type-keyword">keyword</a> <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>)</span>
</span></code></pre>; this syntax should be properly reported as an unrecognized option in implementations that do not support it. <br/>Definition forms in Common Lisp usually just establish a name-to-object mapping; there is little precedent for them to modify other global-context state.  For this reason, we didn't want <a class="macro-reference" href="../chapter-11.xhtml#macro-defpackage">defpackage</a> also to "go" into the  new package.  If it did so, like <a class="macro-reference" href="../chapter-11.xhtml#macro-in-package">in-package</a>, then the following reasonable  file would become confused, because it wouldn't all be in one package:    <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-11.xhtml#macro-in-package">in-package</a> <span class="syntax-string">"USER"</span>)</span>
</span></code></pre>    <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-11.xhtml#macro-defpackage">defpackage</a> <span class="syntax-string">"WATER"</span>      <span class="syntax-cons">(<span class="syntax-keyword-symbol">:use</span> <span class="syntax-string">"LISP"</span>)</span>             <span class="syntax-cons">(<span class="syntax-keyword-symbol">:export</span> <span class="syntax-string">"FISH"</span>)</span>)</span>
</span></code></pre>    (defpackage "ALCHEMY"    (:use "<a class="package-reference" href="../chapter-A.xhtml#package-lisp">lisp</a>" "PHLOGISTON) <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-keyword-symbol">:export</span> <span class="syntax-interned-symbol">gold</span>)</span>
</span></code></pre>) Should the token 'gold' be read while in the <a class="package-reference" href="../chapter-A.xhtml#package-user">user</a> package, or in the the WATER package? <br/>The <a class="issue-reference" href="../issues/in-package-functionality.xhtml#issue-in-package-functionality">X3J13 Issue IN-PACKAGE-FUNCTIONALITY</a> recommends that <a class="macro-reference" href="../chapter-11.xhtml#macro-in-package">in-package</a>  be  incompatibly changed to recognize only existing packages, not to create  them.  <a class="macro-reference" href="../chapter-11.xhtml#macro-in-package">in-package</a> would then not accept any keyword arguments. <br/>The function <a class="function-reference" href="../chapter-11.xhtml#function-make-package">make-package</a> might also be extended to take all the keywords that <a class="macro-reference" href="../chapter-11.xhtml#macro-defpackage">defpackage</a> does. This could be the subject of a separate cleanup. </section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>