<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” RANGE-OF-COUNT-KEYWORD</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">RANGE-OF-COUNT-KEYWORD</span><br/><ol class="local-toc"><li><a href="#section-Status">Status</a><ol> </ol></li><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit history">Edit history</a><ol> </ol></li><li><a href="#section-Problem Description">Problem Description</a><ol> </ol></li><li><a href="#issue-range-of-count-keyword:nil-or-integer">Proposal NIL-OR-INTEGER</a><ol> </ol></li><li><a href="#section-Examples">Examples</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Current Practice">Current Practice</a><ol> </ol></li><li><a href="#section-Cost to Implementors">Cost to Implementors</a><ol> </ol></li><li><a href="#section-Cost to Users">Cost to Users</a><ol> </ol></li><li><a href="#section-Cost of Non-Adoption">Cost of Non-Adoption</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Aesthetics">Aesthetics</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue RANGE-OF-COUNT-KEYWORD [NIL] [CLARIFICATION]</h1><section id="section-Status" class="status-passed section"><h2 class="section-title">Status</h2>Passed, Jan 89 X3J13 </section><section id="section-References" class="section"><h2 class="section-title">References</h2>:COUNT (p247), <a class="function-reference" href="../chapter-17.xhtml#function-remove">remove</a>[-xxx] (p253), <a class="function-reference" href="../chapter-17.xhtml#function-delete">delete</a>[-xxx] (p254), [N]<a class="function-reference" href="../chapter-17.xhtml#function-substitute">substitute</a>[-xxx] (pp255-256) </section><section id="section-Edit history" class="section"><h2 class="section-title">Edit history</h2>21-Aug-88, Version 1 by Dave Touretzky 22-Aug-88, Version 2 by Pitman 09-Oct-88, Version 3 by Pitman </section><section id="section-Problem Description" class="section"><h2 class="section-title">Problem Description</h2> CLtL is overly vague about legal values for the :COUNT keyword  parameters to builtin functions such as the sequence functions. It  says that the keyword ``limits the number of elements [affected]''.  Implementations have varied in their interpretation of this phrase,  however. <br/> CLtL p247 specifies that if the :COUNT parameter to functions such  as <a class="function-reference" href="../chapter-17.xhtml#function-remove">remove</a> and <a class="function-reference" href="../chapter-17.xhtml#function-delete">delete</a> ``is <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> or is not supplied, all matching items  are affected.'' Because of the placement of this requirement  outside of the description of the functions affected, some  implementations have overlooked this requirement and had to be   changed later. <br/> CLtL doesn't say explicitly that the value of :COUNT must be an  integer, nor does it say what to do for negative values. <br/> The fact that reasonable implementations disagree on some of the  details make this an obvious candidate for cleanup. <br/></section><section class="status-passed proposal" id="issue-range-of-count-keyword:nil-or-integer"><h2 class="section-title">Proposal NIL-OR-INTEGER</h2> Clarify that for the functions <br/>   <a class="function-reference" href="../chapter-17.xhtml#function-remove">remove</a>	<a class="function-reference" href="../chapter-17.xhtml#function-remove-if">remove-if</a>	<a class="function-reference" href="../chapter-17.xhtml#function-remove-if-not">remove-if-not</a>    <a class="function-reference" href="../chapter-17.xhtml#function-delete">delete</a>	<a class="function-reference" href="../chapter-17.xhtml#function-delete-if">delete-if</a>	<a class="function-reference" href="../chapter-17.xhtml#function-delete-if-not">delete-if-not</a>    <a class="function-reference" href="../chapter-17.xhtml#function-substitute">substitute</a>	<a class="function-reference" href="../chapter-17.xhtml#function-substitute-if">substitute-if</a>	<a class="function-reference" href="../chapter-17.xhtml#function-substitute-if-not">substitute-if-not</a>    <a class="function-reference" href="../chapter-17.xhtml#function-nsubstitute">nsubstitute</a>	<a class="function-reference" href="../chapter-17.xhtml#function-nsubstitute-if">nsubstitute-if</a>	<a class="function-reference" href="../chapter-17.xhtml#function-nsubstitute-if-not">nsubstitute-if-not</a> <br/> the following restrictions on the :COUNT keyword parameter exist: <br/>   * The value of this parameter must be <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> or an integer. <br/>   * Using a negative integer value is functionally equivalent to      using a value of zero. <br/></section><section id="section-Examples" class="section"><h2 class="section-title">Examples</h2><pre>  #1: <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-17.xhtml#function-remove">remove</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">A</span></span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">B</span> <span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">B</span>)</span></span> <span class="syntax-keyword-symbol">:COUNT</span>  <span class="syntax-number">0</span>)</span>
</span></code></pre>   <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">B</span> <span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">B</span>)</span>
</span></code></pre><br/>  #2: <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-17.xhtml#function-remove">remove</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">A</span></span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">B</span> <span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">B</span>)</span></span> <span class="syntax-keyword-symbol">:COUNT</span> <span class="syntax-number">-3</span>)</span>
</span></code></pre>   <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">B</span> <span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">B</span>)</span>
</span></code></pre><br/>  #3: <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-17.xhtml#function-remove">remove</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">A</span></span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">B</span> <span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">B</span>)</span></span> <span class="syntax-keyword-symbol">:COUNT</span> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>)</span>
</span></code></pre>  <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">B</span> <span class="syntax-interned-symbol">B</span>)</span>
</span></code></pre><br/>  #4: <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-17.xhtml#function-remove">remove</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">A</span></span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">B</span> <span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">B</span>)</span></span> <span class="syntax-keyword-symbol">:COUNT</span>  <span class="syntax-number">1.0</span>)</span>
</span></code></pre> is an error.<br/>  #5: <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-17.xhtml#function-remove">remove</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">A</span></span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">B</span> <span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">B</span>)</span></span> <span class="syntax-keyword-symbol">:COUNT</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">FOO</span></span>)</span>
</span></code></pre> is an error.<br/><br/></pre></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2> Disallowing non-integer numbers is probably the original intent and  is consistent with other functions such as <a class="function-reference" href="../chapter-14.xhtml#function-nth">nth</a> <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">p265</span>)</span>
</span></code></pre> which accept  count-like arguments that are explicitly required to integers. This  restriction would presumably permit better optimizations in low-safety  mode on stock hardware. <br/> Allowing <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> to be equivalent to no value allows a simplified flow  of control in some situations. For example, one can write   <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">MYDEL</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">ITEM</span> <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-optional">&amp;OPTIONAL</a> <a class="function-reference" href="../chapter-17.xhtml#function-count">count</a>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="../chapter-17.xhtml#function-delete">delete</a> <span class="syntax-interned-symbol">ITEM</span> <span class="syntax-interned-symbol">*MYLIST*</span> <span class="syntax-keyword-symbol">:COUNT</span> <a class="function-reference" href="../chapter-17.xhtml#function-count">count</a>)</span>)</span>
</span></code></pre>  where otherwise it might be necessary to write something like   <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">MYDEL</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">ITEM</span> <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-optional">&amp;OPTIONAL</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-17.xhtml#function-count">count</a> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-interned-symbol">COUNT-P</span>)</span>)</span>
    <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-interned-symbol">COUNT-P</span>
        <span class="syntax-cons">(<a class="function-reference" href="../chapter-17.xhtml#function-delete">delete</a> <span class="syntax-interned-symbol">ITEM</span> <span class="syntax-interned-symbol">*MYLIST*</span> <span class="syntax-keyword-symbol">:COUNT</span> <a class="function-reference" href="../chapter-17.xhtml#function-count">count</a>)</span>
        <span class="syntax-cons">(<a class="function-reference" href="../chapter-17.xhtml#function-delete">delete</a> <span class="syntax-interned-symbol">ITEM</span> <span class="syntax-interned-symbol">*MYLIST*</span>)</span>)</span>)</span>
</span></code></pre> <br/> Allowing negative numbers frees users from having to do an explicit  check for negative numbers when the value of :COUNT is computed by  some complicated expression. For example:   <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">LEAVE-AT-MOST</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">N</span> <span class="syntax-interned-symbol">ITEM</span> <a class="type-reference" href="../chapter-17.xhtml#type-sequence">sequence</a> <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-key">&amp;KEY</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">FROM-END</span> <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>)</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="../chapter-17.xhtml#function-remove">remove</a> <span class="syntax-interned-symbol">ITEM</span> <a class="type-reference" href="../chapter-17.xhtml#type-sequence">sequence</a> 
      <span class="syntax-keyword-symbol">:COUNT</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-print">print</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-17.xhtml#function-count">count</a> <span class="syntax-interned-symbol">ITEM</span> <a class="type-reference" href="../chapter-17.xhtml#type-sequence">sequence</a>)</span> <span class="syntax-interned-symbol">N</span>)</span>)</span>
      <span class="syntax-keyword-symbol">:FROM-END</span> <span class="syntax-interned-symbol">FROM-END</span>)</span>)</span>
</span></code></pre>   <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">LEAVE-AT-MOST</span> <span class="syntax-number">2</span> <span class="syntax-character">#\A</span> <span class="syntax-string">"BANANAS"</span>)</span>
</span></code></pre>  ==&gt;  "BANANS"   <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">LEAVE-AT-MOST</span> <span class="syntax-number">2</span> <span class="syntax-character">#\S</span> <span class="syntax-string">"BANANAS"</span>)</span>
</span></code></pre>  ==&gt;  "BANANAS" <br/></section><section id="section-Current Practice" class="section"><h2 class="section-title">Current Practice</h2> [Note: Pitman didn't try these examples in KCL or CMU Common Lisp. He's   working from data in Touretzky's last draft of this proposal, so someone   from those camps might want to test the assertions made here.] <br/> #1: All correct implementations presumably return <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">B</span> <span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">B</span>)</span>
</span></code></pre>.      This value is consisent with this proposal. <br/> #2: Symbolics Cloe returns <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">B</span> <span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">B</span>)</span>
</span></code></pre>.      KCL returns <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">B</span> <span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">B</span>)</span>
</span></code></pre> for lists.      This value is forced by this proposal. <br/>     Symbolics Genera and CMU Common Lisp return <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">B</span> <span class="syntax-interned-symbol">B</span>)</span>
</span></code></pre>.      KCL does something bizarre for vectors (``pads with n blanks or       <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>s, where -n is the value of the :count keyword parameter'',       says Touretzky.)      These implementations would have to change. <br/> #3: All correct implementations presumably return <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">B</span> <span class="syntax-interned-symbol">B</span>)</span>
</span></code></pre>.      This value is consisent with this proposal. <br/>     Some implementations have been known to signal a wrong type      argument error in the past, but have presumably been fixed. <br/> #4: Symbolics Genera and Symbolics Cloe return <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">B</span> <span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">B</span>)</span>
</span></code></pre>.      CMU Common Lisp returns <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">B</span> <span class="syntax-interned-symbol">B</span>)</span>
</span></code></pre>.      These behaviors are consistent with this proposal. <br/> #5: Symbolics Cloe and Symbolics Genera signal an error.      CMU Common Lisp returns <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">B</span> <span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">B</span>)</span>
</span></code></pre>.      These behaviors are consistent with this proposal. <br/></section><section id="section-Cost to Implementors" class="section"><h2 class="section-title">Cost to Implementors</h2>  Some implementations would have to change. These functions are typically   heavily optimized by compilers. Not only source code, but also compiler   optimizers and perhaps even microcode or hardware might have to be   modified to fully accomodate this change, so it might be quite expensive. <br/></section><section id="section-Cost to Users" class="section"><h2 class="section-title">Cost to Users</h2>  None for Common Lisp users. This change is an upward compatible   clarification of standard practice. <br/></section><section id="section-Cost of Non-Adoption" class="section"><h2 class="section-title">Cost of Non-Adoption</h2>  The behavior of these functions when given degenerate keyword values would   be unintuitive. In many such cases, considerable additional user code must   be written to watch for and avoid creating such situations. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>  More compact, more intuitive, and more portable code. <br/></section><section id="section-Aesthetics" class="section"><h2 class="section-title">Aesthetics</h2>  This change improves language aesthetics. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>  In the past there has been some argument about what <a class="function-reference" href="../chapter-17.xhtml#function-subseq">subseq</a> should do when   given positions greater than the length of the sequence.  Currently it    "is an error" to specify positions less than zero or greater than the   length of the sequence.  Touretzky doesn't think the same should apply to   the :COUNT keyword. The inputs to <a class="function-reference" href="../chapter-17.xhtml#function-subseq">subseq</a> are ordinal numbers: they specify   positions, like array subscripts.  The value of :COUNT is not an ordinal,   it is an upper bound on the size of the set of affected items <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">which</span> <span class="syntax-interned-symbol">is</span>
  <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">cardinal</span> <a class="type-reference" href="../chapter-12.xhtml#type-number">number</a>)</span>
</span></code></pre>. <br/>  Pitman supports this proposal. [Hopefully Touretzky supports it, too?] <br/>  van Roggen says he personally supports the stated proposal but that a   survey he did of users at DEC showed up a number of people who thought   that negative count arguments should be an error. </section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>