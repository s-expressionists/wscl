<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” PATHNAME-COMPONENT-CASE</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">PATHNAME-COMPONENT-CASE</span><br/><ol class="local-toc"><li><a href="#section-Status">Status</a><ol> </ol></li><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit history">Edit history</a><ol> </ol></li><li><a href="#section-Problem Description">Problem Description</a><ol> </ol></li><li><a href="#issue-pathname-component-case:keyword-argument">Proposal KEYWORD-ARGUMENT</a><ol> </ol></li><li><a href="#section-Test Case/Examples">Test Case/Examples</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Current Practice">Current Practice</a><ol> </ol></li><li><a href="#section-Cost to Implementors">Cost to Implementors</a><ol> </ol></li><li><a href="#section-Cost to Users">Cost to Users</a><ol> </ol></li><li><a href="#section-Cost of Non-Adoption">Cost of Non-Adoption</a><ol> </ol></li><li><a href="#section-Performance Impact">Performance Impact</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Aesthetics">Aesthetics</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue PATHNAME-COMPONENT-CASE [NIL] [CHANGE]</h1><h2>Related issues</h2><ul><li><a class="issue-reference" href="../issues/pathname-wild.xhtml#issue-pathname-wild">PATHNAME-WILD</a></li></ul><section id="section-Status" class="status-passed section"><h2 class="section-title">Status</h2>passed, as amended here, Jun 89 X3J13 </section><section id="section-References" class="section"><h2 class="section-title">References</h2>Pathnames (pp410-413), <a class="function-reference" href="../chapter-19.xhtml#function-make-pathname">MAKE-PATHNAME</a> (p416), <a class="function-reference" href="../chapter-19.xhtml#function-pathname-host">PATHNAME-HOST</a> (p417), <a class="function-reference" href="../chapter-19.xhtml#function-pathname-device">PATHNAME-DEVICE</a> (p417), <a class="function-reference" href="../chapter-19.xhtml#function-pathname-directory">PATHNAME-DIRECTORY</a> (p417), <a class="function-reference" href="../chapter-19.xhtml#function-pathname-name">PATHNAME-NAME</a> (p417), <a class="function-reference" href="../chapter-19.xhtml#function-pathname-type">PATHNAME-TYPE</a> (p417) </section><section id="section-Edit history" class="section"><h2 class="section-title">Edit history</h2>1-Jul-88, Version 1 by Pitman 22-Mar-89, Version 2 by Moon, update and rewrite 9-May-89, Version 3 by Moon, remove alternate proposals 9-May-89, Version 4 by Moon, respond to discussion with KMP 17-Jun-89, Version 5 by Moon, fix typo, make minor improvements to the presentation. 1-Jul-89, Version 6 by Masinter, as per Jun89X3J13 amendments </section><section id="section-Problem Description" class="section"><h2 class="section-title">Problem Description</h2>  Issues of alphabetic case in pathnames are a major source of problems.   In some file systems, the customary case is lowercase, in some uppercase,   in some mixed.  In some file systems, case matters, in others it does   not. <br/>  There are two kinds of pathname case portability problems: moving   programs from one Common Lisp to another, and moving pathname component   values from one file system to another.  To solve the first problem, all   Common Lisp implementations that support a particular file system must   use compatible representations for pathname component values.  To solve   the second problem, there must be a common representation for the least   common denominator pathname component values that exist on all   interesting file systems. <br/>  This desire for a common representation directly conflicts with the   desire among programmers who only use one file system to work with the   local conventions and not think about issues of porting to other file   systems.  The common representation cannot be the same as every local   convention, since they vary. <br/>  In the current anarchy of pathname component case conventions: <br/>  <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-namestring">NAMESTRING</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-make-pathname">MAKE-PATHNAME</a> <span class="syntax-keyword-symbol">:NAME</span> <span class="syntax-string">"FOO"</span> <span class="syntax-keyword-symbol">:TYPE</span> <span class="syntax-string">"LISP"</span>)</span>)</span>
</span></code>   will produce foo.lisp in some Unix Common Lisp implementations   and will produce <a class="index/code-reference" href="../chapter-1.xhtml#index/code-foo">FOO</a>.<a class="package-reference" href="../chapter-A.xhtml#package-lisp">LISP</a> in other Unix Common Lisp implementations. <br/>  <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-namestring">NAMESTRING</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-make-pathname">MAKE-PATHNAME</a> <span class="syntax-keyword-symbol">:NAME</span> <span class="syntax-string">"foo"</span> <span class="syntax-keyword-symbol">:TYPE</span> <span class="syntax-string">"lisp"</span>)</span>)</span>
</span></code>   will produce <a class="index/code-reference" href="../chapter-1.xhtml#index/code-foo">FOO</a>.<a class="package-reference" href="../chapter-A.xhtml#package-lisp">LISP</a> in some Tops-20 Common Lisp implementations   and will produce "^Vf^Vo^Vo.^Vl^Vi^Vs^Vp"in other Tops-20 Common   Lisp implementations. <br/>  Problems like this make it difficult to use <a class="function-reference" href="../chapter-19.xhtml#function-make-pathname">MAKE-PATHNAME</a> for much of   anything without corrective <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">non-portable</span>)</span>
</span></code> code. <br/>  Other problems occur in merging because doing    <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-namestring">NAMESTRING</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-merge-pathnames">MERGE-PATHNAMES</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-make-pathname">MAKE-PATHNAME</a> <span class="syntax-keyword-symbol">:HOST</span> <span class="syntax-string">"MY-TOPS-20"</span> <span class="syntax-keyword-symbol">:NAME</span> <span class="syntax-string">"FOO"</span>)</span>
                                <span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-parse-namestring">PARSE-NAMESTRING</a> <span class="syntax-string">"MY-UNIX:x.lisp"</span>)</span>)</span>)</span>
</span></code></pre>   should probably return "<span class="issue-reference error">issue:MY-TOPS-20</span>" but in fact might return   "<span class="issue-reference error">issue:MY-TOPS-20</span>.^Vl^Vi^Vs^Vp" in some implementations. <br/>  Problems like this make it difficult to use any merging primitives for   much of anything without corrective <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">non-portable</span>)</span>
</span></code> code. <br/></section><section class="status-passed proposal" id="issue-pathname-component-case:keyword-argument"><h2 class="section-title">Proposal KEYWORD-ARGUMENT</h2>  Add a keyword argument :CASE to <a class="function-reference" href="../chapter-19.xhtml#function-make-pathname">MAKE-PATHNAME</a>, <a class="function-reference" href="../chapter-19.xhtml#function-pathname-host">PATHNAME-HOST</a>,   <a class="function-reference" href="../chapter-19.xhtml#function-pathname-device">PATHNAME-DEVICE</a>, <a class="function-reference" href="../chapter-19.xhtml#function-pathname-directory">PATHNAME-DIRECTORY</a>, <a class="function-reference" href="../chapter-19.xhtml#function-pathname-name">PATHNAME-NAME</a>, and <a class="function-reference" href="../chapter-19.xhtml#function-pathname-type">PATHNAME-TYPE</a>.   The possible values for the argument are :COMMON and :LOCAL. <br/>  :LOCAL means strings input to <a class="function-reference" href="../chapter-19.xhtml#function-make-pathname">MAKE-PATHNAME</a> or output by PATHNAME-xxx   follow the local file system's conventions for alphabetic case.   Strings given to <a class="function-reference" href="../chapter-19.xhtml#function-make-pathname">MAKE-PATHNAME</a> will be used exactly as written if   the file system supports both cases.  If the file system only   supports one case, the strings will be translated to that case. <br/>  :COMMON means strings input to <a class="function-reference" href="../chapter-19.xhtml#function-make-pathname">MAKE-PATHNAME</a> or output by PATHNAME-xxx   follow this common convention:     <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> all uppercase means to use a file system's customary case.     <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> all lowercase means to use the opposite of the customary case.     <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> mixed case represents itself.   The second and third bullets exist so that translation from local to   common and back to local is information-preserving. <br/>  The default is :LOCAL. <br/>  Namestrings always use local file system case conventions. <br/>  <a class="function-reference" href="../chapter-19.xhtml#function-merge-pathnames">MERGE-PATHNAMES</a> and TRANSLATE-WILD-PATHNAME map customary case in the   input pathnames into customary case in the output pathname. <br/>Implications of the proposal: <br/>  Unix is case-sensitive and prefers lowercase, so it translates between   common and local by inverting the case of non-mixed-case strings. <br/>  Tops-20 is case-sensitive and prefers uppercase, so it uses identical   representations for common and local. <br/>  VAX/VMS is upper-case-only (that is, the file system translates all file   name arguments to upper case), so it translates common to local by   upcasing, and translates local to common with no change. <br/>  Macintosh is case-insensitive and prefers lowercase, so it translates   between common and local by inverting the case of non-mixed-case strings,   and ignores case in <a class="function-reference" href="../chapter-5.xhtml#function-equal">EQUAL</a> of two pathnames. <br/></section><section id="section-Test Case/Examples" class="section"><h2 class="section-title">Test Case/Examples</h2><pre>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-pathname-name">PATHNAME-NAME</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-parse-namestring">PARSE-NAMESTRING</a> <span class="syntax-string">"MY-UNIX:/me/foo.lisp"</span>)</span>
                 <span class="syntax-keyword-symbol">:CASE</span> <span class="syntax-keyword-symbol">:COMMON</span>)</span>
</span></code></pre>                                 <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; "<a class="index/code-reference" href="../chapter-1.xhtml#index/code-foo">FOO</a>"<br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-pathname-name">PATHNAME-NAME</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-parse-namestring">PARSE-NAMESTRING</a> <span class="syntax-string">"MY-TOPS-20:&lt;ME&gt;FOO.LISP"</span>)</span>
                 <span class="syntax-keyword-symbol">:CASE</span> <span class="syntax-keyword-symbol">:COMMON</span>)</span>
</span></code></pre>                                 <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; "<a class="index/code-reference" href="../chapter-1.xhtml#index/code-foo">FOO</a>"<br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-pathname-name">PATHNAME-NAME</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-parse-namestring">PARSE-NAMESTRING</a> <span class="syntax-string">"MY-UNIX:/me/foo.lisp"</span>)</span>
                 <span class="syntax-keyword-symbol">:CASE</span> <span class="syntax-keyword-symbol">:LOCAL</span>)</span>
</span></code></pre>                                  <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; "foo"<br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-pathname-name">PATHNAME-NAME</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-parse-namestring">PARSE-NAMESTRING</a> <span class="syntax-string">"MY-TOPS-20:&lt;ME&gt;FOO.LISP"</span>)</span>
                 <span class="syntax-keyword-symbol">:CASE</span> <span class="syntax-keyword-symbol">:LOCAL</span>)</span>
</span></code></pre>                                  <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; "<a class="index/code-reference" href="../chapter-1.xhtml#index/code-foo">FOO</a>"<br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-pathname-name">PATHNAME-NAME</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-parse-namestring">PARSE-NAMESTRING</a> <span class="syntax-string">"MY-UNIX:/me/TeX.lisp"</span>)</span>
                 <span class="syntax-keyword-symbol">:CASE</span> <span class="syntax-keyword-symbol">:COMMON</span>)</span>
</span></code></pre>                                 <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; "TeX"<br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-pathname-name">PATHNAME-NAME</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-parse-namestring">PARSE-NAMESTRING</a> <span class="syntax-string">"MY-UNIX:/me/TeX.lisp"</span>)</span>
                 <span class="syntax-keyword-symbol">:CASE</span> <span class="syntax-keyword-symbol">:LOCAL</span>)</span>
</span></code></pre>                                  <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; "TeX"<br/>  (<a class="function-reference" href="../chapter-19.xhtml#function-namestring">NAMESTRING</a> <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-make-pathname">MAKE-PATHNAME</a> <span class="syntax-keyword-symbol">:HOST</span> <span class="syntax-string">"MY-UNIX"</span> <span class="syntax-keyword-symbol">:NAME</span> <span class="syntax-string">"FOO"</span>
                             <span class="syntax-keyword-symbol">:CASE</span> <span class="syntax-keyword-symbol">:COMMON</span>)</span>
</span></code></pre>                     <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; "<span class="issue-reference error">issue:MY-UNIX</span>"<br/><br/></pre></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>  This does not solve the whole pathname problem, but it does improve   the situation for a clearly defined set of very common problems.   Together with the other pathname proposals, the behavior of pathnames   should be sufficiently consistent across Common Lisp implementations   and across file systems to allow portability of pathname-manipulating   programs. <br/>  The current situation where different implementations talk about   the *same* file system in different ways will be corrected by this   and some of the other pathname proposals. <br/>  Upper case is chosen as the common case for no better reason than   consistency with Lisp symbols. <br/>  The :CASE keyword argument provides access to both common and local   conventions without introducing any new functions.  The default   convention is the common one, assuming that most programs are fully   portable and therefore :COMMON will be more frequently used. <br/></section><section id="section-Current Practice" class="section"><h2 class="section-title">Current Practice</h2>  There are no known implementations of exactly what is proposed.   Symbolics Genera uses common case normally, and provides a way to   access the local case <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">called</span> <span class="syntax-string">"raw"</span>)</span>
</span></code> that in practice is rarely used.   Symbolics Genera's own file system is case-insensitive and uses lower   case as the customary case, but transparent network access is available   to file systems using all known case conventions. <br/>  Several Common Lisp implementations behave as if :CASE :LOCAL was   specified <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">but</span> <span class="syntax-interned-symbol">accept</span> <span class="syntax-interned-symbol">no</span> <span class="syntax-keyword-symbol">:CASE</span> <span class="syntax-interned-symbol">argument</span>)</span>
</span></code>. <br/></section><section id="section-Cost to Implementors" class="section"><h2 class="section-title">Cost to Implementors</h2>  The :CASE feature is easily added, but some implementations may have   to change the default behavior when :CASE is not specified.  No   implementation need change its internal representation, nor the way   pathnames print, just the interface functions listed above. <br/></section><section id="section-Cost to Users" class="section"><h2 class="section-title">Cost to Users</h2>  Technically, this change is upward compatible. <br/>  In fact, since the existing CLtL spec is so poor, nearly everyone relies   heavily on implementation-specific behavior since there is little other   choice. As such, any change is almost certain to break lots of programs,   in usually superficial but nevertheless important ways. However, if we   really make the pathname facility more portable, the user community may   be willing to bear the consequences of these changes. <br/></section><section id="section-Cost of Non-Adoption" class="section"><h2 class="section-title">Cost of Non-Adoption</h2>  We would be contributing to the perpetuation of the existing fiasco of a   pathname system. <br/></section><section id="section-Performance Impact" class="section"><h2 class="section-title">Performance Impact</h2>  None. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>  One step closer to a usable pathname system. <br/></section><section id="section-Aesthetics" class="section"><h2 class="section-title">Aesthetics</h2>  Anything that simplifies the user model of pathnames is an improvement. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>  Some people would rather use lowercase as the common case.  The   decision is essentially arbitrary.  Everywhere else in Common Lisp   where case matters, uppercase was chosen. <br/>  It has been proposed that the Common Lisp specification should include   specifications of the exact behavior of pathnames for several popular   operating systems, so that multiple implementations for those   operating systems would be compatible with each other.  This proposal   does that for alphabetic case. <br/>  Some people want the default for :CASE to be :LOCAL instead of :COMMON.   See Rationale. <br/>  There should probably be a remark somewhere that says that portable   programs shouldn't expect to be able to create and/or access distinct   files whose pathname components differ only in case. </section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>