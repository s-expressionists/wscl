<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” FUNCTION-TYPE-REST-LIST-ELEMENT</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">FUNCTION-TYPE-REST-LIST-ELEMENT</span><br/><ol class="local-toc"><li><a href="#section-Status">Status</a><ol> </ol></li><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit history">Edit history</a><ol> </ol></li><li><a href="#section-Problem description">Problem description</a><ol> </ol></li><li><a href="#issue-function-type-rest-list-element:use-actual-argument-type">Proposal USE-ACTUAL-ARGUMENT-TYPE</a><ol> </ol></li><li><a href="#section-Example">Example</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Current practice">Current practice</a><ol> </ol></li><li><a href="#section-Cost to Implementors">Cost to Implementors</a><ol> </ol></li><li><a href="#section-Cost to Users">Cost to Users</a><ol> </ol></li><li><a href="#section-Cost of non-adoption">Cost of non-adoption</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Esthetics">Esthetics</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue FUNCTION-TYPE-REST-LIST-ELEMENT [Cleanup] [CLARIFICATION, ADDITION]</h1><h2>Related issues</h2><ul><a class="issue-reference" href="../issues/function-type-key-name.xhtml#issue-function-type-key-name">FUNCTION-TYPE-KEY-NAME</a><a class="issue-reference" href="../issues/function-type-argument-type-semantics.xhtml#issue-function-type-argument-type-semantics">FUNCTION-TYPE-ARGUMENT-TYPE-SEMANTICS</a><a class="issue-reference" href="../issues/rest-list-allocation.xhtml#issue-rest-list-allocation">REST-LIST-ALLOCATION</a></ul><section id="section-Status" class="status-passed section"><h2 class="section-title">Status</h2>Passed, Jan 89 X3J13 </section><section id="section-References" class="section"><h2 class="section-title">References</h2>CLtL p. 27, 47-48, 61 "Artifical Intelligence Programming", Charniak et. al. X3J13/86-003 (A:&gt;GLS&gt;clarifications.text.4) </section><section id="section-Edit history" class="section"><h2 class="section-title">Edit history</h2>Version 1, 23-Nov-1987 Sandra Loosemore Version 2, 15-Jan-1988 Sandra Loosemore (incorporate comments from Scott Fahlman &amp; others) Version 3, 13-Feb-88 Masinter Version 4,  2-Oct-88 Masinter (update references, discussion) Version 5, 14-Nov-88 Masinter (add to discussion) </section><section id="section-Problem description" class="section"><h2 class="section-title">Problem description</h2>The <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> type specifier list is provided to allow declaration of function argument types and return value types.  This type specifier uses a syntax similar to the usual lambda list syntax to specify which types go with which lambda list variables.  However, this is actually of limited usefulness in the context of a declaration, where one normally wants type information about the actual arguments which can be passed to the function rather than the lambda variables to which they are bound. <br/>There is a particular problem with <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-rest">&amp;REST</a> lambda variables, which are always bound to a value of type <a class="function-reference" href="../chapter-14.xhtml#function-list">list</a>.  For the sake of consistency, it would seem that the corresponding type given in the <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> declaration must also be <a class="function-reference" href="../chapter-14.xhtml#function-list">list</a>, but since this provides no information about the actual arguments, some users/implementors have instead adopted the convention of supplying the type of the actual arguments which are gathered into the list.   <br/>CLtL is vague on the issue, mentioning only that <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-rest">&amp;REST</a> may appear in the type specifier without touching upon its interpretation. <br/></section><section class="status-passed proposal" id="issue-function-type-rest-list-element:use-actual-argument-type"><h2 class="section-title">Proposal USE-ACTUAL-ARGUMENT-TYPE</h2>Clarify that, in the <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> type specifier, the type specifier provided with <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-rest">&amp;REST</a> is the type of each actual argument, not the type of the corresponding lambda variable. <br/></section><section id="section-Example" class="section"><h2 class="section-title">Example</h2><pre>The type of the function <a class="function-reference" href="../chapter-12.xhtml#function-+">+</a> would be specified as:<br/><br/><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> <span class="syntax-cons">(<a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-rest">&amp;REST</a> <a class="type-reference" href="../chapter-12.xhtml#type-number">number</a>)</span> <a class="type-reference" href="../chapter-12.xhtml#type-number">number</a>)</span>
</span></code><br/><br/></pre></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>This is more useful than specifying that the type of a <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-rest">&amp;REST</a> parameter must be <a class="function-reference" href="../chapter-14.xhtml#function-list">list</a>, since it provides information about the actual arguments. <br/></section><section id="section-Current practice" class="section"><h2 class="section-title">Current practice</h2>There does not appear to be any concensus on this issue.  Most Common Lisp implementations currently ignore <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> type declarations. The only examples found so far are in a text book on Common Lisp, which follows the proposed syntax. <br/></section><section id="section-Cost to Implementors" class="section"><h2 class="section-title">Cost to Implementors</h2>Implementations that ignore the <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> type specifier may continue to do so.  Probably only a small amount of code would have to be written/changed in implementations that currently think that the  <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-rest">&amp;REST</a> argument should be <a class="function-reference" href="../chapter-14.xhtml#function-list">list</a>. <br/></section><section id="section-Cost to Users" class="section"><h2 class="section-title">Cost to Users</h2>Users who have been using the convention that the <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-rest">&amp;REST</a> type parameter must be <a class="function-reference" href="../chapter-14.xhtml#function-list">list</a> will have to change their code.  However, because this issue is so unclear, the <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> type specifier is probably not used very much. <br/></section><section id="section-Cost of non-adoption" class="section"><h2 class="section-title">Cost of non-adoption</h2>If nothing is done, the <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> type specifier will continue to be of limited use for its intended purpose. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>Adopting the proposal will clear up an area of confusion in the language design. <br/></section><section id="section-Esthetics" class="section"><h2 class="section-title">Esthetics</h2>Debatable.  One the one hand, since the argument type syntax used by the <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> type specifier mirrors normal lambda-list syntax, it would be cleaner and less confusing to provide the type of the lambda variable rather than the type of the actual arguments. However, considering the types specified in the <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> specifier to be the types of the actual arguments rather than the types of the parameters as seen on the receiving end makes the proposed semantics more palatable. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>This issue provoked considerable debate in the cleanup committee and at X3J13.  <br/>Many people objected to this proposal, and would prefer the alternative that the type given after a <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-rest">&amp;REST</a> in a function declaration apply to the value of the formal parameter rather than the actual arguments. This would be even more useful if complex <a class="function-reference" href="../chapter-14.xhtml#function-list">list</a> type specifiers were part of Common Lisp <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">as</span> <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <span class="syntax-interned-symbol">proposal</span> <span class="syntax-interned-symbol">in</span> <span class="syntax-interned-symbol">issue</span> <span class="syntax-interned-symbol">LIST-TYPE-SPECIFIER</span> <span class="syntax-interned-symbol">might</span> <span class="syntax-interned-symbol">add</span>)</span>
</span></code> or if it were possible to declare, for example, <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-rest">&amp;REST</a> {keyword integer}*. <br/>Some additional arguments against this proposal are the apparent mismatch between the external declarations of type and the internal ones. It might be that this proposals presumes that rest lists are always lists, and the following is illegal: <br/> <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">FOO</span> <span class="syntax-cons">(<a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-rest">&amp;REST</a> <span class="syntax-interned-symbol">X</span>)</span> <span class="syntax-interned-symbol">X</span>)</span>
</span></code>  <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-apply">apply</a> <span class="syntax-function">#'<span class="syntax-interned-symbol">FOO</span></span> <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>)</span>
</span></code> <br/>which is not otherwise explicitly forbidden, but for which there is no legitimate declaration. </section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>