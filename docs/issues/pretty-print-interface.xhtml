<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” PRETTY-PRINT-INTERFACE</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">PRETTY-PRINT-INTERFACE</span><br/><ol class="local-toc"><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit history">Edit history</a><ol> </ol></li><li><a href="#section-Problem description">Problem description</a><ol> </ol></li><li><a href="#issue-pretty-print-interface:xp">Proposal XP</a><ol> </ol></li><li><a href="#section-Examples">Examples</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Current practice">Current practice</a><ol> </ol></li><li><a href="#section-Cost to Implementors">Cost to Implementors</a><ol> </ol></li><li><a href="#section-Cost to Users">Cost to Users</a><ol> </ol></li><li><a href="#section-Cost of non-adoption">Cost of non-adoption</a><ol> </ol></li><li><a href="#section-Performance impact">Performance impact</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Aesthetics">Aesthetics</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li><li><a href="#issue-pretty-print-interface:xp">Proposal XP</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue PRETTY-PRINT-INTERFACE [NIL] [CLARIFICATION CHANGE ADDITION]</h1><section id="section-References" class="section"><h2 class="section-title">References</h2>Description of <a class="proposal-reference" href="#issue-pretty-print-interface:xp">XP</a> by Dick Waters (attached) <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-pretty*">*print-pretty*</a> (CLtL p. 371) <a class="function-reference" href="../chapter-22.xhtml#function-write">write</a> (CLtL p. 382) <a class="function-reference" href="../chapter-22.xhtml#function-pprint">pprint</a> (CLtL p. 383) <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> (CLtL pp. 385-407) <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> ~<a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> directive (CLtL pp. 398-399) <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> ~&lt; directive (CLtL pp. 404-406) </section><section id="section-Edit history" class="section"><h2 class="section-title">Edit history</h2>Version 1, 24-Feb-89 by Steele Version 2, 15-Mar-89 by Steele and Waters Version 3, 15-Mar-89 by Steele Version 4, 22-Mar-89 by Waters Version 5, 20-Jul-89 by Waters et al </section><section id="section-Problem description" class="section"><h2 class="section-title">Problem description</h2> At present, Common Lisp provides no specification whatsoever of how pretty-printing is to be accomplished, and no way for the user to control it.  In particular, there is no protocol by which a user can write a print-function for a structure, or a method for <a class="function-reference" href="../chapter-22.xhtml#function-print-object">print-object</a>, that will interact smoothly with the built-in pretty-printer in a portable manner. <br/></section><section class="status-unknown proposal" id="issue-pretty-print-interface:xp"><h2 class="section-title">Proposal XP</h2>Adopt the interfaces and protocols of the <a class="proposal-reference" href="#issue-pretty-print-interface:xp">XP</a> pretty-printer by Dick Waters, described in full in the attached document.  Here is a very brief summary of the proposal. <br/>New variables:	<a class="variable-reference" href="../chapter-22.xhtml#variable-*print-pprint-dispatch*">*print-pprint-dispatch*</a> 		<a class="variable-reference" href="../chapter-22.xhtml#variable-*print-miser-width*">*print-miser-width*</a> 		<a class="variable-reference" href="../chapter-22.xhtml#variable-*print-right-margin*">*print-right-margin*</a> 		<a class="variable-reference" href="../chapter-22.xhtml#variable-*print-lines*">*print-lines*</a> <br/>New functions:	<a class="function-reference" href="../chapter-22.xhtml#function-copy-pprint-dispatch">copy-pprint-dispatch</a> 		<a class="function-reference" href="../chapter-22.xhtml#function-set-pprint-dispatch">set-pprint-dispatch</a> 		<a class="function-reference" href="../chapter-22.xhtml#function-pprint-dispatch">pprint-dispatch</a> 		<a class="function-reference" href="../chapter-22.xhtml#function-pprint-newline">pprint-newline</a> 		<a class="function-reference" href="../chapter-22.xhtml#function-pprint-tab">pprint-tab</a> 		<a class="function-reference" href="../chapter-22.xhtml#function-pprint-indent">pprint-indent</a> 		<a class="function-reference" href="../chapter-22.xhtml#function-pprint-fill">pprint-fill</a> 		<a class="function-reference" href="../chapter-22.xhtml#function-pprint-linear">pprint-linear</a> 		<a class="function-reference" href="../chapter-22.xhtml#function-pprint-tabular">pprint-tabular</a> <br/>New macros:	<a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-logical-block">pprint-logical-block</a> 		<a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-pop">pprint-pop</a> 		<a class="macro-reference" href="../chapter-22.xhtml#macro-formatter">formatter</a> <br/>New <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> directives:	~W  ~_  ~I  ~:<a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>  ~/name<a class="function-reference" href="../chapter-12.xhtml#function-/">/</a>  ~&lt;...~:&gt; <br/>The function <a class="function-reference" href="../chapter-22.xhtml#function-write">write</a> is extended to accept four additional keyword arguments :PPRINT-DISPATCH, :RIGHT-MARGIN, :LINES, and :MISER-WIDTH corresponding to the four new variables. <br/>The function <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> is extended so that it can accept a function instead of a <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> string.  (This change is also made in the other functions that accept <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> strings such as <a class="function-reference" href="../chapter-9.xhtml#function-error">error</a> and <a class="function-reference" href="../chapter-9.xhtml#function-warn">warn</a>.) <br/></section><section id="section-Examples" class="section"><h2 class="section-title">Examples</h2><pre> See attached document.<br/><br/></pre></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2> There ought to be a good user interface to the pretty printer. This is the only proposal for which there is a portable implementation that has seen extensive use and is being made freely available. <br/></section><section id="section-Current practice" class="section"><h2 class="section-title">Current practice</h2> <a class="proposal-reference" href="#issue-pretty-print-interface:xp">XP</a> son of PP son of GPRINT son of #<a class="function-reference" href="../chapter-22.xhtml#function-print">print</a> is the latest in a line of pretty printers that goes back 13 years.  All of these printers use essentially the same basic algorithm and conceptual interface.  Further, except for #<a class="function-reference" href="../chapter-22.xhtml#function-print">print</a>, which was implemented solely to satisfy the author's personal needs, each of these printers has had extensive use.  <a class="proposal-reference" href="#issue-pretty-print-interface:xp">XP</a> has been in experimental use as the pretty printer in CMU Common Lisp for 6 months.  PP has been the pretty printer in DEC Common Lisp for the past 3 years.  Prior to three years ago, GPRINT was used for 2 years as the pretty printer in DEC Common Lisp.  In addition, GPRINT has been the pretty printer in various generations of Symbolics Lisp for upwards of 5 years. (See Waters R.C., "User Format Control in a Lisp Prettyprinter", ACM TOPLAS, 5<code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-number">4</span>)</span>
</span></code>:513&ndash;531, October 1983.) <br/></section><section id="section-Cost to Implementors" class="section"><h2 class="section-title">Cost to Implementors</h2>  A fair amount of effort <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">several</span> <span class="syntax-interned-symbol">man-weeks</span> <span class="syntax-interned-symbol">at</span> <span class="syntax-interned-symbol">most</span>)</span>
</span></code>.  Source code for <a class="proposal-reference" href="#issue-pretty-print-interface:xp">XP</a> is available to all comers from Dick Waters.  It has been arranged with MIT for anyone who wants to to get a non-exclusive royalty-free license for <a class="proposal-reference" href="#issue-pretty-print-interface:xp">XP</a> from MIT.  The system is documented in great detail in:   Waters, Richard C., "<a class="proposal-reference" href="#issue-pretty-print-interface:xp">XP</a>: A Common Lisp Pretty Printing System",   Artificial Intelligence Laboratory Technical Memo 1102a,   Massachusetts Institute of Technology, Cambridge MA, July 1989. <br/></section><section id="section-Cost to Users" class="section"><h2 class="section-title">Cost to Users</h2>  None <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">I</span> <span class="syntax-interned-symbol">think</span>)</span>
</span></code>.  This is an upward-compatible extension. <br/></section><section id="section-Cost of non-adoption" class="section"><h2 class="section-title">Cost of non-adoption</h2>  Continued inability for user print-functions to interact with the pretty-printer in a useful and portable manner. <br/></section><section id="section-Performance impact" class="section"><h2 class="section-title">Performance impact</h2>  <a class="proposal-reference" href="#issue-pretty-print-interface:xp">XP</a> is claimed to be quite fast. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2> User control of pretty-printing in a portable manner. <br/></section><section id="section-Aesthetics" class="section"><h2 class="section-title">Aesthetics</h2> Using ~&lt;...~:&gt; may strike some as uncomfortably close in the syntactic space of <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> directives to the existing ~&lt;...~&gt;.  However, it is very unlikely that both of these directives (pretty-print logical block and columnar justification, respectively) will be used in the same call to <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a>.  Previous versions of <a class="proposal-reference" href="#issue-pretty-print-interface:xp">XP</a> used ~!...~. instead of ~&lt;...~:&gt; but this made <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> strings very difficult to read; it is preferable to have a directive that looks like matching brackets of some sort. <br/>Dan Pierson comments:  You might mention that some people will undoubtedly find piling more hair on <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> ugly <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">of</span> <span class="syntax-interned-symbol">course</span> <span class="syntax-interned-symbol">these</span> <span class="syntax-interned-symbol">same</span> <span class="syntax-interned-symbol">people</span> <span class="syntax-interned-symbol">may</span>
<span class="syntax-interned-symbol">well</span> <a class="function-reference" href="../chapter-17.xhtml#function-find">find</a> <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> <span class="syntax-interned-symbol">in</span> <span class="syntax-interned-symbol">general</span> <span class="syntax-interned-symbol">ugly</span> <span class="syntax-keyword-symbol">:-</span>)</span>
</span></code></pre>). <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>Zetalisp used ~:<a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> to mean pixelwise tabulation, so the use of ~:<a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> suggested here may be a problem.  If so, another suggestion for naming this directive would be appreciated. <br/>The ~<a class="function-reference" href="../chapter-12.xhtml#function-/">/</a>...<a class="function-reference" href="../chapter-12.xhtml#function-/">/</a> directive is already in Zetalisp, and is not an idea new to this proposal.  However, it should be noted that the proposal for ~<a class="function-reference" href="../chapter-12.xhtml#function-/">/</a>...<a class="function-reference" href="../chapter-12.xhtml#function-/">/</a> here is simpler than, and incompatible with, the current Zatalisp practice. <br/>Guy Steele and Dick Waters strongly support this proposal.  (As an example, Guy Steele has a portable simulator for Connection Machine Lisp, and would like very much to have xappings and xectors pretty-print properly.) <br/>&mdash; <br/>Dan Pierson comments: You can add me to the list of strong supporters of this proposal.  While the proposal is long and complex, it is supported by a long history of usage in several different Lisp environments. <br/>The utility of <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-lines*">*print-lines*</a> becomes more obvious if it is pointed out that Dick's pretty printers are implemented to print each line as it is computed.  This means that a small value for <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-lines*">*print-lines*</a> saves significant time as well as output medium space. <br/>The advantages of compiled format strings <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> <span class="syntax-interned-symbol">functions</span>)</span>
</span></code> should be brought out as benefits in their own right.  The current proposal just mentions them as a minor feature of <a class="proposal-reference" href="#issue-pretty-print-interface:xp">XP</a>. <br/>At first this struck me a very cute end run around the failure of STREAM-INFO, then I realized that one of the problems with STREAM-INFO may have been that it was a standard at the wrong level.  STREAM-INFO permitted people to use <a class="proposal-reference" href="#issue-pretty-print-interface:xp">XP</a>, but not to count on it.  This proposal makes it possible to write portable code whose new data structures and language elements print correctly in whatever Common Lisp environment they're run in.  [End of comments by Pierson] <br/>&mdash; <br/>It has been noted by Guy Steele that some places in the initial document where it says that circularity detection is handled correctly, this is true a fortiori following the decision on <a class="issue-reference" href="../issues/print-circle-structure.xhtml#issue-print-circle-structure">print-circle-structure</a>. However, Waters notes that the vote on <a class="issue-reference" href="../issues/print-circle-structure.xhtml#issue-print-circle-structure">print-circle-structure</a> said nothing about the handling of <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-level*">*print-level*</a>.  Therefore, the fact that <a class="proposal-reference" href="#issue-pretty-print-interface:xp">XP</a> handles <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-level*">*print-level*</a> correctly is an improvement. <br/>In addition, <a class="issue-reference" href="../issues/print-circle-structure.xhtml#issue-print-circle-structure">print-circle-structure</a> is also silent on what is supposed to happen if a user program decomposes a list itself (e.g., with <a class="macro-reference" href="../chapter-6.xhtml#macro-dolist">dolist</a> or ~{~}) rather than calling a print function.  Assumedly <a class="symbol-reference" href="../chapter-2.xhtml#symbol-*print-circle*">*print-circle*</a> etc. is not handled in this case.  In contrast, if one uses <a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-logical-block">pprint-logical-block</a> or ~&lt;~:&gt;, then <a class="symbol-reference" href="../chapter-2.xhtml#symbol-*print-circle*">*print-circle*</a>, <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-level*">*print-level*</a>, and <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-length*">*print-length*</a> are all automatically handled correctly. <br/>For example, (format nil "<a class="function-reference" href="../chapter-12.xhtml#function--">-</a>~1{~A ~A ~A ~A ~A ~}<a class="function-reference" href="../chapter-12.xhtml#function--">-</a>" '#1<a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>(1 #1# 2 . #1#)) produces "-1 #1<a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>(1 #1# 2 . #1#) 2 1 #1<a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>(1 #1# 2 . #1#) <a class="function-reference" href="../chapter-12.xhtml#function--">-</a>" even under <a class="issue-reference" href="../issues/print-circle-structure.xhtml#issue-print-circle-structure">print-circle-structure</a> and (format nil "<a class="function-reference" href="../chapter-12.xhtml#function--">-</a>~1{~A ~}<a class="function-reference" href="../chapter-12.xhtml#function--">-</a>" '#1<a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>(1 #1# 2 . #1#))  causes infinite looping.  However, in <a class="proposal-reference" href="#issue-pretty-print-interface:xp">XP</a>, (format nil "<a class="function-reference" href="../chapter-12.xhtml#function--">-</a>~:&lt;~W ~W ~W ~W ~W~:&gt;<a class="function-reference" href="../chapter-12.xhtml#function--">-</a>" '#1<a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>(1 #1# 2 . #1#)) produces "<a class="function-reference" href="../chapter-12.xhtml#function--">-</a>#1<a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>(1 #1# 2 . #1#)<a class="function-reference" href="../chapter-12.xhtml#function--">-</a>". This proves to be very useful when writing pretty printing functions for things.  Note also that ~&lt;~:&gt; supports <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-level*">*print-level*</a> and <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-length*">*print-length*</a> correctly.  All the same things can be said about the functional interface and using <a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-logical-block">pprint-logical-block</a> rather than traversing a list yourself in some fashion. <br/>All in all, Waters claims that <a class="issue-reference" href="../issues/print-circle-structure.xhtml#issue-print-circle-structure">print-circle-structure</a> covers at most 1/4 of what <a class="proposal-reference" href="#issue-pretty-print-interface:xp">XP</a> does in support of <a class="symbol-reference" href="../chapter-2.xhtml#symbol-*print-circle*">*print-circle*</a> and does not cover anything of what <a class="proposal-reference" href="#issue-pretty-print-interface:xp">XP</a> does to support <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-level*">*print-level*</a>, <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-length*">*print-length*</a>, and robustness in the face of malformed arguments.  These are vital features for writing printing functions that really work right all the time. <br/>&mdash; <br/>It has been suggested that objects should be looked up in pprint dispatch tables by looking for the most specific type specifier that applies, rather than looking for the highest priority type specifier that applies.  There are two problems with this.  First, it is possible for two type specifiers to apply without one being more specific than the other.  For example, consider the type specifiers <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-or">or</a> <a class="type-reference" href="../chapter-12.xhtml#type-integer">integer</a> <a class="function-reference" href="../chapter-12.xhtml#function-float">float</a>)</span>
</span></code> and <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-or">or</a> <a class="type-reference" href="../chapter-12.xhtml#type-integer">integer</a> <a class="function-reference" href="../chapter-12.xhtml#function-rational">rational</a>)</span>
</span></code> or the type specifiers <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-not">not</a> <a class="function-reference" href="../chapter-12.xhtml#function-complex">complex</a>)</span>
</span></code> and <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-not">not</a> <a class="type-reference" href="../chapter-12.xhtml#type-integer">integer</a>)</span>
</span></code>. <br/>A much more serious problem is that the only way to tell whether one type specifier is more specific than another is to use <a class="function-reference" href="../chapter-4.xhtml#function-subtypep">subtypep</a>.  Unfortunately, even with the clarifications and extensions introduced by X3J13 with regard to <a class="function-reference" href="../chapter-4.xhtml#function-subtypep">subtypep</a> in particular and the type system in general, <a class="function-reference" href="../chapter-4.xhtml#function-subtypep">subtypep</a> is not very dependable.  There are critical situations where it cannot reasonably work in any implementation (e.g., when a type specifier contains <a class="type-reference" href="../chapter-4.xhtml#type-satisfies">satisfies</a>) and many other situations where it can vary from one implementation to another.  Unfortunately, pprint dispatch tables are expected to contain type specifiers containing <a class="type-reference" href="../chapter-4.xhtml#type-satisfies">satisfies</a> on a regular basis.  In addition, the variability in <a class="function-reference" href="../chapter-4.xhtml#function-subtypep">subtypep</a> would reduce the portability of user-defined pprint dispatch tables if dispatching through them depended on <a class="function-reference" href="../chapter-4.xhtml#function-subtypep">subtypep</a>.  All in all, it seems much better for the pretty printing to rely on priorities rather than on <a class="function-reference" href="../chapter-4.xhtml#function-subtypep">subtypep</a> <br/>&mdash; <br/>It has been noted by Dave Moon that things would be much more elegant if <a class="function-reference" href="../chapter-22.xhtml#function-set-pprint-dispatch">set-pprint-dispatch</a> could be expressed directly as a CLOS <a class="macro-reference" href="../chapter-7.xhtml#macro-defmethod">defmethod</a> for an appropriate generic function.  Dick Waters agrees with this.  However, <a class="function-reference" href="../chapter-22.xhtml#function-set-pprint-dispatch">set-pprint-dispatch</a> depends on type specifiers that are more complex than the ones CLOS deals with and ones that do not have clear subtype<a class="function-reference" href="../chapter-12.xhtml#function-/">/</a>supertype relationships, compensating for the latter problem by supporting numerical priorities to disambiguate things.  (The defaulting behavior is a key feature of the pretty printer.)  At the very least, this means that <a class="function-reference" href="../chapter-22.xhtml#function-set-pprint-dispatch">set-pprint-dispatch</a> will not fit into CLOS in a simple way. <br/>Given the problems, Moon suggests that "it does seem that right now it might be best to keep a separate <a class="function-reference" href="../chapter-22.xhtml#function-set-pprint-dispatch">set-pprint-dispatch</a> macro, with the idea that the expansion is <a class="glossary-reference" href="../chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a> at the moment, but might some day be changed to be defined to expand into <a class="macro-reference" href="../chapter-7.xhtml#macro-defmethod">defmethod</a>.  I haven't looked to see whether any syntactic changes would be appropriate to make that transition smoother." <br/>(Waters also worries that the overhead needed to locate the right CLOS method would seriously degrade the pretty printer, because the printer has to do this for every part of every object printed.  This dispatching is currently done by very fast code that is tuned to take advantage of the observed distribution of kinds of objects that have special pretty printers attached to them.  Even with this special purpose code, dispatching takes a significant part of the pretty printer's time.) <br/>&mdash; <br/>Dave Moon also comments that it is not good to have something that looks like a type specifier (i.e., the extended form of the <a class="function-reference" href="../chapter-14.xhtml#function-cons">cons</a> type specifier used by <a class="function-reference" href="../chapter-22.xhtml#function-set-pprint-dispatch">set-pprint-dispatch</a>) and yet is not a real type specifier.  He suggests that we should either amend Common Lisp to accept the extended form of the <a class="function-reference" href="../chapter-14.xhtml#function-cons">cons</a> type specifier, or stop having <a class="function-reference" href="../chapter-22.xhtml#function-set-pprint-dispatch">set-pprint-dispatch</a> use it.   <br/>Many of the members of the ad hoc pretty printing subcommittee agree that <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-cons">cons</a> <span class="syntax-interned-symbol">car-type</span> <span class="syntax-interned-symbol">cdr-type</span>)</span>
</span></code> should be made a full fledged type specifier.  In fact it has been suggested that there should be a much wider variety of ways to talk about lists and their contents than currently exists. However, the subcommittee feels that it would be going significantly beyond our charter to change anything about the type system. <br/>Therefore, we opted for the opposite tack of making it very clear in this proposal that while the function <a class="function-reference" href="../chapter-22.xhtml#function-set-pprint-dispatch">set-pprint-dispatch</a> accepts the form <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-cons">cons</a> <span class="syntax-interned-symbol">car-type</span> <span class="syntax-interned-symbol">cdr-type</span>)</span>
</span></code>, this form is not a type specifier. <br/>&mdash; <br/>To a considerable extent, the design of the <a class="proposal-reference" href="#issue-pretty-print-interface:xp">XP</a> interface is completely neutral about the issue of variable<a class="function-reference" href="../chapter-12.xhtml#function--">-</a> versus fixed<a class="function-reference" href="../chapter-12.xhtml#function--">-</a> width fonts.  In particular, most of the discussion of how the formating proceeds either talks about absolute positions of zero or talks about something being in the same horizontal position as something else.  These statements are all font-independent.  (Further, although Waters' current implementation does not support variable-width fonts, the algorithms used could be extended to support them without radical changes.) <br/>Nevertheless, there are 8 places where users specify explicit non-zero lengths: the variables <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-right-margin*">*print-right-margin*</a> and <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-miser-width*">*print-miser-width*</a>, the numeric arguments to ~<a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>, ~I, and ~/pprint-tabular/ and their associated functions <a class="function-reference" href="../chapter-22.xhtml#function-pprint-tab">pprint-tab</a>, <a class="function-reference" href="../chapter-22.xhtml#function-pprint-indent">pprint-indent</a>, and <a class="function-reference" href="../chapter-22.xhtml#function-pprint-tabular">pprint-tabular</a>. <br/>It is proposed that all of these lengths be in the same units, and that this unit be ems <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <a class="function-reference" href="../chapter-17.xhtml#function-length">length</a> <span class="syntax-interned-symbol">of</span> <span class="syntax-interned-symbol">an</span> <span class="syntax-string">"m"</span> <span class="syntax-interned-symbol">in</span> <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <span class="syntax-interned-symbol">font</span> <span class="syntax-interned-symbol">currently</span> <span class="syntax-interned-symbol">being</span> <span class="syntax-interned-symbol">used</span>
<span class="syntax-interned-symbol">to</span> <span class="syntax-interned-symbol">output</span> <span class="syntax-interned-symbol">characters</span> <span class="syntax-interned-symbol">to</span> <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <span class="syntax-interned-symbol">relevant</span> <span class="syntax-interned-symbol">output</span> <a class="type-reference" href="../chapter-21.xhtml#type-stream">stream</a> <span class="syntax-interned-symbol">at</span> <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <span class="syntax-interned-symbol">moment</span> <span class="syntax-interned-symbol">that</span>
<a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <span class="syntax-interned-symbol">command</span> <span class="syntax-interned-symbol">is</span> <span class="syntax-interned-symbol">encountered</span> <a class="macro-reference" href="../chapter-5.xhtml#macro-or">or</a> <span class="syntax-interned-symbol">a</span> <a class="symbol-reference" href="../chapter-25.xhtml#symbol-variable">variable</a> <span class="syntax-interned-symbol">is</span> <span class="syntax-interned-symbol">consulted</span>)</span>
</span></code></pre>. <br/>It is further proposed that users and implementors be advised to set things up so that explicit lengths do not have to be specified.  For implementors, this means making streams smart enough that they know how wide they are. (This avoids the use of <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-right-margin*">*print-right-margin*</a>.)  For users, this means relying on streams knowing their own widths <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">which</span> <span class="syntax-interned-symbol">is</span> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">good</span> <span class="syntax-interned-symbol">idea</span> <span class="syntax-interned-symbol">for</span>
<span class="syntax-interned-symbol">adaptability</span> <span class="syntax-interned-symbol">in</span> <span class="syntax-interned-symbol">any</span> <a class="macro-reference" href="../chapter-5.xhtml#macro-case">case</a>)</span>
</span></code></pre> and using ~:I <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">instead</span> <span class="syntax-interned-symbol">of</span> <span class="syntax-interned-symbol">just</span> <span class="syntax-interned-symbol">~I</span>)</span>
</span></code> to specify indentations wherever possible.  Further, it should be noted that since <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-miser-width*">*print-miser-width*</a> is essentially heuristic in nature, it does not matter if its value is only an approximate length and users will only need to change the value of <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-miser-width*">*print-miser-width*</a> in unusual situations. This leaves only tabbing as an area where explicit lengths have to be specified on a regular basis.  Fortunately, approximate lengths are often acceptable in this situation as well. <br/>&mdash; <br/>The currently proposed syntax for <a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-logical-block">pprint-logical-block</a> was suggested by Dave Moon based on his experience with similar constructs at Symbolics. Waters had originally suggested using a standard binding pair to specify the underlying stream separately from the variable used to hold the special stream used within the logical block.  However, this invites user mistakes. The problem is that peculiar results will be obtained if any I/O is sent directly to the underlying stream from within the logical block.  By arranging the syntax as proposed, the same variable is always used for the special stream within the logical block as is used for the underlying stream outside of the block.  As a result, it is syntactically impossible to directly access the underlying stream <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-unless">unless</a> <span class="syntax-interned-symbol">it</span> <span class="syntax-interned-symbol">is</span> <span class="syntax-interned-symbol">stored</span> <span class="syntax-interned-symbol">in</span> <span class="syntax-interned-symbol">two</span>
<span class="syntax-interned-symbol">different</span> <span class="syntax-interned-symbol">variables</span>)</span>
</span></code></pre> and the user is painlessly saved from making mistakes. Also, the <a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-logical-block">pprint-logical-block</a> macro is rendered more compact. <br/>&mdash; <br/>Another interesting issue is the interaction between pretty-printing and <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-readably*">*print-readably*</a>.  Note first, that <a class="macro-reference" href="../chapter-23.xhtml#macro-with-standard-io-syntax">with-standard-io-syntax</a> binds <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-pretty*">*print-pretty*</a> to <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>.  In general one should expect that maximum machine readability will be achieved when <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-pretty*">*print-pretty*</a> is nil.  However, in analogy with <a class="issue-reference" href="../issues/data-io.xhtml#issue-data-io">X3J13 Issue DATA-IO</a>, it is reasonable to require that <a class="function-reference" href="../chapter-22.xhtml#function-pprint-dispatch">pprint-dispatch</a> functions must obey <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-readably*">*print-readably*</a>.  Note that <a class="proposal-reference" href="#issue-pretty-print-interface:xp">XP</a> supports a number of features (e.g., automatic handling of malformed lists) that are explicitly designed to make it easier to write pprint functions that reliably produce machine readable output. <br/>&mdash; <br/>Steve Haflich comments that the macro <a class="macro-reference" href="../chapter-22.xhtml#macro-formatter">formatter</a> provides an opportunity at some later time to do something about making <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> control strings more readable.  Specifically, when using <a class="macro-reference" href="../chapter-22.xhtml#macro-formatter">formatter</a>, one should not hesitate to insert lots of newlines, because they will not waste any space since the <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> string will be converted into a function in any case.  Second, it would be nice to add some feature to format strings that would allow comments to appear in a <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> string.  (This is what ~; probably should have been reserved to mean.) <br/>&mdash; <br/>Walter van Roggen notes that the automatic handling of <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-level*">*print-level*</a> by <a class="proposal-reference" href="#issue-pretty-print-interface:xp">XP</a> obsoletes the need for the third argument to print functions for structures.  (This argument was very seldom used in any case.)  It might be appropriate at some future time to get rid of the third argument to print functions for structures.  However, this would not be an upward compatible change. <br/>&mdash; <br/>The pretty printer control interface is included in this proposal for two key reasons: <br/><ol><li> Something like the following is probably a key part of the argument against the pretty-printer-control <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> interface in the minds of those that oppose it.  "Including the pretty-printer-control <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> interface might be a gain or a loss for Common Lisp, but nothing could possibly be lost by not including it.  You can always just use <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> as it is now, and you can get pretty printing control with the new functions."  However, this argument is not quite true. <br/>As can be seen in the example below, pretty printer control information has to be highly intertwined with the rest of the output functions.  As a practical matter, this means that if there is no pretty-printer-control <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> interface you cannot make much if any use of <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> when specifying output that contains pretty-printer-control information.  (For instance in the 20 line example below, there is not even one place where there are two printing operations in a row that could be combined into a call on <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> if there were no pretty-printer-control <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> interface.  This means that there would be no benefit to using <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> anywhere in this example.) <br/>The consequence of the above is that, even though pretty printer control and <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> inherently have nothing to do with each other, adding pretty printer control facilities without adding a pretty-printer-control <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> interface, effectively requires people to choose between <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> and pretty printer control.  In order to allow people to separately decide whether they do or do not want to user <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> and do or do not want to get involved with controlling the pretty printer, you have to provide a pretty-printer-control <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> interface. <br/>This issue is intensified given a pretty printer such as <a class="proposal-reference" href="#issue-pretty-print-interface:xp">XP</a> that is within epsilon of just as fast as the ordinary non-pretty printer, because many people choose to set <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-pretty*">*print-pretty*</a> to <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> all of the time. They are therefore naturally led to wanting to specify at least some pretty printing control information whenever defining a print function for a structure, or an error message, or in fact essentially any kind of output.  If there is no pretty-printer-control <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> interface, then this would effectively bar the use of <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> for these users. <br/>In summary, rather than pushing <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> into new territory, the pretty-printer-control <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> interface is required to prevent <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> from sliding into obsolescence. <br/></li><li> Although it probably is not convincing to those that do not like <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a>, a additional reason for having a pretty-printer-control <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> interface is exactly the same as the reason for having <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> at all: compactness.  For example, as shown in the main proposal, the format string: <br/>  "~:&lt;~W~^ ~:&lt;~@{~:&lt;~@{~W~^ ~_~}~:&gt;~^ ~:_~}~:&gt;~1I~@{~^ ~_~W~}~:&gt;" <br/>is the same as the expression: <br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-logical-block">pprint-logical-block</a> <span class="syntax-cons">(<a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> <a class="function-reference" href="../chapter-14.xhtml#function-list">list</a> <span class="syntax-keyword-symbol">:prefix</span> <span class="syntax-string">"("</span> <span class="syntax-keyword-symbol">:suffix</span> <span class="syntax-string">")"</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-write">write</a> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-pop">pprint-pop</a>)</span>)</span>
    <span class="syntax-cons">(<a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-exit-if-list-exhausted">pprint-exit-if-list-exhausted</a>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="../chapter-21.xhtml#function-write-char">write-char</a> <span class="syntax-character">#\space</span>)</span>
    <span class="syntax-cons">(<a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-logical-block">pprint-logical-block</a> <span class="syntax-cons">(<a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-pop">pprint-pop</a>)</span> <span class="syntax-keyword-symbol">:prefix</span> <span class="syntax-string">"("</span> <span class="syntax-keyword-symbol">:suffix</span> <span class="syntax-string">")"</span>)</span>
      <span class="syntax-cons">(<a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-exit-if-list-exhausted">pprint-exit-if-list-exhausted</a>)</span>
      <span class="syntax-cons">(<a class="macro-reference" href="../chapter-6.xhtml#macro-loop">loop</a> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-logical-block">pprint-logical-block</a> <span class="syntax-cons">(<a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-pop">pprint-pop</a>)</span> <span class="syntax-keyword-symbol">:prefix</span> <span class="syntax-string">"("</span> <span class="syntax-keyword-symbol">:suffix</span> <span class="syntax-string">")"</span>)</span>
	      <span class="syntax-cons">(<a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-exit-if-list-exhausted">pprint-exit-if-list-exhausted</a>)</span>
	      <span class="syntax-cons">(<a class="macro-reference" href="../chapter-6.xhtml#macro-loop">loop</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-write">write</a> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-pop">pprint-pop</a>)</span>)</span>
		    <span class="syntax-cons">(<a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-exit-if-list-exhausted">pprint-exit-if-list-exhausted</a>)</span>
		    <span class="syntax-cons">(<a class="function-reference" href="../chapter-21.xhtml#function-write-char">write-char</a> <span class="syntax-character">#\space</span>)</span>
		    <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-pprint-newline">pprint-newline</a> <span class="syntax-keyword-symbol">:linear</span>)</span>)</span>)</span>
	    <span class="syntax-cons">(<a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-exit-if-list-exhausted">pprint-exit-if-list-exhausted</a>)</span>
	    <span class="syntax-cons">(<a class="function-reference" href="../chapter-21.xhtml#function-write-char">write-char</a> <span class="syntax-character">#\space</span>)</span>
	    <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-pprint-newline">pprint-newline</a> <span class="syntax-keyword-symbol">:fill</span>)</span>)</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-pprint-indent">pprint-indent</a> <span class="syntax-keyword-symbol">:block</span> <span class="syntax-number">1</span>)</span>
    <span class="syntax-cons">(<a class="macro-reference" href="../chapter-6.xhtml#macro-loop">loop</a> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-exit-if-list-exhausted">pprint-exit-if-list-exhausted</a>)</span>
	  <span class="syntax-cons">(<a class="function-reference" href="../chapter-21.xhtml#function-write-char">write-char</a> <span class="syntax-character">#\space</span>)</span>
	  <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-pprint-newline">pprint-newline</a> <span class="syntax-keyword-symbol">:linear</span>)</span>
	  <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-write">write</a> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-pop">pprint-pop</a>)</span>)</span>)</span>)</span>
</span></code></pre>) <br/>It is of course also true that a line of <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> control string is a lot harder to read than a line of Lisp code.  However, <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> has become a permanent fixture of Common Lisp, because a line of <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> control string is a lot easier to read and work with than 20 lines of Lisp code. <br/></li><li> It should also be noted that the way the <a class="proposal-reference" href="#issue-pretty-print-interface:xp">XP</a> proposal was first written up made the <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> interface look a lot more complex than it is.  Only six things are being added.  Two of these just fix problems with <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> and do not have anything to do with pretty printing.  Of the remaining four, three are very simple.  Only ~&lt;...~:&gt; could be called complex. <br/>~A and ~S both force the value of <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-escape*">*print-escape*</a>.  ~W is needed in order to write <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> strings that obey <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-escape*">*print-escape*</a>. <br/>~<a class="function-reference" href="../chapter-12.xhtml#function-/">/</a>...<a class="function-reference" href="../chapter-12.xhtml#function-/">/</a> restores <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">in</span> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">simplified</span> <span class="syntax-interned-symbol">form</span>)</span>
</span></code> a feature of <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> that was lost in the first version of Common Lisp.  A number of people have commented that this is something that they like, having nothing to do with pretty printing.  (Note that ~/PPRINT-LINEAR/, ~/PPRINT-FILL/, and ~/PPRINT-TABULAR/ are not new directives, they are just a consequence of the fact that ~<a class="function-reference" href="../chapter-12.xhtml#function-/">/</a>...<a class="function-reference" href="../chapter-12.xhtml#function-/">/</a> can call the functions <a class="function-reference" href="../chapter-22.xhtml#function-pprint-linear">pprint-linear</a>, <a class="function-reference" href="../chapter-22.xhtml#function-pprint-fill">pprint-fill</a>, and <a class="function-reference" href="../chapter-22.xhtml#function-pprint-tabular">pprint-tabular</a>.) <br/> ========================= ``Attached Document'' ========================= <br/></li></ol></section><section class="status-unknown proposal" id="issue-pretty-print-interface:xp"><h2 class="section-title">Proposal XP</h2>Full description of <a class="proposal-reference" href="#issue-pretty-print-interface:xp">XP</a> accompanying version 5 of the proposal <br/>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash; <br/>			   Pretty Printing <br/>			  Richard C. Waters <br/>Pretty printing has traditionally been a black box process, displaying program code using a set of fixed layout rules.  Its utility can be greatly enhanced by opening it up to user control. <br/>By providing direct access to the mechanisms within the pretty printer that make dynamic decisions about layout, the macros and functions <a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-logical-block">pprint-logical-block</a>, <a class="function-reference" href="../chapter-22.xhtml#function-pprint-newline">pprint-newline</a>, and <a class="function-reference" href="../chapter-22.xhtml#function-pprint-indent">pprint-indent</a> make it possible to specify pretty printing layout rules as a part of any function that produces output.  They also make it very easy for the detection of circularity and sharing, and abbreviation based on length and nesting depth to be supported by the function.  The function <a class="function-reference" href="../chapter-22.xhtml#function-set-pprint-dispatch">set-pprint-dispatch</a> makes it possible to associate a user-defined pretty printing function with any type of object.  Together, these facilities enable users to redefine the way code is displayed and allow the full power of pretty printing to be applied to complex combinations of data structures. <br/>		  Pretty Printing Control Variables <br/><a class="variable-reference" href="../chapter-22.xhtml#variable-*print-right-margin*">*print-right-margin*</a>                                             [variable] <br/>A primary goal of pretty printing is to keep the output between a pair of margins.  The left margin is set at the column where the output begins.  If this cannot be determined, the left margin is set to zero. <br/>When <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-right-margin*">*print-right-margin*</a> is not <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>, it specifies the right margin to use when making layout decisions.  When <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-right-margin*">*print-right-margin*</a> is <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a>
<span class="syntax-interned-symbol">initial</span> <span class="syntax-interned-symbol">value</span>)</span>
</span></code></pre>, the right margin is set at the maximum line length that can be displayed by the output stream without wraparound or truncation.  If this cannot be determined, the right margin is set to an implementation dependent value. <br/>To allow for the possibility of variable-width fonts, <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-right-margin*">*print-right-margin*</a> is interpreted in terms of ems---the length of an "m" in the font being used to display characters on the relevant output stream at the moment when the variables are consulted. <br/><a class="variable-reference" href="../chapter-22.xhtml#variable-*print-miser-width*">*print-miser-width*</a>                                              [variable] <br/>If <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-miser-width*">*print-miser-width*</a> is not <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>, the pretty printer switches to a compact style of output <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">called</span> <span class="syntax-interned-symbol">miser</span> <span class="syntax-interned-symbol">style</span>)</span>
</span></code> whenever the width available for printing a substructure is less than or equal to <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-miser-width*">*print-miser-width*</a> ems. The initial value of <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-miser-width*">*print-miser-width*</a> is <a class="glossary-reference" href="../chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a>. <br/><a class="variable-reference" href="../chapter-22.xhtml#variable-*print-lines*">*print-lines*</a>                                                    [variable] <br/>When given a value other than its initial value of <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>, <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-lines*">*print-lines*</a> limits the number of output lines produced when something is pretty printed.  If an attempt is made to go beyond <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-lines*">*print-lines*</a> lines, " .." is printed at the end of the last line followed by all of the suffixes <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">closing</span> <span class="syntax-interned-symbol">delimiters</span>)</span>
</span></code> that are pending to be printed. <br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<a class="variable-reference" href="../chapter-22.xhtml#variable-*print-right-margin*">*print-right-margin*</a> <span class="syntax-number">25</span>)</span> <span class="syntax-cons">(<a class="variable-reference" href="../chapter-22.xhtml#variable-*print-lines*">*print-lines*</a> <span class="syntax-number">3</span>)</span>)</span>
  <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-pprint">pprint</a> <span class="syntax-quote">'<span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-progn">progn</a> <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-number">1</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-number">2</span> <span class="syntax-interned-symbol">c</span> <span class="syntax-number">3</span> <span class="syntax-interned-symbol">d</span> <span class="syntax-number">4</span>)</span>)</span></span>)</span>)</span>
</span></code></pre> <br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-progn">progn</a> <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">A</span> <span class="syntax-number">1</span>
             <span class="syntax-interned-symbol">B</span> <span class="syntax-number">2</span>
             <span class="syntax-interned-symbol">C</span> <span class="syntax-number">3</span> <span class="syntax-interned-symbol">..</span>)</span>)</span>
</span></code></pre> <br/>(The symbol ".." is printed out to ensure that a reader error will occur if the output is later read.  A symbol different than "..." is used to indicate that a different kind of abbreviation has occurred.) <br/><a class="variable-reference" href="../chapter-22.xhtml#variable-*print-pprint-dispatch*">*print-pprint-dispatch*</a>                                          [variable] <br/>When <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-pretty*">*print-pretty*</a> is not <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>, printing is controlled by the `pprint dispatch table' stored in the variable <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-pprint-dispatch*">*print-pprint-dispatch*</a>.  The initial value of <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-pprint-dispatch*">*print-pprint-dispatch*</a> is implementation dependent and causes traditional pretty printing of Lisp code.  The last section of this proposal explains how the contents of this table can be changed. <br/>The function <a class="function-reference" href="../chapter-22.xhtml#function-write">write</a> accepts keyword arguments :PPRINT-DISPATCH, :RIGHT-MARGIN, :LINES, and :MISER-WIDTH corresponding to <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-pprint-dispatch*">*print-pprint-dispatch*</a>, <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-right-margin*">*print-right-margin*</a>, <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-lines*">*print-lines*</a>, and <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-miser-width*">*print-miser-width*</a>. <br/>	     Dynamic Control of the Arrangement of Output <br/>The following functions and macros support precise control of what should be done when a piece of output is too large to fit in the space available. Three concepts underlie the way these operations work---`logical blocks', `conditional newlines', and `sections'.  Before proceeding further, it is important to define these terms. <br/>The first line of Figure 1 shows a schematic piece of output.  The characters in the output are represented by "<a class="function-reference" href="../chapter-12.xhtml#function--">-</a>"s.  The positions of conditional newlines are indicated by digits.  The beginnings and ends of logical blocks are indicated by "&lt;" and "&gt;" respectively. <br/>The output as a whole is a logical block and the outermost section.  This section is indicated by the 0's on the second line of Figure 1.  Logical blocks nested within the output are specified by the macro <a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-logical-block">pprint-logical-block</a>.  Conditional newline positions are specified by calls on <a class="function-reference" href="../chapter-22.xhtml#function-pprint-newline">pprint-newline</a>.  Each conditional newline defines two sections <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">one</span>
<span class="syntax-interned-symbol">before</span> <span class="syntax-interned-symbol">it</span> <a class="macro-reference" href="../chapter-5.xhtml#macro-and">and</a> <span class="syntax-interned-symbol">one</span> <span class="syntax-interned-symbol">after</span> <span class="syntax-interned-symbol">it</span>)</span>
</span></code></pre> and is associated with a third <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <span class="syntax-interned-symbol">section</span>
<span class="syntax-interned-symbol">immediately</span> <span class="syntax-interned-symbol">containing</span> <span class="syntax-interned-symbol">it</span>)</span>
</span></code></pre>. <br/>The section after a conditional newline consists of: all the output up to, but not including, <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">a</span>)</span>
</span></code> the next conditional newline immediately contained in the same logical block; or if <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">a</span>)</span>
</span></code> is not applicable, <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">b</span>)</span>
</span></code> the next newline that is at a lesser level of nesting in logical blocks; or if <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">b</span>)</span>
</span></code> is not applicable, <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">c</span>)</span>
</span></code> the end of the output. <br/>The section before a conditional newline consists of: all the output back to, but not including, <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">a</span>)</span>
</span></code> the previous conditional newline that is immediately contained in the same logical block; or if <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">a</span>)</span>
</span></code> is not applicable, <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">b</span>)</span>
</span></code> the beginning of the immediately containing logical block. The last four lines in Figure 1 indicate the sections before and after the four conditional newlines. <br/>The section immediately containing a conditional newline is the shortest section that contains the conditional newline in question.  In Figure 1, the first conditional newline is immediately contained in the section marked with 0's, the second and third conditional newlines are immediately contained in the section before the fourth conditional newline, and the fourth conditional newline is immediately contained in the section after the first conditional newline. <br/>                 &lt;-1---&lt;&ndash;&lt;&ndash;2&mdash;3<a class="function-reference" href="../chapter-12.xhtml#function--">-</a>&gt;&ndash;4&ndash;&gt;<a class="function-reference" href="../chapter-12.xhtml#function--">-</a>&gt;                  000000000000000000000000000                  11 111111111111111111111111                            22 222                               333 3333                         44444444444444 44444 <br/>Figure 1: Example of logical blocks, conditional newlines, and sections. <br/>Whenever possible, the pretty printer displays the entire contents of a section on a single line.  However, if the section is too long to fit in the space available, line breaks are inserted at conditional newline positions within the section. <br/><a class="function-reference" href="../chapter-22.xhtml#function-pprint-newline">pprint-newline</a> kind <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-optional">&amp;OPTIONAL</a> <code><span class="syntax-root"><span class="syntax-cons">(<a class="type-reference" href="../chapter-21.xhtml#type-stream">stream</a> <a class="variable-reference" href="../chapter-21.xhtml#variable-*standard-output*">*standard-output*</a>)</span>
</span></code>    [Function] <br/><a class="type-reference" href="../chapter-21.xhtml#type-stream">stream</a> <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">which</span> <span class="syntax-interned-symbol">defaults</span> <span class="syntax-interned-symbol">to</span> <a class="variable-reference" href="../chapter-21.xhtml#variable-*standard-output*">*standard-output*</a>)</span>
</span></code> follows the standard conventions for stream arguments to printing functions (i.e., <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> stands for <a class="variable-reference" href="../chapter-21.xhtml#variable-*standard-output*">*standard-output*</a> and <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> stands for <a class="variable-reference" href="../chapter-21.xhtml#variable-*terminal-io*">*terminal-io*</a>).  The KIND argument specifies the style of conditional newline.  It must be one of :LINEAR, :FILL, :MISER, or :MANDATORY.  An error is signalled if any other value is supplied.  If <a class="type-reference" href="../chapter-21.xhtml#type-stream">stream</a> is a pretty printing stream created by <a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-logical-block">pprint-logical-block</a>, a line break is inserted in the output when the appropriate condition below is satisfied.  Otherwise, <a class="function-reference" href="../chapter-22.xhtml#function-pprint-newline">pprint-newline</a> has no effect.  The value <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> is always returned. <br/>If KIND is :LINEAR, it specifies a `linear-style' conditional newline.  A line break is inserted if and only if the immediately containing section cannot be printed on one line.  The effect of this is that line breaks are either inserted at every linear-style conditional newline in a logical block or at none of them. <br/>If KIND is :MISER, it specifies a `miser-style' conditional newline.  A line break is inserted if and only if the immediately containing section cannot be printed on one line and miser style is in effect in the immediately containing logical block.  The effect of this is that miser-style conditional newlines act like linear-style conditional newlines, but only when miser style is in effect.  Miser style is in effect for a logical block if and only if the starting position of the logical block is less than or equal to <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-miser-width*">*print-miser-width*</a> from the right margin. <br/>If KIND is :FILL, it specifies a `fill-style' conditional newline.  A line break is inserted if and only if either <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">a</span>)</span>
</span></code> the following section cannot be printed on the end of the current line, <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">b</span>)</span>
</span></code> the preceding section was not printed on a single line, or <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">c</span>)</span>
</span></code> the immediately containing section cannot be printed on one line and miser style is in effect in the immediately containing logical block.  If a logical block is broken up into a number of subsections by fill-style conditional newlines, the basic effect is that the logical block is printed with as many subsections as possible on each line.  However, if miser style is in effect, fill-style conditional newlines act like linear-style conditional newlines. <br/>If KIND is :MANDATORY, it specifies a `mandatory-style' conditional newline.  A line break is always inserted.  This implies that none of the containing sections can be printed on a single line and will therefore trigger the insertion of line breaks at linear-style conditional newlines in these sections. <br/>When a line break is inserted by any type of conditional newline, any blanks that immediately precede the conditional newline are omitted from the output and indentation is introduced at the beginning of the next line. By default, the indentation causes the following line to begin in the same horizontal position as the first character in the immediately containing logical block.  (The indentation can be changed via <a class="function-reference" href="../chapter-22.xhtml#function-pprint-indent">pprint-indent</a>.) <br/>There are a variety of ways unconditional newlines can be introduced into the output (e.g., via <a class="function-reference" href="../chapter-21.xhtml#function-terpri">terpri</a> or by printing a string containing a newline character).  As with mandatory conditional newlines, this prevents any of the containing sections from being printed on one line.  In general, when an unconditional newline is encountered, it is printed out without suppression of the preceding blanks and without any indentation following it.  However, if a per-line prefix has been specified (see <a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-logical-block">pprint-logical-block</a>), this prefix will always be printed no matter how a newline originates. <br/><a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-logical-block">pprint-logical-block</a> (stream-symbol list                     [Macro]                       <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-key">&amp;KEY</a> :prefix :per-line-prefix :suffix)                      <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-body">&amp;BODY</a> body <br/>This macro causes printing to be grouped into a logical block.  The value <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> is always returned. <br/>STREAM-SYMBOL must be a symbol.  If it is <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>, it is treated the same as if it were <a class="variable-reference" href="../chapter-21.xhtml#variable-*standard-output*">*standard-output*</a>.  If it is <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>, it is treated the same as if it were <a class="variable-reference" href="../chapter-21.xhtml#variable-*terminal-io*">*terminal-io*</a>.  The run-time value of STREAM-SYMBOL must be a stream <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-or">or</a> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-interned-symbol">standing</span> <span class="syntax-interned-symbol">for</span> <a class="variable-reference" href="../chapter-21.xhtml#variable-*standard-output*">*standard-output*</a> <a class="macro-reference" href="../chapter-5.xhtml#macro-or">or</a> <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> <span class="syntax-interned-symbol">standing</span> <span class="syntax-interned-symbol">for</span> <a class="variable-reference" href="../chapter-21.xhtml#variable-*terminal-io*">*terminal-io*</a>)</span>
</span></code>. The logical block is printed into this destination stream. <br/>The <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-body">body</a> can contain any arbitrary Lisp forms.  Within the <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-body">body</a>, STREAM-SYMBOL (or <a class="variable-reference" href="../chapter-21.xhtml#variable-*standard-output*">*standard-output*</a> if STREAM-SYMBOL is <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>, or <a class="variable-reference" href="../chapter-21.xhtml#variable-*terminal-io*">*terminal-io*</a> if STREAM-SYMBOL is <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>) is bound to a `pretty printing' stream that supports decisions about the arrangement of output and then forwards the output to the destination stream.  All the standard printing functions (e.g., <a class="function-reference" href="../chapter-22.xhtml#function-write">write</a>, <a class="function-reference" href="../chapter-22.xhtml#function-princ">princ</a>, <a class="function-reference" href="../chapter-21.xhtml#function-terpri">terpri</a>) can be used to print output the pretty printing stream created by <a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-logical-block">pprint-logical-block</a>.  All and only the output sent to this pretty printing stream is treated as being in the logical block. <br/><a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-logical-block">pprint-logical-block</a> and the pretty printing stream it creates have dynamic extent.  It is undefined what happens if output is attempted outside of this extent to the pretty printing stream created.  It is unspecified what happens if, within this extent, any output is sent directly to the underlying destination stream. <br/>The :SUFFIX, :PREFIX, and :PER-LINE-PREFIX must all be expressions that <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">at</span>
<span class="syntax-interned-symbol">run</span> <a class="macro-reference" href="../chapter-25.xhtml#macro-time">time</a>)</span>
</span></code></pre> evaluate to strings.  :SUFFIX <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">which</span> <span class="syntax-interned-symbol">defaults</span> <span class="syntax-interned-symbol">to</span> <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <a class="function-reference" href="../chapter-14.xhtml#function-null">null</a> <a class="function-reference" href="../chapter-16.xhtml#function-string">string</a>)</span>
</span></code> specifies a suffix that is printed just after the logical block.  The :PREFIX and :PRE-LINE-PREFIX arguments are mutually exclusive.  If neither :PREFIX or :PER-LINE-PREFIX is specified, a :PREFIX of the null string is assumed.  :PREFIX specifies a prefix to be printed before the beginning of the logical block.  :PER-LINE-PREFIX specifies a prefix that is printed before the block and at the beginning of each new line in the block.  An error is signalled if :PREFIX and :PRE-LINE-PREFIX are both used or if the :SUFFIX, :PREFIX, or :PER-LINE-PREFIX do not evaluate to strings. <br/><a class="function-reference" href="../chapter-14.xhtml#function-list">list</a> is interpreted as being a list that <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-body">body</a> is responsible for printing.  (See <a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-exit-if-list-exhausted">pprint-exit-if-list-exhausted</a> and <a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-pop">pprint-pop</a>.)  If <a class="function-reference" href="../chapter-14.xhtml#function-list">list</a> does not <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">at</span> <span class="syntax-interned-symbol">run</span> <a class="macro-reference" href="../chapter-25.xhtml#macro-time">time</a>)</span>
</span></code> evaluate to a list, it is printed using <a class="function-reference" href="../chapter-22.xhtml#function-write">write</a>.  (This makes it easier to write printing functions that are robust in the face of malformed arguments.)  If <a class="symbol-reference" href="../chapter-2.xhtml#symbol-*print-circle*">*print-circle*</a> <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-and">and</a>
<span class="syntax-interned-symbol">possibly</span> <span class="syntax-interned-symbol">*PRINT-SHARED*</span>)</span>
</span></code></pre> is not <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> and <a class="function-reference" href="../chapter-14.xhtml#function-list">list</a> is a circular <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-or">or</a> <span class="syntax-interned-symbol">shared</span>)</span>
</span></code> reference to a cons, then an appropriate #n# marker is printed.  (This makes it easy to write printing functions that provide full support for circularity and sharing abbreviation.)  If <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-level*">*print-level*</a> is not <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> and the logical block is at a dynamic nesting depth of greater than <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-level*">*print-level*</a> in logical blocks, # is printed.  (This makes easy to write printing functions that provide full support for depth abbreviation.) <br/>If either of the three conditions above occurs, the indicated output is printed on STREAM-SYMBOL and the <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-body">body</a> is skipped along with the printing of the :PREFIX and :SUFFIX.  (If the <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-body">body</a> is not responsible for printing a list, then the first two tests above can be turned off by supplying <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> for the <a class="function-reference" href="../chapter-14.xhtml#function-list">list</a> argument.) <br/>In addition to the <a class="function-reference" href="../chapter-14.xhtml#function-list">list</a> argument of <a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-logical-block">pprint-logical-block</a>, the arguments of the standard printing functions such as <a class="function-reference" href="../chapter-22.xhtml#function-write">write</a>, <a class="function-reference" href="../chapter-22.xhtml#function-print">print</a>, <a class="function-reference" href="../chapter-22.xhtml#function-pprint">pprint</a>, PRINT1, and <a class="function-reference" href="../chapter-22.xhtml#function-pprint">pprint</a>, as well as the arguments of the standard <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> directives such as ~A, ~S, <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-and">and</a> <span class="syntax-interned-symbol">~W</span>)</span>
</span></code> are all checked <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-when">when</a> <span class="syntax-interned-symbol">necessary</span>)</span>
</span></code> for circularity and sharing.  However, such checking is not applied to the arguments of the functions <a class="function-reference" href="../chapter-21.xhtml#function-write-line">write-line</a>, <a class="function-reference" href="../chapter-21.xhtml#function-write-string">write-string</a>, and <a class="function-reference" href="../chapter-21.xhtml#function-write-char">write-char</a> or to the literal text output by <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a>.  A consequence of this is that you must use one of the latter functions if you want to print some literal text in the output that is not supposed to be checked for circularity or sharing.  (See the examples below.) <br/>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <br/>Implementation note:  detection of circularity and sharing is supported by the pretty printer by in essence performing requested output twice. On the first pass, circularities and sharing are detected and the actual outputting of characters is suppressed.  On the second pass, the appropriate #n<a class="function-reference" href="../chapter-12.xhtml#function-=">=</a> and #n# markers are inserted and characters are output. <br/>A consequence of this two-pass approach to the detection of circularity and sharing is that the <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-body">body</a> of a <a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-logical-block">pprint-logical-block</a> must not perform any side-effects on the surrounding environment.  This includes not modifying any variables that are bound outside of its scope.  Obeying this restriction is facilitated by using <a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-pop">pprint-pop</a>, instead of an ordinary <a class="macro-reference" href="../chapter-14.xhtml#macro-pop">pop</a> when traversing a list being printed by the <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-body">body</a> of a <a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-logical-block">pprint-logical-block</a>.) <br/>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <br/><a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-exit-if-list-exhausted">pprint-exit-if-list-exhausted</a>                                       [Macro]   <br/><a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-exit-if-list-exhausted">pprint-exit-if-list-exhausted</a> tests whether or not the <a class="function-reference" href="../chapter-14.xhtml#function-list">list</a> passed to <a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-logical-block">pprint-logical-block</a> has been exhausted <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">see</span> <a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-pop">pprint-pop</a>)</span>
</span></code>.  If this list has been reduced to <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>, <a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-exit-if-list-exhausted">pprint-exit-if-list-exhausted</a> terminates the execution of the immediately containing <a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-logical-block">pprint-logical-block</a> except for the printing of the suffix.  Otherwise <a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-exit-if-list-exhausted">pprint-exit-if-list-exhausted</a> returns <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>.  An error message is issued if <a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-exit-if-list-exhausted">pprint-exit-if-list-exhausted</a> is used anywhere other than syntactically nested within a call on <a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-logical-block">pprint-logical-block</a>.  It is undefined what happens if PPRINT-IF-LIST-EXHAUSTED is executed outside of the dynamic extent of this <a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-logical-block">pprint-logical-block</a>. <br/><a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-pop">pprint-pop</a>                                                          [Macro]   <br/><a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-pop">pprint-pop</a> pops elements one at a time off the <a class="function-reference" href="../chapter-14.xhtml#function-list">list</a> passed to <a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-logical-block">pprint-logical-block</a> obeying <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-length*">*print-length*</a>, <a class="symbol-reference" href="../chapter-2.xhtml#symbol-*print-circle*">*print-circle*</a>, and *PRINT-SHARED*.  An error message is issued if it is used anywhere other than syntactically nested within a call on <a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-logical-block">pprint-logical-block</a>. It is undefined what happens if <a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-pop">pprint-pop</a> is executed outside of the dynamic extent of this <a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-logical-block">pprint-logical-block</a>. <br/>Each time <a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-pop">pprint-pop</a> is called, it pops the next value off the <a class="function-reference" href="../chapter-14.xhtml#function-list">list</a> passed to <a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-logical-block">pprint-logical-block</a> and returns it.  However, before doing this, it performs three tests.  If the remaining list is not a list (i.e., a cons or <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>), ". " is printed followed by the remaining list. (This makes it easier to write printing functions that are robust in the face of malformed arguments.)  If <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-length*">*print-length*</a> is <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> and <a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-pop">pprint-pop</a> has already been called <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-length*">*print-length*</a> times within the immediately containing logical block, "..." is printed.  (This makes it easy to write printing functions that properly handle <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-length*">*print-length*</a>.)  If <a class="symbol-reference" href="../chapter-2.xhtml#symbol-*print-circle*">*print-circle*</a> <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-and">and</a> <span class="syntax-interned-symbol">possibly</span> <span class="syntax-interned-symbol">*PRINT-SHARED*</span>)</span>
</span></code> is not <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>, and the remaining list is a circular <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-or">or</a> <span class="syntax-interned-symbol">shared</span>)</span>
</span></code> reference, then ". " is printed followed by an appropriate #n# marker.  (This catches instances of cdr circularity and sharing in lists.) <br/>If either of the three conditions above occurs, the indicated output is printed on the pretty printing stream created by the immediately containing <a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-logical-block">pprint-logical-block</a> and the execution of the immediately containing <a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-logical-block">pprint-logical-block</a> is terminated except for the printing of the suffix. <br/>If <a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-logical-block">pprint-logical-block</a> is given a <a class="function-reference" href="../chapter-14.xhtml#function-list">list</a> argument of NIL&mdash;because it is not processing a list---PPRINT-POP can still be used to obtain support for <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-length*">*print-length*</a> <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">see</span> <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <span class="syntax-interned-symbol">example</span> <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> <span class="syntax-interned-symbol">PPRINT-VECTOR</span> <span class="syntax-interned-symbol">below</span>)</span>
</span></code>.  In this situation, the first and third tests above are disabled and <a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-pop">pprint-pop</a> always returns <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>. <br/><a class="function-reference" href="../chapter-22.xhtml#function-pprint-indent">pprint-indent</a> relative-to n <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-optional">&amp;OPTIONAL</a> <code><span class="syntax-root"><span class="syntax-cons">(<a class="type-reference" href="../chapter-21.xhtml#type-stream">stream</a> <a class="variable-reference" href="../chapter-21.xhtml#variable-*standard-output*">*standard-output*</a>)</span>
</span></code> [Function] <br/><a class="function-reference" href="../chapter-22.xhtml#function-pprint-indent">pprint-indent</a> specifies the indentation to use in a logical block.  <a class="type-reference" href="../chapter-21.xhtml#type-stream">stream</a> <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">which</span> <span class="syntax-interned-symbol">defaults</span> <span class="syntax-interned-symbol">to</span> <a class="variable-reference" href="../chapter-21.xhtml#variable-*standard-output*">*standard-output*</a>)</span>
</span></code> follows the standard conventions for stream arguments to printing functions.  N specifies the indentation in ems.  If RELATIVE-TO is :BLOCK, the indentation is set to the horizontal position of the first character in the block plus N ems.  If RELATIVE-TO is :CURRENT, the indentation is set to the current output position plus N ems. (For robustness in the face of variable-width fonts, it is advisable to use :CURRENT with an N of zero whenever possible.) <br/>N can be negative; however, the total indentation cannot be moved left of the beginning of the line or left of the end of the rightmost per-line prefix.  Changes in indentation caused by <a class="function-reference" href="../chapter-22.xhtml#function-pprint-indent">pprint-indent</a> do not take effect until after the next line break.  In addition, in miser mode all calls on <a class="function-reference" href="../chapter-22.xhtml#function-pprint-indent">pprint-indent</a> are ignored, forcing the lines corresponding to the logical block to line up under the first character in the block. <br/>An error is signalled if a value other than :BLOCK or :CURRENT is supplied for RELATIVE-TO.  If <a class="type-reference" href="../chapter-21.xhtml#type-stream">stream</a> is a pretty printing stream created by <a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-logical-block">pprint-logical-block</a>, <a class="function-reference" href="../chapter-22.xhtml#function-pprint-indent">pprint-indent</a> sets the indentation in the innermost dynamically enclosing logical block.  Otherwise, <a class="function-reference" href="../chapter-22.xhtml#function-pprint-indent">pprint-indent</a> has no effect.  The value <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> is always returned. <br/><a class="function-reference" href="../chapter-22.xhtml#function-pprint-tab">pprint-tab</a> kind colnum colinc <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-optional">&amp;OPTIONAL</a> <code><span class="syntax-root"><span class="syntax-cons">(<a class="type-reference" href="../chapter-21.xhtml#type-stream">stream</a> <a class="variable-reference" href="../chapter-21.xhtml#variable-*standard-output*">*standard-output*</a>)</span>
</span></code> [function] <br/><a class="function-reference" href="../chapter-22.xhtml#function-pprint-tab">pprint-tab</a> specifies tabbing as performed by the standard <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> directive ~<a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>.  <a class="type-reference" href="../chapter-21.xhtml#type-stream">stream</a> <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">which</span> <span class="syntax-interned-symbol">defaults</span> <span class="syntax-interned-symbol">to</span> <a class="variable-reference" href="../chapter-21.xhtml#variable-*standard-output*">*standard-output*</a>)</span>
</span></code> follows the standard conventions for stream arguments to printing functions.  The arguments COLNUM and COLINC correspond to the two parameters to ~<a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> and are in terms of ems.  The KIND argument specifies the style of tabbing.  It must be one of :LINE <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">tab</span> <span class="syntax-interned-symbol">as</span> <span class="syntax-interned-symbol">by</span> <span class="syntax-interned-symbol">~T</span>)</span>
</span></code> :SECTION (tab as by ~<a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>, but measuring horizontal positions relative to the start of the dynamically enclosing section), :LINE-RELATIVE <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">tab</span> <span class="syntax-interned-symbol">as</span> <span class="syntax-interned-symbol">by</span> <span class="syntax-interned-symbol">~@T</span>)</span>
</span></code>, or :SECTION-RELATIVE (tab as by ~@<a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>, but measuring horizontal positions relative to the start of the dynamically enclosing section).  An error is signalled if any other value is supplied for KIND.  If <a class="type-reference" href="../chapter-21.xhtml#type-stream">stream</a> is a pretty printing stream created by <a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-logical-block">pprint-logical-block</a>, tabbing is performed.  Otherwise, <a class="function-reference" href="../chapter-22.xhtml#function-pprint-tab">pprint-tab</a> has no effect.  The value <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> is always returned. <br/><a class="function-reference" href="../chapter-22.xhtml#function-pprint-fill">pprint-fill</a> <a class="type-reference" href="../chapter-21.xhtml#type-stream">stream</a> <a class="function-reference" href="../chapter-14.xhtml#function-list">list</a> <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-optional">&amp;OPTIONAL</a> <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">COLON?</span> <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>)</span>
</span></code> ATSIGN?                 [function] <a class="function-reference" href="../chapter-22.xhtml#function-pprint-linear">pprint-linear</a> <a class="type-reference" href="../chapter-21.xhtml#type-stream">stream</a> <a class="function-reference" href="../chapter-14.xhtml#function-list">list</a> <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-optional">&amp;OPTIONAL</a> <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">COLON?</span> <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>)</span>
</span></code> ATSIGN?               [function] <a class="function-reference" href="../chapter-22.xhtml#function-pprint-tabular">pprint-tabular</a> <a class="type-reference" href="../chapter-21.xhtml#type-stream">stream</a> <a class="function-reference" href="../chapter-14.xhtml#function-list">list</a> <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-optional">&amp;OPTIONAL</a> <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">COLON?</span> <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>)</span>
</span></code> ATSIGN? <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">TABSIZE</span> <span class="syntax-number">16</span>)</span>
</span></code> [function] <br/>These three functions specify particular ways of pretty printing lists. <a class="type-reference" href="../chapter-21.xhtml#type-stream">stream</a> follows the standard conventions for stream arguments to printing functions.  Each function prints parentheses around the output if and only if <a class="glossary-reference" href="../chapter-26.xhtml#glossary-colon">colon</a>? <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">default</span> <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>)</span>
</span></code> is not <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>.  Each function ignores its ATSIGN? argument and returns <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>.  (These two arguments are included in this way so that these functions can be used via ~<a class="function-reference" href="../chapter-12.xhtml#function-/">/</a>...<a class="function-reference" href="../chapter-12.xhtml#function-/">/</a> and as <a class="function-reference" href="../chapter-22.xhtml#function-set-pprint-dispatch">set-pprint-dispatch</a> functions as well as directly.)  Each function handles abbreviation and the detection of circularity and sharing correctly, and uses <a class="function-reference" href="../chapter-22.xhtml#function-write">write</a> to print <a class="function-reference" href="../chapter-14.xhtml#function-list">list</a> when given a <a class="glossary-reference" href="../chapter-26.xhtml#glossary-non-list">non-list</a> argument. <br/>The function <a class="function-reference" href="../chapter-22.xhtml#function-pprint-linear">pprint-linear</a> prints a list either all on one line, or with each element on a separate line.  The function <a class="function-reference" href="../chapter-22.xhtml#function-pprint-fill">pprint-fill</a> prints a list with as many elements as possible on each line.  The function <a class="function-reference" href="../chapter-22.xhtml#function-pprint-tabular">pprint-tabular</a> is the same as <a class="function-reference" href="../chapter-22.xhtml#function-pprint-fill">pprint-fill</a> except that it prints the elements so that they line up in columns.  This function takes an additional argument TABSIZE <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">default</span> <span class="syntax-number">16</span>)</span>
</span></code> that specifies the column spacing in ems. <br/>&mdash; <br/>As an example of the interaction of logical blocks, conditional newlines, and indentation, consider the function SIMPLE-PPRINT-DEFUN below.  This function prints out lists whose cars are <a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a> in the standard way assuming that the list has exactly length 4. <br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">simple-pprint-defun</span> <span class="syntax-cons">(<a class="variable-reference" href="../chapter-21.xhtml#variable-*standard-output*">*standard-output*</a> <a class="function-reference" href="../chapter-14.xhtml#function-list">list</a>)</span>
  <span class="syntax-cons">(<a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-logical-block">pprint-logical-block</a> <span class="syntax-cons">(<a class="variable-reference" href="../chapter-21.xhtml#variable-*standard-output*">*standard-output*</a> <a class="function-reference" href="../chapter-14.xhtml#function-list">list</a> <span class="syntax-keyword-symbol">:prefix</span> <span class="syntax-string">"("</span> <span class="syntax-keyword-symbol">:suffix</span> <span class="syntax-string">")"</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-write">write</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-first">first</a> <a class="function-reference" href="../chapter-14.xhtml#function-list">list</a>)</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="../chapter-21.xhtml#function-write-char">write-char</a> <span class="syntax-character">#\space</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-pprint-newline">pprint-newline</a> <span class="syntax-keyword-symbol">:miser</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-pprint-indent">pprint-indent</a> <span class="syntax-keyword-symbol">:current</span> <span class="syntax-number">0</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-write">write</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-second">second</a> <a class="function-reference" href="../chapter-14.xhtml#function-list">list</a>)</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="../chapter-21.xhtml#function-write-char">write-char</a> <span class="syntax-character">#\space</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-pprint-newline">pprint-newline</a> <span class="syntax-keyword-symbol">:fill</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-write">write</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-third">third</a> <a class="function-reference" href="../chapter-14.xhtml#function-list">list</a>)</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-pprint-indent">pprint-indent</a> <span class="syntax-keyword-symbol">:block</span> <span class="syntax-number">1</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="../chapter-21.xhtml#function-write-char">write-char</a> <span class="syntax-character">#\space</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-pprint-newline">pprint-newline</a> <span class="syntax-keyword-symbol">:linear</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-write">write</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-fourth">fourth</a> <a class="function-reference" href="../chapter-14.xhtml#function-list">list</a>)</span>)</span>)</span>)</span>
</span></code></pre> <br/>Suppose that one evaluates the following: <br/><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">simple-pprint-defun</span> <a class="variable-reference" href="../chapter-21.xhtml#variable-*standard-output*">*standard-output*</a> <span class="syntax-quote">'<span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">prod</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-*">*</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span>)</span></span>)</span>
</span></code> <br/>If the line width available is greater than or equal to 26, then all of the output appears on one line.  If the line width available is reduced to 25, a line break is inserted at the linear-style conditional newline before the expression <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-*">*</a> <span class="syntax-interned-symbol">X</span> <span class="syntax-interned-symbol">Y</span>)</span>
</span></code>, producing the output shown.  The <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-pprint-indent">pprint-indent</a> <span class="syntax-keyword-symbol">:BLOCK</span> <span class="syntax-number">1</span>)</span>
</span></code> causes <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-*">*</a> <span class="syntax-interned-symbol">X</span> <span class="syntax-interned-symbol">Y</span>)</span>
</span></code> to be printed at a relative indentation of 1 in the logical block. <br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">PROD</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">X</span> <span class="syntax-interned-symbol">Y</span>)</span> 
  <span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-*">*</a> <span class="syntax-interned-symbol">X</span> <span class="syntax-interned-symbol">Y</span>)</span>)</span>
</span></code></pre> <br/>If the line width available is 15, a line break is also inserted at the fill style conditional newline before the argument list.  The call on <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-pprint-indent">pprint-indent</a> <span class="syntax-keyword-symbol">:CURRENT</span> <span class="syntax-number">0</span>)</span>
</span></code> causes the argument list to line up under the function name. <br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">PROD</span>
       <span class="syntax-cons">(<span class="syntax-interned-symbol">X</span> <span class="syntax-interned-symbol">Y</span>)</span>
  <span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-*">*</a> <span class="syntax-interned-symbol">X</span> <span class="syntax-interned-symbol">Y</span>)</span>)</span>
</span></code></pre> <br/>If <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-miser-width*">*print-miser-width*</a> were greater than or equal to 14, the example output above would have been as follows, because all indentation changes are ignored in miser mode and line breaks are inserted at miser-style conditional newlines. <br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a>
 <span class="syntax-interned-symbol">PROD</span>
 <span class="syntax-cons">(<span class="syntax-interned-symbol">X</span> <span class="syntax-interned-symbol">Y</span>)</span>
 <span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-*">*</a> <span class="syntax-interned-symbol">X</span> <span class="syntax-interned-symbol">Y</span>)</span>)</span>
</span></code></pre> <br/>&mdash; <br/>As an example of a per-line prefix, consider that evaluating the following produces the output shown with a line width of 20 and <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-miser-width*">*print-miser-width*</a> of <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>. <br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-logical-block">pprint-logical-block</a> <span class="syntax-cons">(<a class="variable-reference" href="../chapter-21.xhtml#variable-*standard-output*">*standard-output*</a> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-keyword-symbol">:per-line-prefix</span> <span class="syntax-string">";;; "</span>)</span>
  <span class="syntax-cons">(<span class="syntax-interned-symbol">simple-pprint-defun</span> <a class="variable-reference" href="../chapter-21.xhtml#variable-*standard-output*">*standard-output*</a> <span class="syntax-quote">'<span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">prod</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-*">*</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span>)</span></span>)</span>)</span>
</span></code></pre> <br/>;;; (<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a> PROD ;;;        <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">X</span> <span class="syntax-interned-symbol">Y</span>)</span>
</span></code> ;;;   <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-*">*</a> <span class="syntax-interned-symbol">X</span> <span class="syntax-interned-symbol">Y</span>)</span>
</span></code>) <br/>&mdash; <br/>As a more complex <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-and">and</a> <span class="syntax-interned-symbol">realistic</span>)</span>
</span></code> example, consider the function PPRINT-LET below.  This specifies how to print a <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a> in the standard style.  It is more complex than the example above, because it has to deal with nested structure. Also, unlike the example above it contains complete code to readably print any possible list that begins with the symbol <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a>.  The outermost <a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-logical-block">pprint-logical-block</a> handles the printing of the input list as a whole and specifies that parentheses should be printed in the output.  The second <a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-logical-block">pprint-logical-block</a> handles the list of binding pairs.  Each pair in the list is itself printed by the innermost <a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-logical-block">pprint-logical-block</a>.  (A <a class="macro-reference" href="../chapter-6.xhtml#macro-loop">loop</a> is used instead of merely decomposing the pair into two elements so that readable output will be produced no matter whether the list corresponding to the pair has one element, two elements, or <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">being</span> <span class="syntax-interned-symbol">malformed</span>)</span>
</span></code> has more than two elements.)   A space and a fill-style conditional newline are placed after each pair except the last.  The loop at the end of the topmost <a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-logical-block">pprint-logical-block</a> prints out the forms in the body of the <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a> separated by spaces and linear-style conditional newlines. <br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">pprint-let</span> <span class="syntax-cons">(<a class="variable-reference" href="../chapter-21.xhtml#variable-*standard-output*">*standard-output*</a> <a class="function-reference" href="../chapter-14.xhtml#function-list">list</a>)</span>
  <span class="syntax-cons">(<a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-logical-block">pprint-logical-block</a> <span class="syntax-cons">(<a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> <a class="function-reference" href="../chapter-14.xhtml#function-list">list</a> <span class="syntax-keyword-symbol">:prefix</span> <span class="syntax-string">"("</span> <span class="syntax-keyword-symbol">:suffix</span> <span class="syntax-string">")"</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-write">write</a> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-pop">pprint-pop</a>)</span>)</span>
    <span class="syntax-cons">(<a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-exit-if-list-exhausted">pprint-exit-if-list-exhausted</a>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="../chapter-21.xhtml#function-write-char">write-char</a> <span class="syntax-character">#\space</span>)</span>
    <span class="syntax-cons">(<a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-logical-block">pprint-logical-block</a> <span class="syntax-cons">(<a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-pop">pprint-pop</a>)</span> <span class="syntax-keyword-symbol">:prefix</span> <span class="syntax-string">"("</span> <span class="syntax-keyword-symbol">:suffix</span> <span class="syntax-string">")"</span>)</span>
      <span class="syntax-cons">(<a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-exit-if-list-exhausted">pprint-exit-if-list-exhausted</a>)</span>
      <span class="syntax-cons">(<a class="macro-reference" href="../chapter-6.xhtml#macro-loop">loop</a> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-logical-block">pprint-logical-block</a> <span class="syntax-cons">(<a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-pop">pprint-pop</a>)</span> <span class="syntax-keyword-symbol">:prefix</span> <span class="syntax-string">"("</span> <span class="syntax-keyword-symbol">:suffix</span> <span class="syntax-string">")"</span>)</span>
	      <span class="syntax-cons">(<a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-exit-if-list-exhausted">pprint-exit-if-list-exhausted</a>)</span>
	      <span class="syntax-cons">(<a class="macro-reference" href="../chapter-6.xhtml#macro-loop">loop</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-write">write</a> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-pop">pprint-pop</a>)</span>)</span>
		    <span class="syntax-cons">(<a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-exit-if-list-exhausted">pprint-exit-if-list-exhausted</a>)</span>
		    <span class="syntax-cons">(<a class="function-reference" href="../chapter-21.xhtml#function-write-char">write-char</a> <span class="syntax-character">#\space</span>)</span>
		    <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-pprint-newline">pprint-newline</a> <span class="syntax-keyword-symbol">:linear</span>)</span>)</span>)</span>
	    <span class="syntax-cons">(<a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-exit-if-list-exhausted">pprint-exit-if-list-exhausted</a>)</span>
	    <span class="syntax-cons">(<a class="function-reference" href="../chapter-21.xhtml#function-write-char">write-char</a> <span class="syntax-character">#\space</span>)</span>
	    <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-pprint-newline">pprint-newline</a> <span class="syntax-keyword-symbol">:fill</span>)</span>)</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-pprint-indent">pprint-indent</a> <span class="syntax-keyword-symbol">:block</span> <span class="syntax-number">1</span>)</span>
    <span class="syntax-cons">(<a class="macro-reference" href="../chapter-6.xhtml#macro-loop">loop</a> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-exit-if-list-exhausted">pprint-exit-if-list-exhausted</a>)</span>
	  <span class="syntax-cons">(<a class="function-reference" href="../chapter-21.xhtml#function-write-char">write-char</a> <span class="syntax-character">#\space</span>)</span>
	  <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-pprint-newline">pprint-newline</a> <span class="syntax-keyword-symbol">:linear</span>)</span>
	  <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-write">write</a> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-pop">pprint-pop</a>)</span>)</span>)</span>)</span>)</span>
</span></code></pre> <br/>Suppose that one evaluates the following with <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-level*">*print-level*</a> 4, and <a class="symbol-reference" href="../chapter-2.xhtml#symbol-*print-circle*">*print-circle*</a> <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>. <br/>(pprint-let <a class="variable-reference" href="../chapter-21.xhtml#variable-*standard-output*">*standard-output*</a> 	    '#1<a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>(let <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-cons">(<a class="variable-reference" href="../chapter-22.xhtml#variable-*print-length*">*print-length*</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">f</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">g</span> <span class="syntax-number">3</span>)</span>)</span>)</span> 
		      <span class="syntax-cons">(<span class="syntax-interned-symbol">z</span> <span class="syntax-symbol">.</span> <span class="syntax-number">2</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">k</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-car">car</a> <span class="syntax-interned-symbol">y</span>)</span>)</span>)</span>
</span></code></pre> 		  <code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-sqrt">sqrt</a> <span class="syntax-interned-symbol">z</span>)</span>)</span>
</span></code> #1#)) <br/>If the line length is greater than or equal to 77, the output produced appears on one line.  However, if the line length is 76, line breaks are inserted at the linear-style conditional newlines separating the forms in the body and the output below is produced.  Note that, the degenerate binding pair X is printed readably even though it fails to be a list; a depth abbreviation marker is printed in place of <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">G</span> <span class="syntax-number">3</span>)</span>
</span></code>; the binding pair <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">Z</span> <span class="syntax-symbol">.</span> <span class="syntax-number">2</span>)</span>
</span></code> is printed readably even though it is not a proper list; and appropriate circularity markers are printed. <br/>#1<a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a> (X (<a class="variable-reference" href="../chapter-22.xhtml#variable-*print-length*">*print-length*</a> (F #)) <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">Z</span> <span class="syntax-symbol">.</span> <span class="syntax-number">2</span>)</span>
</span></code> <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">K</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-car">car</a> <span class="syntax-interned-symbol">Y</span>)</span>)</span>
</span></code>)       <code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">X</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-sqrt">sqrt</a> <span class="syntax-interned-symbol">Z</span>)</span>)</span>
</span></code>      #1#) <br/>If the line length is reduced to 35, a line break is inserted at one of the fill-style conditional newlines separating the binding pairs. <br/>#1<a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a> (X (<a class="variable-reference" href="../chapter-22.xhtml#variable-*print-pretty*">*print-pretty*</a> (F #))          <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">Z</span> <span class="syntax-symbol">.</span> <span class="syntax-number">2</span>)</span>
</span></code> <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">K</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-car">car</a> <span class="syntax-interned-symbol">Y</span>)</span>)</span>
</span></code>)      <code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">X</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-sqrt">sqrt</a> <span class="syntax-interned-symbol">Z</span>)</span>)</span>
</span></code>      #1#) <br/>Suppose that the line length is further reduced to 22 and <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-length*">*print-length*</a> is set to 3. In this situation, line breaks are inserted after both the first and second binding pairs.  In addition, the second binding pair is itself broken across two lines.  Clause <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">b</span>)</span>
</span></code> of the description of fill-style conditional newlines prevents the binding pair <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">Z</span> <span class="syntax-symbol">.</span> <span class="syntax-number">2</span>)</span>
</span></code> from being printed at the end of the third line.  Note that the length abbreviation hides the circularity from view and therefore the printing of circularity markers disappears. <br/>(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a> (X       (<a class="variable-reference" href="../chapter-22.xhtml#variable-*print-length*">*print-length*</a>        (F #))       <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">Z</span> <span class="syntax-symbol">.</span> <span class="syntax-number">2</span>)</span>
</span></code> ...)   <code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">X</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-sqrt">sqrt</a> <span class="syntax-interned-symbol">Z</span>)</span>)</span>
</span></code>   ...) <br/>&mdash; <br/>The function <a class="function-reference" href="../chapter-22.xhtml#function-pprint-tabular">pprint-tabular</a> could be defined as follows. <br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a> <a class="function-reference" href="../chapter-22.xhtml#function-pprint-tabular">pprint-tabular</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">s</span> <a class="function-reference" href="../chapter-14.xhtml#function-list">list</a> <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-optional">&amp;OPTIONAL</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">colon?</span> <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>)</span> <span class="syntax-interned-symbol">atsign?</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">tabsize</span> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>)</span>)</span>
  <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-declare">declare</a> <span class="syntax-cons">(<a class="declaration-reference" href="../chapter-3.xhtml#declaration-ignore">ignore</a> <span class="syntax-interned-symbol">atsign?</span>)</span>)</span>
  <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-when">when</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-null">null</a> <span class="syntax-interned-symbol">tabsize</span>)</span> <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">tabsize</span> <span class="syntax-number">16</span>)</span>)</span>
  <span class="syntax-cons">(<a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-logical-block">pprint-logical-block</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">s</span> <a class="function-reference" href="../chapter-14.xhtml#function-list">list</a> <span class="syntax-keyword-symbol">:prefix</span> <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-interned-symbol">colon?</span> <span class="syntax-string">"("</span> <span class="syntax-string">""</span>)</span>
			        <span class="syntax-keyword-symbol">:suffix</span> <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-interned-symbol">colon?</span> <span class="syntax-string">")"</span> <span class="syntax-string">""</span>)</span>)</span>
    <span class="syntax-cons">(<a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-exit-if-list-exhausted">pprint-exit-if-list-exhausted</a>)</span>
    <span class="syntax-cons">(<a class="macro-reference" href="../chapter-6.xhtml#macro-loop">loop</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-write">write</a> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-pop">pprint-pop</a>)</span> <span class="syntax-keyword-symbol">:stream</span> <span class="syntax-interned-symbol">s</span>)</span>
	  <span class="syntax-cons">(<a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-exit-if-list-exhausted">pprint-exit-if-list-exhausted</a>)</span>
	  <span class="syntax-cons">(<a class="function-reference" href="../chapter-21.xhtml#function-write-char">write-char</a> <span class="syntax-character">#\space</span> <span class="syntax-interned-symbol">s</span>)</span>
	  <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-pprint-tab">pprint-tab</a> <span class="syntax-keyword-symbol">:section-relative</span> <span class="syntax-number">0</span> <span class="syntax-interned-symbol">tabsize</span> <span class="syntax-interned-symbol">s</span>)</span>
	  <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-pprint-newline">pprint-newline</a> <span class="syntax-keyword-symbol">:fill</span> <span class="syntax-interned-symbol">s</span>)</span>)</span>)</span>)</span>
</span></code></pre> <br/>Evaluating the following with a line length of 25 produces the output shown. <br/><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-princ">princ</a> <span class="syntax-string">"Roads "</span>)</span>
</span></code>  <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-pprint-tabular">pprint-tabular</a> <a class="variable-reference" href="../chapter-21.xhtml#variable-*standard-output*">*standard-output*</a> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">elm</span> <span class="syntax-interned-symbol">main</span> <span class="syntax-interned-symbol">maple</span> <span class="syntax-interned-symbol">center</span>)</span></span> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-number">8</span>)</span>
</span></code> <br/>Roads ELM     MAIN       MAPLE   CENTER <br/>&mdash; <br/>The function below prints a vector using #<code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">...</span>)</span>
</span></code> notation. <br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">pprint-vector</span> <span class="syntax-cons">(<a class="variable-reference" href="../chapter-21.xhtml#variable-*standard-output*">*standard-output*</a> <span class="syntax-interned-symbol">v</span>)</span>
  <span class="syntax-cons">(<a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-logical-block">pprint-logical-block</a> <span class="syntax-cons">(<a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-keyword-symbol">:prefix</span> <span class="syntax-string">"#("</span> <span class="syntax-keyword-symbol">:suffix</span> <span class="syntax-string">")"</span>)</span>
    <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">end</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-17.xhtml#function-length">length</a> <span class="syntax-interned-symbol">v</span>)</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">i</span> <span class="syntax-number">0</span>)</span>)</span>
      <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-when">when</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-plusp">plusp</a> <span class="syntax-interned-symbol">end</span>)</span>
	<span class="syntax-cons">(<a class="macro-reference" href="../chapter-6.xhtml#macro-loop">loop</a> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-pop">pprint-pop</a>)</span>
	      <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-write">write</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-15.xhtml#function-aref">aref</a> <span class="syntax-interned-symbol">v</span> <span class="syntax-interned-symbol">i</span>)</span>)</span>
	      <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-=">=</a> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-12.xhtml#macro-incf">incf</a> <span class="syntax-interned-symbol">i</span>)</span> <span class="syntax-interned-symbol">end</span>)</span> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-return">return</a> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>)</span>)</span>
	      <span class="syntax-cons">(<a class="function-reference" href="../chapter-21.xhtml#function-write-char">write-char</a> <span class="syntax-character">#\space</span>)</span>
	      <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-pprint-newline">pprint-newline</a> <span class="syntax-keyword-symbol">:fill</span>)</span>)</span>)</span>)</span>)</span>)</span>
</span></code></pre> <br/>Evaluating the following with a line length of 15 produces the output shown. <br/><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">pprint-vector</span> <a class="variable-reference" href="../chapter-21.xhtml#variable-*standard-output*">*standard-output*</a> <span class="syntax-quote">'<span class="syntax-vector">#(<span class="syntax-number">12</span> <span class="syntax-number">34</span> <span class="syntax-number">567</span> <span class="syntax-number">8</span> <span class="syntax-number">9012</span> <span class="syntax-number">34</span> <span class="syntax-number">567</span> <span class="syntax-number">89</span> <span class="syntax-number">0</span> <span class="syntax-number">1</span> <span class="syntax-number">23</span>)</span></span>)</span>
</span></code> <br/>#<pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-number">12</span> <span class="syntax-number">34</span> <span class="syntax-number">567</span> <span class="syntax-number">8</span> 
  <span class="syntax-number">9012</span> <span class="syntax-number">34</span> <span class="syntax-number">567</span> 
  <span class="syntax-number">89</span> <span class="syntax-number">0</span> <span class="syntax-number">1</span> <span class="syntax-number">23</span>)</span>
</span></code></pre> <br/>                     Format Directive Interface <br/>The primary interface to operations for dynamically determining the arrangement of output is provided through the functions above.  However, an additional interface is provided via a set of new format directives. This is done, because as shown by the examples in this section and the next, <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> strings are typically a much more compact way to specify pretty printing.  In addition, without such an interface, one would have to abandon the use of <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> when interacting with the pretty printer. <br/>~W                                                        [format directive] <br/><a class="function-reference" href="../chapter-22.xhtml#function-write">write</a> &ndash; An arg, any Lisp object, is printed obeying every printer control variable <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">as</span> <span class="syntax-interned-symbol">by</span> <a class="function-reference" href="../chapter-22.xhtml#function-write">write</a>)</span>
</span></code>.  In addition, ~W interacts correctly with depth abbreviation, by not resetting the depth counter to zero.  ~W does not accept parameters.  If given the colon modifier, ~W binds <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-pretty*">*print-pretty*</a> to <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>.  If given the atsign modifier, ~W binds <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-level*">*print-level*</a> and <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-length*">*print-length*</a> to <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>. <br/>~W provides automatic support for the detection of circularity and sharing.  If <a class="symbol-reference" href="../chapter-2.xhtml#symbol-*print-circle*">*print-circle*</a> <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-and">and</a> <span class="syntax-interned-symbol">possibly</span> <span class="syntax-interned-symbol">*PRINT-SHARED*</span>)</span>
</span></code> is not <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> and ~W is applied to an argument that is a circular <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-or">or</a> <span class="syntax-interned-symbol">shared</span>)</span>
</span></code> reference, an appropriate #n# marker is inserted in the output instead of printing the argument. <br/>~_                                                        [format directive] <br/>CONDITIONAL-NEWLINE &ndash; Without any modifiers, ~_ is the same as <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-pprint-newline">pprint-newline</a> <span class="syntax-keyword-symbol">:LINEAR</span>)</span>
</span></code>.  ~@_ is the same as <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-pprint-newline">pprint-newline</a> <span class="syntax-keyword-symbol">:MISER</span>)</span>
</span></code>. ~:_ is the same as <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-pprint-newline">pprint-newline</a> <span class="syntax-keyword-symbol">:FILL</span>)</span>
</span></code>.  ~:@_ is the same as <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-pprint-newline">pprint-newline</a> <span class="syntax-keyword-symbol">:MANDATORY</span>)</span>
</span></code>. <br/>~&lt;...~:&gt;                                                  [format directive] <br/>LOGICAL <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-block">block</a> &ndash; If ~:&gt; is used to terminate a ~&lt;...~&gt;, the directive is equivalent to a call on <a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-logical-block">pprint-logical-block</a>.  The <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> argument corresponding to the ~&lt;...~:&gt; directive is treated in the same way as the <a class="function-reference" href="../chapter-14.xhtml#function-list">list</a> argument to <a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-logical-block">pprint-logical-block</a>, thereby providing automatic support for <a class="glossary-reference" href="../chapter-26.xhtml#glossary-non-list">non-list</a> arguments and the detection of circularity, sharing, and depth abbreviation.  The portion of the <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> control string nested within the ~&lt;...~:&gt; specifies the :PREFIX (or :PER-LINE-PREFIX), :suffix}, and body of the <a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-logical-block">pprint-logical-block</a>. <br/>The <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> string portion enclosed by ~&lt;...~:&gt; can be divided into segments ~&lt;prefix~;body~;suffix~:&gt; by ~; directives.  If the first section is terminated by ~@;, it specifies a per-line prefix rather than a simple prefix.  The prefix and suffix cannot contain <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> directives.  An error is signalled if either the prefix or suffix fails to be a constant string or if the enclosed portion is divided into more than three segments. <br/>If the enclosed portion is divided into only two segments, the suffix defaults to the null string.  If the enclosed portion consists of only a single segment, both the prefix and the suffix default to the null string.  If the colon modifier is used (i.e., ~:&lt;...~:&gt;), the prefix and suffix default to "<code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-string">" and "</span>)</span>
</span></code>" <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">respectively</span>)</span>
</span></code> instead of the null string. <br/>The body segment can be any arbitrary <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> control string.  This <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> control string is applied to the elements of the list corresponding to the ~&lt;...~:&gt; directive as a whole.  Elements are extracted from this list using <a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-pop">pprint-pop</a>, thereby providing automatic support for malformed lists, and the detection of circularity, sharing, and length abbreviation.  Within the body segment, ~^ acts like <a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-exit-if-list-exhausted">pprint-exit-if-list-exhausted</a>. <br/>~&lt;...~:&gt; supports a feature not supported by <a class="macro-reference" href="../chapter-22.xhtml#macro-pprint-logical-block">pprint-logical-block</a>.  If ~:@&gt; is used to terminate the directive (i.e., ~&lt;...~:@&gt;), then a fill-style conditional newline is automatically inserted after each group of blanks immediately contained in the body <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">except</span> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">blanks</span>
<span class="syntax-interned-symbol">after</span> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">~&lt;newline&gt;</span> <span class="syntax-interned-symbol">directive</span>)</span>
</span></code></pre>.  This makes it easy to achieve the equivalent of paragraph filling. <br/>If the atsign modifier is used with ~&lt;...~:&gt;, the entire remaining argument list is passed to the directive as its argument.  All of the remaining arguments are always consumed by ~@&lt;...~:&gt;, even if they are not all used by the <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> string nested in the directive.  Other than the difference in its argument, ~@&lt;...~:&gt; is exactly the same as ~&lt;...~:&gt; except that circularity detection is not applied if ~@&lt;...~:&gt; is encountered at top level in a {\cd format} string.  This ensures that circularity detection is applied only to data lists, not to {\cd format} argument lists. <br/>" . #n#" is printed if circularity or sharing has to be indicated for its argument as a whole. <br/>To a considerable extent, the basic form of the directive ~&lt;...~&gt; is incompatible with the dynamic control of the arrangement of output by ~W, ~_, ~&lt;...~:&gt;, ~I, and ~:<a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>.  As a result, an error is signalled if any of these directives is nested within ~&lt;...~&gt;.  Beyond this, an error is also signalled if the ~&lt;...~:;...~&gt; form of ~&lt;...~&gt; is used in the same <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> string with ~W, ~_, ~&lt;...~:&gt;, ~I, or ~:<a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>. <br/>~I                                                        [format directive] <br/>INDENT &ndash; ~nI is the same as <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-pprint-indent">pprint-indent</a> <span class="syntax-keyword-symbol">:BLOCK</span> <span class="syntax-interned-symbol">N</span>)</span>
</span></code>. ~n:I is the same as <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-pprint-indent">pprint-indent</a> <span class="syntax-keyword-symbol">:CURRENT</span> <span class="syntax-interned-symbol">N</span>)</span>
</span></code>.  In both cases, N defaults to zero, if it is omitted. <br/>~:<a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>                                                       [format directive] <br/>TABULATE &ndash; If the colon modifier is used with the ~<a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> directive, the tabbing computation is done relative to the horizontal position where the section immediately containing the directive begins, rather than with respect to a horizontal position of zero.  The numerical parameters are both interpreted as being in units of ems and both default to 1. ~n,m:<a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> is the same as <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-pprint-tab">pprint-tab</a> <span class="syntax-keyword-symbol">:SECTION</span> <span class="syntax-interned-symbol">N</span> <span class="syntax-interned-symbol">M</span>)</span>
</span></code>. ~n,m:@<a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> is the same as <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-pprint-tab">pprint-tab</a> <span class="syntax-keyword-symbol">:SECTION-RELATIVE</span> <span class="syntax-interned-symbol">N</span> <span class="syntax-interned-symbol">M</span>)</span>
</span></code>. <br/>~/name<a class="function-reference" href="../chapter-12.xhtml#function-/">/</a>                                                   [format directive] <br/><a class="glossary-reference" href="../chapter-26.xhtml#glossary-call">call</a> <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> &ndash; User defined functions can be called from within a <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> string by using the directive ~/name<a class="function-reference" href="../chapter-12.xhtml#function-/">/</a>.  The colon modifier, the atsign modifier, and arbitrarily many parameters can be specified with the ~/name<a class="function-reference" href="../chapter-12.xhtml#function-/">/</a> directive.  <a class="glossary-reference" href="../chapter-26.xhtml#glossary-name">name</a> can be any arbitrary string that does not contain a "<a class="function-reference" href="../chapter-12.xhtml#function-/">/</a>". All of the characters in <a class="glossary-reference" href="../chapter-26.xhtml#glossary-name">name</a> are treated as if they were upper case.  If <a class="glossary-reference" href="../chapter-26.xhtml#glossary-name">name</a> contains a ":" or "::", then everything up to but not including the first ":" or "::" is taken to be a string that names a package.  Everything after the first ":" or "::" <code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-interned-symbol">any</span>)</span>
</span></code> is taken to be a string that names a symbol.  The function corresponding to a ~/name<a class="function-reference" href="../chapter-12.xhtml#function-/">/</a> directive is obtained by looking up the symbol that has the indicated name in the indicated package. If <a class="glossary-reference" href="../chapter-26.xhtml#glossary-name">name</a> does not contain a ":" or "::", then the whole name string is looked up in the <a class="package-reference" href="../chapter-A.xhtml#package-user">user</a> package. <br/>When a ~/name<a class="function-reference" href="../chapter-12.xhtml#function-/">/</a> directive is encountered, the indicated function is called with four or more arguments.  The first four arguments are: the output stream, the <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> argument corresponding to the directive, the value <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> if the colon modifier was used <code><span class="syntax-root"><span class="syntax-cons">(<a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> <a class="symbol-reference" href="../chapter-5.xhtml#symbol-otherwise">otherwise</a>)</span>
</span></code>, and the value <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> if the atsign modifier was used <code><span class="syntax-root"><span class="syntax-cons">(<a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> <a class="symbol-reference" href="../chapter-5.xhtml#symbol-otherwise">otherwise</a>)</span>
</span></code>.  The remaining arguments consist of any parameters specified with the directive.  The function should print the argument appropriately.  Any values returned by the function are ignored. <br/>The three functions <a class="function-reference" href="../chapter-22.xhtml#function-pprint-linear">pprint-linear</a>, <a class="function-reference" href="../chapter-22.xhtml#function-pprint-fill">pprint-fill</a>, and <a class="function-reference" href="../chapter-22.xhtml#function-pprint-tabular">pprint-tabular</a> are specifically designed so that they can be called by ~<a class="function-reference" href="../chapter-12.xhtml#function-/">/</a>...<a class="function-reference" href="../chapter-12.xhtml#function-/">/</a> (i.e., ~/PPRINT-LINEAR/, ~/PPRINT-FILL/, and ~/PPRINT-TABULAR/).  In particular they take colon and atsign arguments. <br/>&mdash; <br/>As examples of the convenience of specifying pretty printing with <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> strings, consider that the first two functions used as examples in the last section can be compactly defined as follows.  The function PPRINT-VECTOR cannot be defined using <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a>, because the data structure it traverses is not a list.  The function <a class="function-reference" href="../chapter-22.xhtml#function-pprint-tabular">pprint-tabular</a> is inconvenient to define using <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a>, because of the need to pass its TABSIZE argument through to a ~:<a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> directive nested within an iteration over a list. <br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">simple-pprint-defun</span> <span class="syntax-cons">(<a class="variable-reference" href="../chapter-21.xhtml#variable-*standard-output*">*standard-output*</a> <a class="function-reference" href="../chapter-14.xhtml#function-list">list</a>)</span>
  <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> <span class="syntax-string">"~:&lt;~W ~@_~:I~W ~:_~W~1I ~_~W~:&gt;"</span> <a class="function-reference" href="../chapter-14.xhtml#function-list">list</a>)</span>)</span>
</span></code></pre> <br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">pprint-let</span> <span class="syntax-cons">(<a class="variable-reference" href="../chapter-21.xhtml#variable-*standard-output*">*standard-output*</a> <a class="function-reference" href="../chapter-14.xhtml#function-list">list</a>)</span>
  <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> <span class="syntax-string">"~:&lt;~W~^ ~:&lt;~@{~:&lt;~@{~W~^ ~_~}~:&gt;~^ ~:_~}~:&gt;~1I~@{~^ ~_~W~}~:&gt;"</span> <a class="function-reference" href="../chapter-14.xhtml#function-list">list</a>)</span>)</span>
</span></code></pre>  <br/>		   Compiling Format Control Strings <br/>The control strings used by <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> are essentially programs that perform printing.  The macro <a class="macro-reference" href="../chapter-22.xhtml#macro-formatter">formatter</a> provides the efficiency of using a compiled function for printing without losing the compactness of <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> control strings. <br/><a class="macro-reference" href="../chapter-22.xhtml#macro-formatter">formatter</a> control-string                                           [macro] <br/>CONTROL-STRING must be a literal string.  An error is signalled if CONTROL-STRING is not a valid <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> control string.  The macro <a class="macro-reference" href="../chapter-22.xhtml#macro-formatter">formatter</a> expands into an expression of the form <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-3.xhtml#macro-lambda">lambda</a> <span class="syntax-cons">(<a class="type-reference" href="../chapter-21.xhtml#type-stream">stream</a> <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-rest">&amp;REST</a>
<span class="syntax-interned-symbol">ARGS</span>)</span> <span class="syntax-interned-symbol">...</span>)</span>)</span>
</span></code></pre>  that does the printing specified by CONTROL-STRING.  The <a class="macro-reference" href="../chapter-3.xhtml#macro-lambda">lambda</a> created accepts an output stream as its first argument and zero or more data values as its remaining arguments.  The value returned by the <a class="macro-reference" href="../chapter-3.xhtml#macro-lambda">lambda</a> is the tail <code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-interned-symbol">any</span>)</span>
</span></code> of the data values that are not printed out by CONTROL-STRING.  (E.g., if the CONTROL-STRING is "~A~A" the <a class="function-reference" href="../chapter-14.xhtml#function-cddr">cddr</a> <code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-interned-symbol">any</span>)</span>
</span></code> of the data values is returned.) <br/>For instance: <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-22.xhtml#macro-formatter">formatter</a> <span class="syntax-string">"~%~2@{~S, ~}"</span>)</span>
</span></code> is equivalent to <br/>#'<pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-3.xhtml#macro-lambda">lambda</a> <span class="syntax-cons">(<a class="type-reference" href="../chapter-21.xhtml#type-stream">stream</a> <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-rest">&amp;REST</a> <span class="syntax-interned-symbol">args</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="../chapter-21.xhtml#function-terpri">terpri</a> <a class="type-reference" href="../chapter-21.xhtml#type-stream">stream</a>)</span>
    <span class="syntax-cons">(<a class="macro-reference" href="../chapter-6.xhtml#macro-dotimes">dotimes</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">n</span> <span class="syntax-number">2</span>)</span>
      <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-null">null</a> <span class="syntax-interned-symbol">args</span>)</span> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-return">return</a> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>)</span>)</span>
      <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-prin1">prin1</a> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-14.xhtml#macro-pop">pop</a> <span class="syntax-interned-symbol">args</span>)</span> <a class="type-reference" href="../chapter-21.xhtml#type-stream">stream</a>)</span>
      <span class="syntax-cons">(<a class="function-reference" href="../chapter-21.xhtml#function-write-string">write-string</a> <span class="syntax-string">", "</span> <a class="type-reference" href="../chapter-21.xhtml#type-stream">stream</a>)</span>)</span>
    <span class="syntax-interned-symbol">args</span>)</span>
</span></code></pre> <br/>In support of the above, <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> is extended so that it accepts functions as its second argument as well as strings.  When a function is provided, it must be a function of the form created by <a class="macro-reference" href="../chapter-22.xhtml#macro-formatter">formatter</a>.  The function is called with the appropriate output stream as its first argument and the data arguments to <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> as its remaining arguments.  The function should perform whatever output is necessary and return the unused tail of the arguments <code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-interned-symbol">any</span>)</span>
</span></code>.  The directives ~? and ~{~} with no body are also extended so that they accept functions as well as control strings. Every other standard function that takes a <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> string as an argument (e.g., <a class="function-reference" href="../chapter-9.xhtml#function-error">error</a> and <a class="function-reference" href="../chapter-9.xhtml#function-warn">warn</a>) are also extended so that they can accept functions of the form above instead. <br/>			Pretty Print Dispatch Tables <br/>When <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-pretty*">*print-pretty*</a> is not <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>, the pprint dispatch table in the variable <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-pprint-dispatch*">*print-pprint-dispatch*</a> controls how objects are printed.  The information in this table takes precedence over all other mechanisms for specifying how to print objects.  In particular, it overrides user-defined <a class="function-reference" href="../chapter-22.xhtml#function-print-object">print-object</a> methods and print functions for structures.  However, if there is no specification for how to pretty print a particular kind of object, it is then printed using the standard mechanisms as if <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-pretty*">*print-pretty*</a> were <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>. <br/>Pprint dispatch tables are mappings from keys to pairs of values.  The keys are type specifiers.  The values are functions and numerical priorities. Basic insertion and retrieval is done based on the keys with the equality of keys being tested by <a class="function-reference" href="../chapter-5.xhtml#function-equal">equal</a>.  The function to use when pretty printing an object is chosen by finding the highest priority function from <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-pprint-dispatch*">*print-pprint-dispatch*</a> that is associated with a type specifier that matches the object. <br/><a class="function-reference" href="../chapter-22.xhtml#function-copy-pprint-dispatch">copy-pprint-dispatch</a> &amp;optional <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">table</span> <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-pprint-dispatch*">*print-pprint-dispatch*</a>)</span>
</span></code>    [function] <br/>A copy is made of TABLE, which defaults to the current pprint dispatch table.  If TABLE is <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>, a copy is returned of the initial value of <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-pprint-dispatch*">*print-pprint-dispatch*</a>. <br/><a class="function-reference" href="../chapter-22.xhtml#function-pprint-dispatch">pprint-dispatch</a> object &amp;optional <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">table</span> <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-pprint-dispatch*">*print-pprint-dispatch*</a>)</span>
</span></code>   [function]  <br/>This retrieves the highest priority function from a pprint table that is associated with a type specifier in the table that matches <a class="glossary-reference" href="../chapter-26.xhtml#glossary-object">object</a>.  The function is chosen by finding all the type specifiers in TABLE that match the object and selecting the highest priority function associated with any of these type specifiers.  If there is more than one highest priority function, an arbitrary choice is made.  If no type specifiers match the object, a function is returned that prints object with <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-pretty*">*print-pretty*</a> bound to <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>. <br/>As a second return value, <a class="function-reference" href="../chapter-22.xhtml#function-pprint-dispatch">pprint-dispatch</a> returns a flag that is <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> if a matching type specifier was found in TABLE and <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> if not. <br/>TABLE <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">which</span> <span class="syntax-interned-symbol">defaults</span> <span class="syntax-interned-symbol">to</span> <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-pprint-dispatch*">*print-pprint-dispatch*</a>)</span>
</span></code> must be a pprint dispatch table.  TABLE can be <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>, in which case retrieval is done in the initial value of <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-pprint-dispatch*">*print-pprint-dispatch*</a>. <br/>When <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-pretty*">*print-pretty*</a> is <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>, <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-write">write</a> <span class="syntax-interned-symbol">OBJECT</span> <span class="syntax-keyword-symbol">:STREAM</span> <span class="syntax-interned-symbol">S</span>)</span>
</span></code> is equivalent to <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-funcall">funcall</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-pprint-dispatch">pprint-dispatch</a> <span class="syntax-interned-symbol">OBJECT</span>)</span> <span class="syntax-interned-symbol">S</span> <span class="syntax-interned-symbol">OBJECT</span>)</span>
</span></code>. <br/><a class="function-reference" href="../chapter-22.xhtml#function-set-pprint-dispatch">set-pprint-dispatch</a> type-specifier function                        [function]                     &amp;optional <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">priority</span> <span class="syntax-number">0</span>)</span>
</span></code> <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">table</span> <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-pprint-dispatch*">*print-pprint-dispatch*</a>)</span>
</span></code> <br/>This puts an entry into a pprint dispatch table and returns <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>. TYPE-SPECIFIER must be a valid type specifier and is the key of the entry. The first action of <a class="function-reference" href="../chapter-22.xhtml#function-set-pprint-dispatch">set-pprint-dispatch</a> is to remove any pre-existing entry associated with TYPE-SPECIFIER.  This guarantees that there will never be two entries associated with the same type specifier in a given pprint dispatch table.  Equality of type specifiers is tested by <a class="function-reference" href="../chapter-5.xhtml#function-equal">equal</a>. <br/>Two values are associated with each type specifier in a pprint dispatch table: a function and a priority.  <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> must accept two arguments: the stream to send output to and the object to be printed.  <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> should pretty print the object on the stream.  <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> can assume that object satisfies TYPE-SPECIFIER.  Function must obey <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-readably*">*print-readably*</a> (see issue <a class="issue-reference" href="../issues/data-io.xhtml#issue-data-io">data-io</a>).  Any values returned by <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> are ignored. <br/>PRIORITY <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">which</span> <span class="syntax-interned-symbol">defaults</span> <span class="syntax-interned-symbol">to</span> <span class="syntax-number">0</span>)</span>
</span></code> must be a non-complex number.  This number is used as a priority to resolve conflicts when an object matches more than one entry.  An error is signalled if priority fails to be a non-complex number. <br/>TABLE <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">which</span> <span class="syntax-interned-symbol">defaults</span> <span class="syntax-interned-symbol">to</span> <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-pprint-dispatch*">*print-pprint-dispatch*</a>)</span>
</span></code> must be a pprint dispatch table.  The specified entry is placed in this table. <br/>It is permissible for <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> to be <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>.  In this situation, there will be no TYPE-SPECIFIER entry in TABLE after <a class="function-reference" href="../chapter-22.xhtml#function-set-pprint-dispatch">set-pprint-dispatch</a> is evaluated. <br/>To facilitate the use of pprint dispatch tables for controlling the pretty printing of Lisp code, the TYPE-SPECIFIER argument of the function <a class="function-reference" href="../chapter-22.xhtml#function-set-pprint-dispatch">set-pprint-dispatch</a> is allowed to contain constructs of the form  <br/>           <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-cons">cons</a> <span class="syntax-interned-symbol">car-type</span> <span class="syntax-interned-symbol">cdr-type</span>)</span>
</span></code> <br/>This signifies that the corresponding object must be a cons cell whose car matches the type specifier CAR-TYPE and whose cdr matches the type specifier CDR-TYPE.  The CDR-TYPE can be omitted in which case it defaults to <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>. <br/>The initial value of <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-pprint-dispatch*">*print-pprint-dispatch*</a> is implementation dependent. However, the initial entries all use a special class of priorities that have the property that they are less than every priority that can be specified using <a class="function-reference" href="../chapter-22.xhtml#function-set-pprint-dispatch">set-pprint-dispatch</a>.  The benefit of this is that it guarantees that any pretty printing functions users specify will override everything in the initial value of <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-pprint-dispatch*">*print-pprint-dispatch*</a>. <br/>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <br/>Implementation note:  The restriction above is very useful to users without actually limiting what Common Lisp implementors can do.  It is possible for implementors to set up any kind of pretty printing they desire using the range of priorities available to them. <br/>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <br/>Consider the following examples.  The first form restores <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-pprint-dispatch*">*print-pprint-dispatch*</a> to its initial value.  The next two forms then set up a special way to pretty print ratios.  Note that the more specific type specifier has to be associated with a higher priority. <br/><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-setq">setq</a> <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-pprint-dispatch*">*print-pprint-dispatch*</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-copy-pprint-dispatch">copy-pprint-dispatch</a> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>)</span>)</span>
</span></code> <br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-set-pprint-dispatch">set-pprint-dispatch</a> <span class="syntax-quote">'<a class="symbol-reference" href="../chapter-22.xhtml#symbol-ratio">ratio</a></span>
  <span class="syntax-function">#'<span class="syntax-cons">(<a class="macro-reference" href="../chapter-3.xhtml#macro-lambda">lambda</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">s</span> <span class="syntax-interned-symbol">obj</span>)</span>
      <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> <span class="syntax-interned-symbol">s</span> <span class="syntax-string">"#.(/ ~W ~W)"</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-numerator">numerator</a> <span class="syntax-interned-symbol">obj</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-denominator">denominator</a> <span class="syntax-interned-symbol">obj</span>)</span>)</span>)</span></span>)</span>
</span></code></pre> <br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-set-pprint-dispatch">set-pprint-dispatch</a> <span class="syntax-quote">'<span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-and">and</a> <a class="symbol-reference" href="../chapter-22.xhtml#symbol-ratio">ratio</a> <span class="syntax-cons">(<a class="type-reference" href="../chapter-4.xhtml#type-satisfies">satisfies</a> <a class="function-reference" href="../chapter-12.xhtml#function-minusp">minusp</a>)</span>)</span></span>
  <span class="syntax-function">#'<span class="syntax-cons">(<a class="macro-reference" href="../chapter-3.xhtml#macro-lambda">lambda</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">s</span> <span class="syntax-interned-symbol">obj</span>)</span>
      <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> <span class="syntax-interned-symbol">s</span> <span class="syntax-string">"#.(- (/ ~W ~W))"</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-numerator">numerator</a> <span class="syntax-interned-symbol">obj</span>)</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-denominator">denominator</a> <span class="syntax-interned-symbol">obj</span>)</span>)</span>)</span></span>
  <span class="syntax-number">5</span>)</span>
</span></code></pre> <br/><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-pprint">pprint</a> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-number">1/3</span> <span class="syntax-number">-2/3</span>)</span></span>)</span>
</span></code> prints: (#.<code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-/">/</a> <span class="syntax-number">1</span> <span class="syntax-number">3</span>)</span>
</span></code> #.<code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-/">/</a> <span class="syntax-number">2</span> <span class="syntax-number">3</span>)</span>)</span>
</span></code>) <br/>The following two forms illustrate the definition of pretty printing functions for types of Lisp code.  The first form illustrates how to specify the traditional method for printing quoted objects using "'" syntax.  Note the care taken to ensure that data lists that happen to begin with <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-quote">quote</a> will be printed readably.  The second form specifies that lists beginning with the symbol MY-LET should print the same way that lists beginning with <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a> print when the initial pprint dispatch table is in effect. <br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-set-pprint-dispatch">set-pprint-dispatch</a> <span class="syntax-quote">'<span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-cons">cons</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-member">member</a> <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-quote">quote</a>)</span>)</span></span> <span class="syntax-symbol">()</span> 
  <span class="syntax-function">#'<span class="syntax-cons">(<a class="macro-reference" href="../chapter-3.xhtml#macro-lambda">lambda</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">s</span> <a class="function-reference" href="../chapter-14.xhtml#function-list">list</a>)</span>
      <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-and">and</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-consp">consp</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-cdr">cdr</a> <a class="function-reference" href="../chapter-14.xhtml#function-list">list</a>)</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-null">null</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-cddr">cddr</a> <a class="function-reference" href="../chapter-14.xhtml#function-list">list</a>)</span>)</span>)</span>
	  <span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-funcall">funcall</a> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-22.xhtml#macro-formatter">formatter</a> <span class="syntax-string">"'~W"</span>)</span> <span class="syntax-interned-symbol">s</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-cadr">cadr</a> <a class="function-reference" href="../chapter-14.xhtml#function-list">list</a>)</span>)</span>
	  <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-pprint-fill">pprint-fill</a> <span class="syntax-interned-symbol">s</span> <a class="function-reference" href="../chapter-14.xhtml#function-list">list</a>)</span>)</span>)</span></span>)</span>
</span></code></pre>) <br/><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-set-pprint-dispatch">set-pprint-dispatch</a> <span class="syntax-quote">'<span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-cons">cons</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-member">member</a> <span class="syntax-interned-symbol">my-let</span>)</span>)</span></span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-pprint-dispatch">pprint-dispatch</a> <span class="syntax-quote">'<span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a>)</span></span> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>)</span>)</span>
</span></code> <br/>The next example specifies a default method for printing lists that do not correspond to function calls.  Note that, as shown in the definition of <a class="function-reference" href="../chapter-22.xhtml#function-pprint-tabular">pprint-tabular</a> above, <a class="function-reference" href="../chapter-22.xhtml#function-pprint-linear">pprint-linear</a>, <a class="function-reference" href="../chapter-22.xhtml#function-pprint-fill">pprint-fill</a>, and <a class="function-reference" href="../chapter-22.xhtml#function-pprint-tabular">pprint-tabular</a> are all defined with optional <a class="glossary-reference" href="../chapter-26.xhtml#glossary-colon">colon</a>? and ATSIGN? arguments so that they can be used as pprint dispatch functions as well as ~<a class="function-reference" href="../chapter-12.xhtml#function-/">/</a>...<a class="function-reference" href="../chapter-12.xhtml#function-/">/</a> functions. <br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-set-pprint-dispatch">set-pprint-dispatch</a> <span class="syntax-quote">'<span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-cons">cons</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-not">not</a> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-and">and</a> <a class="symbol-reference" href="../chapter-2.xhtml#symbol-symbol">symbol</a> <span class="syntax-cons">(<a class="type-reference" href="../chapter-4.xhtml#type-satisfies">satisfies</a> <a class="function-reference" href="../chapter-5.xhtml#function-fboundp">fboundp</a>)</span>)</span>)</span>)</span></span>
                     <span class="syntax-function">#'<a class="function-reference" href="../chapter-22.xhtml#function-pprint-fill">pprint-fill</a></span> <span class="syntax-number">-5</span>)</span>
</span></code></pre> <br/>with a line length of 9, <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-pprint">pprint</a> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-number">0</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">d</span> <span class="syntax-interned-symbol">e</span> <span class="syntax-interned-symbol">f</span> <span class="syntax-interned-symbol">g</span> <span class="syntax-interned-symbol">h</span> <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">j</span> <span class="syntax-interned-symbol">k</span>)</span></span>)</span>
</span></code> prints:  <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-number">0</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">d</span>
 <span class="syntax-interned-symbol">e</span> <span class="syntax-interned-symbol">f</span> <span class="syntax-interned-symbol">g</span> <span class="syntax-interned-symbol">h</span>
 <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">j</span> <span class="syntax-interned-symbol">k</span>)</span>
</span></code></pre> <br/>This final example shows how to define a pretty printing function for a user defined data structure. <br/><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">defstruct</a> <span class="syntax-interned-symbol">family</span> <span class="syntax-interned-symbol">mom</span> <span class="syntax-interned-symbol">kids</span>)</span>
</span></code> <br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-set-pprint-dispatch">set-pprint-dispatch</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">family</span></span>
  <span class="syntax-function">#'<span class="syntax-cons">(<a class="macro-reference" href="../chapter-3.xhtml#macro-lambda">lambda</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">s</span> <span class="syntax-interned-symbol">f</span>)</span>
      <span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-funcall">funcall</a> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-22.xhtml#macro-formatter">formatter</a> <span class="syntax-string">"~@&lt;#&lt;~;~W and ~2I~_~/pprint-fill/~;&gt;~:&gt;"</span>)</span>
	       <span class="syntax-interned-symbol">s</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">family-mom</span> <span class="syntax-interned-symbol">f</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">family-kids</span> <span class="syntax-interned-symbol">f</span>)</span>)</span>)</span></span>)</span>
</span></code></pre> <br/>The pretty printing function for the structure FAMILY specifies how to adjust the layout of the output so that it can fit aesthetically into a variety of line widths.  In addition, it obeys the printer control variables <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-level*">*print-level*</a>, <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-length*">*print-length*</a>, <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-lines*">*print-lines*</a>, <a class="symbol-reference" href="../chapter-2.xhtml#symbol-*print-circle*">*print-circle*</a>, *PRINT-SHARED* and <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-escape*">*print-escape*</a>, and can tolerate several different kinds of malformity in the data structure.  The output below shows what is printed out with a right margin of 25, <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-pretty*">*print-pretty*</a> <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>, <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-escape*">*print-escape*</a> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>, and a malformed KIDS list. <br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-write">write</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-list">list</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">principal-family</span></span>
             <span class="syntax-cons">(<span class="syntax-interned-symbol">make-family</span> <span class="syntax-keyword-symbol">:mom</span> <span class="syntax-string">"Lucy"</span>
                          <span class="syntax-keyword-symbol">:kids</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-string">"Mark"</span> <span class="syntax-string">"Bob"</span> <span class="syntax-symbol">.</span> <span class="syntax-string">"Dan"</span>)</span></span>)</span>)</span>
       <span class="syntax-keyword-symbol">:right-margin</span> <span class="syntax-number">25</span> <span class="syntax-keyword-symbol">:pretty</span> <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> <span class="syntax-keyword-symbol">:escape</span> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-keyword-symbol">:miser-width</span> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>)</span>
</span></code></pre> <br/>(PRINCIPAL-FAMILY  #&lt;Lucy and      Mark Bob . Dan&gt;) <br/>Note that a pretty printing function for a structure is different from the structure's print function.  While print functions are permanently associated with a structure, pretty printing functions are stored in pprint dispatch tables and can be rapidly changed to reflect different printing needs.  If there is no pretty printing function for a structure in the current print dispatch table, the print function <code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-interned-symbol">any</span>)</span>
</span></code> is used instead. </section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>