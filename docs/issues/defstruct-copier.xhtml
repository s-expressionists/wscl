<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” DEFSTRUCT-COPIER</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">DEFSTRUCT-COPIER</span><br/><ol class="local-toc"><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit history">Edit history</a><ol> </ol></li><li><a href="#section-Problem description">Problem description</a><ol> </ol></li><li><a href="#issue-defstruct-copier:argument-type">Proposal ARGUMENT-TYPE</a><ol> </ol></li><li><a href="#issue-defstruct-copier:copier-type">Proposal COPIER-TYPE</a><ol> </ol></li><li><a href="#issue-defstruct-copier:unspecified">Proposal UNSPECIFIED</a><ol> </ol></li><li><a href="#issue-defstruct-copier:remove">Proposal REMOVE</a><ol> </ol></li><li><a href="#section-Examples">Examples</a><ol> </ol></li><li><a href="#section-Current Practice">Current Practice</a><ol> </ol></li><li><a href="#section-Cost to Implementors">Cost to Implementors</a><ol> </ol></li><li><a href="#section-Cost to Users">Cost to Users</a><ol> </ol></li><li><a href="#section-Cost of non-adoption">Cost of non-adoption</a><ol> </ol></li><li><a href="#section-Performance impact">Performance impact</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Esthetics">Esthetics</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue DEFSTRUCT-COPIER [NIL] [CLARIFICATION, CHANGE]</h1><section id="section-References" class="section"><h2 class="section-title">References</h2><a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">defstruct</a> </section><section id="section-Edit history" class="section"><h2 class="section-title">Edit history</h2>V1, 10 May 90, Sandra Loosemore V2, 13 May 90, Sandra Loosemore (update discussion) V3, 29 May 90, Sandra Loosemore (more comments) </section><section id="section-Problem description" class="section"><h2 class="section-title">Problem description</h2>The description of the :COPIER option to <a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">defstruct</a> in CLtL states: <br/>   The automatically defined copier function simply makes a new    structure and transfers all components verbatim from the argument    into the newly created structure. <br/>This description doesn't make it clear whether the type of the newly created structure is copied from the argument, or is determined by the copier function.  This can make a difference in the case where a copier function defined for one structure type is passed an argument that belongs to a subtype of the original type.  Does the result have the "name" of the subtype and any additional slots present in the subtype but not the parent type, or does it have the same "name" as the parent  type and only the slots inherited from that type? <br/>There are four proposals:  <a class="proposal-reference" href="#issue-defstruct-copier:argument-type">ARGUMENT-TYPE</a>, <a class="proposal-reference" href="#issue-defstruct-copier:copier-type">COPIER-TYPE</a>, <a class="proposal-reference" href="#issue-defstruct-copier:unspecified">UNSPECIFIED</a>, and <a class="function-reference" href="../chapter-17.xhtml#function-remove">remove</a>. <br/></section><section class="status-unknown proposal" id="issue-defstruct-copier:argument-type"><h2 class="section-title">Proposal ARGUMENT-TYPE</h2>  Clarify that the type of the result returned by copier functions    created by <a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">defstruct</a> is always exactly the same type as the    argument to the copier.  That is, if the argument is of a   subtype of the structure type for which the copier was defined,   then the result will also be of that subtype and include all   the slots of the subtype. <br/>  Rationale for proposal <a class="proposal-reference" href="#issue-defstruct-copier:argument-type">ARGUMENT-TYPE</a>:     Some people expect this behavior. <br/></section><section class="status-unknown proposal" id="issue-defstruct-copier:copier-type"><h2 class="section-title">Proposal COPIER-TYPE</h2>  Clarify that the type of the result returned by copier functions    created by <a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">defstruct</a> is always exactly the structure type for    which the copier was defined.  That is, if the argument is of a   subtype of the structure type for which the copier was defined,   the result will be of the supertype only and include only those   slots that are present in the supertype. <br/>  Rationale for proposal <a class="proposal-reference" href="#issue-defstruct-copier:copier-type">COPIER-TYPE</a>:     Some people expect this behavior. <br/></section><section class="status-unknown proposal" id="issue-defstruct-copier:unspecified"><h2 class="section-title">Proposal UNSPECIFIED</h2>  Clarify that it is unspecified whether the type of the result    returned by copier functions created by <a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">defstruct</a> is the type   of the argument to the copier, or the structure type for which the   copier function was defined.  (In other words, the behavior of   copier functions is well-defined only when they are passed   arguments of the exact same type for which the copier was   defined.) <br/>  Rationale for proposal <a class="proposal-reference" href="#issue-defstruct-copier:unspecified">UNSPECIFIED</a>:     Some people don't know what behavior to expect. <br/></section><section class="status-unknown proposal" id="issue-defstruct-copier:remove"><h2 class="section-title">Proposal REMOVE</h2>  Remove the :COPIER option to <a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">defstruct</a>. <br/>  Rationale for proposal <a class="function-reference" href="../chapter-17.xhtml#function-remove">remove</a>:     The feature is so poorly specified it's already useless. <br/></section><section id="section-Examples" class="section"><h2 class="section-title">Examples</h2><pre>    <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">defstruct</a> <span class="syntax-interned-symbol">foo</span> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span>)</span>
</span></code><br/>    <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">defstruct</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">bar</span> <span class="syntax-cons">(<span class="syntax-keyword-symbol">:include</span> <span class="syntax-interned-symbol">foo</span>)</span>)</span> <span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">d</span>)</span>
</span></code><br/>    <code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">result</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">copy-foo</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">make-bar</span>)</span>)</span>)</span>
</span></code><br/><br/>  Under proposal <a class="proposal-reference" href="#issue-defstruct-copier:argument-type">ARGUMENT-TYPE</a>,<br/>    <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-4.xhtml#function-type-of">type-of</a> <span class="syntax-interned-symbol">result</span>)</span>
</span></code> <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; <a class="index/code-reference" href="../chapter-1.xhtml#index/code-bar">bar</a><br/><br/>  Under proposal <a class="proposal-reference" href="#issue-defstruct-copier:copier-type">COPIER-TYPE</a>,<br/>    <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-4.xhtml#function-type-of">type-of</a> <span class="syntax-interned-symbol">result</span>)</span>
</span></code> <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; <a class="index/code-reference" href="../chapter-1.xhtml#index/code-foo">foo</a><br/><br/>  Under proposal <a class="proposal-reference" href="#issue-defstruct-copier:unspecified">UNSPECIFIED</a>,<br/>    <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-4.xhtml#function-type-of">type-of</a> <span class="syntax-interned-symbol">result</span>)</span>
</span></code> <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; either <a class="index/code-reference" href="../chapter-1.xhtml#index/code-foo">foo</a> or <a class="index/code-reference" href="../chapter-1.xhtml#index/code-bar">bar</a><br/><br/>  Under proposal <a class="function-reference" href="../chapter-17.xhtml#function-remove">remove</a>, users would have to define their own<br/>  copier functions to have whatever behavior they wanted.<br/><br/>    <br/></pre></section><section id="section-Current Practice" class="section"><h2 class="section-title">Current Practice</h2>  Some Lisps now implement proposal <a class="proposal-reference" href="#issue-defstruct-copier:argument-type">ARGUMENT-TYPE</a> and others implement    proposal <a class="proposal-reference" href="#issue-defstruct-copier:copier-type">COPIER-TYPE</a>.  Some Lisps also provide a <a class="function-reference" href="../chapter-8.xhtml#function-copy-structure">copy-structure</a>   function that can be used to make an exact duplicate of any   structure object. <br/></section><section id="section-Cost to Implementors" class="section"><h2 class="section-title">Cost to Implementors</h2>  Small. <br/></section><section id="section-Cost to Users" class="section"><h2 class="section-title">Cost to Users</h2>  Code that relies on any particular behavior is probably not now   portable anyway.  It doesn't seem like copiers are used very   much. <br/></section><section id="section-Cost of non-adoption" class="section"><h2 class="section-title">Cost of non-adoption</h2>  This part of the language specification remains vague. <br/></section><section id="section-Performance impact" class="section"><h2 class="section-title">Performance impact</h2>  Proposal <a class="function-reference" href="../chapter-17.xhtml#function-remove">remove</a> would save space since there would be no   normally useless copier functions generated by <a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">defstruct</a>.   It may be that copier functions defined by hand would be   considerably less efficient than a copier provided by the   implementation <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">which</span> <span class="syntax-interned-symbol">might</span> <span class="syntax-interned-symbol">make</span> <span class="syntax-interned-symbol">use</span> <span class="syntax-interned-symbol">of</span> <span class="syntax-interned-symbol">knowledge</span> <span class="syntax-interned-symbol">about</span> <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a>
  <span class="syntax-interned-symbol">internal</span> <span class="syntax-interned-symbol">layout</span> <span class="syntax-interned-symbol">of</span> <span class="syntax-interned-symbol">structures</span> <span class="syntax-interned-symbol">to</span> <a class="macro-reference" href="../chapter-6.xhtml#macro-do">do</a> <span class="syntax-interned-symbol">a</span> <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-block">block</a> <span class="syntax-interned-symbol">memory</span> <span class="syntax-interned-symbol">copy</span> <a class="macro-reference" href="../chapter-5.xhtml#macro-or">or</a> <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a>
  <span class="syntax-interned-symbol">like</span>)</span>
</span></code></pre>. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>  This part of the language specification becomes more precise. <br/></section><section id="section-Esthetics" class="section"><h2 class="section-title">Esthetics</h2>  Leaving the behavior explicitly vague seems unnecessarily ugly. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>  Loosemore's ranking of the proposals from most to least   acceptable is:  <a class="proposal-reference" href="#issue-defstruct-copier:argument-type">ARGUMENT-TYPE</a>, <a class="function-reference" href="../chapter-17.xhtml#function-remove">remove</a>, <a class="proposal-reference" href="#issue-defstruct-copier:copier-type">COPIER-TYPE</a>,   <a class="proposal-reference" href="#issue-defstruct-copier:unspecified">UNSPECIFIED</a>. <br/>  BarMar has said he thinks the behavior should be left   unspecified. <br/>  Moon has said he favors flushing the :copier feature.  Barrett   also prefers flushing :copier. <br/>  Perhaps we should consider adding <a class="function-reference" href="../chapter-8.xhtml#function-copy-structure">copy-structure</a> to the   standard? &mdash;&mdash;<a class="function-reference" href="../chapter-12.xhtml#function--">-</a> </section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>