<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” DECLARE-MACROS </title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">DECLARE-MACROS </span><br/><ol class="local-toc"><li><a href="#section-Status">Status</a><ol> </ol></li><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit history">Edit history</a><ol> </ol></li><li><a href="#section-Problem Description">Problem Description</a><ol> </ol></li><li><a href="#issue-declare-macros:flush">Proposal FLUSH</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Current Practice">Current Practice</a><ol> </ol></li><li><a href="#section-Cost to implementors">Cost to implementors</a><ol> </ol></li><li><a href="#section-Cost to users">Cost to users</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Aesthetics">Aesthetics</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue DECLARE-MACROS  [NIL] [CHANGE]</h1><section id="section-Status" class="status-passed section"><h2 class="section-title">Status</h2>passed, 1988 (not sure at which meeting) </section><section id="section-References" class="section"><h2 class="section-title">References</h2>Declaration Syntax (p154) </section><section id="section-Edit history" class="section"><h2 class="section-title">Edit history</h2>22-Oct-87, Version 1 by Pitman 9-Nov-87, Version 2 by Masinter 5-Feb-88, Version 3 by Pitman </section><section id="section-Problem Description" class="section"><h2 class="section-title">Problem Description</h2>  It is permissible for a macro call to expand into a declaration and be   recognized as such. This linguistic feature provides some useful   flexibility, but has a number of disadvantages: <br/>  * Operations on the executable portion of a body of code inside a      binding form <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">such</span> <span class="syntax-interned-symbol">as</span> <span class="syntax-interned-symbol">inserting</span> <span class="syntax-interned-symbol">an</span> <span class="syntax-interned-symbol">additional</span> <span class="syntax-interned-symbol">form</span>)</span>
</span></code> is a complicated     operation. This is because one or more trial macro expansions must be     done in order to pass over any declarations or documentation string     and find the beginning of the body. <br/>  * In order to find the end of the declarations, <a class="function-reference" href="../chapter-3.xhtml#function-macroexpand">MACROEXPAND</a> must be     called until a non-macro form is seen or until a macro does not expand     into a macro. In some interpreters which do macro expansion on the fly,     this may cause inefficiency because macro expansion of the first form     in a body must be done twice. In implementations where this is      optimized, the implementor may resent the fact that an optimization is     needed in the first place. <br/>  * Various code analysis tools have been shown to have been significantly     slowed down by the need to expand macros in order to determine whether     a binding is <a class="symbol-reference" href="../chapter-3.xhtml#symbol-special">SPECIAL</a> when analyzing a variable binding form. This is     particularly serious when macro invocations are deeply nested; the     number of macro expansions can be exponential in the depth of nesting     unless a macro-expansion caching mechanism is added.  <br/>  * User macros must be very careful about finding declarations in a body     of code by doing proper macro expansion. Often, however, naive users     don't realize this and so unknowingly write buggy code. This problem can     be <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-and">and</a> <span class="syntax-interned-symbol">is</span>)</span>
</span></code> defined away as simply a programmer error, but this is a     place where we could fairly straightforwardly redefine the language to     better accommodate what has been shown to be a common expectation of the     naive user. <br/></section><section class="status-passed proposal" id="issue-declare-macros:flush"><h2 class="section-title">Proposal FLUSH</h2>   Under this proposal, it would not be "permissible for a macro call to    expand into a declaration and be recognized as such, provided that the    macro call appears where a declaration may legitimately appear." (CLtL    p. 154). Macros could not legitimately expand into declarations; the only    valid declarations would be a list whose <a class="function-reference" href="../chapter-14.xhtml#function-car">CAR</a> is the symbol <a class="symbol-reference" href="../chapter-3.xhtml#symbol-declare">DECLARE</a>. <br/>   It would still be possible for a macro call to expand into a <a class="function-reference" href="../chapter-3.xhtml#function-proclaim">PROCLAIM</a>    form, however. <br/></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>  The ability to have a macro form expand into a declaration has been shown   to be useful in some situations.  More often, however, the presence of   this feature has been seen to cause problems elsewhere in the language.   Ultimately, its benefits have not outweighed its costs. <br/></section><section id="section-Current Practice" class="section"><h2 class="section-title">Current Practice</h2>  Most or all implementations support the old behavior even though few   user programs probably need it. <br/>  Some user macros are careful about finding declarations in a body of code   by doing proper macro expansion, but some probably cheat and look just   for explicit uses of <a class="symbol-reference" href="../chapter-3.xhtml#symbol-declare">DECLARE</a>. The cheat probably works most of the time. <br/></section><section id="section-Cost to implementors" class="section"><h2 class="section-title">Cost to implementors</h2>  The nature of this change is such that implementations which did not   choose to change would simply be supporting an <a class="glossary-reference" href="../chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a>   extension <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">except</span> <span class="syntax-interned-symbol">for</span> <a class="function-reference" href="../chapter-5.xhtml#function-some">some</a> <span class="syntax-quasiquote">`<span class="syntax-interned-symbol">minor</span></span><span class="syntax-quote">' <span class="syntax-interned-symbol">worry</span></span> <span class="syntax-interned-symbol">about</span> <span class="syntax-interned-symbol">destructive</span> <span class="syntax-interned-symbol">modification</span>
  <span class="syntax-interned-symbol">due</span> <span class="syntax-interned-symbol">to</span> <span class="syntax-interned-symbol">macro</span> <span class="syntax-interned-symbol">expanding</span> <span class="syntax-interned-symbol">while</span> <a class="variable-reference" href="../chapter-3.xhtml#variable-*macroexpand-hook*">*MACROEXPAND-HOOK*</a> <span class="syntax-interned-symbol">is</span> <a class="function-reference" href="../chapter-10.xhtml#function-set">set</a> <span class="syntax-interned-symbol">to</span> <span class="syntax-interned-symbol">something</span>
  <span class="syntax-interned-symbol">which</span> <span class="syntax-interned-symbol">implemented</span> <span class="syntax-interned-symbol">displacing</span> <span class="syntax-interned-symbol">macros</span>)</span>
</span></code></pre>. <br/>  In any case, there might be several places in which the interpreter,   compiler, and system macros had knowledge about doing macro expansion   before declaration processing. The change is not trivial, but most of   its complexity is likely to be in finding the places which need change   and not in making the actual change. <br/></section><section id="section-Cost to users" class="section"><h2 class="section-title">Cost to users</h2>  Most users probably do not write macros which expand into <a class="symbol-reference" href="../chapter-3.xhtml#symbol-declare">DECLARE</a> forms   so most users are probably not affected. <br/>  Users who do exploit this feature probably know that they do. In any   case, compilers could be made to detect cases where this feature is   being exploited and warn about it. <br/>  Franz and Gold Hill are notable exceptions to the claim that users may   not want this. Both claim to make a reasonable amount of use of macros   which expand into different <a class="symbol-reference" href="../chapter-3.xhtml#symbol-speed">SPEED</a> and <a class="symbol-reference" href="../chapter-3.xhtml#symbol-safety">SAFETY</a> declarations, usually   dependent on a global switch. <br/>  Rewrites must be devised on a case-by-case basis. A common sort of   rewrite would take the form: <br/>   Old code:  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-3.xhtml#macro-defmacro">DEFMACRO</a> <span class="syntax-interned-symbol">SPEEDY</span> <span class="syntax-symbol">()</span>
		<span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-declare">DECLARE</a> <span class="syntax-cons">(<a class="declaration-reference" href="../chapter-3.xhtml#declaration-optimize">OPTIMIZE</a> <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-speed">SPEED</a> <span class="syntax-number">3</span>)</span> <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-safety">SAFETY</a> <span class="syntax-number">0</span>)</span>)</span>)</span></span>)</span>
</span></code></pre>    	      <code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">LET</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">..bindings..</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">SPEEDY</span>)</span> <span class="syntax-interned-symbol">..body..</span>)</span>
</span></code> <br/>   New code:  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-3.xhtml#macro-defmacro">DEFMACRO</a> <span class="syntax-interned-symbol">SPEEDY-LET</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">BVL</span> <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-body">&amp;BODY</a> <span class="syntax-interned-symbol">FORMS</span>)</span>
		<span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">LET</a> <span class="syntax-unquote">,<span class="syntax-interned-symbol">BVL</span></span>
		   <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-declare">DECLARE</a> <span class="syntax-cons">(<a class="declaration-reference" href="../chapter-3.xhtml#declaration-optimize">OPTIMIZE</a> <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-speed">SPEED</a> <span class="syntax-number">3</span>)</span> <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-safety">SAFETY</a> <span class="syntax-number">0</span>)</span>)</span>)</span>
		   <span class="syntax-unquote">,@<span class="syntax-interned-symbol">FORMS</span></span>)</span></span>)</span>
</span></code></pre> 	      <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">SPEEDY-LET</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">..bindings..</span>)</span> <span class="syntax-interned-symbol">..body..</span>)</span>
</span></code> <br/>  Another tactic would be: <br/>   Old code: <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-eval-when">EVAL-WHEN</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-3.xhtml#function-eval">EVAL</a> <a class="function-reference" href="../chapter-3.xhtml#function-compile">COMPILE</a> <a class="function-reference" href="../chapter-24.xhtml#function-load">LOAD</a>)</span>
	       <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defvar">DEFVAR</a> <span class="syntax-interned-symbol">*SPEEDY*</span> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>)</span>)</span>
</span></code></pre> 	     <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-3.xhtml#macro-defmacro">DEFMACRO</a> <span class="syntax-interned-symbol">USE-STANDARD-SPEED-AND-SAFETY</span> <span class="syntax-symbol">()</span>
	       <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-if">IF</a> <span class="syntax-interned-symbol">*SPEEDY*</span>
		   <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-declare">DECLARE</a> <span class="syntax-cons">(<a class="declaration-reference" href="../chapter-3.xhtml#declaration-optimize">OPTIMIZE</a> <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-speed">SPEED</a> <span class="syntax-number">3</span>)</span> <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-safety">SAFETY</a> <span class="syntax-number">0</span>)</span>)</span>)</span></span>
		   <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-declare">DECLARE</a> <span class="syntax-cons">(<a class="declaration-reference" href="../chapter-3.xhtml#declaration-optimize">OPTIMIZE</a> <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-speed">SPEED</a> <span class="syntax-number">0</span>)</span> <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-safety">SAFETY</a> <span class="syntax-number">3</span>)</span>)</span>)</span></span>)</span>)</span>
</span></code></pre> 	     <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">DEFUN</a> <span class="syntax-interned-symbol">FOO</span> <span class="syntax-symbol">()</span>
	       <span class="syntax-cons">(<span class="syntax-interned-symbol">USE-STANDARD-SPEED-AND-SAFETY</span>)</span>
	       <span class="syntax-interned-symbol">...</span>)</span>
</span></code></pre>    New code: <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-eval-when">EVAL-WHEN</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-3.xhtml#function-eval">EVAL</a> <a class="function-reference" href="../chapter-3.xhtml#function-compile">COMPILE</a> <a class="function-reference" href="../chapter-24.xhtml#function-load">LOAD</a>)</span>
	       <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defvar">DEFVAR</a> <span class="syntax-interned-symbol">*STANDARD-SPEED-AND-SAFETY*</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-speed">SPEED</a> <span class="syntax-number">0</span>)</span> <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-safety">SAFETY</a> <span class="syntax-number">3</span>)</span>)</span></span>)</span>)</span>
</span></code></pre> 	     (<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">DEFUN</a> <a class="index/code-reference" href="../chapter-1.xhtml#index/code-foo">FOO</a> <code><span class="syntax-root"><span class="syntax-symbol">()</span>
</span></code> 	       (<a class="symbol-reference" href="../chapter-3.xhtml#symbol-declare">DECLARE</a> (<a class="declaration-reference" href="../chapter-3.xhtml#declaration-optimize">OPTIMIZE</a> #.*STANDARD-SPEED-AND-SAFETY*)) 	       ...) <br/>  Still a third tactic would be to actually shadow <a class="macro-reference" href="../chapter-5.xhtml#macro-defun">DEFUN</a>, <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">LET</a>, etc. with   variants that process macro expansions and then to build code in a   package that used the revised <a class="macro-reference" href="../chapter-5.xhtml#macro-defun">DEFUN</a>, <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">LET</a>, etc. eg, <br/>    <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">DEFUN</a> <span class="syntax-interned-symbol">PARSE-BODY</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">BODY</span> <span class="syntax-interned-symbol">ENV</span>)</span>
      <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">LET</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">DECLS</span> <span class="syntax-quote">'<span class="syntax-symbol">()</span></span>)</span>
	    <span class="syntax-cons">(<span class="syntax-interned-symbol">DOC</span>   <span class="syntax-quote">'<span class="syntax-symbol">()</span></span>)</span>)</span>
	<span class="syntax-cons">(<a class="macro-reference" href="../chapter-6.xhtml#macro-do">DO</a> <span class="syntax-symbol">()</span> <span class="syntax-cons">(<span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-null">NULL</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-cdr">CDR</a> <span class="syntax-interned-symbol">BODY</span>)</span>)</span>)</span>
	  <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">LET</a> <span class="syntax-cons">(<span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-exp">EXP</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-3.xhtml#function-macroexpand">MACROEXPAND</a> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-14.xhtml#macro-pop">POP</a> <span class="syntax-interned-symbol">BODY</span>)</span> <span class="syntax-interned-symbol">ENV</span>)</span>)</span>)</span>
	    <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-cond">COND</a> <span class="syntax-cons">(<span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-and">AND</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-16.xhtml#function-stringp">STRINGP</a> <a class="function-reference" href="../chapter-12.xhtml#function-exp">EXP</a>)</span> <span class="syntax-interned-symbol">BODY</span>)</span>
		   <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-unless">UNLESS</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-null">NULL</a> <span class="syntax-interned-symbol">DOC</span>)</span>
		     <span class="syntax-cons">(<a class="function-reference" href="../chapter-9.xhtml#function-warn">WARN</a> <span class="syntax-string">"More than one documentation string was seen."</span>)</span>)</span>
		   <span class="syntax-cons">(<a class="macro-reference" href="../chapter-14.xhtml#macro-push">PUSH</a> <a class="function-reference" href="../chapter-12.xhtml#function-exp">EXP</a> <span class="syntax-interned-symbol">DOC</span>)</span>)</span>
		  <span class="syntax-cons">(<span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-and">AND</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-not">NOT</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-atom">ATOM</a> <a class="function-reference" href="../chapter-12.xhtml#function-exp">EXP</a>)</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-eq">EQ</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-car">CAR</a> <a class="function-reference" href="../chapter-12.xhtml#function-exp">EXP</a>)</span> <span class="syntax-quote">'<a class="symbol-reference" href="../chapter-3.xhtml#symbol-declare">DECLARE</a></span>)</span>)</span>
		   <span class="syntax-cons">(<a class="macro-reference" href="../chapter-14.xhtml#macro-push">PUSH</a> <a class="function-reference" href="../chapter-12.xhtml#function-exp">EXP</a> <span class="syntax-interned-symbol">DECLS</span>)</span>)</span>
		  <span class="syntax-cons">(<a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>
		   <span class="syntax-cons">(<a class="macro-reference" href="../chapter-14.xhtml#macro-push">PUSH</a> <a class="function-reference" href="../chapter-12.xhtml#function-exp">EXP</a> <span class="syntax-interned-symbol">BODY</span>)</span>
		   <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-return">RETURN</a> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>)</span>)</span>)</span>)</span>)</span>
	<span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-values">VALUES</a> <span class="syntax-interned-symbol">BODY</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-17.xhtml#function-nreverse">NREVERSE</a> <span class="syntax-interned-symbol">DECLS</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-17.xhtml#function-nreverse">NREVERSE</a> <span class="syntax-interned-symbol">DOC</span>)</span>)</span>)</span>)</span>
</span></code></pre> <br/>   <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-3.xhtml#macro-defmacro">DEFMACRO</a> <span class="syntax-interned-symbol">MY:DEFUN</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">NAME</span> <span class="syntax-interned-symbol">LAMBDA-LIST</span> <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-body">&amp;BODY</a> <span class="syntax-interned-symbol">DECLS-DOC-AND-FORMS</span>
		       <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-environment">&amp;ENVIRONMENT</a> <span class="syntax-interned-symbol">ENV</span>)</span>
     <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-multiple-value-bind">MULTIPLE-VALUE-BIND</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">FORMS</span> <span class="syntax-interned-symbol">DECLS</span> <span class="syntax-interned-symbol">DOC-STRINGS</span>)</span>
	 <span class="syntax-cons">(<span class="syntax-interned-symbol">PARSE-BODY</span> <span class="syntax-interned-symbol">DECLS-DOC-AND-FORMS</span> <span class="syntax-interned-symbol">ENV</span>)</span>
       <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">DEFUN</a> <span class="syntax-unquote">,<span class="syntax-interned-symbol">NAME</span></span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">BVL</span></span> <span class="syntax-unquote">,@<span class="syntax-interned-symbol">DECLS</span></span> <span class="syntax-unquote">,@<span class="syntax-interned-symbol">DOC-STRINGS</span></span> <span class="syntax-unquote">,@<span class="syntax-interned-symbol">FORMS</span></span>)</span></span>)</span>)</span>
</span></code></pre> <br/>   <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-3.xhtml#macro-defmacro">DEFMACRO</a> <span class="syntax-interned-symbol">MY:LET</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">BINDINGS</span> <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-body">&amp;BODY</a> <span class="syntax-interned-symbol">DECLS-DOC-AND-FORMS</span>
		     <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-environment">&amp;ENVIRONMENT</a> <span class="syntax-interned-symbol">ENV</span>)</span>
     <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-multiple-value-bind">MULTIPLE-VALUE-BIND</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">FORMS</span> <span class="syntax-interned-symbol">DECLS</span> <span class="syntax-interned-symbol">DOC-STRINGS</span>)</span>
	 <span class="syntax-cons">(<span class="syntax-interned-symbol">PARSE-BODY</span> <span class="syntax-interned-symbol">DECLS-DOC-AND-FORMS</span> <span class="syntax-interned-symbol">ENV</span>)</span>
       <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">LET</a> <span class="syntax-unquote">,<span class="syntax-interned-symbol">BINDINGS</span></span> <span class="syntax-unquote">,@<span class="syntax-interned-symbol">FORMS</span></span>)</span></span>)</span>)</span>
</span></code></pre> <br/>   ...etc. <br/>  <a class="macro-reference" href="../chapter-3.xhtml#macro-lambda">LAMBDA</a> cannot be done this way, of course, since it is not a macro <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-or">or</a>
  <span class="syntax-interned-symbol">even</span> <span class="syntax-interned-symbol">a</span> <a class="symbol-reference" href="../chapter-3.xhtml#symbol-special">special</a> <span class="syntax-interned-symbol">form</span>)</span>
</span></code></pre>. Support for expanding declarations in a <a class="macro-reference" href="../chapter-3.xhtml#macro-lambda">LAMBDA</a>   would have to be provided either by using implementation-specific support   (such as Zetalisp's ``lambda macros'') or by a workaround such as a   macro like: <br/>   <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-3.xhtml#macro-defmacro">DEFMACRO</a> <a class="macro-reference" href="../chapter-3.xhtml#macro-lambda">LAMBDA</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">LAMBDA-LIST</span> <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-body">&amp;BODY</a> <span class="syntax-interned-symbol">DECLS-DOC-AND-FORMS</span>
		     <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-environment">&amp;ENVIRONMENT</a> <span class="syntax-interned-symbol">ENV</span>)</span>
     <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-multiple-value-bind">MULTIPLE-VALUE-BIND</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">FORMS</span> <span class="syntax-interned-symbol">DECLS</span> <span class="syntax-interned-symbol">DOC-STRINGS</span>)</span>
	 <span class="syntax-cons">(<span class="syntax-interned-symbol">PARSE-BODY</span> <span class="syntax-interned-symbol">DECLS-DOC-AND-FORMS</span> <span class="syntax-interned-symbol">ENV</span>)</span>
       <span class="syntax-quasiquote">`<span class="syntax-function">#'<span class="syntax-cons">(<a class="macro-reference" href="../chapter-3.xhtml#macro-lambda">LAMBDA</a> <span class="syntax-unquote">,<span class="syntax-interned-symbol">BINDINGS</span></span> <span class="syntax-unquote">,@<span class="syntax-interned-symbol">FORMS</span></span>)</span></span></span>)</span>)</span>
</span></code></pre> <br/>  Note that unlike the other examples, <a class="macro-reference" href="../chapter-3.xhtml#macro-lambda">LAMBDA</a> need not be <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-and">and</a> <span class="syntax-interned-symbol">in</span> <span class="syntax-interned-symbol">fact</span><span class="syntax-interned-symbol">,
  may</span> <a class="function-reference" href="../chapter-5.xhtml#function-not">not</a> <span class="syntax-interned-symbol">be</span>)</span>
</span></code></pre> in the "MY" package in order for this to work since the   <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">FUNCTION</a> special form will generally only recognize <span class="issue-reference error">issue:LISP</span>. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>  The efficiency of some tools may be improved.   User macros which must do minor surgery on bodies of code will be   easier to write. <br/></section><section id="section-Aesthetics" class="section"><h2 class="section-title">Aesthetics</h2>  This change simplifies the semantics of the language slightly and   probably tends to better support the assumptions of naive programmers   writing macros. <br/>  In some cases involving complicated extensions to declarations, it   may be slightly harder to express such extensions in a modular way.   Experience thus far has shown such cases to be rare, however. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>  Symbolics took an in-house poll of people who take advantage of the   feature and it was generally agreed that in most cases where this   feature is used at all, that it would be just as easy to work around   using the sample rewrite techniques cited above. <br/>  Moon `credits' Pitman for <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">against</span> <a class="function-reference" href="../chapter-5.xhtml#function-some">some</a> <span class="syntax-interned-symbol">opposition</span>)</span>
</span></code> pushing this   `feature' down everyone's throats in the original <a class="package-reference" href="../chapter-11.xhtml#package-cl">CL</a> design process.   Pitman admits this was an expensive mistake. Moon and Pitman support   this change as an important simplification to the language. <br/>  The cleanup committee unanimously endorsed this proposal. <br/>  In discussion at the Nov-87 X3J13 meeting, Franz and Gold Hill   mentioned that they use this feature a lot and were not entirely   happy about its going away. </section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>