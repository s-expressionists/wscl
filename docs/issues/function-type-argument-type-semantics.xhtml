<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” FUNCTION-TYPE-ARGUMENT-TYPE-SEMANTICS</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">FUNCTION-TYPE-ARGUMENT-TYPE-SEMANTICS</span><br/><ol class="local-toc"><li><a href="#section-Status">Status</a><ol> </ol></li><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit history">Edit history</a><ol> </ol></li><li><a href="#section-Problem description">Problem description</a><ol> </ol></li><li><a href="#issue-function-type-argument-type-semantics:restrictive">Proposal RESTRICTIVE</a><ol> </ol></li><li><a href="#section-Example">Example</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Current Practice">Current Practice</a><ol> </ol></li><li><a href="#section-Cost to Implementors">Cost to Implementors</a><ol> </ol></li><li><a href="#section-Cost to Users">Cost to Users</a><ol> </ol></li><li><a href="#section-Cost of Non-Adoption">Cost of Non-Adoption</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Esthetics">Esthetics</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue FUNCTION-TYPE-ARGUMENT-TYPE-SEMANTICS [Cleanup] [CHANGE]</h1><h2>Related issues</h2><ul><span class="issue-reference error">issue:DECLARE-TYPE-FREE</span></ul><section id="section-Status" class="status-passed section"><h2 class="section-title">Status</h2>Passed, Jan 89 X3J13 </section><section id="section-References" class="section"><h2 class="section-title">References</h2>CLtL pp 47-48, 158-159 </section><section id="section-Edit history" class="section"><h2 class="section-title">Edit history</h2>#1, 7 Sept 1988, Walter van Roggen #2, 13 Sept 1988, Walter van Roggen (costs &amp; proposal limitations) #3,  7-Dec-88, Masinter <br/></section><section id="section-Problem description" class="section"><h2 class="section-title">Problem description</h2>The current description of the specialized <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> type specifier is not very useful to program analysis tools and is not very intuitive to programmers because the meaning of the argument type specifiers is not restrictive. <br/>Programmers find it useful to add information about the types of the arguments a function expects and about the type<pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">s</span>)</span>
</span></code></pre> that a function may return. This information is useful both to human readers of the code as well as to type checking programs such as compilers and cross referencers. The only apparent way of providing this information is with the <a class="declaration-reference" href="../chapter-3.xhtml#declaration-ftype">ftype</a> declaration or the <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> type specifier. <br/>Furthermore, implementations may wish to provide additional optimizations based on avoiding type checking or different methods of argument passing. These optimizations require the same sort of information about the argument types. <br/>However, the current definition of <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> type specifiers on pages 47-48 of CLtL states that a function such as <a class="function-reference" href="../chapter-14.xhtml#function-cons">cons</a> that is of type   <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> <span class="syntax-cons">(<a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>)</span> <a class="function-reference" href="../chapter-14.xhtml#function-cons">cons</a>)</span>
</span></code></pre> is also of type   <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-float">float</a> <a class="function-reference" href="../chapter-16.xhtml#function-string">string</a>)</span> <a class="function-reference" href="../chapter-14.xhtml#function-list">list</a>)</span>
</span></code></pre>. <br/>The problem is that the argument types aren't restrictive, so no interesting matching of types is possible. <br/></section><section class="status-passed proposal" id="issue-function-type-argument-type-semantics:restrictive"><h2 class="section-title">Proposal RESTRICTIVE</h2>This proposal is written as if DECLARE-TYPE-FREE (Version 6, 06-Oct-88) is in effect. <br/>Specify that a declaration of the form <br/>    <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="declaration-reference" href="../chapter-3.xhtml#declaration-ftype">ftype</a> <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">arg0-type</span> <span class="syntax-interned-symbol">arg1-type</span> <span class="syntax-interned-symbol">...</span>)</span> <span class="syntax-interned-symbol">val-type</span>)</span> <span class="syntax-interned-symbol">f</span>)</span>
</span></code></pre>) <br/>implies that any call of the form <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">f</span> <span class="syntax-interned-symbol">arg0</span> <span class="syntax-interned-symbol">arg1</span> <span class="syntax-interned-symbol">...</span>)</span>
</span></code></pre> within the scope of the declaration can be treated as if it were <br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <span class="syntax-interned-symbol">val-type</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">f</span> <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <span class="syntax-interned-symbol">arg0-type</span> <span class="syntax-interned-symbol">arg0</span>)</span> <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <span class="syntax-interned-symbol">arg1-type</span> <span class="syntax-interned-symbol">arg1</span>)</span> <span class="syntax-interned-symbol">...</span>)</span>)</span>
</span></code></pre> <br/>That is, it is an error for any of the arguments not to be of the specified types or the result not to be of the specified type. (In particular, If any argument is not of the correct type,  the result is not guaranteed  to be of the specified type.) <br/>Thus, an <a class="declaration-reference" href="../chapter-3.xhtml#declaration-ftype">ftype</a> declaration for a function describes calls to the function, not the actual definition of the function.  <br/>Similarly, specify that a declaration of the form     <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="symbol-reference" href="../chapter-25.xhtml#symbol-type">type</a> <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">arg0-type</span> <span class="syntax-interned-symbol">arg1-type</span> <span class="syntax-interned-symbol">...</span>)</span> <span class="syntax-interned-symbol">val-type</span>)</span> <span class="syntax-interned-symbol">fn-valued-variable</span>)</span>
</span></code></pre> <br/>has the interpretation that, within the scope of the declaration, it is an error to call the value of fn-valued-variable with arguments not of the specified type; assert that the value resulting from a valid call will be of type val-type. <br/>As with variable type declarations <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">cf</span> <span class="syntax-interned-symbol">DECLARE-TYPE-FREE</span>)</span>
</span></code></pre>, nested declarations imply intersections of types, as follows: <br/>If two <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-or">or</a> <span class="syntax-interned-symbol">more</span>)</span>
</span></code></pre> declarations of the form "ftype" are in effect, <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="declaration-reference" href="../chapter-3.xhtml#declaration-ftype">ftype</a> <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">arg0-type1</span> <span class="syntax-interned-symbol">arg1-type1</span> <span class="syntax-interned-symbol">...</span>)</span> <span class="syntax-interned-symbol">val-type1</span>)</span> <span class="syntax-interned-symbol">f</span>)</span>
</span></code></pre>) and <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="declaration-reference" href="../chapter-3.xhtml#declaration-ftype">ftype</a> <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">arg0-type2</span> <span class="syntax-interned-symbol">arg1-type2</span> <span class="syntax-interned-symbol">...</span>)</span> <span class="syntax-interned-symbol">val-type2</span>)</span> <span class="syntax-interned-symbol">f</span>)</span>
</span></code></pre>) <br/>then within the shared scope of the declarations, calls to f can be treated as if it were declared <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="declaration-reference" href="../chapter-3.xhtml#declaration-ftype">ftype</a> <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> <span class="syntax-cons">(<span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-and">and</a> <span class="syntax-interned-symbol">arg0-type1</span> <span class="syntax-interned-symbol">arg0-type2</span>)</span> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-and">and</a> <span class="syntax-interned-symbol">arg1-type1</span> <span class="syntax-interned-symbol">arg1-type2</span> <span class="syntax-interned-symbol">...</span>)</span> <span class="syntax-interned-symbol">...</span>)</span>
                 <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-and">and</a> <span class="syntax-interned-symbol">val-type1</span> <span class="syntax-interned-symbol">val-type2</span>)</span>)</span> 
       <span class="syntax-interned-symbol">f</span>)</span>
</span></code></pre>) <br/>(It is legitimate to ignore one or all of the declarations in force.) <br/>If two <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-or">or</a> <span class="syntax-interned-symbol">more</span>)</span>
</span></code></pre> type declarations are in effect for a variable, and they are both <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> declarations, the declarations combine similarly. <br/>This proposal does not alter the status <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-or">or</a> <span class="syntax-interned-symbol">lack</span> <span class="syntax-interned-symbol">thereof</span>)</span>
</span></code></pre> of other issues related to <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> type specifiers: what lambda-list keywords mean, what the <a class="function-reference" href="../chapter-5.xhtml#function-values">values</a> type means, what implications there are w.r.t. argument counts, doing multiple <a class="function-reference" href="../chapter-3.xhtml#function-proclaim">proclaim</a>s, doing local <a class="symbol-reference" href="../chapter-3.xhtml#symbol-declare">declare</a>s that shadow other declarations or proclamations, describing generic functions incrementally, the result of <a class="function-reference" href="../chapter-4.xhtml#function-typep">typep</a> with a specialized <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> type, or the nesting and scoping rules for  <a class="declaration-reference" href="../chapter-3.xhtml#declaration-ftype">ftype</a> declarations. <br/></section><section id="section-Example" class="section"><h2 class="section-title">Example</h2><pre>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">FFF</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">F</span>)</span>
    <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-declare">declare</a> <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-25.xhtml#symbol-type">type</a> <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-float">float</a> <a class="function-reference" href="../chapter-16.xhtml#function-string">string</a>)</span> <a class="function-reference" href="../chapter-14.xhtml#function-list">list</a>)</span> <span class="syntax-interned-symbol">F</span>)</span>)</span>
    <span class="syntax-interned-symbol">...</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-funcall">funcall</a> <span class="syntax-interned-symbol">F</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">FOO</span> <span class="syntax-interned-symbol">...</span>)</span> <span class="syntax-interned-symbol">...</span>)</span> <span class="syntax-interned-symbol">...</span> )</span>
</span></code></pre><br/><br/>then #'<a class="function-reference" href="../chapter-14.xhtml#function-cons">cons</a> is a valid argument to be passed to FFF because the declared<br/>type of the argument is consistent with type <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> <span class="syntax-cons">(<a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>)</span> <a class="function-reference" href="../chapter-14.xhtml#function-cons">cons</a>)</span>
</span></code></pre>.<br/>Within FFF, the declaration permits us, for example, to assume that <a class="index/code-reference" href="../chapter-1.xhtml#index/code-foo">foo</a><br/>returns a <a class="function-reference" href="../chapter-12.xhtml#function-float">float</a>. <br/><br/></pre></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>The proposal seems most like what users expect. <br/></section><section id="section-Current Practice" class="section"><h2 class="section-title">Current Practice</h2>VAX <a class="package-reference" href="../chapter-A.xhtml#package-lisp">lisp</a> assumes and makes use of the semantics different than CLtL but not exactly what is specified here. Lucid has a RESTRICTIVE-FTYPE declaration with these semantics and ignores the standard <a class="declaration-reference" href="../chapter-3.xhtml#declaration-ftype">ftype</a> declaration. Gold Hill intends to use these declarations in this manner.  Many implementations don't make use of these declarations.  At least several users make use of declarations assuming the new semantics. <br/></section><section id="section-Cost to Implementors" class="section"><h2 class="section-title">Cost to Implementors</h2>Since most implementations don't make use of function declarations, and since those known to do so can be changed easily, the cost should be minimal. <br/></section><section id="section-Cost to Users" class="section"><h2 class="section-title">Cost to Users</h2>There may be some existing "imprecise" function declarations.  However, the natural tendency when providing these declarations is to be as "descriptive" (i.e., restrictive but complete) as possible, both for documentation purposes as well as for potential compiler benefits. There cannot have been any uses of the specialized <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> type for discrimination. Thus most existing uses are probably compatible with this new definition. <br/></section><section id="section-Cost of Non-Adoption" class="section"><h2 class="section-title">Cost of Non-Adoption</h2>There already exists user code on many implementations that assume the proposed semantics.  Not adopting this proposal would continue to render such code incorrect or at least non-portable. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>Better type checking and more compiler optimizations should be possible. <br/></section><section id="section-Esthetics" class="section"><h2 class="section-title">Esthetics</h2>This is the what most programmers expect the specialized <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> type to mean, particularly those coming from other languages. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>A declaration of  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> <span class="syntax-cons">(<a class="type-reference" href="../chapter-12.xhtml#type-fixnum">fixnum</a> <a class="type-reference" href="../chapter-12.xhtml#type-fixnum">fixnum</a>)</span> <a class="function-reference" href="../chapter-14.xhtml#function-cons">cons</a>)</span>
</span></code></pre> is a not proper global declaration for <a class="function-reference" href="../chapter-14.xhtml#function-cons">cons</a> if any program might call <a class="function-reference" href="../chapter-14.xhtml#function-cons">cons</a> with arguments that are not <a class="type-reference" href="../chapter-12.xhtml#type-fixnum">fixnum</a>. <br/>The list form of the <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> type specifier is different from most type specifiers because it cannot be used for discrimination. Thus, the notion of "subtype" does not make sense, since assertions about the functional value of a variable are only partially about the actual value of the variable and mainly about the values that might be passed to the variables <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a>)</span>
</span></code></pre> value. </section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>