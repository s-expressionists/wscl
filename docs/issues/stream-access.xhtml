<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” STREAM-ACCESS</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">STREAM-ACCESS</span><br/><ol class="local-toc"><li><a href="#section-Status">Status</a><ol> </ol></li><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit History">Edit History</a><ol> </ol></li><li><a href="#section-Problem Description">Problem Description</a><ol> </ol></li><li><a href="#issue-stream-access:add-types-predicates-accessors">Proposal ADD-TYPES-PREDICATES-ACCESSORS</a><ol> </ol></li><li><a href="#issue-stream-access:add-types-accessors">Proposal ADD-TYPES-ACCESSORS</a><ol> </ol></li><li><a href="#issue-stream-access:add-predicates-accessors">Proposal ADD-PREDICATES-ACCESSORS</a><ol> </ol></li><li><a href="#section-Current Practice">Current Practice</a><ol> </ol></li><li><a href="#section-Cost to Implementors">Cost to Implementors</a><ol> </ol></li><li><a href="#section-Cost to Users">Cost to Users</a><ol> </ol></li><li><a href="#section-Cost of Non-Adoption">Cost of Non-Adoption</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue STREAM-ACCESS [Cleanup] [ADDITION]</h1><section id="section-Status" class="status-passed section"><h2 class="section-title">Status</h2>Proposal <a class="proposal-reference" href="#issue-stream-access:add-types-accessors">ADD-TYPES-ACCESSORS</a> passed, Jan 89 X3J13 </section><section id="section-References" class="section"><h2 class="section-title">References</h2>streams (Chapter 21 of CLtL) </section><section id="section-Edit History" class="section"><h2 class="section-title">Edit History</h2>17-Jun-88, version 1 by Walter van Roggen 30-Nov-88, version 2 by Masinter </section><section id="section-Problem Description" class="section"><h2 class="section-title">Problem Description</h2>  There are many components of streams which are specified upon creation   but are not accessible afterwards.  Furthermore there is no way in   Common Lisp to determine the type of a stream to see if it has particular   components, or even if it is <a class="function-reference" href="../chapter-21.xhtml#function-open">OPEN</a>. <br/>  The accessors wanted are those associated with broadcast streams,   concatenated streams, echo streams, file streams, string streams,    synonym streams, two way streams. <br/>  There are three proposals, which differ only by the whether   they include types, type predicates, or both, in addition to   the stream component acessors. Ballots can be either for   one of the proposals or none. (Other combinations of, say,    accessors without either predicates or types, or types without   accessors, do not seem reasonable and are not being proposed   at this time.) <br/></section><section class="status-unknown proposal" id="issue-stream-access:add-types-predicates-accessors"><h2 class="section-title">Proposal ADD-TYPES-PREDICATES-ACCESSORS</h2>First, add a function to determine whether a stream is "<a class="function-reference" href="../chapter-21.xhtml#function-open">OPEN</a>": <br/><a class="function-reference" href="../chapter-21.xhtml#function-open-stream-p">OPEN-STREAM-P</a> stream			[Function] <br/>      Returns <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> if a stream is open, <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> if it is closed.  It is an error       if the argument is not a stream. <br/>    Streams are "open" until they have been closed with     <a class="function-reference" href="../chapter-21.xhtml#function-close">CLOSE</a>, or, the dynamic context of the creating/accessing     macros of  <a class="macro-reference" href="../chapter-21.xhtml#macro-with-output-to-string">WITH-OUTPUT-TO-STRING</a>, <a class="macro-reference" href="../chapter-21.xhtml#macro-with-open-file">WITH-OPEN-FILE</a>,      <a class="macro-reference" href="../chapter-21.xhtml#macro-with-input-from-string">WITH-INPUT-FROM-STRING</a>,  <a class="macro-reference" href="../chapter-21.xhtml#macro-with-open-stream">WITH-OPEN-STREAM</a>,      have been exited. <br/>There are three kinds of things to add associated with each kind of stream: data types, predicates, accessors. <br/>Stream data types:    <a class="type-reference" href="../chapter-21.xhtml#type-broadcast-stream">BROADCAST-STREAM</a> <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">returned</span> <span class="syntax-interned-symbol">by</span> <a class="function-reference" href="../chapter-21.xhtml#function-make-broadcast-stream">MAKE-BROADCAST-STREAM</a>)</span>
</span></code>    <a class="type-reference" href="../chapter-21.xhtml#type-concatenated-stream">CONCATENATED-STREAM</a> <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">returned</span> <span class="syntax-interned-symbol">by</span> <a class="function-reference" href="../chapter-21.xhtml#function-make-concatenated-stream">MAKE-CONCATENATED-STREAM</a>)</span>
</span></code>    <a class="type-reference" href="../chapter-21.xhtml#type-echo-stream">ECHO-STREAM</a> <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">returned</span> <span class="syntax-interned-symbol">by</span> <a class="function-reference" href="../chapter-21.xhtml#function-make-echo-stream">MAKE-ECHO-STREAM</a>)</span>
</span></code>    <a class="type-reference" href="../chapter-21.xhtml#type-file-stream">FILE-STREAM</a> <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">returned</span> <span class="syntax-interned-symbol">by</span> <a class="function-reference" href="../chapter-21.xhtml#function-open">OPEN</a> <a class="macro-reference" href="../chapter-5.xhtml#macro-or">or</a> <span class="syntax-interned-symbol">created</span> <span class="syntax-interned-symbol">by</span> <a class="macro-reference" href="../chapter-21.xhtml#macro-with-open-file">WITH-OPEN-FILE</a>)</span>
</span></code>    <a class="type-reference" href="../chapter-21.xhtml#type-string-stream">STRING-STREAM</a> (returned by <a class="function-reference" href="../chapter-21.xhtml#function-make-string-input-stream">MAKE-STRING-INPUT-STREAM</a>,  	<a class="function-reference" href="../chapter-21.xhtml#function-make-string-output-stream">MAKE-STRING-OUTPUT-STREAM</a>, and created by <a class="macro-reference" href="../chapter-21.xhtml#macro-with-input-from-string">WITH-INPUT-FROM-STRING</a>       and <a class="macro-reference" href="../chapter-21.xhtml#macro-with-output-to-string">WITH-OUTPUT-TO-STRING</a> and <a class="function-reference" href="../chapter-22.xhtml#function-format">FORMAT</a> with second argument <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>)   <a class="type-reference" href="../chapter-21.xhtml#type-synonym-stream">SYNONYM-STREAM</a> <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">created</span> <span class="syntax-interned-symbol">by</span> <a class="function-reference" href="../chapter-21.xhtml#function-make-synonym-stream">MAKE-SYNONYM-STREAM</a>)</span>
</span></code>   <a class="type-reference" href="../chapter-21.xhtml#type-two-way-stream">TWO-WAY-STREAM</a> <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">created</span> <span class="syntax-interned-symbol">by</span>  <a class="function-reference" href="../chapter-21.xhtml#function-make-two-way-stream">MAKE-TWO-WAY-STREAM</a>)</span>
</span></code> <br/>  The stream data types are all subtypes of type <a class="type-reference" href="../chapter-21.xhtml#type-stream">STREAM</a> and are mutually   exclusive. (In particular, a synonym stream is only of type <a class="type-reference" href="../chapter-21.xhtml#type-synonym-stream">SYNONYM-STREAM</a>.) <br/>Stream Predicates: <br/>  Each of these returns <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> if the object is of the corresponding type,   and <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> otherwise. <br/>    BROADCAST-STREAM-P, CONCATENATED-STREAM-P,     ECHO-STREAM-P, FILE-STREAM-P, STRING-STREAM-P,     SYNONYM-STREAM-P, TWO-WAY-STREAM-P <br/>  Note that the predicates do not "follow the link" of a synonym   stream. <br/>Stream Informational Functions: <br/>  <a class="function-reference" href="../chapter-21.xhtml#function-broadcast-stream-streams">BROADCAST-STREAM-STREAMS</a> <a class="type-reference" href="../chapter-21.xhtml#type-broadcast-stream">broadcast-stream</a>       ==&gt; list of streams <br/>      This function returns a list of output streams that constitute       all the streams the broadcast stream is broadcasting to.  It is       an error if the argument is not of type <a class="type-reference" href="../chapter-21.xhtml#type-broadcast-stream">BROADCAST-STREAM</a>. <br/>  <a class="function-reference" href="../chapter-21.xhtml#function-concatenated-stream-streams">CONCATENATED-STREAM-STREAMS</a> <a class="type-reference" href="../chapter-21.xhtml#type-concatenated-stream">concatenated-stream</a> ==&gt; list of streams <br/>      This function returns a list of input streams that constitute       the ordered set of streams the concatenated stream still has to       to read from, starting with the current one it is reading from.       The list may be <code><span class="syntax-root"><span class="syntax-symbol">()</span>
</span></code> if no more streams remain to be read.       It is an error if the argument is not of type <a class="type-reference" href="../chapter-21.xhtml#type-concatenated-stream">CONCATENATED-STREAM</a>. <br/>  <a class="function-reference" href="../chapter-21.xhtml#function-echo-stream-input-stream">ECHO-STREAM-INPUT-STREAM</a> <a class="type-reference" href="../chapter-21.xhtml#type-echo-stream">echo-stream</a>            ==&gt; input-stream   <a class="function-reference" href="../chapter-21.xhtml#function-echo-stream-output-stream">ECHO-STREAM-OUTPUT-STREAM</a> <a class="type-reference" href="../chapter-21.xhtml#type-echo-stream">echo-stream</a>           ==&gt; output-stream <br/>      These functions return the corresponding component stream.  It is       an error if the argument is not of type <a class="type-reference" href="../chapter-21.xhtml#type-echo-stream">ECHO-STREAM</a>. <br/>  <a class="function-reference" href="../chapter-21.xhtml#function-synonym-stream-symbol">SYNONYM-STREAM-SYMBOL</a> <a class="type-reference" href="../chapter-21.xhtml#type-synonym-stream">synonym-stream</a>            ==&gt; symbol <br/>      This function returns the symbol whose <a class="function-reference" href="../chapter-10.xhtml#function-symbol-value">SYMBOL-VALUE</a> the       synonym stream is using.  It is       an error if the argument is not of type <a class="type-reference" href="../chapter-21.xhtml#type-synonym-stream">SYNONYM-STREAM</a>. <br/>  <a class="function-reference" href="../chapter-21.xhtml#function-two-way-stream-input-stream">TWO-WAY-STREAM-INPUT-STREAM</a> <a class="type-reference" href="../chapter-21.xhtml#type-two-way-stream">two-way-stream</a>      ==&gt; input-stream   <a class="function-reference" href="../chapter-21.xhtml#function-two-way-stream-output-stream">TWO-WAY-STREAM-OUTPUT-STREAM</a> <a class="type-reference" href="../chapter-21.xhtml#type-two-way-stream">two-way-stream</a>     ==&gt; output-stream <br/>      These functions return the corresponding component stream.  It is       an error if the argument is not of type <a class="type-reference" href="../chapter-21.xhtml#type-two-way-stream">TWO-WAY-STREAM</a>. <br/></section><section class="status-passed proposal" id="issue-stream-access:add-types-accessors"><h2 class="section-title">Proposal ADD-TYPES-ACCESSORS</h2>Identical to <a class="proposal-reference" href="#issue-stream-access:add-types-predicates-accessors">ADD-TYPES-PREDICATES-ACCESSORS</a> except to leave out the  stream type predicates. <br/></section><section class="status-unknown proposal" id="issue-stream-access:add-predicates-accessors"><h2 class="section-title">Proposal ADD-PREDICATES-ACCESSORS</h2>Identical to <a class="proposal-reference" href="#issue-stream-access:add-types-predicates-accessors">ADD-TYPES-PREDICATES-ACCESSORS</a> except to not identify new data types. The accessors act as if the types were specified (i.e., are mutually excusive). <br/></section><section id="section-Current Practice" class="section"><h2 class="section-title">Current Practice</h2>VAX <a class="package-reference" href="../chapter-A.xhtml#package-lisp">LISP</a> implements <a class="proposal-reference" href="#issue-stream-access:add-types-predicates-accessors">ADD-TYPES-PREDICATES-ACCESSORS</a>.  We have not surveyed other implementations.  <br/></section><section id="section-Cost to Implementors" class="section"><h2 class="section-title">Cost to Implementors</h2>  All of the proposals are reasonably simple to implement, since the information   must be present for nearly all types.  <br/></section><section id="section-Cost to Users" class="section"><h2 class="section-title">Cost to Users</h2>  The proposals are upward-compatible, and should have little impact. <br/></section><section id="section-Cost of Non-Adoption" class="section"><h2 class="section-title">Cost of Non-Adoption</h2>  The benefits would not be available in a portable fashion. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>  Programs would be able to access useful information otherwise hidden. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>  This issue has come up frequently, particularly dealing with <a class="type-reference" href="../chapter-21.xhtml#type-synonym-stream">SYNONYM-STREAM</a>s. <br/>  The behavior of <a class="function-reference" href="../chapter-21.xhtml#function-open-stream-p">OPEN-STREAM-P</a> on, for example, broadcast streams, might   be specified in a variety of alternative ways. This specification seems the simplest. <br/>  There are three proposals for voting because there was no agreement at the   October X3J13 on the issue of whether types, predicates, or both should be  added. <br/>  There was a proposal at one time to add a new function FOLLOW-SYNONYM-STREAM   which could be written as    <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">follow-synonym-stream</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span>)</span>
     <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">synonym-stream-p</span> <span class="syntax-interned-symbol">x</span>)</span>
         <span class="syntax-cons">(<span class="syntax-interned-symbol">follow-synonym-stream</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-10.xhtml#function-symbol-value">symbol-value</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-21.xhtml#function-synonym-stream-symbol">synonym-stream-symbol</a> <span class="syntax-interned-symbol">x</span>)</span>)</span>)</span>
         <span class="syntax-interned-symbol">x</span>)</span>)</span>
</span></code></pre> <br/>  i.e., which chases through zero or more synonym stream indirections. </section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>