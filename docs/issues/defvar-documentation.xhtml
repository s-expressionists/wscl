<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp — DEFVAR-DOCUMENTATION</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">DEFVAR-DOCUMENTATION</span><br/><ol class="local-toc"><li><a href="#section-Status">Status</a><ol> </ol></li><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit history">Edit history</a><ol> </ol></li><li><a href="#section-Problem Description">Problem Description</a><ol> </ol></li><li><a href="#issue-defvar-documentation:unevaluated">Proposal UNEVALUATED</a><ol> </ol></li><li><a href="#section-Examples">Examples</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Current Practice">Current Practice</a><ol> </ol></li><li><a href="#section-Cost to implementors">Cost to implementors</a><ol> </ol></li><li><a href="#section-Cost to users">Cost to users</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Aesthetics">Aesthetics</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue DEFVAR-DOCUMENTATION [NIL] [CLARIFICATION]</h1><section id="section-Status" class="status-passed section"><h2 class="section-title">Status</h2>Passed, March 1988 </section><section id="section-References" class="section"><h2 class="section-title">References</h2><a class="macro-reference" href="../chapter-5.xhtml#macro-defvar">DEFVAR</a>, <a class="macro-reference" href="../chapter-5.xhtml#macro-defparameter">DEFPARAMETER</a>, <a class="macro-reference" href="../chapter-5.xhtml#macro-defconstant">DEFCONSTANT</a> (pp68-9) </section><section id="section-Edit history" class="section"><h2 class="section-title">Edit history</h2>30-Jun-87, Version 1 by Pitman 23-Nov-87, Version 2 by Masinter </section><section id="section-Problem Description" class="section"><h2 class="section-title">Problem Description</h2>CLtL is not explicit about whether the documentation part of <a class="macro-reference" href="../chapter-5.xhtml#macro-defvar">DEFVAR</a>, <a class="macro-reference" href="../chapter-5.xhtml#macro-defparameter">DEFPARAMETER</a>, and <a class="macro-reference" href="../chapter-5.xhtml#macro-defconstant">DEFCONSTANT</a> special forms is evaluated. <br/></section><section class="status-passed proposal" id="issue-defvar-documentation:unevaluated"><h2 class="section-title">Proposal UNEVALUATED</h2>Clarify that the documentation part of <a class="macro-reference" href="../chapter-5.xhtml#macro-defvar">DEFVAR</a>, <a class="macro-reference" href="../chapter-5.xhtml#macro-defparameter">DEFPARAMETER</a>, and <a class="macro-reference" href="../chapter-5.xhtml#macro-defconstant">DEFCONSTANT</a> special forms is not evaluated. That is, it must be a literal string, not a form which evaluates to a string. <br/></section><section id="section-Examples" class="section"><h2 class="section-title">Examples</h2><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defvar">DEFVAR</a> <span class="syntax-interned-symbol">*MY-VARIABLE*</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">CONSTRUCT-INITIAL-VALUE</span>)</span> <span class="syntax-string">"A documentation string"</span>)</span>
</span></code>  ; OK<br/><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defvar">DEFVAR</a> <span class="syntax-interned-symbol">*MY-VARIABLE*</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">CONSTRUCT-INITIAL-VALUE</span>)</span> <span class="syntax-interned-symbol">GENERIC-DOCUMENTATION-STRING</span>)</span>
</span></code>  ; would be an error<br/><br/></pre></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>To ensure portability, implementations must agree on whether or not this position is evaluated. Specifying that the position is unevaluated is the conservative thing to suggest, and consistent with the <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">unevaluated</span>)</span>
</span></code> documentation strings in <a class="macro-reference" href="../chapter-5.xhtml#macro-defun">DEFUN</a>, <a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">DEFSTRUCT</a>. <br/></section><section id="section-Current Practice" class="section"><h2 class="section-title">Current Practice</h2>Some implementations evaluate this position. Others do not.  <br/></section><section id="section-Cost to implementors" class="section"><h2 class="section-title">Cost to implementors</h2>Implementations that did not already check might usefully add a check in the macro expansion for <a class="macro-reference" href="../chapter-5.xhtml#macro-defvar">DEFVAR</a>, <a class="macro-reference" href="../chapter-5.xhtml#macro-defparameter">DEFPARAMETER</a> and <a class="macro-reference" href="../chapter-5.xhtml#macro-defconstant">DEFCONSTANT</a> to assert that the <a class="function-reference" href="../chapter-25.xhtml#function-documentation">DOCUMENTATION</a>, if supplied, was a string. The change is likely trivial. <br/></section><section id="section-Cost to users" class="section"><h2 class="section-title">Cost to users</h2>Code which uses other than a literal string is not portable, so no portable programs will be broken. Some non-portable programs which rely on a particular vendor's interpretation would have to be rewritten. Automatic tools to detect most offending cases could trivially be constructed. (We know of no current uses.) <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>Code portability would be improved. Some programming environment tools might assume that documentation strings were determinable without evaluation. <br/></section><section id="section-Aesthetics" class="section"><h2 class="section-title">Aesthetics</h2>Slight improvement; this implies consistent treatment for documentation strings in all defining forms. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>We think this is a good idea. <br/></section></div></main><footer>Copyright © 2021 Jan Moringen</footer></body></html>