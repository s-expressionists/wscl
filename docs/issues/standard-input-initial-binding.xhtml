<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” STANDARD-INPUT-INITIAL-BINDING</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">STANDARD-INPUT-INITIAL-BINDING</span><br/><ol class="local-toc"><li><a href="#section-Status">Status</a><ol> </ol></li><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit history">Edit history</a><ol> </ol></li><li><a href="#section-Problem description">Problem description</a><ol> </ol></li><li><a href="#issue-standard-input-initial-binding:defined-contracts">Proposal DEFINED-CONTRACTS</a><ol> </ol></li><li><a href="#section-Examples">Examples</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Current practice">Current practice</a><ol> </ol></li><li><a href="#section-Cost to Implementors">Cost to Implementors</a><ol> </ol></li><li><a href="#section-Cost to Users">Cost to Users</a><ol> </ol></li><li><a href="#section-Cost of non-Adoption">Cost of non-Adoption</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Aesthetics">Aesthetics</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue STANDARD-INPUT-INITIAL-BINDING [NIL] [CHANGE]</h1><section id="section-Status" class="status-passed section"><h2 class="section-title">Status</h2>Passed, Jan 89 X3J13 </section><section id="section-References" class="section"><h2 class="section-title">References</h2>Standard streams (pp. 327-329) </section><section id="section-Edit history" class="section"><h2 class="section-title">Edit history</h2>Version 1 by Pierson and Haflich 1/19/87 Version 2 by Pierson 2/29/88 Version 3 by Pierson 5/23/88, per comments by Moon Version 4 by Pierson 5/26/88, clean up Version 5 by Pierson 6/28/88, simple design per Masinter Version 6 by Pierson 7<a class="function-reference" href="../chapter-12.xhtml#function-/">/</a> 5/88, clean up and split issue Version 7 by Pierson 7<a class="function-reference" href="../chapter-12.xhtml#function-/">/</a> 8/88, clean up per Pitman Version 8 by Pierson 7<a class="function-reference" href="../chapter-12.xhtml#function-/">/</a> 8/88, yet more clean up </section><section id="section-Problem description" class="section"><h2 class="section-title">Problem description</h2>CLtL requires that <a class="variable-reference" href="../chapter-21.xhtml#variable-*standard-input*">*standard-input*</a>, <a class="variable-reference" href="../chapter-21.xhtml#variable-*standard-output*">*standard-output*</a>, <a class="variable-reference" href="../chapter-21.xhtml#variable-*error-output*">*error-output*</a>, <a class="variable-reference" href="../chapter-21.xhtml#variable-*trace-output*">*trace-output*</a>, <a class="variable-reference" href="../chapter-21.xhtml#variable-*query-io*">*query-io*</a>, and <a class="variable-reference" href="../chapter-21.xhtml#variable-*debug-io*">*debug-io*</a> are initially bound to synonym streams to <a class="variable-reference" href="../chapter-21.xhtml#variable-*terminal-io*">*terminal-io*</a>.  This requirement hampers the integration of Common Lisp with many existing and potential operating environments. <br/>For example, a Unix implementation is currently unable to legally support Unix standard error output even though Common Lisp defines <a class="variable-reference" href="../chapter-21.xhtml#variable-*error-output*">*error-output*</a> because <a class="variable-reference" href="../chapter-21.xhtml#variable-*error-output*">*error-output*</a> is required to start out bound to the same stream as <a class="variable-reference" href="../chapter-21.xhtml#variable-*standard-output*">*standard-output*</a>.  A workstation environnment which provides stream access to windows as an extension is currently forbidden to make trace output appear in a separate window by default because <a class="variable-reference" href="../chapter-21.xhtml#variable-*trace-output*">*trace-output*</a> is required to start out bound to the same stream as <a class="variable-reference" href="../chapter-21.xhtml#variable-*standard-output*">*standard-output*</a>. <br/></section><section class="status-passed proposal" id="issue-standard-input-initial-binding:defined-contracts"><h2 class="section-title">Proposal DEFINED-CONTRACTS</h2>A Common Lisp implementation is required to provide the following initial streams.  Each initial stream has a specific purpose as defined in CLtL.  This proposal redefines the initial bindings of the streams and leaves the rest of the CLtL description unchanged. <br/>    <a class="variable-reference" href="../chapter-21.xhtml#variable-*terminal-io*">*terminal-io*</a>     <a class="variable-reference" href="../chapter-21.xhtml#variable-*standard-input*">*standard-input*</a>     <a class="variable-reference" href="../chapter-21.xhtml#variable-*standard-output*">*standard-output*</a>     <a class="variable-reference" href="../chapter-21.xhtml#variable-*error-output*">*error-output*</a>     <a class="variable-reference" href="../chapter-21.xhtml#variable-*trace-output*">*trace-output*</a>     <a class="variable-reference" href="../chapter-21.xhtml#variable-*query-io*">*query-io*</a>     <a class="variable-reference" href="../chapter-21.xhtml#variable-*debug-io*">*debug-io*</a> <br/>    	The initial bindings of these variables are undefined except 	that: 	    1. They are all initially bound to open streams. 	    2. The streams must support input and/or output as 	       indicated by the variable name.     	    3. None of the standard streams <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">including</span> <a class="variable-reference" href="../chapter-21.xhtml#variable-*terminal-io*">*terminal-io*</a>)</span>
</span></code> 	       may be directed by synonym streams to another of these 	       stream variables <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">except</span> <a class="variable-reference" href="../chapter-21.xhtml#variable-*terminal-io*">*terminal-io*</a>)</span>
</span></code>, whether 	       directly or by indirection via some composite stream 	       such as a two way stream with one of the arms being a 	       synonym stream. 	    4. Any or all of these streams may be synonyms for the 	       common implementation dependent stream.  For example, 	       in an interactive Common Lisp invocation running on a 	       character terminal, all of the streams mentioned here 	       might be synonym streams <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-or">or</a> <span class="syntax-interned-symbol">two-way</span> <span class="syntax-interned-symbol">streams</span> <span class="syntax-interned-symbol">to</span> <span class="syntax-interned-symbol">synonym</span>
	       <span class="syntax-interned-symbol">streams</span>)</span>
</span></code></pre> to a pair of hidden terminal input/output 	       streams maintained by the implementation. <br/>	The intent of the above rules is to ensure that it is always 	safe to bind any of the above variables to another of the 	above variables without unduly restricting implementation 	flexibility. <br/></section><section id="section-Examples" class="section"><h2 class="section-title">Examples</h2><pre><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-progn">progn</a>
   <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-print">print</a> <span class="syntax-string">"Output"</span> <a class="variable-reference" href="../chapter-21.xhtml#variable-*standard-output*">*standard-output*</a>)</span>
   <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-print">print</a> <span class="syntax-string">"Error"</span> <a class="variable-reference" href="../chapter-21.xhtml#variable-*error-output*">*error-output*</a>)</span>)</span>
</span></code></pre><br/><br/>In current Common Lisp will write:<br/>    &mdash;&mdash;<br/>    Output<br/>    Error<br/>    &mdash;&mdash;<br/><br/>With proposal *might* write:<br/>    &mdash;&mdash;<br/>    Output<br/>    &mdash;&mdash;<br/>    and "Error" appears somewhere else.<br/><br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<a class="variable-reference" href="../chapter-21.xhtml#variable-*standard-output*">*standard-output*</a> <a class="variable-reference" href="../chapter-21.xhtml#variable-*debug-io*">*debug-io*</a>)</span>)</span>
  <span class="syntax-interned-symbol">...</span>)</span>
</span></code></pre><br/><br/>In current Common Lisp: <br/>    Might cause a circular stream reference if <a class="variable-reference" href="../chapter-21.xhtml#variable-*debug-io*">*debug-io*</a> was<br/>    bound to a two-way stream made up of synonym streams to<br/>    <a class="variable-reference" href="../chapter-21.xhtml#variable-*standard-input*">*standard-input*</a> and <a class="variable-reference" href="../chapter-21.xhtml#variable-*standard-output*">*standard-output*</a>.<br/><br/>With this proposal:<br/>    Would be guaranteed not to cause a circular stream reference<br/>    unless the initial value of <a class="variable-reference" href="../chapter-21.xhtml#variable-*debug-io*">*debug-io*</a> had been changed to a value<br/>    that did not conform the restrictions in this proposal.  While no<br/>    Common Lisp implementation should do this, a user program might.<br/><br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<a class="variable-reference" href="../chapter-21.xhtml#variable-*standard-input*">*standard-input*</a>  <a class="variable-reference" href="../chapter-21.xhtml#variable-*terminal-io*">*terminal-io*</a>)</span>
      <span class="syntax-cons">(<a class="variable-reference" href="../chapter-21.xhtml#variable-*standard-output*">*standard-output*</a> <a class="variable-reference" href="../chapter-21.xhtml#variable-*terminal-io*">*terminal-io*</a>)</span>)</span>
  <span class="syntax-interned-symbol">...</span>)</span>
</span></code></pre><br/><br/>In current Common Lisp: <br/>    Might cause a circular stream reference because <a class="variable-reference" href="../chapter-21.xhtml#variable-*terminal-io*">*terminal-io*</a> was<br/>    bound to a two-way stream made up of synonym streams to<br/>    <a class="variable-reference" href="../chapter-21.xhtml#variable-*standard-input*">*standard-input*</a> and <a class="variable-reference" href="../chapter-21.xhtml#variable-*standard-output*">*standard-output*</a>.<br/><br/>With this proposal:<br/>    Would be guaranteed not to cause a circular stream reference.<br/><br/></pre></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>This proposal attempts to provide a balance between over-specifying behavior to the point that Lisp programs can't behave like other programs in conventional operating systems and providing enough specification that Common Lisp programs can perform portable input and output. <br/></section><section id="section-Current practice" class="section"><h2 class="section-title">Current practice</h2>Lucid binds <a class="variable-reference" href="../chapter-21.xhtml#variable-*terminal-io*">*terminal-io*</a> to a special internal stream type.  Franz binds <a class="variable-reference" href="../chapter-21.xhtml#variable-*terminal-io*">*terminal-io*</a> to a special internal stream type for terminal streams which reads from Unix standard input and writes to Unix standard output.  KCL binds <a class="variable-reference" href="../chapter-21.xhtml#variable-*terminal-io*">*terminal-io*</a> to a standard <a class="type-reference" href="../chapter-21.xhtml#type-two-way-stream">two-way-stream</a> with input from Unix standard input and output to Unix standard output.  Symbolics Genera binds <a class="variable-reference" href="../chapter-21.xhtml#variable-*terminal-io*">*terminal-io*</a> as appropriate for each process, usually to a window for interactive applications or to a stream which will conjure an interaction window on demand for background tasks. <br/></section><section id="section-Cost to Implementors" class="section"><h2 class="section-title">Cost to Implementors</h2>All implementations will have to change to some degree but the changes will probably be simple and localized.  All known implementations already support the underlying streams required to implement this proposal. <br/></section><section id="section-Cost to Users" class="section"><h2 class="section-title">Cost to Users</h2>User code which depends on the strict binding hierarchy in CLtL may have to change.   <br/></section><section id="section-Cost of non-Adoption" class="section"><h2 class="section-title">Cost of non-Adoption</h2>It will continue to be difficult or impossible to integrate portable Common Lisp progams in conventional operating system environments. Many implementations will have to continue to choose between conforming to the standard and providing a superior user environment. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>Implementations will be more able to match their IO behavior to their environment and their user's expectations. <br/></section><section id="section-Aesthetics" class="section"><h2 class="section-title">Aesthetics</h2>Improved because this area becomes better defined. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>Moon says that <a class="variable-reference" href="../chapter-21.xhtml#variable-*terminal-io*">*terminal-io*</a> (and, by extension, <a class="variable-reference" href="../chapter-21.xhtml#variable-*query-io*">*query-io*</a>, and <a class="variable-reference" href="../chapter-21.xhtml#variable-*debug-io*">*debug-io*</a>) should fail to work in a non-interactive environment where nothing like a terminal exists.  This proposal fails to address this. <br/>Masinter notes that:     ``In many multi-processing multi-window environments,       the "initial binding" for <a class="variable-reference" href="../chapter-21.xhtml#variable-*standard-input*">*standard-input*</a>, *QUERY-INPUT*       differs for each process.''   <br/>Pierson and Pitman support <a class="issue-reference" href="#issue-standard-input-initial-binding:defined-contracts">STANDARD-INPUT-INITIAL-BINDING:DEFINED-CONTRACTS</a>. </section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>