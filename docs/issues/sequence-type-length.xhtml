<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” SEQUENCE-TYPE-LENGTH</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">SEQUENCE-TYPE-LENGTH</span><br/><ol class="local-toc"><li><a href="#section-Status">Status</a><ol> </ol></li><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit history">Edit history</a><ol> </ol></li><li><a href="#section-Problem description">Problem description</a><ol> </ol></li><li><a href="#issue-sequence-type-length:must-match">Proposal MUST-MATCH</a><ol> </ol></li><li><a href="#section-Examples">Examples</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Current practice">Current practice</a><ol> </ol></li><li><a href="#section-Cost to Implementors">Cost to Implementors</a><ol> </ol></li><li><a href="#section-Cost to Users">Cost to Users</a><ol> </ol></li><li><a href="#section-Cost of non-adoption">Cost of non-adoption</a><ol> </ol></li><li><a href="#section-Performance impact">Performance impact</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Esthetics">Esthetics</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue SEQUENCE-TYPE-LENGTH [NIL] [CLARIFICATION]</h1><section id="section-Status" class="status-passed section"><h2 class="section-title">Status</h2>Passed, Jun 89 X3J13 </section><section id="section-References" class="section"><h2 class="section-title">References</h2>CLtL p.51, p.249, p.260, p.252, p.354 <a class="function-reference" href="../chapter-17.xhtml#function-concatenate">concatenate</a>, <a class="function-reference" href="../chapter-4.xhtml#function-coerce">coerce</a>, <a class="function-reference" href="../chapter-17.xhtml#function-make-sequence">make-sequence</a>, <a class="function-reference" href="../chapter-17.xhtml#function-map">map</a>, <a class="function-reference" href="../chapter-17.xhtml#function-merge">merge</a> </section><section id="section-Edit history" class="section"><h2 class="section-title">Edit history</h2>16-Jun-89, version 1, by Moon </section><section id="section-Problem description" class="section"><h2 class="section-title">Problem description</h2>  In several functions that take a type specifier as an argument and create   a sequence of the specified type, it isn't clear what happens if the type   specifier has an explicit length that doesn't match the length implied by   the other arguments. <br/></section><section class="status-passed proposal" id="issue-sequence-type-length:must-match"><h2 class="section-title">Proposal MUST-MATCH</h2>  <a class="function-reference" href="../chapter-4.xhtml#function-coerce">coerce</a> should signal an error if the new sequence type specifies the   number of elements and the old sequence has a different length. <br/>  <a class="function-reference" href="../chapter-17.xhtml#function-make-sequence">make-sequence</a> should signal an error if the sequence type specifies the   number of elements and the size argument is different. <br/>  <a class="function-reference" href="../chapter-17.xhtml#function-concatenate">concatenate</a> should signal an error if the sequence type specifies the   number of elements and the sum of the argument lengths is different. <br/>  <a class="function-reference" href="../chapter-17.xhtml#function-map">map</a> should signal an error if the sequence type specifies the number of   elements and the minimum of the argument lengths is different. <br/>  <a class="function-reference" href="../chapter-17.xhtml#function-merge">merge</a> should signal an error if the sequence type specifies the number of   elements and the sum of the lengths of the two sequence arguments is   different. <br/></section><section id="section-Examples" class="section"><h2 class="section-title">Examples</h2><pre>  ;; All of the following forms should signal an error<br/>  <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-4.xhtml#function-coerce">coerce</a> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span>)</span></span> <span class="syntax-quote">'<span class="syntax-cons">(<a class="function-reference" href="../chapter-15.xhtml#function-vector">vector</a> <a class="function-reference" href="../chapter-12.xhtml#function-*">*</a> <span class="syntax-number">4</span>)</span></span>)</span>
</span></code><br/>  <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-4.xhtml#function-coerce">coerce</a> <span class="syntax-vector">#(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span>)</span> <span class="syntax-quote">'<span class="syntax-cons">(<a class="function-reference" href="../chapter-15.xhtml#function-vector">vector</a> <a class="function-reference" href="../chapter-12.xhtml#function-*">*</a> <span class="syntax-number">4</span>)</span></span>)</span>
</span></code><br/>  <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-4.xhtml#function-coerce">coerce</a> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span>)</span></span> <span class="syntax-quote">'<span class="syntax-cons">(<a class="function-reference" href="../chapter-15.xhtml#function-vector">vector</a> <a class="function-reference" href="../chapter-12.xhtml#function-*">*</a> <span class="syntax-number">2</span>)</span></span>)</span>
</span></code><br/>  <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-4.xhtml#function-coerce">coerce</a> <span class="syntax-vector">#(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span>)</span> <span class="syntax-quote">'<span class="syntax-cons">(<a class="function-reference" href="../chapter-15.xhtml#function-vector">vector</a> <a class="function-reference" href="../chapter-12.xhtml#function-*">*</a> <span class="syntax-number">2</span>)</span></span>)</span>
</span></code><br/>  <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-4.xhtml#function-coerce">coerce</a> <span class="syntax-string">"foo"</span> <span class="syntax-quote">'<span class="syntax-cons">(<a class="function-reference" href="../chapter-16.xhtml#function-string">string</a> <span class="syntax-number">2</span>)</span></span>)</span>
</span></code><br/>  <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-4.xhtml#function-coerce">coerce</a> <span class="syntax-vector">#(<span class="syntax-character">#\a</span> <span class="syntax-character">#\b</span> <span class="syntax-character">#\c</span>)</span> <span class="syntax-quote">'<span class="syntax-cons">(<a class="function-reference" href="../chapter-16.xhtml#function-string">string</a> <span class="syntax-number">2</span>)</span></span>)</span>
</span></code><br/>  <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-4.xhtml#function-coerce">coerce</a> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-number">0</span> <span class="syntax-number">1</span>)</span></span> <span class="syntax-quote">'<span class="syntax-cons">(<a class="symbol-reference" href="../chapter-2.xhtml#symbol-simple-bit-vector">simple-bit-vector</a> <span class="syntax-number">3</span>)</span></span>)</span>
</span></code><br/>  <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-17.xhtml#function-make-sequence">make-sequence</a> <span class="syntax-quote">'<span class="syntax-cons">(<a class="function-reference" href="../chapter-15.xhtml#function-vector">vector</a> <a class="function-reference" href="../chapter-12.xhtml#function-*">*</a> <span class="syntax-number">2</span>)</span></span> <span class="syntax-number">3</span>)</span>
</span></code><br/>  <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-17.xhtml#function-make-sequence">make-sequence</a> <span class="syntax-quote">'<span class="syntax-cons">(<a class="function-reference" href="../chapter-15.xhtml#function-vector">vector</a> <a class="function-reference" href="../chapter-12.xhtml#function-*">*</a> <span class="syntax-number">4</span>)</span></span> <span class="syntax-number">3</span>)</span>
</span></code><br/>  <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-17.xhtml#function-concatenate">concatenate</a> <span class="syntax-quote">'<span class="syntax-cons">(<a class="function-reference" href="../chapter-15.xhtml#function-vector">vector</a> <a class="function-reference" href="../chapter-12.xhtml#function-*">*</a> <span class="syntax-number">2</span>)</span></span> <span class="syntax-string">"a"</span> <span class="syntax-string">"bc"</span>)</span>
</span></code><br/>  <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-17.xhtml#function-map">map</a> <span class="syntax-quote">'<span class="syntax-cons">(<a class="function-reference" href="../chapter-15.xhtml#function-vector">vector</a> <a class="function-reference" href="../chapter-12.xhtml#function-*">*</a> <span class="syntax-number">4</span>)</span></span> <span class="syntax-function">#'<a class="function-reference" href="../chapter-14.xhtml#function-cons">cons</a></span> <span class="syntax-string">"abc"</span> <span class="syntax-string">"de"</span>)</span>
</span></code><br/>  <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-17.xhtml#function-merge">merge</a> <span class="syntax-quote">'<span class="syntax-cons">(<a class="function-reference" href="../chapter-15.xhtml#function-vector">vector</a> <a class="function-reference" href="../chapter-12.xhtml#function-*">*</a> <span class="syntax-number">4</span>)</span></span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">5</span>)</span></span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-number">2</span> <span class="syntax-number">4</span> <span class="syntax-number">6</span>)</span></span> <span class="syntax-function">#'<a class="function-reference" href="../chapter-12.xhtml#function-&lt;">&lt;</a></span>)</span>
</span></code><br/><br/></pre></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>  If CLtL hadn't overlooked this situation, it's likely that it would have   said it "is an error".  The best translation of that to ANSI <a class="package-reference" href="../chapter-11.xhtml#package-cl">cl</a> error   terminology seemed to be "should signal".  There doesn't seem to be any   reason to require signalling this error even in unsafe code.  There   doesn't seem to be any reason to define this situation to do something   other than signalling an error, such as ignoring the length in the   type specifier or forcing the sequence to have the correct length by   truncating or extending it with elements of <a class="glossary-reference" href="../chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a>   value. <br/></section><section id="section-Current practice" class="section"><h2 class="section-title">Current practice</h2>  Symbolics Genera 7.2 and 7.4 usually ignore the length in the type   specifier in the above situations, but sometimes signal an error.   The type of error signalled is sometimes somewhat random.   Other implementations were not surveyed. <br/></section><section id="section-Cost to Implementors" class="section"><h2 class="section-title">Cost to Implementors</h2>  This does not seem like difficult checking to add.  I have not examined   the code in any implementation to try to evaluate what it would cost. <br/></section><section id="section-Cost to Users" class="section"><h2 class="section-title">Cost to Users</h2>  None. <br/></section><section id="section-Cost of non-adoption" class="section"><h2 class="section-title">Cost of non-adoption</h2>  Aesthetic. <br/></section><section id="section-Performance impact" class="section"><h2 class="section-title">Performance impact</h2>  Probably small, just have to keep track of the length when dealing   with sequence type specifiers in safe code.  I have not attempted to   evaluate the exact impact. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>  Less ambiguity in the language specification.  Less deviation among   implementations, hence fewer porting problems. <br/></section><section id="section-Esthetics" class="section"><h2 class="section-title">Esthetics</h2>  Since the length field is present in sequence type specifiers, it   seems unesthetic to ignore it, and even more unesthetic not to say   what is done with it. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>  Moon doesn't know what error condition is appropriate.  <a class="type-reference" href="../chapter-4.xhtml#type-type-error">type-error</a>   doesn't seem quite appropriate here.  One idea is not to say, just let it   be any subtype of <a class="function-reference" href="../chapter-9.xhtml#function-error">error</a>.  Another idea is to produce the result object   and then signal a <a class="type-reference" href="../chapter-4.xhtml#type-type-error">type-error</a> that this object doesn't match the   type-specifier for the result type. <br/>  Cassels points out that two similar operations are defined in CLtL to be   inconsistent with each other: <br/>  <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-17.xhtml#function-replace">replace</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-15.xhtml#function-make-array">make-array</a> <span class="syntax-number">4</span>)</span> <span class="syntax-vector">#(<span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">3</span>)</span>)</span>
</span></code> just picks the shortest length, and      "the extra elements near the end of the longer subsequence are not      involved in the operation" so the result is #<code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">3</span> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>)</span>
</span></code> <br/>  #4<code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">3</span>)</span>
</span></code> duplicates the last element, so it's like #<code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">3</span> <span class="syntax-number">3</span>)</span>
</span></code>   #2<code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">3</span>)</span>
</span></code> "is an error". <br/></section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>