<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” GET-SETF-METHOD-ENVIRONMENT</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">GET-SETF-METHOD-ENVIRONMENT</span><br/><ol class="local-toc"><li><a href="#section-Status">Status</a><ol> </ol></li><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit History">Edit History</a><ol> </ol></li><li><a href="#section-Problem Description">Problem Description</a><ol> </ol></li><li><a href="#issue-get-setf-method-environment:add-arg">Proposal ADD-ARG</a><ol> </ol></li><li><a href="#section-Test Case">Test Case</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Current Practice">Current Practice</a><ol> </ol></li><li><a href="#section-Cost to implementors">Cost to implementors</a><ol> </ol></li><li><a href="#section-Cost to users">Cost to users</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Aesthetics">Aesthetics</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue GET-SETF-METHOD-ENVIRONMENT [NIL] [Change]</h1><section id="section-Status" class="status-passed section"><h2 class="section-title">Status</h2>Passed, 1988? (Not sure which meeting) </section><section id="section-References" class="section"><h2 class="section-title">References</h2>GET-SETF-METHOD (CLtL p 187) </section><section id="section-Edit History" class="section"><h2 class="section-title">Edit History</h2>Version 1 9-Jan-87, Version 1 by Masinter  (no version) 7-Apr-87, merged with ENVIRONMENT-ARGUMENTS Version 2 29-May-87, extracted again  Version 3  5-Jun-87, by Masinter Version 4  11-Jun-87, for release Version 5  13-Jul-87, by Masinter </section><section id="section-Problem Description" class="section"><h2 class="section-title">Problem Description</h2>If a macro that performs similar processing to <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> uses GET-SETF-METHOD, and that macro occurs within a <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-macrolet">macrolet</a>, the expansion will not see the <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-macrolet">macrolet</a> definition, e.g., <br/> <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-3.xhtml#macro-defmacro">defmacro</a> <span class="syntax-interned-symbol">special-incf</span> <span class="syntax-interned-symbol">...</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">get-setf-method</span> <span class="syntax-interned-symbol">...</span>)</span> <span class="syntax-interned-symbol">...</span>)</span>
</span></code> <br/>then   <br/> <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-macrolet">macrolet</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">test</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-car">car</a> <span class="syntax-unquote">,<span class="syntax-interned-symbol">x</span></span>)</span></span>)</span>)</span>
         <span class="syntax-cons">(<span class="syntax-interned-symbol">special-incf</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">test</span> <span class="syntax-interned-symbol">z</span>)</span>)</span>)</span>
</span></code></pre> <br/>would not "see" the test definition. <br/></section><section class="status-passed proposal" id="issue-get-setf-method-environment:add-arg"><h2 class="section-title">Proposal ADD-ARG</h2>Add an optional environment argument to GET-SETF-METHOD and GET-SETF-METHOD-MULTIPLE-VALUE. If the argument is not supplied, it defaults to the null lexical environment. <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> can also be passed explicitly to denote the null lexical environment. <br/>Allow <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-environment">&amp;ENVIRONMENT</a> variable to appear in the lambda-list subform of a DEFINE-SETF-METHOD form, as with a <a class="macro-reference" href="../chapter-3.xhtml#macro-defmacro">defmacro</a>. <br/>Note that macros defined with <a class="macro-reference" href="../chapter-5.xhtml#macro-define-modify-macro">define-modify-macro</a> correctly pass the environment to GET-SETF-METHOD. <br/>Clarify that, within the scope of a <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-macrolet">macrolet</a>, <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-flet">flet</a> and <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-labels">labels</a>, global <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> definitions of the name defined by the <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-macrolet">macrolet</a>, <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-flet">flet</a> or <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-labels">labels</a> do not apply.  A <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> method applies only when the global function binding of the name is lexically visible.  All of the built in macros of Common Lisp (<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a>, <a class="macro-reference" href="../chapter-12.xhtml#macro-incf">incf</a>, <a class="macro-reference" href="../chapter-12.xhtml#macro-decf">decf</a>, <a class="macro-reference" href="../chapter-14.xhtml#macro-pop">pop</a>, <a class="macro-reference" href="../chapter-5.xhtml#macro-rotatef">rotatef</a>, etc.) which modify location specifications obey this convention. <br/></section><section id="section-Test Case" class="section"><h2 class="section-title">Test Case</h2><pre>;;; This macro is like <a class="macro-reference" href="../chapter-14.xhtml#macro-pop">pop</a> <br/><br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-3.xhtml#macro-defmacro">defmacro</a> <span class="syntax-interned-symbol">xpop</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">place</span> <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-environment">&amp;ENVIRONMENT</a> <span class="syntax-interned-symbol">env</span>)</span>
  <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-multiple-value-bind">multiple-value-bind</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">dummies</span> <span class="syntax-interned-symbol">vals</span> <span class="syntax-interned-symbol">new</span> <span class="syntax-interned-symbol">setter</span> <span class="syntax-interned-symbol">getter</span>)</span>
                       <span class="syntax-cons">(<span class="syntax-interned-symbol">get-setf-method</span> <span class="syntax-interned-symbol">place</span> <span class="syntax-interned-symbol">env</span>)</span>
     <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let*">let*</a> <span class="syntax-cons">(<span class="syntax-unquote">,@<span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-mapcar">mapcar</a> <span class="syntax-function">#'<a class="function-reference" href="../chapter-14.xhtml#function-list">list</a></span> <span class="syntax-interned-symbol">dummies</span> <span class="syntax-interned-symbol">vals</span>)</span></span> <span class="syntax-cons">(<span class="syntax-unquote">,<span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-car">car</a> <span class="syntax-interned-symbol">new</span>)</span></span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">getter</span></span>)</span>)</span>
        <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-prog1">prog1</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-car">car</a> <span class="syntax-unquote">,<span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-car">car</a> <span class="syntax-interned-symbol">new</span>)</span></span>)</span>
               <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-unquote">,<span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-car">car</a> <span class="syntax-interned-symbol">new</span>)</span></span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-cdr">cdr</a> <span class="syntax-unquote">,<span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-car">car</a> <span class="syntax-interned-symbol">new</span>)</span></span>)</span>)</span>
               <span class="syntax-unquote">,<span class="syntax-interned-symbol">setter</span></span>)</span>)</span></span>)</span>)</span>
</span></code></pre>)<br/><br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defsetf">defsetf</a> <span class="syntax-interned-symbol">frob</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">value</span>)</span> 
    <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-car">car</a> <span class="syntax-unquote">,<span class="syntax-interned-symbol">x</span></span>)</span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">value</span></span>)</span></span>)</span>
</span></code></pre><br/><br/>;;; The following will modify <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-cdr">cdr</a> <span class="syntax-interned-symbol">z</span>)</span>
</span></code> and not <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-car">car</a> <span class="syntax-interned-symbol">z</span>)</span>
</span></code><br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-macrolet">macrolet</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">frob</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-cdr">cdr</a> <span class="syntax-unquote">,<span class="syntax-interned-symbol">x</span></span>)</span></span>)</span>)</span>
     <span class="syntax-cons">(<span class="syntax-interned-symbol">xpop</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">frob</span> <span class="syntax-interned-symbol">z</span>)</span>)</span>)</span>
</span></code></pre><br/><br/>;;; The following is an error; an error may be signaled at macro expansion time<br/><br/>(flet <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">frob</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-cdr">cdr</a> <span class="syntax-interned-symbol">x</span>)</span>)</span>
     <span class="syntax-cons">(<span class="syntax-interned-symbol">xpop</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">frob</span> <span class="syntax-interned-symbol">z</span>)</span>)</span>)</span>
</span></code></pre><br/><br/></pre></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>This was an omission in the original definition of CLtL. <br/></section><section id="section-Current Practice" class="section"><h2 class="section-title">Current Practice</h2>Many Common Lisp implementations already have this extension, although some do not. One implementation has extended GET-SETF-METHOD to take an optional argument which is incompatible with this use. <br/></section><section id="section-Cost to implementors" class="section"><h2 class="section-title">Cost to implementors</h2>Some implementations will have to add this feature, although it is not a major change. <br/></section><section id="section-Cost to users" class="section"><h2 class="section-title">Cost to users</h2>This is generally an upward compatible change. In implementations which did not already take into account the lexical environment for <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a>'d forms might start working differently if the internal implementation of <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> is changed. The likelihood of this affecting a user's program is very small. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>This change improves portability and the ability to use <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-macrolet">macrolet</a>, <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-flet">flet</a> and <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-labels">labels</a> in portable code which might also have <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> forms. <br/></section><section id="section-Aesthetics" class="section"><h2 class="section-title">Aesthetics</h2><a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> methods cannot work correctly within lexically defined function symbols without this change. This change makes the language more consistent and correct.  <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>The cleanup committee generally supports this change. <br/>A number of additional changes for rationally dealing with lexical environments as first class objects, including a more general set of accessors and constructors for lexical environments is required for many language extensions (e.g., a portable version of the proposed Common Lisp Object System) and should be addressed by a future proposal. For a while, the cleanup committee attempted to deal with these issues together, but decided to separate them out into their component parts. This issue is the simplest. <br/></section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>