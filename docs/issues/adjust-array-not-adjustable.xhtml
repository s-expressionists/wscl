<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” ADJUST-ARRAY-NOT-ADJUSTABLE</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">ADJUST-ARRAY-NOT-ADJUSTABLE</span><br/><ol class="local-toc"><li><a href="#section-Status">Status</a><ol> </ol></li><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit history">Edit history</a><ol> </ol></li><li><a href="#section-Problem Description">Problem Description</a><ol> </ol></li><li><a href="#issue-adjust-array-not-adjustable:implicit-copy">Proposal IMPLICIT-COPY</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Examples">Examples</a><ol> </ol></li><li><a href="#section-Current Practice">Current Practice</a><ol> </ol></li><li><a href="#section-Cost to Implementors">Cost to Implementors</a><ol> </ol></li><li><a href="#section-Cost to Users">Cost to Users</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Aesthetics">Aesthetics</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue ADJUST-ARRAY-NOT-ADJUSTABLE [NIL] [CLARIFICATION and CHANGE]</h1><section id="section-Status" class="status-passed section"><h2 class="section-title">Status</h2>Version 11 passed Jun 89 X3J13 (Version 5 passed Jan 89, but various problems were found.) </section><section id="section-References" class="section"><h2 class="section-title">References</h2><a class="function-reference" href="../chapter-15.xhtml#function-adjust-array">adjust-array</a> (p297), <a class="function-reference" href="../chapter-15.xhtml#function-adjustable-array-p">adjustable-array-p</a> (p293), <a class="function-reference" href="../chapter-15.xhtml#function-make-array">make-array</a> (pp286-289), simple arrays (p28, 289), simple strings with fill pointers (p299), <a class="function-reference" href="../chapter-15.xhtml#function-vector-push-extend">vector-push-extend</a> (p296) </section><section id="section-Edit history" class="section"><h2 class="section-title">Edit history</h2>22-Apr-87, Version 1 by Pitman 15-Nov-88, Versions 2a,2b,2c by Pitman 02-Dec-88, Version 3 by Pitman 11-Jan-89, Version 4 by Pitman 16-Jan-89, Version 5, by Gabriel.  Amended at the meeting to shorten. 23-Jan-89, Version 6, by Moon.  Shorten without the bug introduced by the amendment, add clarification of <a class="type-reference" href="../chapter-15.xhtml#type-simple-array">simple-array</a> type. 15-Feb-89, Version 7, by Pitman. Minor changes per comments from RPG and Dalton. 11-Mar-89, Version 8, by Pitman. Change category, add endorsements. 17-Mar-89, Version 9, by Moon, fix wording and examples to make it clear that the semantics of <a class="type-reference" href="../chapter-15.xhtml#type-simple-array">simple-array</a> is unchanged. 6-Jun-89, Version 10, by Moon and Gabriel, do over. 23-Jun-89, Version 11, by Moon, two little corrections </section><section id="section-Problem Description" class="section"><h2 class="section-title">Problem Description</h2>  There are a number of unclear passages in CLtL related to simple arrays   and adjustable arrays.  There is disagreement on precisely how these   passages are to be interpreted, and no one is happy with the fact that   <a class="function-reference" href="../chapter-15.xhtml#function-adjust-array">adjust-array</a> works only on an <a class="glossary-reference" href="../chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a> subset of arrays. <br/>  The description of the :ADJUSTABLE option to <a class="function-reference" href="../chapter-15.xhtml#function-make-array">make-array</a> on p288 says that   ``the argument, if specified and not <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>, indicates that it must be   possible to alter the array's size dynamically after it is created. This   argument defaults to <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>.''  The description of the :ADJUSTABLE option   does not say what <a class="function-reference" href="../chapter-15.xhtml#function-make-array">make-array</a> will do if the argument is unsupplied or   explicitly <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>. <br/>  The description of <a class="function-reference" href="../chapter-15.xhtml#function-adjustable-array-p">adjustable-array-p</a> on p293 says that it is true ``if   the argument <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">which</span> <span class="syntax-interned-symbol">must</span> <span class="syntax-interned-symbol">be</span> <span class="syntax-interned-symbol">an</span> <a class="symbol-reference" href="../chapter-2.xhtml#symbol-array">array</a>)</span>
</span></code> is adjustable, and otherwise   false.'' However, the description of <a class="function-reference" href="../chapter-15.xhtml#function-make-array">make-array</a> makes it clear that this   is not necessarily the same as asking if the array was created with   :ADJUSTABLE <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>.  If <a class="function-reference" href="../chapter-15.xhtml#function-adjustable-array-p">adjustable-array-p</a> returns <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>, you know that   :ADJUSTABLE <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> was supplied <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-or">or</a> <span class="syntax-interned-symbol">no</span> <span class="syntax-keyword-symbol">:ADJUSTABLE</span> <span class="syntax-interned-symbol">option</span> <span class="syntax-interned-symbol">was</span> <span class="syntax-interned-symbol">supplied</span>)</span>
</span></code>, but   if <a class="function-reference" href="../chapter-15.xhtml#function-adjustable-array-p">adjustable-array-p</a> returns <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>, then there is no information about   whether :ADJUSTABLE was used. <br/>  The description of <a class="function-reference" href="../chapter-15.xhtml#function-adjust-array">adjust-array</a> on pp297-298 says that it is ``not   permitted to call <a class="function-reference" href="../chapter-15.xhtml#function-adjust-array">adjust-array</a> on an array that was not created with the   :ADJUSTABLE option.'' This is inconsistent with <a class="function-reference" href="../chapter-15.xhtml#function-adjustable-array-p">adjustable-array-p</a>. <br/>  The definition of <a class="type-reference" href="../chapter-15.xhtml#type-simple-array">simple-array</a> on p.28 says ``an array that is not   displaced to another array, has no fill pointer, and is not to have its   size adjusted dynamically after creation is called a simple array.''   It is left unclear whether this is an implication or an equivalence,   i.e. whether there can be other simple arrays as well.   CLtL p.299 appears to refer to simple strings with fill pointers,   suggesting that it is an implication, but similar language is used for   equivalences in other parts of CLtL. <br/></section><section class="status-passed proposal" id="issue-adjust-array-not-adjustable:implicit-copy"><h2 class="section-title">Proposal IMPLICIT-COPY</h2><ol><li> If <a class="function-reference" href="../chapter-15.xhtml#function-make-array">make-array</a> is called with the :ADJUSTABLE, :FILL-POINTER,  and :DISPLACED-TO arguments each either unspecified or false, the resulting array is a simple array.  (This just repeats what CLtL says on page 289, it's here to aid in understanding the next point.) <br/></li><li> If <a class="function-reference" href="../chapter-15.xhtml#function-make-array">make-array</a> is called with one or more of the :ADJUSTABLE, :FILL-POINTER, or :DISPLACED-TO arguments true, whether the resulting array is simple is unspecified. <br/></li><li> It is permitted to call <a class="function-reference" href="../chapter-15.xhtml#function-adjust-array">adjust-array</a> on any array.  (Remove the restriction documented at the bottom of p.297.) <br/></li><li> If <a class="function-reference" href="../chapter-15.xhtml#function-adjust-array">adjust-array</a> is applied to an array created with :ADJUSTABLE true, the array returned is <a class="function-reference" href="../chapter-5.xhtml#function-eq">eq</a> to its first argument.  It is not specified whether <a class="function-reference" href="../chapter-15.xhtml#function-adjust-array">adjust-array</a> returns an array <a class="function-reference" href="../chapter-5.xhtml#function-eq">eq</a> to its first argument for any other arrays.  If the array returned by <a class="function-reference" href="../chapter-15.xhtml#function-adjust-array">adjust-array</a> is not <a class="function-reference" href="../chapter-5.xhtml#function-eq">eq</a> to its first argument, the original array is unchanged and does not share storage with the new array. <br/></li><li> The predicate <a class="function-reference" href="../chapter-15.xhtml#function-adjustable-array-p">adjustable-array-p</a> is true if and only if <a class="function-reference" href="../chapter-15.xhtml#function-adjust-array">adjust-array</a> will return a value <a class="function-reference" href="../chapter-5.xhtml#function-eq">eq</a> to this array when given this array as its first argument. <br/></li></ol>Clarifications and Logical Consequences: <br/><ol><li> There is no specified way to create an array for which <a class="function-reference" href="../chapter-15.xhtml#function-adjustable-array-p">adjustable-array-p</a>  definitely returns <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>. <br/></li><li> There is no specified way to create an array that is <a class="glossary-reference" href="../chapter-26.xhtml#glossary-non-simple">non-simple</a>. </li><li> The definition of <a class="type-reference" href="../chapter-15.xhtml#type-simple-array">simple-array</a> on p.28 is taken to be an implication,  not an equivalence.  This is either a clarification or a change depending  on one's prior reading of that definition. <br/></li><li> The meaning of <a class="function-reference" href="../chapter-15.xhtml#function-adjustable-array-p">adjustable-array-p</a> is changed. </li><li> As with such functions as <a class="function-reference" href="../chapter-17.xhtml#function-delete">delete</a> and <a class="function-reference" href="../chapter-14.xhtml#function-nconc">nconc</a>, textbooks should  instruct programmers to be careful to receive the value returned by  <a class="function-reference" href="../chapter-15.xhtml#function-adjust-array">adjust-array</a>, as it might not be <a class="function-reference" href="../chapter-5.xhtml#function-eq">eq</a> to the first argument. <br/></li><li> <a class="function-reference" href="../chapter-15.xhtml#function-vector-push-extend">vector-push-extend</a> still signals an error if given a non-adjustable  array.  <a class="function-reference" href="../chapter-15.xhtml#function-adjust-array">adjust-array</a>'s new feature of making a copy cannot be used  by <a class="function-reference" href="../chapter-15.xhtml#function-vector-push-extend">vector-push-extend</a>, since there is no way to return the copy to  the caller. <br/></li></ol></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>  Points 3 and 4 eliminate the problem of <a class="function-reference" href="../chapter-15.xhtml#function-adjust-array">adjust-array</a> only working on a   subset of arrays, by changing it to work on all arrays.  It remains   <a class="glossary-reference" href="../chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a> whether the array is modified in place or   copied, i.e. whether the result is <a class="function-reference" href="../chapter-5.xhtml#function-eq">eq</a> to the argument, however many other   functions in Common Lisp have similar <a class="glossary-reference" href="../chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a> behavior.   <a class="glossary-reference" href="../chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a> storage allocation or reuse is considered   more benign than <a class="glossary-reference" href="../chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a> applicability of an operation. <br/>  Point 3 recognizes that <a class="function-reference" href="../chapter-15.xhtml#function-adjust-array">adjust-array</a> offers features that are offered by   no other function and which are useful in cases involving non-adjustable   arrays <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">what</span> <span class="syntax-interned-symbol">amounts</span> <span class="syntax-interned-symbol">to</span> <span class="syntax-interned-symbol">copying</span>)</span>
</span></code>.  This change would allow an   expression such as: <br/>    <code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">X</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-15.xhtml#function-adjust-array">adjust-array</a> <span class="syntax-interned-symbol">X</span> <span class="syntax-interned-symbol">...</span>)</span>)</span>
</span></code> <br/>  to work reliably. Those desiring the old behavior could do: <br/>    <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-or">or</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-not">not</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-15.xhtml#function-adjustable-array-p">adjustable-array-p</a> <span class="syntax-interned-symbol">X</span>)</span>)</span>
            <span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-not">not</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-equal">equal</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-15.xhtml#function-array-rank">array-rank</a> <span class="syntax-interned-symbol">X</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-17.xhtml#function-length">length</a> <span class="syntax-interned-symbol">NEW-DIMENSIONS</span>)</span>)</span>)</span>)</span>
        <span class="syntax-cons">(<a class="function-reference" href="../chapter-9.xhtml#function-error">error</a> <span class="syntax-string">"Array cannot be adjusted."</span>)</span>)</span>
</span></code></pre> <br/>  to get the old style error checking. <br/>  Point 5 recycles the name <a class="function-reference" href="../chapter-15.xhtml#function-adjustable-array-p">adjustable-array-p</a> as a test for whether an   array is adjusted in place or by copying. <br/>  Point 2 preserves the raison d'etre of simple arrays, which is to provide   a portable interface to <a class="glossary-reference" href="../chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a> specialized arrays that   trade decreased functionality for faster access.  A proposed alternative   was to specify a way to create an array that is guaranteed not to be   simple.  This would have made <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-4.xhtml#function-typep">typep</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-15.xhtml#function-make-array">make-array</a> <span class="syntax-interned-symbol">...</span>)</span> <span class="syntax-quote">'<a class="type-reference" href="../chapter-15.xhtml#type-simple-array">simple-array</a></span>)</span>
</span></code>   return the same value in all implementations, but would have required   large changes to some implementations and would be of little benefit to   users.  Users need to know that certain arrays are simple, so they can   put in declarations and get higher performance, but users have no need to   be able to create arrays that are definitely <a class="glossary-reference" href="../chapter-26.xhtml#glossary-non-simple">non-simple</a> <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">lower</span>
  <span class="syntax-interned-symbol">performance</span>)</span>
</span></code></pre> or definitely non-adjustable. <br/></section><section id="section-Examples" class="section"><h2 class="section-title">Examples</h2><pre><ol><li> The following program is conforming.<br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">double</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span>)</span>
      <span class="syntax-cons">(<a class="function-reference" href="../chapter-15.xhtml#function-adjust-array">adjust-array</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-*">*</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-17.xhtml#function-length">length</a> <span class="syntax-interned-symbol">a</span>)</span> <span class="syntax-number">2</span>)</span>)</span>)</span>
</span></code></pre><br/><br/>  <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">double</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-15.xhtml#function-make-array">make-array</a> <span class="syntax-number">30</span>)</span>)</span>
</span></code><br/><br/></li><li> The following program is conforming.  In no implementation is the<br/>type declaration violated.<br/><br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-15.xhtml#function-make-array">make-array</a> <span class="syntax-number">100</span>)</span>)</span>)</span>
      <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-declare">declare</a> <span class="syntax-cons">(<a class="type-reference" href="../chapter-15.xhtml#type-simple-array">simple-array</a> <span class="syntax-interned-symbol">a</span>)</span>)</span>
      <span class="syntax-cons">(<span class="syntax-interned-symbol">frob</span> <span class="syntax-interned-symbol">a</span>)</span>)</span>
</span></code></pre><br/><br/></li><li> The following program is non-conforming.  The consequences of this<br/>program are undefined because the type declaration is violated in some<br/>implementations.<br/><br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-15.xhtml#function-make-array">make-array</a> <span class="syntax-number">100</span> <span class="syntax-keyword-symbol">:adjustable</span> <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>)</span>)</span>)</span>
      <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-declare">declare</a> <span class="syntax-cons">(<a class="type-reference" href="../chapter-15.xhtml#type-simple-array">simple-array</a> <span class="syntax-interned-symbol">a</span>)</span>)</span>
      <span class="syntax-cons">(<span class="syntax-interned-symbol">frob</span> <span class="syntax-interned-symbol">a</span>)</span>)</span>
</span></code></pre><br/><br/></li></ol></pre></section><section id="section-Current Practice" class="section"><h2 class="section-title">Current Practice</h2>  Every correct CLtL implementation conforms to points 1 and 2.  It is   unlikely that any implementation currently exists that conforms to points   3, 4, and 5.  Points 3 and 4 involve additions to an implementation to   support the copying form of <a class="function-reference" href="../chapter-15.xhtml#function-adjust-array">adjust-array</a>.  Point 5 may involve a change   to <a class="function-reference" href="../chapter-15.xhtml#function-adjustable-array-p">adjustable-array-p</a> or may be able to use the existing implementation   of the function. <br/>  Symbolics Genera makes :ADJUSTABLE <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> arrays adjustable in most cases,   and ignores adjustability in deciding whether an array is a <a class="type-reference" href="../chapter-15.xhtml#type-simple-array">simple-array</a>.   The arrays that are internally simple in Symbolics Genera are a different   subset of arrays from the type <a class="type-reference" href="../chapter-15.xhtml#type-simple-array">simple-array</a>, because simplicity in that   implementation depends on the rank and total-size as well as on the   <a class="function-reference" href="../chapter-15.xhtml#function-fill-pointer">fill-pointer</a> and displacement, thus Genera does not use the type   <a class="type-reference" href="../chapter-15.xhtml#type-simple-array">simple-array</a> for anything. <br/>  Lucid, IIM, Ibuki, and Symbolics Cloe make :ADJUSTABLE <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> arrays   non-adjustable in all cases, and make every array <a class="glossary-reference" href="../chapter-26.xhtml#glossary-non-simple">non-simple</a> that CLTL   does not require to be simple. <br/>  Macintosh Allegro Common Lisp v1.2 makes :ADJUSTABLE <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> arrays   non-adjustable in all cases, makes all arrays of rank other than 1   <a class="glossary-reference" href="../chapter-26.xhtml#glossary-non-simple">non-simple</a> <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">violating</span> <span class="syntax-interned-symbol">point</span> <span class="syntax-number">1</span>)</span>
</span></code>, and makes every array <a class="glossary-reference" href="../chapter-26.xhtml#glossary-non-simple">non-simple</a> that   CLTL does not require to be simple. <br/></section><section id="section-Cost to Implementors" class="section"><h2 class="section-title">Cost to Implementors</h2>  The change to <a class="function-reference" href="../chapter-15.xhtml#function-adjustable-array-p">adjustable-array-p</a> is easy.  The change to <a class="function-reference" href="../chapter-15.xhtml#function-adjust-array">adjust-array</a> may   involve some complex coding but should not be a large task.  No changes   are required to anything connected with <a class="type-reference" href="../chapter-15.xhtml#type-simple-array">simple-array</a>. <br/></section><section id="section-Cost to Users" class="section"><h2 class="section-title">Cost to Users</h2>  None in code that does not call <a class="function-reference" href="../chapter-15.xhtml#function-adjustable-array-p">adjustable-array-p</a>.  This is a fully   upward-compatible change from the user's standpoint. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>  Programs that use simple arrays and/or adjust arrays will be easier   to port, as the language specification for these features will be   clearer.  More programs will be able to call <a class="function-reference" href="../chapter-15.xhtml#function-adjust-array">adjust-array</a>, as its use   will not be restricted to a subset of arrays. <br/>Non-Benefits: <br/>  Users who expect adjusting arrays created with :ADJUSTABLE <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> to signal   an error would not get the desired signal.  A few programs might have   porting problems due to variation among implementations of whether the   result of <a class="function-reference" href="../chapter-15.xhtml#function-adjust-array">adjust-array</a> is <a class="function-reference" href="../chapter-5.xhtml#function-eq">eq</a> to the first argument. <br/></section><section id="section-Aesthetics" class="section"><h2 class="section-title">Aesthetics</h2>  Most people believe the status quo is unaesthetic.  Having an aspect of   the language more clearly specified is an aesthetic improvement.   Allowing <a class="function-reference" href="../chapter-15.xhtml#function-adjust-array">adjust-array</a> on all arrays is an aesthetic improvement. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>  There are at least 110 messages of discussion preceding this version of the   proposal.  It does not seem feasible to summarize them here. <br/>  Dick Gabriel, Dave Moon, and Guy Steele support this proposal. <br/>  Some commentors would like to get rid of <a class="function-reference" href="../chapter-15.xhtml#function-adjustable-array-p">adjustable-array-p</a>, since   <a class="function-reference" href="../chapter-15.xhtml#function-adjust-array">adjust-array</a> now works on all arrays.  Other commentors have said that   <a class="function-reference" href="../chapter-15.xhtml#function-adjustable-array-p">adjustable-array-p</a> is still needed in some applications, such as user   written functions that behave like <a class="function-reference" href="../chapter-15.xhtml#function-vector-push-extend">vector-push-extend</a>, and hence should   be kept; the concept of "adjustable array" is still meaningful. <br/><br/>     &mdash;&ndash; End Forwarded Messages &mdash;&ndash; </section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>