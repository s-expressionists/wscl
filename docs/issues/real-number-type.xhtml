<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” REAL-NUMBER-TYPE</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">REAL-NUMBER-TYPE</span><br/><ol class="local-toc"><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit history">Edit history</a><ol> </ol></li><li><a href="#section-Status">Status</a><ol> </ol></li><li><a href="#section-Problem Description">Problem Description</a><ol> </ol></li><li><a href="#issue-real-number-type:x3j13-mar-89">Proposal X3J13-MAR-89</a><ol> </ol></li><li><a href="#section-Test Case">Test Case</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Current Practice">Current Practice</a><ol> </ol></li><li><a href="#section-Cost to Implementors">Cost to Implementors</a><ol> </ol></li><li><a href="#section-Cost to Users">Cost to Users</a><ol> </ol></li><li><a href="#section-Cost of Non-Adoption">Cost of Non-Adoption</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Aesthetics">Aesthetics</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue REAL-NUMBER-TYPE [CLEANUP] [ADDITION]</h1><section id="section-References" class="section"><h2 class="section-title">References</h2>Table 4-1. </section><section id="section-Edit history" class="section"><h2 class="section-title">Edit history</h2>04-JAN-89, Version 1 by Bob Cassels, Don Sakahara, Kent Pitman, and John Aspinall 08-JAN-89, Version 2 by Bob Cassels &ndash; incorporate Masinter's suggestion and make <a class="type-reference" href="../chapter-12.xhtml#type-real">REAL</a> a CLOS class 13-JAN-89, Version 3 by Cassels and Aspinall &ndash; incorporate Marc LeBrun's suggestions clarifying the relationship between <a class="package-reference" href="../chapter-11.xhtml#package-cl">CL</a> numeric type names and mathematical names 05-APR-89, Version 4 by Pitman (changes per X3J13) </section><section id="section-Status" class="status-passed section"><h2 class="section-title">Status</h2>Accepted v3 Mar-89 by X3J13 (on a 12-3 vote) with  amendments. The proposal as amended is v4. </section><section id="section-Problem Description" class="section"><h2 class="section-title">Problem Description</h2>  There is no standard type specifier symbol for the <a class="package-reference" href="../chapter-11.xhtml#package-cl">CL</a> type   '<code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-or">OR</a> <a class="function-reference" href="../chapter-12.xhtml#function-rational">RATIONAL</a> <a class="function-reference" href="../chapter-12.xhtml#function-float">FLOAT</a>)</span>
</span></code>.  <br/></section><section class="status-unknown proposal" id="issue-real-number-type:x3j13-mar-89"><h2 class="section-title">Proposal X3J13-MAR-89</h2>  Make <a class="type-reference" href="../chapter-12.xhtml#type-real">REAL</a> be a <a class="package-reference" href="../chapter-11.xhtml#package-cl">CL</a> data type: <br/>  p.13 "Numbers" <br/>    Add:     The <a class="type-reference" href="../chapter-12.xhtml#type-number">NUMBER</a> data type encompasses all of these kinds of              numbers.  For convenience, there are names for some              subclasses of numbers.  @i[Integers] and @i[ratios] are of              type <a class="function-reference" href="../chapter-12.xhtml#function-rational">RATIONAL</a>.  @i[Rational numbers] and @[floating-point              numbers] are of type <a class="type-reference" href="../chapter-12.xhtml#type-real">REAL</a>.  @i[Real numbers] and @i[complex              numbers] are of type <a class="type-reference" href="../chapter-12.xhtml#type-number">NUMBER</a>. <br/>	     Although the names of these types were chosen with the 	     terminology of mathematics in mind, the correspondences 	     are not always exact.  Integers and ratios model the 	     corresponding mathematical concepts directly.  Numbers 	     of the <a class="function-reference" href="../chapter-12.xhtml#function-float">FLOAT</a> type may be used to approximate real 	     numbers, both rational and irrational.  The <a class="type-reference" href="../chapter-12.xhtml#type-real">REAL</a> type 	     includes all Common Lisp numbers which represent 	     mathematical real numbers, though there are 	     mathematical real numbers <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">irrational</span> <span class="syntax-interned-symbol">numbers</span>)</span>
</span></code> 	     which do not have an exact Common Lisp representation. 	     Only <a class="type-reference" href="../chapter-12.xhtml#type-real">REAL</a> numbers may be ordered using the &lt;, &gt;, &lt;<a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>, 	     and &gt;<a class="function-reference" href="../chapter-12.xhtml#function-=">=</a> functions. <br/>             Compatibility note:  The Fortran standard defines the term              "real datum" to mean "a processor approximation to the value              of a real number."  In practice the Fortran "basic real" type              is the floating-point data type Common Lisp calls              <a class="type-reference" href="../chapter-12.xhtml#type-single-float">SINGLE-FLOAT</a>.  The Fortran "double precision" type is              Common Lisp's <a class="type-reference" href="../chapter-12.xhtml#type-double-float">DOUBLE-FLOAT</a>.  The Pascal "real" data type is              an "<a class="glossary-reference" href="../chapter-26.xhtml#glossary-implementation-defined">implementation-defined</a> subset of the real numbers."  In              practice this is usually a floating-point type, often what              Common Lisp calls <a class="type-reference" href="../chapter-12.xhtml#type-double-float">DOUBLE-FLOAT</a>. <br/>             A translation of an algorithm written in Fortran or Pascal              which uses "real" data usually will use some appropriate              precision of Common Lisp's <a class="function-reference" href="../chapter-12.xhtml#function-float">FLOAT</a> type.  Some algorithms may              gain accuracy and/or flexibility by using Common Lisp's              <a class="function-reference" href="../chapter-12.xhtml#function-rational">RATIONAL</a> or <a class="type-reference" href="../chapter-12.xhtml#type-real">REAL</a> types instead. <br/>  p.33 "Overlap, Inclusion, and Disjointness of Types": <br/>    Remove:  The types <a class="function-reference" href="../chapter-12.xhtml#function-rational">RATIONAL</a>, <a class="function-reference" href="../chapter-12.xhtml#function-float">FLOAT</a>, and <a class="function-reference" href="../chapter-12.xhtml#function-complex">COMPLEX</a> are pairwise              disjoint subtypes of <a class="type-reference" href="../chapter-12.xhtml#type-number">NUMBER</a>. <br/>             Rationale: It might be thought that <a class="type-reference" href="../chapter-12.xhtml#type-integer">INTEGER</a> and <a class="symbol-reference" href="../chapter-22.xhtml#symbol-ratio">RATIO</a> ... <br/>             Rationale: It might be thought that <a class="type-reference" href="../chapter-12.xhtml#type-fixnum">FIXNUM</a> and <a class="type-reference" href="../chapter-12.xhtml#type-bignum">BIGNUM</a> ... <br/>    Add:     The types <a class="function-reference" href="../chapter-12.xhtml#function-rational">RATIONAL</a> and <a class="function-reference" href="../chapter-12.xhtml#function-float">FLOAT</a> are pairwise disjoint subtypes              of <a class="type-reference" href="../chapter-12.xhtml#type-real">REAL</a>. <br/>             The types <a class="type-reference" href="../chapter-12.xhtml#type-real">REAL</a> and <a class="function-reference" href="../chapter-12.xhtml#function-complex">COMPLEX</a> are pairwise disjoint subtypes              of <a class="type-reference" href="../chapter-12.xhtml#type-number">NUMBER</a>. <br/>             Rationale: It might be thought that <a class="type-reference" href="../chapter-12.xhtml#type-fixnum">FIXNUM</a> and <a class="type-reference" href="../chapter-12.xhtml#type-bignum">BIGNUM</a> should               form an exhaustive partition of the type <a class="type-reference" href="../chapter-12.xhtml#type-integer">INTEGER</a>, that <a class="type-reference" href="../chapter-12.xhtml#type-integer">INTEGER</a>              and <a class="symbol-reference" href="../chapter-22.xhtml#symbol-ratio">RATIO</a> should form an exhaustive partition of <a class="function-reference" href="../chapter-12.xhtml#function-rational">RATIONAL</a>,              that <a class="function-reference" href="../chapter-12.xhtml#function-rational">RATIONAL</a> and <a class="function-reference" href="../chapter-12.xhtml#function-float">FLOAT</a> should form an exhaustive partition of               <a class="type-reference" href="../chapter-12.xhtml#type-real">REAL</a>, and that <a class="type-reference" href="../chapter-12.xhtml#type-real">REAL</a> and <a class="function-reference" href="../chapter-12.xhtml#function-complex">COMPLEX</a> should form an exhaustive              partition of <a class="type-reference" href="../chapter-12.xhtml#type-number">NUMBER</a>.  These are all purposely avoided in order               to permit compatible experimentation with extensions to the              Common Lisp number system, such as the idea of adding explicit               representations of infinity or of positive and negative infinity. <br/>   p.43 Table 4-1 "Standard Type Specifier Symbols" <br/>    Add:     <a class="type-reference" href="../chapter-12.xhtml#type-real">REAL</a> <br/>   p.49 "Type Specifiers that Abbreviate" <br/>     Add:    <code><span class="syntax-root"><span class="syntax-cons">(<a class="type-reference" href="../chapter-12.xhtml#type-real">REAL</a> <span class="syntax-interned-symbol">low</span> <span class="syntax-interned-symbol">high</span>)</span>
</span></code>              Denotes the set of real numbers between low and high.  ...              [As with <a class="function-reference" href="../chapter-12.xhtml#function-rational">RATIONAL</a> and <a class="function-reference" href="../chapter-12.xhtml#function-float">FLOAT</a>.] <br/>  Make <a class="type-reference" href="../chapter-12.xhtml#type-real">REAL</a> a built-in CLOS class. <br/>  Add a specific data type predicate <a class="function-reference" href="../chapter-12.xhtml#function-realp">REALP</a> which tests for membership in   this type.  [By analogy with <a class="function-reference" href="../chapter-12.xhtml#function-numberp">NUMBERP</a>.] <br/></section><section id="section-Test Case" class="section"><h2 class="section-title">Test Case</h2><pre>  If a programmer wishes to test for "a number between 1 and 10", the<br/>  only current <a class="package-reference" href="../chapter-11.xhtml#package-cl">CL</a> types would be '<code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-or">or</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-rational">rational</a> <span class="syntax-number">1</span> <span class="syntax-number">10</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-float">float</a> <span class="syntax-number">1</span> <span class="syntax-number">10</span>)</span>)</span>
</span></code> or<br/>  something like '<code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-and">and</a> <a class="function-reference" href="../chapter-12.xhtml#function-numberp">numberp</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-not">not</a> <a class="function-reference" href="../chapter-12.xhtml#function-complexp">complexp</a>)</span> <span class="syntax-cons">(<a class="type-reference" href="../chapter-4.xhtml#type-satisfies">satisfies</a> <span class="syntax-interned-symbol">range-1-10</span>)</span>)</span>
</span></code><br/>  with <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">range-1-10</span> <span class="syntax-cons">(<a class="type-reference" href="../chapter-12.xhtml#type-real">real</a>)</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-&lt;=">&lt;=</a> <span class="syntax-number">1</span> <a class="type-reference" href="../chapter-12.xhtml#type-real">real</a> <span class="syntax-number">10</span>)</span>)</span>
</span></code>.  Both of these are<br/>  likely less efficient, and certainly less expressive than '<code><span class="syntax-root"><span class="syntax-cons">(<a class="type-reference" href="../chapter-12.xhtml#type-real">real</a> <span class="syntax-number">1</span> <span class="syntax-number">10</span>)</span>
</span></code>.<br/><br/></pre></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>  Mathematics has a name for <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-or">OR</a> <a class="function-reference" href="../chapter-12.xhtml#function-rational">RATIONAL</a> <a class="function-reference" href="../chapter-12.xhtml#function-float">FLOAT</a>)</span>
</span></code> &ndash; it is "real".   This class is important because it is all the numbers which can be   ordered. <br/>  Throughout the "Numbers" chapter, the phrase "non-complex number" is   used.   <a class="function-reference" href="../chapter-12.xhtml#function-max">MAX</a>, <a class="function-reference" href="../chapter-12.xhtml#function-min">MIN</a>, p. 198 "The arguments may be any non-complex numbers."   <a class="function-reference" href="../chapter-12.xhtml#function-cis">CIS</a> p. 207 "The argument ... may be any non-complex number." <br/></section><section id="section-Current Practice" class="section"><h2 class="section-title">Current Practice</h2>  Probably nobody does this. <br/></section><section id="section-Cost to Implementors" class="section"><h2 class="section-title">Cost to Implementors</h2>  Some work is necessary to add this name.  But since the underlying   type already exists the amount of work should be minimal. <br/></section><section id="section-Cost to Users" class="section"><h2 class="section-title">Cost to Users</h2>  Since this is an upward-compatible extension, it may be ignored by   users. <br/></section><section id="section-Cost of Non-Adoption" class="section"><h2 class="section-title">Cost of Non-Adoption</h2>  Occasional inconvenience and/or inefficiency. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>  Mathematical clarity. <br/>  Ability to do CLOS method dispatch on the type. <br/></section><section id="section-Aesthetics" class="section"><h2 class="section-title">Aesthetics</h2>  As mentioned under "rationale," this would be a more concise way to   express a common programming idiom. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>  The name "non-complex number" is incorrect because future   implementations may wish to include numerical types which are neither   complex nor real.  [e.g. pure imaginary numbers or quaternions] <br/>  The name "scalar" is incorrect because the mathematical concept of   scalar may indeed include complex numbers. <br/>  Fortran and Pascal use the name "real" to mean what <a class="package-reference" href="../chapter-11.xhtml#package-cl">CL</a> calls   <a class="type-reference" href="../chapter-12.xhtml#type-single-float">SINGLE-FLOAT</a>.  That should cause no significant problem, since a Lisp   program written using the type <a class="type-reference" href="../chapter-12.xhtml#type-real">REAL</a> will do mathematically what the   equivalent Fortran program would do.  This is because Fortran's "real"   data-type is a subtype of the <a class="package-reference" href="../chapter-11.xhtml#package-cl">CL</a> <a class="type-reference" href="../chapter-12.xhtml#type-real">REAL</a> type.  The only differences   might be that the Lisp program could be less efficient and/or more   accurate. <br/>  A survey of several Fortran and Pascal books shows that the distinction   between <a class="type-reference" href="../chapter-12.xhtml#type-integer">INTEGER</a> and <a class="type-reference" href="../chapter-12.xhtml#type-real">REAL</a> is that <a class="type-reference" href="../chapter-12.xhtml#type-real">REAL</a> numbers may have fractional   parts, while <a class="type-reference" href="../chapter-12.xhtml#type-integer">INTEGER</a>s do not.  Later discussions explain that <a class="type-reference" href="../chapter-12.xhtml#type-real">REAL</a>s   cover a greater range.  Much later discussions cover precision   considerations, over/underflow, etc.  So the average Fortran or Pascal   programmer should be completely comfortable with the proposed Lisp   concept of <a class="type-reference" href="../chapter-12.xhtml#type-real">REAL</a>. </section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>