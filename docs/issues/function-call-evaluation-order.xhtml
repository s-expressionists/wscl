<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” FUNCTION-CALL-EVALUATION-ORDER</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">FUNCTION-CALL-EVALUATION-ORDER</span><br/><ol class="local-toc"><li><a href="#section-Status">Status</a><ol> </ol></li><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit history">Edit history</a><ol> </ol></li><li><a href="#section-Problem Description">Problem Description</a><ol> </ol></li><li><a href="#issue-function-call-evaluation-order:unspecified">Proposal UNSPECIFIED</a><ol> </ol></li><li><a href="#issue-function-call-evaluation-order:more-unspecified">Proposal MORE-UNSPECIFIED</a><ol> </ol></li><li><a href="#section-Example">Example</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Current Practice">Current Practice</a><ol> </ol></li><li><a href="#section-Cost to implementors">Cost to implementors</a><ol> </ol></li><li><a href="#section-Cost to users">Cost to users</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Aesthetics">Aesthetics</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue FUNCTION-CALL-EVALUATION-ORDER [NIL] [CLARIFICATION]</h1><section id="section-Status" class="status-passed section"><h2 class="section-title">Status</h2>passed v2, proposal <a class="proposal-reference" href="#issue-function-call-evaluation-order:more-unspecified">MORE-UNSPECIFIED</a> on 15-0 vote, Jun-90 </section><section id="section-References" class="section"><h2 class="section-title">References</h2>CLtL p 194 ("...that order is always left to right") ANSI <a class="package-reference" href="../chapter-11.xhtml#package-cl">CL</a> spec (Aug 29, 1989 draft) p.4-10 3rd paragraph </section><section id="section-Edit history" class="section"><h2 class="section-title">Edit history</h2>Version 1 by Clinger (22 March 1988) Version 2 by Moon (1 Feb 90), add <a class="proposal-reference" href="#issue-function-call-evaluation-order:more-unspecified">MORE-UNSPECIFIED</a> </section><section id="section-Problem Description" class="section"><h2 class="section-title">Problem Description</h2>  CLtL does not say whether the function expression of a call is evaluated   before or after the argument expressions. <br/>  This is Symbolics issue #4. <br/></section><section class="status-unknown proposal" id="issue-function-call-evaluation-order:unspecified"><h2 class="section-title">Proposal UNSPECIFIED</h2>  Common Lisp does not specify whether the function expression of a call is   evaluated before or after the argument expressions.  Programs that rely   on a particular order of evaluation are in error. <br/>  The above proposal was accepted in October 1988.  The following proposal   is new in version 2. <br/></section><section class="status-passed proposal" id="issue-function-call-evaluation-order:more-unspecified"><h2 class="section-title">Proposal MORE-UNSPECIFIED</h2>  Common Lisp does not specify whether the function expression of a call is   evaluated before the argument expressions, after the argument   expressions, or between any two argument expressions if there is more   than one argument.  Programs that rely on a particular order of   evaluation are in error. <br/></section><section id="section-Example" class="section"><h2 class="section-title">Example</h2><pre>  <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">foo</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-number">3</span>)</span>)</span>
</span></code><br/>  <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">bar</span> <span class="syntax-symbol">()</span> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-10.xhtml#function-symbol-function">symbol-function</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">foo</span></span>)</span> <span class="syntax-function">#'<span class="syntax-cons">(<a class="macro-reference" href="../chapter-3.xhtml#macro-lambda">lambda</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-number">4</span>)</span>)</span></span>)</span>)</span>
</span></code><br/>  <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">foo</span> <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-progn">progn</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">bar</span>)</span> <span class="syntax-number">20</span>)</span>)</span>
</span></code><br/>  ; may return 23 or 24<br/><br/>  <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">foo2</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span>)</span>
</span></code><br/>  <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">bar2</span> <span class="syntax-symbol">()</span> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-10.xhtml#function-symbol-function">symbol-function</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">foo2</span></span>)</span> <span class="syntax-function">#'<span class="syntax-cons">(<a class="macro-reference" href="../chapter-3.xhtml#macro-lambda">lambda</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-*">*</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span>)</span></span>)</span>)</span>
</span></code><br/>  <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">bar3</span> <span class="syntax-symbol">()</span> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-10.xhtml#function-symbol-function">symbol-function</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">foo2</span></span>)</span> <span class="syntax-function">#'<span class="syntax-cons">(<a class="macro-reference" href="../chapter-3.xhtml#macro-lambda">lambda</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span>)</span></span>)</span>)</span>
</span></code><br/>  <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">foo2</span> <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-progn">progn</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">bar2</span>)</span> <span class="syntax-number">6</span>)</span> <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-progn">progn</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">bar3</span>)</span> <span class="syntax-number">7</span>)</span>)</span>
</span></code><br/>  ; under <a class="proposal-reference" href="#issue-function-call-evaluation-order:unspecified">UNSPECIFIED</a>, may return 13 or -1<br/>  ; under <a class="proposal-reference" href="#issue-function-call-evaluation-order:more-unspecified">MORE-UNSPECIFIED</a>, may return 13, -1, or 42<br/><br/></pre></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>  <a class="proposal-reference" href="#issue-function-call-evaluation-order:unspecified">UNSPECIFIED</a> makes the status quo explicit. <br/>  <a class="proposal-reference" href="#issue-function-call-evaluation-order:more-unspecified">MORE-UNSPECIFIED</a> allows complete freedom to the implementation; as long   as we are not going to require all implementations to be consistent, it   seems useless to impose half a restriction on the implementation.  Some   RISC machines with delayed branches would prefer to evaluate the function   between evaluating the penultimate argument and the last argument in   some situations. <br/></section><section id="section-Current Practice" class="section"><h2 class="section-title">Current Practice</h2>  TI and Symbolics used to evaluate the function expression last.   Symbolics currently evaluates the function expression either first or   last depending on the hardware and whether the code is compiled or   interpreted.  I'm not sure if TI has changed in the past two years.   Lucid and Coral sometimes evaluate the function expression first and at   other times evaluate the function expression last. <br/></section><section id="section-Cost to implementors" class="section"><h2 class="section-title">Cost to implementors</h2>  None. <br/></section><section id="section-Cost to users" class="section"><h2 class="section-title">Cost to users</h2>  None. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>  Codifies an ambiguity. <br/></section><section id="section-Aesthetics" class="section"><h2 class="section-title">Aesthetics</h2>  Since Common Lisp evaluates argument expressions from left to right, it   would be more consistent for the function expression to be evaluated   before the argument expressions.  On the other hand, the evaluation rules   for function expressions are already quite different from the rules for   argument expressions, and nobody in their right mind would write code   that depends on the order of evaluation, so aesthetics should not count   for much in this case.  Requiring left to right evaluation would force   some implementations to consume an extra register for many function   calls.  The efficiency argument seems more important than the aesthetic   argument. </section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>