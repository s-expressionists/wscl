<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” DEFSTRUCT-CONSTRUCTOR-KEY-MIXTURE</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">DEFSTRUCT-CONSTRUCTOR-KEY-MIXTURE</span><br/><ol class="local-toc"><li><a href="#section-Status">Status</a><ol> </ol></li><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit history">Edit history</a><ol> </ol></li><li><a href="#section-Problem description">Problem description</a><ol> </ol></li><li><a href="#issue-defstruct-constructor-key-mixture:allow-key">Proposal ALLOW-KEY</a><ol> </ol></li><li><a href="#section-Examples">Examples</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Current practice">Current practice</a><ol> </ol></li><li><a href="#section-Cost to Implementors">Cost to Implementors</a><ol> </ol></li><li><a href="#section-Cost to Users">Cost to Users</a><ol> </ol></li><li><a href="#section-Cost of non-adoption">Cost of non-adoption</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Esthetics">Esthetics</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue DEFSTRUCT-CONSTRUCTOR-KEY-MIXTURE [Cleanup] [CHANGE]</h1><section id="section-Status" class="status-passed section"><h2 class="section-title">Status</h2>Passed, Jan 89 X3J13 </section><section id="section-References" class="section"><h2 class="section-title">References</h2>CLtL page 316 </section><section id="section-Edit history" class="section"><h2 class="section-title">Edit history</h2>20-Sep-88, Version 1, Peck 21-Sep-88, Version 2, Masinter, minor revisions 8-Jan-89, Version 3, Masinter <br/></section><section id="section-Problem description" class="section"><h2 class="section-title">Problem description</h2>Currently, <a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">DEFSTRUCT</a> constructor functions can be either the default constructor function, with *only* keyword arguments, or it can be a  so-called "By Order of Arguments" constructor function with explicitly *no* keyword arguments.  Other functions in Common Lisp allow a free mix of required, optional, and keyword arguments.  <br/>With the current restriction, it is necessary to hand code a function that will accept optional and keyword arguments and parse the supplied-p variables explicitly.  Even so, it is not obvious to the casual programmer how to provide the same semantics as defstruct does with respect to default values and the defstruct init-forms. <br/></section><section class="status-passed proposal" id="issue-defstruct-constructor-key-mixture:allow-key"><h2 class="section-title">Proposal ALLOW-KEY</h2>Allow <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-key">&amp;KEY</a> keyword arguments in constructor forms of <a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">DEFSTRUCT</a>s and the <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-allow-other-keys">&amp;ALLOW-OTHER-KEYS</a> token in addition to the <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-optional">&amp;OPTIONAL</a>, <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-rest">&amp;REST</a> and <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-aux">&amp;AUX</a> arguments already allowed. Keyword arguments default in a manner similar to that of <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-optional">&amp;OPTIONAL</a> arguments: if no default is supplied in the lambda-list then the slot initform is used; otherwise the slot is not initialized &ndash; its initial value is undefined. <br/>If keyword arguments of the form <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">key</span> <span class="syntax-interned-symbol">var</span>)</span> <span class="syntax-interned-symbol">[default</span> <span class="syntax-interned-symbol">[svar]]</span>)</span>
</span></code> are specified, the "slot name" is matched with VAR <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-and">and</a> <a class="function-reference" href="../chapter-5.xhtml#function-not">not</a> <span class="syntax-interned-symbol">KEY</span>)</span>
</span></code>. <br/>Additional arguments that do not correspond to slot names but are merely present to supply values used in subsequent initialization  computations are allowed. <br/></section><section id="section-Examples" class="section"><h2 class="section-title">Examples</h2><pre>It should be possible to write forms like this:<br/><br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">defstruct</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">foo</span> <span class="syntax-cons">(<span class="syntax-keyword-symbol">:constructor</span> <span class="syntax-interned-symbol">CREATE-FOO</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-optional">&amp;optional</a> <span class="syntax-interned-symbol">b</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">c</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">sea</span></span>)</span>
					    <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-key">&amp;key</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">d</span> <span class="syntax-number">2</span>)</span>
					    <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-aux">&amp;aux</a> <span class="syntax-interned-symbol">e</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">f</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">eff</span></span>)</span>)</span>)</span>)</span>
  <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-number">1</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">b</span> <span class="syntax-number">2</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">c</span> <span class="syntax-number">3</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">d</span> <span class="syntax-number">4</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">e</span> <span class="syntax-number">5</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">f</span> <span class="syntax-number">6</span>)</span>)</span>
</span></code></pre><br/><br/><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">create-foo</span> <span class="syntax-number">10</span>)</span>
</span></code> <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; #S<code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">foo</span> <span class="syntax-interned-symbol">a</span> <span class="syntax-number">10</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-number">2</span> <span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">sea</span> <span class="syntax-interned-symbol">d</span> <span class="syntax-number">2</span> <span class="syntax-interned-symbol">e</span> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">nil</a> <span class="syntax-interned-symbol">f</span> <span class="syntax-interned-symbol">eff</span>)</span>
</span></code><br/><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">create-foo</span> <span class="syntax-number">10</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">bee</span></span> <span class="syntax-quote">'<span class="syntax-interned-symbol">see</span></span> <span class="syntax-keyword-symbol">:d</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">dee</span></span>)</span>
</span></code> <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; #S<code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">foo</span> <span class="syntax-interned-symbol">a</span> <span class="syntax-number">10</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">bee</span> <span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">see</span> <span class="syntax-interned-symbol">d</span> <span class="syntax-interned-symbol">dee</span> <span class="syntax-interned-symbol">e</span> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">nil</a> <span class="syntax-interned-symbol">f</span> <span class="syntax-interned-symbol">eff</span>)</span>
</span></code><br/><br/>In the definition:<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">defstruct</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">frob</span> <span class="syntax-cons">(<span class="syntax-keyword-symbol">:constructor</span> <span class="syntax-interned-symbol">create-frob</span>
		<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-key">&amp;key</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">b</span> <span class="syntax-number">3</span> <span class="syntax-interned-symbol">have-b</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">c-token</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">c</span></span>)</span> 
		        <span class="syntax-cons">(<span class="syntax-interned-symbol">c</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">c-token</span> <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-interned-symbol">have-b</span> <span class="syntax-number">7</span> <span class="syntax-number">2</span>)</span>)</span>)</span>)</span>)</span>)</span>
	<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span>)</span>
</span></code></pre><br/><br/>the c-token argument is used merely to supply a value used in the <br/>initialization of the c slot. The "supplied-p" arguments of<br/>keyword arguments might be of this form.<br/><br/></pre></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>This is a logical extension of the specification which makes some programming easier. <br/></section><section id="section-Current practice" class="section"><h2 class="section-title">Current practice</h2>Many implementations signal an error if given <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-key">&amp;KEY</a> arguments or arguments that are not slot names. The latest version of IIM Common  Lisp allows <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-key">&amp;KEY</a> arguments in this manner. Envos Medley (Xerox Common Lisp) implements the proposal.  <br/></section><section id="section-Cost to Implementors" class="section"><h2 class="section-title">Cost to Implementors</h2>The modifications to allow intermixed keywords and optionals in implementations that don't already are likely simple.  <br/></section><section id="section-Cost to Users" class="section"><h2 class="section-title">Cost to Users</h2>No cost, this is upward compatible. <br/></section><section id="section-Cost of non-adoption" class="section"><h2 class="section-title">Cost of non-adoption</h2>The current situation is non-intuitive and needless restrictive. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>Much easier for users to write the constructor function they want. Probably implementation code would be reduced, since this would no  longer be an error. <br/></section><section id="section-Esthetics" class="section"><h2 class="section-title">Esthetics</h2>Minor improvement since it removes a needless restriction. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>Possibly  references to "By-position", "positional", and "By Order of Arguments" constructor function might need to be changed to something else in the standard.  (They can still be called BOA-constructors, though, right?  :<a class="function-reference" href="../chapter-12.xhtml#function--">-</a>) <br/>Version 2 of this proposal was on the January 1989 ballot. <br/></section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>