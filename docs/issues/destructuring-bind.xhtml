<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” DESTRUCTURING-BIND</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">DESTRUCTURING-BIND</span><br/><ol class="local-toc"><li><a href="#section-Status">Status</a><ol> </ol></li><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit history">Edit history</a><ol> </ol></li><li><a href="#section-Problem Description">Problem Description</a><ol> </ol></li><li><a href="#issue-destructuring-bind:new-macro">Proposal NEW-MACRO</a><ol> </ol></li><li><a href="#section-Test Case">Test Case</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Current Practice">Current Practice</a><ol> </ol></li><li><a href="#section-Cost to Implementors">Cost to Implementors</a><ol> </ol></li><li><a href="#section-Cost to Users">Cost to Users</a><ol> </ol></li><li><a href="#section-Cost of Non-Adoption">Cost of Non-Adoption</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Aesthetics">Aesthetics</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue DESTRUCTURING-BIND [Cleanup] [ADDITION]</h1><section id="section-Status" class="status-unknown section"><h2 class="section-title">Status</h2>? </section><section id="section-References" class="section"><h2 class="section-title">References</h2><a class="macro-reference" href="../chapter-3.xhtml#macro-defmacro">defmacro</a> (CLtL pp145-151), The <a class="macro-reference" href="../chapter-6.xhtml#macro-loop">loop</a> Facility (X3J13/89-004) </section><section id="section-Edit history" class="section"><h2 class="section-title">Edit history</h2>24-Jan-89, Version 1 by Pitman 25-Jan-89, Version 2 by Pitman 29-Mar-89, Version 3, by Moon, amended based on poll </section><section id="section-Problem Description" class="section"><h2 class="section-title">Problem Description</h2>  Common Lisp programmers have frequently complained that the   destructuring facility used by <a class="macro-reference" href="../chapter-3.xhtml#macro-defmacro">defmacro</a> is not made available   for use in ordinary programming situations involving list data. <br/>  The presence of a destructuring facility in the recently adopted   <a class="macro-reference" href="../chapter-6.xhtml#macro-loop">loop</a> facility will be likely to make the absence of a separable   destructuring facility all the more apparent. <br/>  Prior to the introduction of <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a> into Maclisp, many people wrote   their own <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a> macros. A popular expansion was in terms of a <a class="macro-reference" href="../chapter-6.xhtml#macro-do">do</a>   which did not iterate. eg,     <code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">A</span> <span class="syntax-number">3</span>)</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">A</span>)</span>)</span>
</span></code> ==&gt; <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-6.xhtml#macro-do">do</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">A</span> <span class="syntax-number">3</span>)</span>)</span> <span class="syntax-symbol">()</span> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-return">return</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">A</span>)</span>)</span>)</span>
</span></code>   While this practice `worked,' it was not perspicuous and contributed    substantially to non-readability: not only were the macros hard to   understand, but the surface interface itself was not standardized   and varied in subtle ways. For example, some <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a> macros allowed <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-go">go</a>   statements while others did not. <br/>  There is now considerable danger that a lot of people will write   <a class="macro-reference" href="../chapter-5.xhtml#macro-destructuring-bind">destructuring-bind</a> variants in terms of a <a class="macro-reference" href="../chapter-6.xhtml#macro-loop">loop</a> expression that   immediately returns.     <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-destructuring-bind">destructuring-bind</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">B</span>)</span> <span class="syntax-interned-symbol">C</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">FOO</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">B</span> <span class="syntax-interned-symbol">C</span>)</span>)</span>
</span></code>     ==&gt; <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-6.xhtml#macro-loop">loop</a> <span class="syntax-interned-symbol">FOR</span> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">B</span>)</span> <span class="syntax-interned-symbol">C</span>)</span> <span class="syntax-interned-symbol">ON</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">FOO</span>)</span> <a class="macro-reference" href="../chapter-6.xhtml#macro-do">do</a> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-return">return</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">B</span> <span class="syntax-interned-symbol">C</span>)</span>)</span>)</span>
</span></code>   Since the destructuring offered by <a class="macro-reference" href="../chapter-6.xhtml#macro-loop">loop</a> is different in subtle ways   from the destructuring offered by <a class="macro-reference" href="../chapter-5.xhtml#macro-destructuring-bind">destructuring-bind</a> in implementations   offering that primitive natively, gratuitous headaches could result. <br/></section><section class="status-unknown proposal" id="issue-destructuring-bind:new-macro"><h2 class="section-title">Proposal NEW-MACRO</h2>  Provide a macro called <a class="macro-reference" href="../chapter-5.xhtml#macro-destructuring-bind">destructuring-bind</a> which behaves like the   destructuring bind in <a class="macro-reference" href="../chapter-3.xhtml#macro-defmacro">defmacro</a>. Specifically... <br/>  <a class="macro-reference" href="../chapter-5.xhtml#macro-destructuring-bind">destructuring-bind</a> lambda-list expression {decl}* {form}*   [Macro] <br/>   Binds the variables specified in LAMBDA-LIST to the corresponding    values in the tree structure resulting from evaluating <a class="glossary-reference" href="../chapter-26.xhtml#glossary-expression">expression</a>,    then evaluates the FORMS in the body. <br/>   Anywhere in the LAMBDA-LIST where a parameter name may appear, and    where ordinary lambda-list syntax (as described in CLtL section 5.2.2)    does not otherwise allow a list, a lambda-list may appear in place of    the parameter name. When this is done, then the argument form that    would match the parameter is treated as a <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">possibly</span> <span class="syntax-interned-symbol">dotted</span>)</span>
</span></code> list, to    be used as an argument forms list for satisfying the parameters in    the embedded lambda-list. <br/>   If any of the lambda list keywords <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-optional">&amp;OPTIONAL</a>, <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-rest">&amp;REST</a>, <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-key">&amp;KEY</a>,    <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-allow-other-keys">&amp;ALLOW-OTHER-KEYS</a> and <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-aux">&amp;AUX</a> appears in the lambda list, it is treated    as with any other lambda-list. <br/>   If the lambda list keyword <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-body">&amp;BODY</a> appears, it is treated as a synonym    for <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-rest">&amp;REST</a>. <br/>   The lambda list keyword <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-environment">&amp;ENVIRONMENT</a> is not allowed. <br/>   If the lambda list keyword <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-whole">&amp;WHOLE</a> appears, it must be followed by a    single variable that is bound to the entire expression at the current    level. <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-whole">&amp;WHOLE</a> and its following variable should appear first in the    list, before any other parameter or lambda-list keyword. <br/>   It is also permissible for any level of the LAMBDA-LIST to be dotted,    ending in a parameter name. This situation is treaed exactly as if    the aprameter name that ends the list had appeared preceded by <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-rest">&amp;REST</a>    in a proper list. For example, the notation <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">X</span> <span class="syntax-interned-symbol">Y</span> <span class="syntax-symbol">.</span> <span class="syntax-interned-symbol">Z</span>)</span>
</span></code> is equivalent    to <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">X</span> <span class="syntax-interned-symbol">Y</span> <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-rest">&amp;REST</a> <span class="syntax-interned-symbol">Z</span>)</span>
</span></code>. <br/>   If the result of evaluating the expression does not match the     destructuring pattern, an error should be signaled.  <br/></section><section id="section-Test Case" class="section"><h2 class="section-title">Test Case</h2><pre>  <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">IOTA</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">N</span>)</span> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-6.xhtml#macro-loop">loop</a> <span class="syntax-interned-symbol">FOR</span> <span class="syntax-interned-symbol">I</span> <span class="syntax-interned-symbol">FROM</span> <span class="syntax-number">1</span> <span class="syntax-interned-symbol">TO</span> <span class="syntax-interned-symbol">N</span> <span class="syntax-interned-symbol">COLLECT</span> <span class="syntax-interned-symbol">I</span>)</span>)</span>
</span></code> ;helper<br/><br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-destructuring-bind">destructuring-bind</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">A</span> <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-optional">&amp;OPTIONAL</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">B</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">BEE</span></span>)</span>)</span> <span class="syntax-interned-symbol">ONE</span> <span class="syntax-interned-symbol">TWO</span> <span class="syntax-interned-symbol">THREE</span>)</span>
		      <span class="syntax-quasiquote">`<span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">ALPHA</span>)</span> <span class="syntax-unquote">,@<span class="syntax-cons">(<span class="syntax-interned-symbol">IOTA</span> <span class="syntax-number">3</span>)</span></span>)</span></span>
    <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">B</span> <span class="syntax-interned-symbol">THREE</span> <span class="syntax-interned-symbol">TWO</span> <span class="syntax-interned-symbol">ONE</span>)</span>)</span>
</span></code></pre><br/>  <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">ALPHA</span> <span class="syntax-interned-symbol">BEE</span> <span class="syntax-number">3</span> <span class="syntax-number">2</span> <span class="syntax-number">1</span>)</span>
</span></code><br/><br/></pre></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>  The proposal directly addresses the stated problem, and is current practice   in numerous implementations. Our charter effectively dictates that where   feasible we should try to head off the widespread development of uselessly   different variants of commonplace tools. <br/>   The intent of the specification is to make <a class="macro-reference" href="../chapter-5.xhtml#macro-destructuring-bind">destructuring-bind</a> lambda-lists    compatible with inner-list elements of a macro lambda-list. <br/></section><section id="section-Current Practice" class="section"><h2 class="section-title">Current Practice</h2>  Symbolics Genera, Envos Medley, TI Explorer, and Lucid <a class="package-reference" href="../chapter-11.xhtml#package-cl">cl</a> all offer   <a class="macro-reference" href="../chapter-5.xhtml#macro-destructuring-bind">destructuring-bind</a>, though the details vary slightly. <br/>  The <a class="macro-reference" href="../chapter-5.xhtml#macro-destructuring-bind">destructuring-bind</a> offered by Symbolics Genera signals an error if   the pattern is not matched. The TI Explorer version does not. <br/></section><section id="section-Cost to Implementors" class="section"><h2 class="section-title">Cost to Implementors</h2>  Very small. In most cases, it's a matter of renaming and/or exporting an   already existing symbol. In a few cases, a very small amount of    `program interface' code would have to be written. <br/></section><section id="section-Cost to Users" class="section"><h2 class="section-title">Cost to Users</h2>  None. This is an upward compatible change. <br/></section><section id="section-Cost of Non-Adoption" class="section"><h2 class="section-title">Cost of Non-Adoption</h2>  Loss of the Benefits and Aesthetics cited below. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>  Users will get a powerful feature they have asked for on many occassions. <br/>  In implementations which `autoload' code, it would be better for this   support to be separable so that people could do <a class="macro-reference" href="../chapter-5.xhtml#macro-destructuring-bind">destructuring-bind</a>   without demand loading all other <a class="macro-reference" href="../chapter-6.xhtml#macro-loop">loop</a> support. <br/></section><section id="section-Aesthetics" class="section"><h2 class="section-title">Aesthetics</h2>  Defining this macro centrally for the Common Lisp community will reduce   subtle deviations, which will in turn have positive aesthetic impact. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>  JonL observes that although <a class="macro-reference" href="../chapter-6.xhtml#macro-loop">loop</a> does destructuring, it can't directly   make use of the <a class="macro-reference" href="../chapter-5.xhtml#macro-destructuring-bind">destructuring-bind</a> interface suggested here. <br/>  Pitman and Gray think a facility of this sort is a good idea, though   obviously the details may still need a little fleshing out before the   proposal is ready for vote. <br/>  To date, the excuse for not satisfying this request has been a   religious war between factions who want to destructure lists by   writing     <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-destructuring-bind">destructuring-bind</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">var1</span> <span class="syntax-interned-symbol">var2</span> <span class="syntax-interned-symbol">var3</span>)</span> <a class="function-reference" href="../chapter-12.xhtml#function-exp">exp</a> <span class="syntax-symbol">.</span> <span class="syntax-interned-symbol">body</span>)</span>
</span></code>   and those who want to destructure lists by writing     <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-destructuring-bind">destructuring-bind</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">var1</span> <span class="syntax-interned-symbol">var2</span> <span class="syntax-interned-symbol">var3</span>)</span> <a class="function-reference" href="../chapter-12.xhtml#function-exp">exp</a> <span class="syntax-symbol">.</span> <span class="syntax-interned-symbol">body</span>)</span>
</span></code> <br/>  The advantage of the former approach is that it is notationally   concise for the common case of destructuring a list. The disadvantage   is that it is not extensible to accomodate abstract kinds of   destructuring. <br/>  The advantage of the latter approach is that it allows interesting   extensions that accomodate data-hiding, such as:     <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-3.xhtml#macro-defmacro">defmacro</a> <span class="syntax-interned-symbol">MAKE-FOO</span> <span class="syntax-cons">(<a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-rest">&amp;REST</a> <span class="syntax-interned-symbol">ELEMENTS</span>)</span> <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-list">list</a> <span class="syntax-unquote">,@<span class="syntax-interned-symbol">ELEMENTS</span></span>)</span></span>)</span>
</span></code>     <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-destructuring-bind">destructuring-bind</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">MAKE-FOO</span> <span class="syntax-interned-symbol">var1</span> <span class="syntax-interned-symbol">var2</span> <span class="syntax-interned-symbol">var3</span>)</span> <a class="function-reference" href="../chapter-12.xhtml#function-exp">exp</a> <span class="syntax-symbol">.</span> <span class="syntax-interned-symbol">body</span>)</span>
</span></code>   and later the ability to change the representation of a <a class="index/code-reference" href="../chapter-1.xhtml#index/code-foo">foo</a> without   updating the associated binding forms. The disadvantage is that it   is more verbose in the common case of destructuring a list, and still   even more verbose for nested lists. <br/>  Although destructuring has always existed in <a class="macro-reference" href="../chapter-3.xhtml#macro-defmacro">defmacro</a>, this has not   been adequate precedence for deciding the outcome of the religious war   because <a class="macro-reference" href="../chapter-3.xhtml#macro-defmacro">defmacro</a> only needs to destructure programs, and programs are   generally made up only of lists &ndash; not arbitrary user-defined abstract   data types. <br/>  The lambda-list form of <a class="macro-reference" href="../chapter-5.xhtml#macro-destructuring-bind">destructuring-bind</a> in this version is   not completely compatible with the destructuring done by <a class="macro-reference" href="../chapter-6.xhtml#macro-loop">loop</a>   in three areas: <a class="macro-reference" href="../chapter-6.xhtml#macro-loop">loop</a> allows <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> elements of a list to be ignored,   <a class="macro-reference" href="../chapter-6.xhtml#macro-loop">loop</a> does not allow &amp;-keywords, and <a class="macro-reference" href="../chapter-6.xhtml#macro-loop">loop</a> destructuring ignores   extra elements in the list being matched. </section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>