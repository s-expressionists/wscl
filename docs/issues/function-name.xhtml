<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” FUNCTION-NAME</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">FUNCTION-NAME</span><br/><ol class="local-toc"><li><a href="#section-Status">Status</a><ol> </ol></li><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit history">Edit history</a><ol> </ol></li><li><a href="#section-Problem description">Problem description</a><ol> </ol></li><li><a href="#issue-function-name:small">Proposal SMALL</a><ol> <li><a href="#section-Rationale">Rationale</a><ol> </ol></li></ol></li><li><a href="#issue-function-name:medium">Proposal MEDIUM</a><ol> <li><a href="#section-Rationale">Rationale</a><ol> </ol></li></ol></li><li><a href="#issue-function-name:large">Proposal LARGE</a><ol> <li><a href="#section-Rationale">Rationale</a><ol> </ol></li></ol></li><li><a href="#section-Examples">Examples</a><ol> </ol></li><li><a href="#section-Current practice">Current practice</a><ol> </ol></li><li><a href="#section-Cost to Implementors">Cost to Implementors</a><ol> </ol></li><li><a href="#section-Cost to Users">Cost to Users</a><ol> </ol></li><li><a href="#section-Cost of non-adoption">Cost of non-adoption</a><ol> </ol></li><li><a href="#section-Performance impact">Performance impact</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Esthetics">Esthetics</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li><li><a href="#section-Esthetics">Esthetics</a><ol> </ol></li><li><a href="#section-Cost to Implementors">Cost to Implementors</a><ol> </ol></li><li><a href="#section-Cost of Non-adoption">Cost of Non-adoption</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue FUNCTION-NAME [NIL] [ADDITION]</h1><h2>Related issues</h2><ul><span class="issue-reference error">issue:SETF-FUNCTION-VS-MACRO</span><span class="issue-reference error">issue:SETF-PLACES</span></ul><section id="section-Status" class="status-passed section"><h2 class="section-title">Status</h2>Proposal <a class="proposal-reference" href="#issue-function-name:large">LARGE</a>, with sections 7, 8, 9 removed, passed Mar 89 X3J13 </section><section id="section-References" class="section"><h2 class="section-title">References</h2><a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> rules for what -place<a class="function-reference" href="../chapter-12.xhtml#function--">-</a> can be (pp.94-7) <a class="function-reference" href="../chapter-5.xhtml#function-fboundp">fboundp</a> function (p.90) <a class="function-reference" href="../chapter-5.xhtml#function-fmakunbound">fmakunbound</a> function (p.92) <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> special form (p.87) <a class="function-reference" href="../chapter-10.xhtml#function-symbol-function">symbol-function</a> and setf of <a class="function-reference" href="../chapter-10.xhtml#function-symbol-function">symbol-function</a> (p.90) 88-002R pages 1-21, 2-21, 2-26, 2-39, 2-44, 2-46, 2-51, and 2-55 (There are additional references for the <a class="proposal-reference" href="#issue-function-name:medium">MEDIUM</a> and <a class="proposal-reference" href="#issue-function-name:large">LARGE</a> proposals, but they are not listed here.  They're obvious.) </section><section id="section-Edit history" class="section"><h2 class="section-title">Edit history</h2>Version 1, 23-Jan-89, by Moon  (based on discussion at Jan X3J13 meeting) <br/></section><section id="section-Problem description" class="section"><h2 class="section-title">Problem description</h2>The Common Lisp Object System needs a well-defined way to relate the name and arguments of a writer function to those of a reader function, because both functions can be generic and can have user-defined methods.  The way that was adopted into Common Lisp when X3J13 voted to accept document 88-002R was to use a list <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-interned-symbol">reader</span>)</span>
</span></code></pre> as the name of the writer function. <br/>Some changes to the non-object-oriented portion of Common Lisp are required in order to support this. <br/>This issue has three proposals. <br/></section><section class="status-unknown proposal" id="issue-function-name:small"><h2 class="section-title">Proposal SMALL</h2>  Add a new concept "<a class="issue-reference" href="#issue-function-name">function-name</a>" <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">called</span> <span class="syntax-string">"function-specifier"</span> <span class="syntax-interned-symbol">in</span>
  <span class="syntax-interned-symbol">88-002R</span>)</span>
</span></code></pre>.  A <a class="issue-reference" href="#issue-function-name">function-name</a> is either a symbol or a 2-element list whose   first element is the symbol <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> and whose second element is a symbol.   Implementations are free to extend the syntax of function-names to   include lists beginning with additional symbols other than <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a>. <br/>  Add a new function <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-fdefinition">fdefinition</a> <span class="syntax-interned-symbol">function-name</span>)</span>
</span></code></pre>, which returns the   current global function definition named by <a class="issue-reference" href="#issue-function-name">function-name</a>, or signals   an error if there is no global function definition.  This follows all   the same rules listed for <a class="function-reference" href="../chapter-10.xhtml#function-symbol-function">symbol-function</a> in CLtL p.90. <br/>  Add <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> of <a class="function-reference" href="../chapter-5.xhtml#function-fdefinition">fdefinition</a> to change the current global function definition   named by a <a class="issue-reference" href="#issue-function-name">function-name</a>.  This follows all the same rules listed for   <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> of <a class="function-reference" href="../chapter-10.xhtml#function-symbol-function">symbol-function</a> in CLtL p.90. <br/>  Change the <a class="function-reference" href="../chapter-5.xhtml#function-fboundp">fboundp</a> and <a class="function-reference" href="../chapter-5.xhtml#function-fmakunbound">fmakunbound</a> functions, and the <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> special   form, to accept function-names in place of symbols.  Implementation   defined extensions to the syntax of function-names cannot use the   symbol <a class="macro-reference" href="../chapter-3.xhtml#macro-lambda">lambda</a>, since <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> already uses that symbol. <br/>  Change the rules for <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> places (CLtL pp.94-7) by adding the following   clause after all the existing clauses: <br/>   <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> Any other list whose first element is a symbol, call it reader.      In this case, <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> expands into a call to the function named by the      list <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-interned-symbol">reader</span>)</span>
</span></code></pre>.  The first argument is the new value and the      remaining arguments are the values of the remaining elements of      -place<a class="function-reference" href="../chapter-12.xhtml#function--">-</a>.  This expansion occurs regardless of whether reader or      <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-interned-symbol">reader</span>)</span>
</span></code></pre> is defined as a function locally, globally, or not at      all.  For example,          <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">reader</span> <span class="syntax-interned-symbol">arg1</span> <span class="syntax-interned-symbol">arg2...</span>)</span> <span class="syntax-interned-symbol">new-value</span>)</span>
</span></code></pre>      expands into a form with the same effect and value as          (<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a> ((#:temp-1 arg1)          ;force correct order of evaluation                (#:temp-2 arg2)                ...                (#:temp-0 new-value))            (<a class="function-reference" href="../chapter-5.xhtml#function-funcall">funcall</a> <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-interned-symbol">reader</span>)</span>)</span>
</span></code></pre> #:temp-0 #:temp-1 #:temp-2...)). <br/>  Change the functions GET-SETF-METHOD and GET-SETF-METHOD-MULTIPLE-VALUE   to implement the above change to the rules. <br/>  Document that a function named <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-interned-symbol">reader</span>)</span>
</span></code></pre> should return its first   argument as its only value, in order to preserve the semantics of <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a>. <br/>  Change the macro <a class="macro-reference" href="../chapter-7.xhtml#macro-defgeneric">defgeneric</a> and the function <a class="function-reference" href="../chapter-7.xhtml#function-ensure-generic-function">ensure-generic-function</a> to   refer to the function <a class="function-reference" href="../chapter-5.xhtml#function-fdefinition">fdefinition</a> where they now refer to the function   <a class="function-reference" href="../chapter-10.xhtml#function-symbol-function">symbol-function</a>. <br/>  Change the macros <a class="macro-reference" href="../chapter-7.xhtml#macro-defclass">defclass</a>, <a class="macro-reference" href="../chapter-7.xhtml#macro-defgeneric">defgeneric</a>, and <a class="macro-reference" href="../chapter-7.xhtml#macro-defmethod">defmethod</a>, the special forms   GENERIC-FLET and GENERIC-LABELS, and the functions <a class="function-reference" href="../chapter-25.xhtml#function-documentation">documentation</a> and   <a class="function-reference" href="../chapter-7.xhtml#function-ensure-generic-function">ensure-generic-function</a> to use the term "<a class="issue-reference" href="#issue-function-name">function-name</a>" where they now   use the term "function-specifier" or "function specifier". <br/><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>  This is the minimum change to Common Lisp needed to do what 88-002R says   about <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-interned-symbol">reader</span>)</span>
</span></code></pre>.  Giving implementations freedom to extend the syntax   of function-names allows for current practice.  Changing the name from   "function-specifier" to "<a class="issue-reference" href="#issue-function-name">function-name</a>" avoids confusion and improves   consistency with the rest of the language, at the cost of a few small   changes to 88-002R. <br/></section></section><section class="status-unknown proposal" id="issue-function-name:medium"><h2 class="section-title">Proposal MEDIUM</h2>  Everything in <a class="issue-reference" href="#issue-function-name:small">FUNCTION-NAME:SMALL</a>, and in addition: <br/>  Change the <a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a> macro to accept a <a class="issue-reference" href="#issue-function-name">function-name</a> for its name argument,   instead of only accepting a symbol.  If <a class="issue-reference" href="#issue-function-name">function-name</a> is <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-interned-symbol">sym</span>)</span>
</span></code></pre>,   the body is surrounded by an implicit block named sym. <br/><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>  Keeping <a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a> consistent with <a class="macro-reference" href="../chapter-7.xhtml#macro-defmethod">defmethod</a> is a good idea.  Also 88-002R   says "The name of a generic function, like the name of an ordinary   function, can be either a symbol or a two-element list whose...", which   implies this change to <a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a>. <br/></section></section><section class="status-passed proposal" id="issue-function-name:large"><h2 class="section-title">Proposal LARGE</h2>  Everything in <a class="issue-reference" href="#issue-function-name:medium">FUNCTION-NAME:MEDIUM</a>, and in addition the following   numbered points, each of which could be adopted independently,   except where explicitly noted: <br/><ol><li> Change the function <a class="function-reference" href="../chapter-3.xhtml#function-compile">compile</a> to accept a <a class="issue-reference" href="#issue-function-name">function-name</a> as its name argument. <br/></li><li> Change the function <a class="function-reference" href="../chapter-25.xhtml#function-disassemble">disassemble</a> to accept a <a class="issue-reference" href="#issue-function-name">function-name</a> as its name argument. <br/></li><li> Change the <a class="declaration-reference" href="../chapter-3.xhtml#declaration-ftype">ftype</a>, <a class="declaration-reference" href="../chapter-3.xhtml#declaration-inline">inline</a>, and <a class="symbol-reference" href="../chapter-3.xhtml#symbol-notinline">notinline</a> declarations and proclamations to accept function-names, not just symbols, as function names. <br/></li><li> Change the <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-flet">flet</a> and <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-labels">labels</a> special forms to accept a <a class="issue-reference" href="#issue-function-name">function-name</a> in the name position, not just a symbol. <br/></li><li> Change the <a class="macro-reference" href="../chapter-25.xhtml#macro-trace">trace</a> and <a class="macro-reference" href="../chapter-25.xhtml#macro-untrace">untrace</a> macros to accept function-names, not just symbols, in the function name positions. <br/></li><li> Change the <a class="function-reference" href="../chapter-25.xhtml#function-ed">ed</a> function to accept <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-25.xhtml#function-ed">ed</a> <span class="syntax-interned-symbol">function-name</span>)</span>
</span></code></pre> in place of <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-25.xhtml#function-ed">ed</a> <a class="symbol-reference" href="../chapter-2.xhtml#symbol-symbol">symbol</a>)</span>
</span></code></pre>. <br/></li><li> Change the syntax of a function call to allow a <a class="issue-reference" href="#issue-function-name">function-name</a> as the first element of the list, rather than allowing only a symbol. <br/></li><li> Change the <a class="macro-reference" href="../chapter-3.xhtml#macro-defmacro">defmacro</a> macro and the <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-macrolet">macrolet</a> special form to accept a <a class="issue-reference" href="#issue-function-name">function-name</a> in the name position, not just a symbol.  Change the <a class="function-reference" href="../chapter-3.xhtml#function-macro-function">macro-function</a> function to accept function-names, not just symbols. Change the last rule for <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> places to use   (<pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-interned-symbol">reader</span>)</span>
</span></code></pre> #:temp-0 #:temp-1 #:temp-2...) in place of   (<a class="function-reference" href="../chapter-5.xhtml#function-funcall">funcall</a> <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-interned-symbol">reader</span>)</span>)</span>
</span></code></pre> #:temp-0 #:temp-1 #:temp-2...) so that <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-interned-symbol">reader</span>)</span>
</span></code></pre> can be defined as a macro.  This depends on item 7.  If item 4 is rejected, <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-macrolet">macrolet</a> should be stricken from this item. <br/></li><li> Add an optional environment argument to <a class="function-reference" href="../chapter-5.xhtml#function-fdefinition">fdefinition</a>, <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> of <a class="function-reference" href="../chapter-5.xhtml#function-fdefinition">fdefinition</a>, <a class="function-reference" href="../chapter-5.xhtml#function-fboundp">fboundp</a>, and <a class="function-reference" href="../chapter-5.xhtml#function-fmakunbound">fmakunbound</a>.  This is the same as the &amp;environment argument to a macroexpander.  This argument can be used to access local function definitions, to access function definitions in the compile-time remote environment, and to modify function definitions in the compile-time remote environment. <br/></li><li> Change the second, third, fourth, fifth, seventh, and ninth rules for <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> places so that they only apply when the <a class="issue-reference" href="#issue-function-name">function-name</a> refers to the global function definition, rather than a locally defined function or macro.  (The ninth rule is the one that refers to <a class="macro-reference" href="../chapter-5.xhtml#macro-defsetf">defsetf</a> and DEFINE-SETF-METHOD; the other rules listed are the ones that list specific built-in functions).  The effect of this change is that <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> methods defined for global functions are ignored when there is a local function binding; instead, the function named <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-interned-symbol">reader</span>)</span>
</span></code></pre>, which may have a local function binding, is called.  This change is most useful in connection with item 4, but does not actually depend on it. <br/></li><li> Clarify that the eighth rule for <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> places <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <span class="syntax-interned-symbol">one</span> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">macros</span>)</span>
</span></code></pre> uses <a class="function-reference" href="../chapter-3.xhtml#function-macroexpand-1">macroexpand-1</a>, not <a class="function-reference" href="../chapter-3.xhtml#function-macroexpand">macroexpand</a>. <br/></li></ol><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>  This extends the new feature throughout the language, in order to make   things generally more consistent and powerful.  Point by point: <br/>  1,2,3 <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> one should be able to compile, examine, and make declarations   about functions regardless of whether they are named with symbols or   with lists. <br/>  4 <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> locally defined non-generic <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> functions are a logical companion   to locally defined generic <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> functions, which can be defined with   GENERIC-FLET or GENERIC-LABELS.  They make sense on their own, since one   might define a local reader function and want a local writer function   to go with it. <br/>  5,6 <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> one should be able to apply development tools to functions   regardless of how they are named.  The function <a class="function-reference" href="../chapter-25.xhtml#function-documentation">documentation</a> was already   updated to work for function-names by 88-002R.  There might be some   difficulty with <a class="glossary-reference" href="../chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a> syntax extensions to <a class="macro-reference" href="../chapter-25.xhtml#macro-trace">trace</a> and   <a class="macro-reference" href="../chapter-25.xhtml#macro-untrace">untrace</a> conflicting with this new syntax. <br/>  7 <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> this restores consistency between the <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> special form and the   first element of a function call form. <br/>  8 <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> it seems more consistent to allow macros to be named the same way   that ordinary functions are named.  However, this might be considered   redundant with <a class="macro-reference" href="../chapter-5.xhtml#macro-defsetf">defsetf</a>. <br/>  9 <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> this is not needed by the "chapter 1 and 2" level of CLOS, but might   be used by the metaobject based implementation of <a class="function-reference" href="../chapter-7.xhtml#function-ensure-generic-function">ensure-generic-function</a>. <br/>  10 <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> this change was in SETF-FUNCTION-VS-MACRO and makes item 4 more useful. <br/>  11 <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> this change was in SETF-FUNCTION-VS-MACRO and is a good idea, but   actually is independent of everything else being proposed here. <br/></section></section><section id="section-Examples" class="section"><h2 class="section-title">Examples</h2><pre>;This is an example of the sort of syntax 88-002R allows<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-7.xhtml#macro-defmethod">defmethod</a> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-interned-symbol">child</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">new-value</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">parent</span> <span class="syntax-interned-symbol">some-class</span>)</span>)</span>
  <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-7.xhtml#function-slot-value">slot-value</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">child</span></span> <span class="syntax-interned-symbol">parent</span>)</span> <span class="syntax-interned-symbol">new-value</span>)</span>
  <span class="syntax-cons">(<span class="syntax-interned-symbol">update-dependencies</span> <span class="syntax-interned-symbol">parent</span>)</span>
  <span class="syntax-interned-symbol">new-value</span>)</span>
</span></code></pre><br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">child</span> <span class="syntax-interned-symbol">foo</span>)</span> <span class="syntax-interned-symbol">bar</span>)</span>
</span></code></pre><br/><br/>;If <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> of <a class="function-reference" href="../chapter-17.xhtml#function-subseq">subseq</a> was not already built into Common Lisp,<br/>;it could have been defined like this, if the <a class="proposal-reference" href="#issue-function-name:medium">MEDIUM</a> or <a class="proposal-reference" href="#issue-function-name:large">LARGE</a><br/>;proposal is adopted.<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <a class="function-reference" href="../chapter-17.xhtml#function-subseq">subseq</a>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">new-value</span> <a class="type-reference" href="../chapter-17.xhtml#type-sequence">sequence</a> <span class="syntax-interned-symbol">start</span> <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-optional">&amp;OPTIONAL</a> <span class="syntax-interned-symbol">end</span>)</span>
  <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-unless">unless</a> <span class="syntax-interned-symbol">end</span> <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">end</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-17.xhtml#function-length">length</a> <a class="type-reference" href="../chapter-17.xhtml#type-sequence">sequence</a>)</span>)</span>)</span>
  <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">end</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-min">min</a> <span class="syntax-interned-symbol">end</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">start</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-17.xhtml#function-length">length</a> <span class="syntax-interned-symbol">new-value</span>)</span>)</span>)</span>)</span>
  <span class="syntax-cons">(<a class="macro-reference" href="../chapter-6.xhtml#macro-do">do</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">start</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-1+">1+</a> <span class="syntax-interned-symbol">i</span>)</span>)</span>
       <span class="syntax-cons">(<span class="syntax-interned-symbol">j</span> <span class="syntax-number">0</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-1+">1+</a> <span class="syntax-interned-symbol">j</span>)</span>)</span>)</span>
      <span class="syntax-cons">(<span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-=">=</a> <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">end</span>)</span> <span class="syntax-interned-symbol">new-value</span>)</span>
    <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-17.xhtml#function-elt">elt</a> <a class="type-reference" href="../chapter-17.xhtml#type-sequence">sequence</a> <span class="syntax-interned-symbol">i</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-17.xhtml#function-elt">elt</a> <span class="syntax-interned-symbol">new-value</span> <span class="syntax-interned-symbol">j</span>)</span>)</span>)</span>)</span>
</span></code></pre><br/><br/>;The preceding example would have to be defined like this<br/>;if only the <a class="proposal-reference" href="#issue-function-name:small">SMALL</a> proposal is adopted.  This is a method<br/>;all of whose parameter specializer names are <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>.<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-7.xhtml#macro-defmethod">defmethod</a> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <a class="function-reference" href="../chapter-17.xhtml#function-subseq">subseq</a>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">new-value</span> <a class="type-reference" href="../chapter-17.xhtml#type-sequence">sequence</a> <span class="syntax-interned-symbol">start</span> <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-optional">&amp;OPTIONAL</a> <span class="syntax-interned-symbol">end</span>)</span>
  <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-unless">unless</a> <span class="syntax-interned-symbol">end</span> <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">end</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-17.xhtml#function-length">length</a> <a class="type-reference" href="../chapter-17.xhtml#type-sequence">sequence</a>)</span>)</span>)</span>
  <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">end</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-min">min</a> <span class="syntax-interned-symbol">end</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">start</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-17.xhtml#function-length">length</a> <span class="syntax-interned-symbol">new-value</span>)</span>)</span>)</span>)</span>
  <span class="syntax-cons">(<a class="macro-reference" href="../chapter-6.xhtml#macro-do">do</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">start</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-1+">1+</a> <span class="syntax-interned-symbol">i</span>)</span>)</span>
       <span class="syntax-cons">(<span class="syntax-interned-symbol">j</span> <span class="syntax-number">0</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-1+">1+</a> <span class="syntax-interned-symbol">j</span>)</span>)</span>)</span>
      <span class="syntax-cons">(<span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-=">=</a> <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">end</span>)</span> <span class="syntax-interned-symbol">new-value</span>)</span>
    <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-17.xhtml#function-elt">elt</a> <a class="type-reference" href="../chapter-17.xhtml#type-sequence">sequence</a> <span class="syntax-interned-symbol">i</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-17.xhtml#function-elt">elt</a> <span class="syntax-interned-symbol">new-value</span> <span class="syntax-interned-symbol">j</span>)</span>)</span>)</span>)</span>
</span></code></pre><br/><br/>;Another example, showing a locally defined setf function<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">frobulate</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">mumble</span>)</span>
  <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">table</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">mumble-table</span> <span class="syntax-interned-symbol">mumble</span>)</span>)</span>)</span>
    <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-flet">flet</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">foo</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span>)</span>
             <span class="syntax-cons">(<a class="function-reference" href="../chapter-18.xhtml#function-gethash">gethash</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">table</span>)</span>)</span>
           <span class="syntax-cons">(<span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-interned-symbol">foo</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">new</span> <span class="syntax-interned-symbol">x</span>)</span>
             <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-18.xhtml#function-gethash">gethash</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">table</span>)</span> <span class="syntax-interned-symbol">new</span>)</span>)</span>)</span>
      <span class="syntax-interned-symbol">..</span>
      <span class="syntax-cons">(<span class="syntax-interned-symbol">foo</span> <span class="syntax-interned-symbol">a</span>)</span>
      <span class="syntax-interned-symbol">..</span>
      <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">foo</span> <span class="syntax-interned-symbol">a</span>)</span> <span class="syntax-interned-symbol">b</span>)</span>)</span>)</span>)</span>
</span></code></pre><br/><br/>;get-setf-method could implement setf functions by calling<br/>;this function when the earlier rules do not apply<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">get-setf-method-for-setf-function</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">form</span>)</span>
  <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">new-value</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-10.xhtml#function-gensym">gensym</a>)</span>)</span>
	<span class="syntax-cons">(<span class="syntax-interned-symbol">temp-vars</span> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-6.xhtml#macro-do">do</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-cdr">cdr</a> <span class="syntax-interned-symbol">form</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-cdr">cdr</a> <span class="syntax-interned-symbol">a</span>)</span>)</span>
			<span class="syntax-cons">(<span class="syntax-interned-symbol">v</span> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-cons">cons</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-10.xhtml#function-gensym">gensym</a>)</span> <span class="syntax-interned-symbol">v</span>)</span>)</span>)</span>
		       <span class="syntax-cons">(<span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-null">null</a> <span class="syntax-interned-symbol">a</span>)</span> <span class="syntax-interned-symbol">v</span>)</span>)</span>)</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-values">values</a> <span class="syntax-interned-symbol">temp-vars</span>
	    <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-cdr">cdr</a> <span class="syntax-interned-symbol">form</span>)</span>
	    <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">new-value</span>)</span>
	    <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-funcall">funcall</a> <span class="syntax-function">#'<span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-unquote">,<span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-car">car</a> <span class="syntax-interned-symbol">form</span>)</span></span>)</span></span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">new-value</span></span> <span class="syntax-unquote">,@<span class="syntax-interned-symbol">temp-vars</span></span>)</span></span>
	    <span class="syntax-quasiquote">`<span class="syntax-cons">(<span class="syntax-unquote">,<span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-car">car</a> <span class="syntax-interned-symbol">form</span>)</span></span> <span class="syntax-unquote">,@<span class="syntax-interned-symbol">temp-vars</span></span>)</span></span>)</span>)</span>)</span>
</span></code></pre><br/><br/></pre></section><section id="section-Current practice" class="section"><h2 class="section-title">Current practice</h2>  No implementation supports exactly what is proposed.  Symbolics Genera   and the TI Explorer support something close to the <a class="proposal-reference" href="#issue-function-name:medium">MEDIUM</a> proposal, but   differing in a number of details.  Symbolics Genera supports items 1, 2,   3, 6, and 11, and modified forms of items 5 and 8, of the <a class="proposal-reference" href="#issue-function-name:large">LARGE</a> proposal.   Moon considers this proposal's variations from Symbolics current practice   to be an improvement, although incompatible in some cases. <br/>  Many implementations currently support only symbols as function names. <br/>  Symbolics Genera and the TI Explorer have some additional <a class="issue-reference" href="#issue-function-name">function-name</a>   syntaxes. <br/></section><section id="section-Cost to Implementors" class="section"><h2 class="section-title">Cost to Implementors</h2>  The <a class="proposal-reference" href="#issue-function-name:small">SMALL</a> and <a class="proposal-reference" href="#issue-function-name:medium">MEDIUM</a> proposals are estimated to be no more than 50 lines   of code and require no changes to the "guts" of the interpreter and   compiler.  Most of the code for this can be written portably and was   shown on two slides at the X3J13 meeting. <br/>  Some of the changes in the <a class="proposal-reference" href="#issue-function-name:large">LARGE</a> proposal are trivial, some require   the compiler to use <a class="function-reference" href="../chapter-5.xhtml#function-equal">equal</a> instead of <a class="function-reference" href="../chapter-5.xhtml#function-eq">eq</a> to compare function names, and   items 4, 7, and 8 might require a more substantial implementation   effort.  Even that effort is estimated to be negligible compared to   the effort required to implement CLOS. <br/></section><section id="section-Cost to Users" class="section"><h2 class="section-title">Cost to Users</h2>  No cost to users, other than program-understanding programs, since this   is an upward compatible addition. <br/>  As with any language extension, some program-understanding programs may   need to be enhanced.  A particular issue here is programs that assume   that all function names are symbols.  They may use <a class="function-reference" href="../chapter-10.xhtml#function-get">get</a> to access   properties of a function name or use <a class="function-reference" href="../chapter-5.xhtml#function-eq">eq</a> or <a class="function-reference" href="../chapter-5.xhtml#function-eql">eql</a> <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">perhaps</span> <span class="syntax-interned-symbol">via</span> <a class="function-reference" href="../chapter-14.xhtml#function-member">member</a> <a class="macro-reference" href="../chapter-5.xhtml#macro-or">or</a>
  <a class="function-reference" href="../chapter-14.xhtml#function-assoc">assoc</a>)</span>
</span></code></pre> to compare function names for equality.  Such programs will need   improvement before they can understand programs that use the new feature,   but otherwise they will still work. <br/></section><section id="section-Cost of non-adoption" class="section"><h2 class="section-title">Cost of non-adoption</h2>  We would have to make some other language change since the language   became inconsistent when 88-002R was adopted. <br/></section><section id="section-Performance impact" class="section"><h2 class="section-title">Performance impact</h2>  This has no effect on performance of compiled code.  It might slow   down the compiler and interpreter but not by very much. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>  CLOS will work as designed. <br/></section><section id="section-Esthetics" class="section"><h2 class="section-title">Esthetics</h2>  Some people dislike using anything but symbols to name functions.   Other people would prefer that if the change is to be made at all,   the <a class="proposal-reference" href="#issue-function-name:large">LARGE</a> proposal be adopted so that the language is uniform in its   treatment of the new extended function names.  Other proposals for   how to deal with <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> in CLOS were considerably less esthetic,   especially when package problems are taken into account. <br/>  <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> would be more esthetic, but less powerful, if it had only the   proposed setf functions and did not have setf macros.  Such a major   incompatible change is of course out of the question; however, if setf   functions are stressed over setf macros, <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> will be much easier to   teach. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>  Moon supports at least <a class="issue-reference" href="#issue-function-name:medium">FUNCTION-NAME:MEDIUM</a>.  He does not necessarily   approve of all parts of <a class="issue-reference" href="#issue-function-name:large">FUNCTION-NAME:LARGE</a>. <br/>! Additional Comments: <br/>On the whole, I like this presentation much better than either of the other two writeups that were circulated previously.  I suspect that it might be necessary to vote on each of the items in the <a class="proposal-reference" href="#issue-function-name:large">LARGE</a> proposal individually, though.  I think I would support items 1, 2, and 11, and don't have any particular objections to 3, 5, and 6.  For item 4, if consistency with GENERIC-FLET and GENERIC-LABELS is an object, another alternative is to change those two special forms to be like ordinary <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-flet">flet</a> and <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-labels">labels</a>, instead of vice versa. <br/><a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> I support <a class="issue-reference" href="#issue-function-name:medium">FUNCTION-NAME:MEDIUM</a> and may support <a class="proposal-reference" href="#issue-function-name:large">LARGE</a> once I think about it some more. <br/>As I explained in Hawaii, support for either of these is based on the :conc-name bugs being removed from the condition system.  Of course, I believe the best way to do that is to CLOSify it. <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a>  I'm still thinking about this, but while I am I wanted point out that <a class="proposal-reference" href="#issue-function-name:medium">MEDIUM</a> is unacceptable to me because I don't think <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-flet">flet</a> and <a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a> should disagree on what they permit as defined names. If <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-flet">flet</a> were added to <a class="proposal-reference" href="#issue-function-name:medium">MEDIUM</a>, I suspect I'd think it was an internally consistent position. <br/><a class="proposal-reference" href="#issue-function-name:large">LARGE</a> has an appeal to me in general, but I'm still mulling over  the specifics. <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> I favor the <a class="issue-reference" href="#issue-function-name:large">FUNCTION-NAME:LARGE</a> proposal, because it defines a single, useful notion of what a function name is.  The other proposals have the flaw that there are two kinds of function names:  symbols, and extended names, with only some of the Lisp primitives accepting the latter.  This may be convenient for some implementations, for the short term, but it fragments the language. <br/>I have two other comments on the proposal. <br/><ol><li> Reducing the Cost to Implementors One observation you could put in the Cost To Implementors section is that none of the <a class="proposal-reference" href="#issue-function-name:small">SMALL</a>, <a class="proposal-reference" href="#issue-function-name:medium">MEDIUM</a>, or <a class="proposal-reference" href="#issue-function-name:large">LARGE</a> proposals require changes to the "guts" of the interpreter and compiler.  This is because an implementation is free to use plain symbols internally to name functions, and use a hack like JonL's <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a>:|3.<a class="index/code-reference" href="../chapter-1.xhtml#index/code-foo">foo</a>.<a class="index/code-reference" href="../chapter-1.xhtml#index/code-bar">bar</a>| mapping to convert non-symbol names to symbols.  This conversion would be done as a part of parsing the handful of forms which accept function names, and then all other passes of the interpreter and compiler <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <span class="syntax-string">"guts"</span>)</span>
</span></code></pre> would just see symbols.  (By "parsing" I mean ensuring the right number and type of syntactic subforms.  You can see that this is a very early and simple stage of processing.)  Or, Lisp compilers with an "alphatization" phase could perform function name symbolization at that phase. <br/></li><li> Finishing the Job of Regularization I'd like to suggest two additions to your smorgasbord of options in the <a class="issue-reference" href="#issue-function-name:large">FUNCTION-NAME:LARGE</a> section of the proposal.  One addition would regularize a major special case of functions--lambda expressions.  The other addition would reaffirm an unstated regularity in the language, that function names can stand in for functions under <a class="function-reference" href="../chapter-5.xhtml#function-funcall">funcall</a> and <a class="function-reference" href="../chapter-5.xhtml#function-apply">apply</a>. Not only can the treatment of symbolic and setf-list function names be regularized, but lambda too can be treated in a consistent manner. <br/>If these two points are added to your proposal, the language as a whole would have a completely uniform treatment of functions and function names.  Here they are: <br/>13. Declare that any function name is a suitable argument to <a class="function-reference" href="../chapter-5.xhtml#function-funcall">funcall</a> and     <a class="function-reference" href="../chapter-5.xhtml#function-apply">apply</a>.  In such a case, the function name is passed to <a class="function-reference" href="../chapter-5.xhtml#function-fdefinition">fdefinition</a>,     and the result <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">which</span> <span class="syntax-interned-symbol">may</span> <span class="syntax-interned-symbol">in</span> <span class="syntax-interned-symbol">turn</span> <span class="syntax-interned-symbol">be</span> <span class="syntax-interned-symbol">a</span> <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> <span class="syntax-interned-symbol">name</span>)</span>
</span></code></pre> is called.     That is, the following two expressions are equivalent, when fname     is a function name: 	<pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-funcall">funcall</a> <span class="syntax-interned-symbol">fname</span> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span>
</span></code></pre> 	  &lt;==&gt; 	<pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-funcall">funcall</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-fdefinition">fdefinition</a> <span class="syntax-interned-symbol">fname</span>)</span> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span>
</span></code></pre>     Note that the definition is sought in the global environment.     Compare with the rule which applies to a function name occurs,     syntactically, as the car of a list in code: 	<pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">fname</span> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span>
</span></code></pre> 	  &lt;==&gt; 	<pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-funcall">funcall</a> <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> <span class="syntax-interned-symbol">fname</span>)</span> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span>
</span></code></pre> 	  &lt;==&gt; <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">under</span> <span class="syntax-interned-symbol">proposal</span> <span class="syntax-interned-symbol">item</span> <span class="syntax-number">9</span>)</span>
</span></code></pre> 	<pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-funcall">funcall</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-fdefinition">fdefinition</a> <span class="syntax-interned-symbol">fname</span> <span class="syntax-interned-symbol">&lt;local-environment&gt;</span>)</span> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span>
</span></code></pre> <br/>12. Declare that any lamba expression (i.e., a list whose car is <a class="macro-reference" href="../chapter-3.xhtml#macro-lambda">lambda</a> and     whose cdr is a well-formed lambda argument list and body) is a function     name.  The effects of the function name accessors on lambda expressions     are as follows.  <a class="function-reference" href="../chapter-5.xhtml#function-fdefinition">fdefinition</a> returns an <a class="glossary-reference" href="../chapter-26.xhtml#glossary-implementation-defined">implementation-defined</a> value which     is the function specified the lambda expression, closed in the global     environment.  This <a class="function-reference" href="../chapter-5.xhtml#function-fdefinition">fdefinition</a> value cannot be changed by <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a>.     <a class="function-reference" href="../chapter-5.xhtml#function-fboundp">fboundp</a> always returns <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>, and <a class="function-reference" href="../chapter-10.xhtml#function-makunbound">makunbound</a> is an error. <br/></li></ol></section><section id="section-Esthetics" class="section"><h2 class="section-title">Esthetics</h2>The effect of items 11 and 12 is to complete the regularization of Common Lisp's treatment of functions and function names.  The total effect of proposal items 1 through 12 is that Lisp has just two notions for referencing function objects: FUNCTIONS, which are Lisp objects that directly represent executable code, and <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> NAMES, which can denote functions.  Symbols, <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> function names, and lambda expressions are all examples of the latter notion.  The former notion is highly implementation dependent.  Function names can occur as syntactic entities in code.  <a class="function-reference" href="../chapter-5.xhtml#function-funcall">funcall</a> and <a class="function-reference" href="../chapter-5.xhtml#function-apply">apply</a> work uniformly on both functions and function names, with a consistent semantics. <br/>Lambda expressions are often thought to denote "anonymous" functions, so it may seem paradoxical to treat them as names.  The paradox is only apparent, since the expression itself has the properties of a Lisp function name: It is <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">typically</span>)</span>
</span></code></pre> a cons tree which can be read, printed, and stored in source files, and it denotes a well-defined Lisp function. <br/>Benefit to Users: <br/>Function names are useful for representing objects in remote environments, because they need not be bound at all times to the same function, or to any function, and because they are typically stable in meaning across reads and prints, where plain functions are not. Programs which deal simultaneously with remote and local environments, such as CLOS, can probably be simplified, since function names can be used uniformly, rather than an ad-hoc mixture of functions and function names. <br/>The language as a whole become more uniform from these additions and clarifications, making it easier to learn and use.  (See Esthetics.) <br/></section><section id="section-Cost to Implementors" class="section"><h2 class="section-title">Cost to Implementors</h2>Interpreters which currently have a special case check for application of lambda expressions would need to modify this check to call <a class="function-reference" href="../chapter-5.xhtml#function-fdefinition">fdefinition</a> when a list of any sort is encountered.  Note that all Common Lisps already must perform some such check, since lambda expressions can be funcalled <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-and">and</a> <span class="syntax-interned-symbol">this</span> <span class="syntax-interned-symbol">is</span> <span class="syntax-interned-symbol">currently</span> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">very</span> <a class="symbol-reference" href="../chapter-3.xhtml#symbol-special">special</a> <a class="macro-reference" href="../chapter-5.xhtml#macro-case">case</a><a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <span class="syntax-interned-symbol">only</span> <a class="symbol-reference" href="../chapter-7.xhtml#symbol-standard">standard</a> <a class="macro-reference" href="../chapter-5.xhtml#macro-case">case</a> <span class="syntax-interned-symbol">of</span> <span class="syntax-interned-symbol">a</span> <a class="function-reference" href="../chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">being</span> <span class="syntax-interned-symbol">funcalled</span>)</span>
</span></code></pre>.  This means that every Lisp already has a place to insert the required call to <a class="function-reference" href="../chapter-5.xhtml#function-fdefinition">fdefinition</a>. <br/>In some implementations, <a class="function-reference" href="../chapter-5.xhtml#function-fdefinition">fdefinition</a> of a lambda expression could be that lambda-expression itself.  In others featuring a pre-eval codewalk, the walk would be done by <a class="function-reference" href="../chapter-5.xhtml#function-fdefinition">fdefinition</a>, which would return an appropriate closure. <br/></section><section id="section-Cost of Non-adoption" class="section"><h2 class="section-title">Cost of Non-adoption</h2>Rather than two notions for function references <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">functions</span> <a class="macro-reference" href="../chapter-5.xhtml#macro-and">and</a> <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a>
<span class="syntax-interned-symbol">names</span>)</span>
</span></code></pre>, there would be several notions, each corresponding to the valid inputs for particular group of primitives.  <a class="function-reference" href="../chapter-5.xhtml#function-apply">apply</a> and <a class="function-reference" href="../chapter-5.xhtml#function-funcall">funcall</a> would accept functions, symbolic names, and lambda expressions, but not setf function names.  <a class="function-reference" href="../chapter-5.xhtml#function-fdefinition">fdefinition</a> and its kind would accept symbols and setf function names but not lambda expressions.  If the :LARGE proposal is not adopted, this fragmentation would also apply to the various syntaxes involving function names; some names would be acceptable to <a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a> but not to <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-flet">flet</a>, etc. <br/><a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> &gt; 13. Declare that any function name is a suitable argument to <a class="function-reference" href="../chapter-5.xhtml#function-funcall">funcall</a> and &gt;     <a class="function-reference" href="../chapter-5.xhtml#function-apply">apply</a>.  In such a case, the function name is passed to <a class="function-reference" href="../chapter-5.xhtml#function-fdefinition">fdefinition</a>, &gt;     and the result <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">which</span> <span class="syntax-interned-symbol">may</span> <span class="syntax-interned-symbol">in</span> <span class="syntax-interned-symbol">turn</span> <span class="syntax-interned-symbol">be</span> <span class="syntax-interned-symbol">a</span> <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> <span class="syntax-interned-symbol">name</span>)</span>
</span></code></pre> is called. <br/>I don't think this is such a good idea.  The case of automatically coercing a symbol to a function is needed because it provides a portable mechanism for indirect addressing of a function; I haven't seen a reason to need this for non-symbol function specs.  But more important is that coercing a symbol to a function is a trivial operation that is reasonable to do at run time on each call without adding a significant amount of overhead. <a class="function-reference" href="../chapter-5.xhtml#function-fdefinition">fdefinition</a>, on the other hand, is a much more expensive operation &ndash; at best it might use <a class="function-reference" href="../chapter-10.xhtml#function-get">get</a> to do a property list lookup, or it could be using string-append and <a class="function-reference" href="../chapter-11.xhtml#function-intern">intern</a> to convert the name to a symbol.  In either case, I think this is more work than you want to do on each call. <br/>&gt; 12. Declare that any lamba expression (i.e., a list whose car is <a class="macro-reference" href="../chapter-3.xhtml#macro-lambda">lambda</a> and &gt;     whose cdr is a well-formed lambda argument list and body) is a function &gt;     name.  The effects of the function name accessors on lambda expressions &gt;     are as follows.  <a class="function-reference" href="../chapter-5.xhtml#function-fdefinition">fdefinition</a> returns an <a class="glossary-reference" href="../chapter-26.xhtml#glossary-implementation-defined">implementation-defined</a> value which &gt;     is the function specified the lambda expression, closed in the global &gt;     environment.  This <a class="function-reference" href="../chapter-5.xhtml#function-fdefinition">fdefinition</a> value cannot be changed by <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a>. &gt;     <a class="function-reference" href="../chapter-5.xhtml#function-fboundp">fboundp</a> always returns <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>, and <a class="function-reference" href="../chapter-10.xhtml#function-makunbound">makunbound</a> is an error. <br/>The exceptions for <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> and <a class="function-reference" href="../chapter-10.xhtml#function-makunbound">makunbound</a> show that this is not really as consistent as you might like.  Furthermore, the <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> special form would have to treat a <a class="macro-reference" href="../chapter-3.xhtml#macro-lambda">lambda</a> expression as a function, not a function name, in order for it to be lexically scoped.  It seems like this might just cause confusion rather than consistency. </section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>