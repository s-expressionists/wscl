<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” DYNAMIC-EXTENT</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">DYNAMIC-EXTENT</span><br/><ol class="local-toc"><li><a href="#section-Status">Status</a><ol> </ol></li><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit history">Edit history</a><ol> </ol></li><li><a href="#section-Problem Description">Problem Description</a><ol> </ol></li><li><a href="#issue-dynamic-extent:new-declaration">Proposal NEW-DECLARATION</a><ol> </ol></li><li><a href="#section-Examples">Examples</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Current Practice">Current Practice</a><ol> </ol></li><li><a href="#section-Cost to Implementors">Cost to Implementors</a><ol> </ol></li><li><a href="#section-Cost to Users">Cost to Users</a><ol> </ol></li><li><a href="#section-Cost of Non-Adoption">Cost of Non-Adoption</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Aesthetics">Aesthetics</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue DYNAMIC-EXTENT [Cleanup] [ADDITION]</h1><h2>Related issues</h2><ul><li><span class="issue-reference error">issue:REST-ARGUMENT-EXTENT</span></li><li><span class="issue-reference error">issue:WITH-DYNAMIC-EXTENT</span></li></ul><section id="section-Status" class="status-passed section"><h2 class="section-title">Status</h2>passed, as amended, Mar 89 X3J13. </section><section id="section-References" class="section"><h2 class="section-title">References</h2>Scope and Extent </section><section id="section-Edit history" class="section"><h2 class="section-title">Edit history</h2>27-Jun-88, Version 1 by Pitman (as <span class="issue-reference error">issue:STACK-LET</span>) 15-Nov-88, Version 2 by Pitman (issue renamed, major revision) 11-Jan-89, Version 3 by Masinter (Moon's proposal) 05-Apr-89, Version 4 by Pitman and Steele (changes per X3J13) </section><section id="section-Problem Description" class="section"><h2 class="section-title">Problem Description</h2>  Sometimes a programmer knows that a particular data structure   will have only dynamic extent. In some implementations, it is   possible to allocate such structures in a way that will make them   easier to reclaim than by general purpose garbage collection   (eg, on the stack or in some temporary area). Currently, however,   there is no way to request the use of such an allocation mechanism. <br/></section><section class="status-passed proposal" id="issue-dynamic-extent:new-declaration"><h2 class="section-title">Proposal NEW-DECLARATION</h2>  Introduce a new declaration called <a class="declaration-reference" href="../chapter-3.xhtml#declaration-dynamic-extent">DYNAMIC-EXTENT</a>. The arguments to   this declaration are names of variables. <br/>  It is permissible for an implementation to simply ignore this declaration.   In implementations which do not ignore it, the compiler <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-or">or</a> <span class="syntax-interned-symbol">interpreter</span>)</span>
</span></code>   is free to make whatever optimizations are appropriate given this   information; the most common optimization is to stack-allocate the   initial value of the object. What data types <code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-interned-symbol">any</span>)</span>
</span></code> can have dynamic   extent will can vary from implementation to implementation. <br/>  Definition: Object &lt;x&gt; is an ``otherwise inaccessible part'' <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">OIP</span>)</span>
</span></code>     of &lt;y&gt; iff making &lt;y&gt; inaccessible would make &lt;x&gt; inaccessible.     (Note that every object is an OIP of itself.) <br/>  Suppose that construct &lt;c&gt; contains a <a class="declaration-reference" href="../chapter-3.xhtml#declaration-dynamic-extent">DYNAMIC-EXTENT</a> declaration for   variable &lt;v&gt; <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">which</span> <span class="syntax-interned-symbol">need</span> <a class="function-reference" href="../chapter-5.xhtml#function-not">not</a> <span class="syntax-interned-symbol">be</span> <span class="syntax-interned-symbol">bound</span> <span class="syntax-interned-symbol">by</span> <span class="syntax-interned-symbol">&lt;c&gt;</span>)</span>
</span></code>.  Consider the values   &lt;w1&gt;, ..., &lt;wN&gt; taken on by &lt;v&gt; during the course of some execution of   &lt;c&gt;.  The declaration asserts that if object &lt;x&gt; is an OIP of &lt;wI&gt;   when &lt;wI&gt; ever becomes the value of &lt;v&gt;, then just after execution of   &lt;c&gt; terminates &lt;x&gt; will be either inaccessible or still an OIP of &lt;v&gt;. <br/>  If the assertion is ever violated, the conseqeuences are undefined. <br/></section><section id="section-Examples" class="section"><h2 class="section-title">Examples</h2><pre>  Since stack allocation of the initial value entails knowing at the<br/>  object's creation time that the object can be <a class="glossary-reference" href="../chapter-26.xhtml#glossary-stack-allocated">stack-allocated</a>, it is<br/>  not generally useful to declare <a class="declaration-reference" href="../chapter-3.xhtml#declaration-dynamic-extent">DYNAMIC-EXTENT</a> for variables for<br/>  which have no lexically apparent initial value. For example,<br/><br/>	<pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">DEFUN</a> <span class="syntax-interned-symbol">F</span> <span class="syntax-symbol">()</span>
	  <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">LET</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">X</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-list">LIST</a> <span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">3</span>)</span>)</span>)</span>
	    <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-declare">DECLARE</a> <span class="syntax-cons">(<a class="declaration-reference" href="../chapter-3.xhtml#declaration-dynamic-extent">DYNAMIC-EXTENT</a> <span class="syntax-interned-symbol">X</span>)</span>)</span>
	    <span class="syntax-interned-symbol">...</span>)</span>)</span>
</span></code></pre><br/><br/>  would permit those compilers which wish to do so to stack-allocate the<br/>  list in X. However,<br/><br/>	<code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">DEFUN</a> <span class="syntax-interned-symbol">G</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">X</span>)</span> <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-declare">DECLARE</a> <span class="syntax-cons">(<a class="declaration-reference" href="../chapter-3.xhtml#declaration-dynamic-extent">DYNAMIC-EXTENT</a> <span class="syntax-interned-symbol">X</span>)</span>)</span> <span class="syntax-interned-symbol">...</span>)</span>
</span></code><br/>	<code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">DEFUN</a> <span class="syntax-interned-symbol">F</span> <span class="syntax-symbol">()</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">G</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-list">LIST</a> <span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">3</span>)</span>)</span>)</span>
</span></code><br/><br/>  could not typically permit a similar optimization in G because it would<br/>  be a modularity violation for the compiler to assume facts about G from<br/>  within F. Only an implementation which was willing to be responsible for<br/>  recompiling F if G's definition changed incompatibly could stack-allocate<br/>  the list argument to G in F.<br/><br/>  Other interesting cases are:<br/><br/>	<code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-3.xhtml#function-proclaim">PROCLAIM</a> <span class="syntax-quote">'<span class="syntax-cons">(<a class="declaration-reference" href="../chapter-3.xhtml#declaration-inline">INLINE</a> <span class="syntax-interned-symbol">G</span>)</span></span>)</span>
</span></code><br/>	<code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">DEFUN</a> <span class="syntax-interned-symbol">G</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">X</span>)</span> <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-declare">DECLARE</a> <span class="syntax-cons">(<a class="declaration-reference" href="../chapter-3.xhtml#declaration-dynamic-extent">DYNAMIC-EXTENT</a> <span class="syntax-interned-symbol">X</span>)</span>)</span> <span class="syntax-interned-symbol">...</span>)</span>
</span></code><br/>	<code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">DEFUN</a> <span class="syntax-interned-symbol">F</span> <span class="syntax-symbol">()</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">G</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-list">LIST</a> <span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">3</span>)</span>)</span>)</span>
</span></code><br/><br/>    and	<pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">DEFUN</a> <span class="syntax-interned-symbol">F</span> <span class="syntax-symbol">()</span>
	  <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-flet">FLET</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">G</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">X</span>)</span> <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-declare">DECLARE</a> <span class="syntax-cons">(<a class="declaration-reference" href="../chapter-3.xhtml#declaration-dynamic-extent">DYNAMIC-EXTENT</a> <span class="syntax-interned-symbol">X</span>)</span>)</span> <span class="syntax-interned-symbol">...</span>)</span>)</span>
	    <span class="syntax-cons">(<span class="syntax-interned-symbol">G</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-list">LIST</a> <span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">3</span>)</span>)</span>)</span>)</span>
</span></code></pre><br/><br/>  where some compilers might realize the optimization was possible and others<br/>  might not.<br/><br/>  An interesting variant of this is the so-called `stack allocated rest list'<br/>  which can be achieved <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">in</span> <span class="syntax-interned-symbol">implementations</span> <span class="syntax-interned-symbol">supporting</span> <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <span class="syntax-interned-symbol">optimization</span>)</span>
</span></code> by:<br/><br/>	<pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">DEFUN</a> <span class="syntax-interned-symbol">F</span> <span class="syntax-cons">(<a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-rest">&amp;REST</a> <span class="syntax-interned-symbol">X</span>)</span>
	  <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-declare">DECLARE</a> <span class="syntax-cons">(<a class="declaration-reference" href="../chapter-3.xhtml#declaration-dynamic-extent">DYNAMIC-EXTENT</a> <span class="syntax-interned-symbol">X</span>)</span>)</span>
	  <span class="syntax-interned-symbol">...</span>)</span>
</span></code></pre><br/><br/>  Note here that although the initial value of X is not explicit, the F<br/>  function is responsible for assembling the list X from the passed arguments,<br/>  so the F function can be optimized by the compiler to construct a <br/>  <a class="glossary-reference" href="../chapter-26.xhtml#glossary-stack-allocated">stack-allocated</a> list instead of a heap-allocated list in implementations<br/>  which support such.<br/><br/>In<br/>            <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">LET</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">X</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-list">LIST</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">A1</span></span> <span class="syntax-quote">'<span class="syntax-interned-symbol">B1</span></span> <span class="syntax-quote">'<span class="syntax-interned-symbol">C1</span></span>)</span>)</span>
                  <span class="syntax-cons">(<span class="syntax-interned-symbol">Y</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-cons">CONS</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">A2</span></span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-cons">CONS</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">B2</span></span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-cons">CONS</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">C2</span></span> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>)</span>)</span>)</span>)</span>)</span>
              <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-declare">DECLARE</a> <span class="syntax-cons">(<a class="declaration-reference" href="../chapter-3.xhtml#declaration-dynamic-extent">DYNAMIC-EXTENT</a> <span class="syntax-interned-symbol">X</span> <span class="syntax-interned-symbol">Y</span>)</span>)</span>
              <span class="syntax-interned-symbol">...</span>)</span>
</span></code></pre><br/>The OIP's of X are three conses, and the OIP's of Y are three other<br/>conses.  None of the symbols A1, B1, C1, A2, B2, C2, or <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> is an<br/>OIP of X or Y.  However, if a freshly allocated uninterned symbol had<br/>been used, it would have been an OIP.<br/><br/><a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a><br/>          (<a class="macro-reference" href="../chapter-6.xhtml#macro-dotimes">DOTIMES</a> <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">I</span> <span class="syntax-interned-symbol">N</span>)</span>
</span></code> <br/>            <code><span class="syntax-root"><span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-declare">DECLARE</a> <span class="syntax-cons">(<a class="declaration-reference" href="../chapter-3.xhtml#declaration-dynamic-extent">DYNAMIC-EXTENT</a> <span class="syntax-interned-symbol">I</span>)</span>)</span>
</span></code><br/><br/>This is particularly instructive.  Since I is an integer by the<br/>definition of <a class="macro-reference" href="../chapter-6.xhtml#macro-dotimes">DOTIMES</a>, but <a class="function-reference" href="../chapter-5.xhtml#function-eq">EQ</a> and <a class="function-reference" href="../chapter-5.xhtml#function-eql">EQL</a> are not necessarily equivalent for<br/>integers, what are the OIP's of I, which this declaration<br/>requires the body of the <a class="macro-reference" href="../chapter-6.xhtml#macro-dotimes">DOTIMES</a> not to "save"?  If the value of I is 3,<br/>and the body does <code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-setq">SETQ</a> <span class="syntax-interned-symbol">FOO</span> <span class="syntax-number">3</span>)</span>
</span></code>, is that an error?  The answer is no, but<br/>the interesting thing is that it depends on the <a class="glossary-reference" href="../chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a><br/>behavior of <a class="function-reference" href="../chapter-5.xhtml#function-eq">EQ</a> on numbers.  In an implementation where <a class="function-reference" href="../chapter-5.xhtml#function-eq">EQ</a> and <a class="function-reference" href="../chapter-5.xhtml#function-eql">EQL</a> are<br/>equivalent for 3, then 3 is not an OIP because <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-eq">EQ</a> <span class="syntax-interned-symbol">I</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-+">+</a> <span class="syntax-number">2</span> <span class="syntax-number">1</span>)</span>)</span>
</span></code> is true,<br/>and therefore there is another way to access the object besides<br/>going through I.  On the other hand, in an implementation where <a class="function-reference" href="../chapter-5.xhtml#function-eq">EQ</a> and<br/><a class="function-reference" href="../chapter-5.xhtml#function-eql">EQL</a> are not equivalent for 3, then the particular 3 that is the value of<br/>I is an OIP, but any other 3 is not.  Thus <code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-setq">SETQ</a> <span class="syntax-interned-symbol">FOO</span> <span class="syntax-number">3</span>)</span>
</span></code> is valid<br/>but <code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-setq">SETQ</a> <span class="syntax-interned-symbol">FOO</span> <span class="syntax-interned-symbol">I</span>)</span>
</span></code> is erroneous.  Since <code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-setq">SETQ</a> <span class="syntax-interned-symbol">FOO</span> <span class="syntax-interned-symbol">I</span>)</span>
</span></code> is erroneous in some<br/>implementations, it is erroneous in all portable programs, but some other<br/>implementations may not be able to detect the error.<br/><br/><a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a><br/><br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">LET</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">X</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-list">LIST</a> <span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">3</span>)</span>)</span>)</span>
    <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-declare">DECLARE</a> <span class="syntax-cons">(<a class="declaration-reference" href="../chapter-3.xhtml#declaration-dynamic-extent">DYNAMIC-EXTENT</a> <span class="syntax-interned-symbol">X</span>)</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-print">PRINT</a> <span class="syntax-interned-symbol">X</span>)</span>
    <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>)</span>
</span></code></pre><br/>  <a class="function-reference" href="../chapter-22.xhtml#function-print">PRINT</a> does not "save" any part of its input.<br/>  This prints <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">3</span>)</span>
</span></code><br/><br/><a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a><br/><br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-6.xhtml#macro-do">DO</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">L</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-11.xhtml#function-list-all-packages">LIST-ALL-PACKAGES</a>)</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-cdr">CDR</a> <span class="syntax-interned-symbol">L</span>)</span>)</span>)</span>
      <span class="syntax-cons">(<span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-null">NULL</a> <span class="syntax-interned-symbol">L</span>)</span>)</span>
    <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-declare">DECLARE</a> <span class="syntax-cons">(<a class="declaration-reference" href="../chapter-3.xhtml#declaration-dynamic-extent">DYNAMIC-EXTENT</a> <span class="syntax-interned-symbol">L</span>)</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-print">PRINT</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-car">CAR</a> <span class="syntax-interned-symbol">L</span>)</span>)</span>)</span>
</span></code></pre><br/>  prints all packages; none of the newly-allocated list structures are saved.<br/><a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a><br/>  <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">DEFUN</a> <span class="syntax-interned-symbol">ADD</span> <span class="syntax-cons">(<a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-rest">&amp;REST</a> <span class="syntax-interned-symbol">X</span>)</span> <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-declare">DECLARE</a> <span class="syntax-cons">(<a class="declaration-reference" href="../chapter-3.xhtml#declaration-dynamic-extent">DYNAMIC-EXTENT</a> <span class="syntax-interned-symbol">X</span>)</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-apply">APPLY</a> <span class="syntax-function">#'<a class="function-reference" href="../chapter-12.xhtml#function-+">+</a></span> <span class="syntax-interned-symbol">X</span>)</span>)</span>
</span></code><br/>  <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">ADD</span> <span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">3</span>)</span>
</span></code> <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; 6<br/><br/>I.e., useful way to declare that <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-rest">&amp;REST</a> lists have dynamic extent<br/><a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a><br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">DEFUN</a> <span class="syntax-interned-symbol">ZAP</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">X</span> <span class="syntax-interned-symbol">Y</span> <span class="syntax-interned-symbol">Z</span>)</span>
    <span class="syntax-cons">(<a class="macro-reference" href="../chapter-6.xhtml#macro-do">DO</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">L</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-list">LIST</a> <span class="syntax-interned-symbol">X</span> <span class="syntax-interned-symbol">Y</span> <span class="syntax-interned-symbol">Z</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-cdr">CDR</a> <span class="syntax-interned-symbol">L</span>)</span>)</span>)</span>
	<span class="syntax-cons">(<span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-null">NULL</a> <span class="syntax-interned-symbol">L</span>)</span>)</span>
      <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-declare">DECLARE</a> <span class="syntax-cons">(<a class="declaration-reference" href="../chapter-3.xhtml#declaration-dynamic-extent">DYNAMIC-EXTENT</a> <span class="syntax-interned-symbol">L</span>)</span>)</span>
      <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-prin1">PRIN1</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-car">CAR</a> <span class="syntax-interned-symbol">L</span>)</span>)</span>)</span>)</span>
</span></code></pre><br/>  <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">ZAP</span> <span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">3</span>)</span>
</span></code><br/>  prints 123<br/><br/><a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a><br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">DEFUN</a> <span class="syntax-interned-symbol">ZAP</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">N</span> <span class="syntax-interned-symbol">M</span>)</span>
    <span class="syntax-line-comment syntax-comment">;; Computes (RANDOM (+ M 1)) at relative speed of roughly O(N).
</span>    <span class="syntax-line-comment syntax-comment">;; It may be slow, but with a good compiler at least it
</span>    <span class="syntax-line-comment syntax-comment">;; doesn't waste much heap storage.  :-)
</span>    <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">LET</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">A</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-15.xhtml#function-make-array">MAKE-ARRAY</a> <span class="syntax-interned-symbol">N</span>)</span>)</span>)</span>
      <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-declare">DECLARE</a> <span class="syntax-cons">(<a class="declaration-reference" href="../chapter-3.xhtml#declaration-dynamic-extent">DYNAMIC-EXTENT</a> <span class="syntax-interned-symbol">A</span>)</span>)</span>
      <span class="syntax-cons">(<a class="macro-reference" href="../chapter-6.xhtml#macro-dotimes">DOTIMES</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">I</span> <span class="syntax-interned-symbol">N</span>)</span> 
	<span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-declare">DECLARE</a> <span class="syntax-cons">(<a class="declaration-reference" href="../chapter-3.xhtml#declaration-dynamic-extent">DYNAMIC-EXTENT</a> <span class="syntax-interned-symbol">I</span>)</span>)</span>
	<span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">SETF</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-15.xhtml#function-aref">AREF</a> <span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">I</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-random">RANDOM</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">I</span> <span class="syntax-number">1</span>)</span>)</span>)</span>)</span>
      <span class="syntax-cons">(<a class="function-reference" href="../chapter-15.xhtml#function-aref">AREF</a> <span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">M</span>)</span>)</span>)</span>
</span></code></pre><br/>  <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-&lt;">&lt;</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">ZAP</span> <span class="syntax-number">5</span> <span class="syntax-number">3</span>)</span> <span class="syntax-number">3</span>)</span>
</span></code> <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a><br/><br/><a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a><br/>The following are in error, since the value of X is used outside of its<br/>extent:<br/><br/>       <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-17.xhtml#function-length">LENGTH</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-list">LIST</a> <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">LET</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">X</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-list">LIST</a> <span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">3</span>)</span>)</span>)</span> <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-declare">DECLARE</a> <span class="syntax-cons">(<a class="declaration-reference" href="../chapter-3.xhtml#declaration-dynamic-extent">DYNAMIC-EXTENT</a> <span class="syntax-interned-symbol">X</span>)</span>)</span> <span class="syntax-interned-symbol">X</span>)</span>)</span>)</span>
</span></code><br/><br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-progn">PROGN</a> <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">LET</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">X</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-list">LIST</a> <span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">3</span>)</span>)</span>)</span> <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-declare">DECLARE</a> <span class="syntax-cons">(<a class="declaration-reference" href="../chapter-3.xhtml#declaration-dynamic-extent">DYNAMIC-EXTENT</a> <span class="syntax-interned-symbol">X</span>)</span>)</span> <span class="syntax-interned-symbol">X</span>)</span>
         <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>)</span>
</span></code></pre><br/><br/><a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a><br/><br/></pre></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>  This permits a programmer to offer advice to an implementation about   what may be <a class="glossary-reference" href="../chapter-26.xhtml#glossary-stack-allocated">stack-allocated</a> for efficiency. <br/>  It may be difficult or impossible for a compiler to infer this   same information statically. <br/>  Since a number of implementations offer this capability and there   is demand from users for access to the capability, this ``codifies   existing practice.'' <br/>  Because this approach is purely lexical, it does not interact badly with   other programs in the way that the macro WITH-DYNAMIC-EXTENT <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">see</span> <span class="syntax-interned-symbol">issue</span>
  <span class="syntax-interned-symbol">by</span> <span class="syntax-interned-symbol">same</span> <span class="syntax-interned-symbol">name</span>)</span>
</span></code></pre> would. <br/></section><section id="section-Current Practice" class="section"><h2 class="section-title">Current Practice</h2>  Symbolics Genera and Symbolics Cloe offer stack allocation, though not   in this strategy. <br/>  [KMP thinks that] Lucid supports the proposal. <br/></section><section id="section-Cost to Implementors" class="section"><h2 class="section-title">Cost to Implementors</h2>  No cost is forced since implementations are permitted to simply   ignore the <a class="declaration-reference" href="../chapter-3.xhtml#declaration-dynamic-extent">DYNAMIC-EXTENT</a> declaration. <br/></section><section id="section-Cost to Users" class="section"><h2 class="section-title">Cost to Users</h2>  None. This change is upward compatible. <br/>  There may be some hidden costs to debugging using this declaration <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-or">or</a> <span class="syntax-interned-symbol">any</span>
  <span class="syntax-interned-symbol">feature</span> <span class="syntax-interned-symbol">which</span> <span class="syntax-interned-symbol">permits</span> <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <span class="syntax-interned-symbol">user</span> <span class="syntax-interned-symbol">to</span> <span class="syntax-interned-symbol">access</span> <span class="syntax-interned-symbol">dynamic</span> <span class="syntax-interned-symbol">extent</span> <span class="syntax-interned-symbol">objects</span> <span class="syntax-interned-symbol">without</span>
  <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <span class="syntax-interned-symbol">compiler</span> <span class="syntax-interned-symbol">proving</span> <span class="syntax-interned-symbol">that</span> <span class="syntax-interned-symbol">they</span> <span class="syntax-interned-symbol">are</span> <span class="syntax-interned-symbol">appropriate</span>)</span>
</span></code></pre>. If the user misdeclares   something and returns a pointer into the stack <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-or">or</a> <span class="syntax-interned-symbol">stores</span> <span class="syntax-interned-symbol">it</span> <span class="syntax-interned-symbol">in</span> <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <span class="syntax-interned-symbol">heap</span>)</span>
</span></code>,   an undefined situation may result and the integrity of the Lisp storage   mechanism may be compromised. Debugging these situations may be tricky,   but users who have asked for this feature have indicated a willingness   to deal with such costs. Nevertheless, the perils should be clearly   documented and casual users should not be encouraged to use this   declaration. <br/></section><section id="section-Cost of Non-Adoption" class="section"><h2 class="section-title">Cost of Non-Adoption</h2>  Some portable code would be forced to run more slowly <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">due</span> <span class="syntax-interned-symbol">to</span>
  <span class="syntax-interned-symbol">GC</span> <span class="syntax-interned-symbol">overhead</span>)</span>
</span></code></pre>, or to use non-portable language features. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>  The cost of non-adoption is avoided. <br/></section><section id="section-Aesthetics" class="section"><h2 class="section-title">Aesthetics</h2>  This declaration allows a fairly low level optimization to work   by asking the user to provide only very high level information.   The alternatives (sharpsign conditionals, some of which may   lead to more bit-picky abstractions) are far less aesthetic. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>  A previous version of this proposal suggested primitives STACK-LET   and STACK-LET*. Consensus was that the more general declaration facility   would be more popular. <br/>  Moon came up with a description of something called a "proper part" which   Steele formalized into the idea of an "otherwise inaccessible part". The   two are essentially interchangeable, but Steele's description was more   rigorous. <br/>  KMP: ... it still raises the question of whether we should define         per-function for every <a class="package-reference" href="../chapter-11.xhtml#package-cl">CL</a> function whether any of the arguments is        permitted to be "saved" so that <a class="package-reference" href="../chapter-11.xhtml#package-cl">CL</a> programs don't get any funny        surprises. If we don't, it ends up being implementor's discretion how        to resolve cases ... and everyone might not agree that all cases are        ... obvious ... <br/>  JonL: PDP10 MacLisp had a similar problem w.r.t pdlnums.  That is why 	"identity" functions were so troublsome for it &ndash; in order to         return a guaranteed safe value, it typically had to copy it's 	pdlnum argument, thereby making some cases of "fast arithmetic"  	code much worse than interpreted code!  [Remember <a class="function-reference" href="../chapter-22.xhtml#function-print">PRINT</a> in MacLisp? 	it returns <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> rather than it's argument for just this reason.] <br/>	It is necessary for an optimizing compiler to know something about 	what happens to the data it passes along to "system" functions; for 	example, it could assume that <a class="function-reference" href="../chapter-10.xhtml#function-get">GET</a> doesn't clobber the list given 	to it, nor does it retain pointers to any part of it [what was the 	terminology in the revised proposal?  "saved"? and "proper part"?] 	The <a class="issue-reference" href="../issues/lisp-symbol-redefinition.xhtml#issue-lisp-symbol-redefinition">X3J13 Issue LISP-SYMBOL-REDEFINITION</a> might help here, in that an 	implementation's compilers could depend upon it's own internal 	database.  But it wouldn't hurt at all to have some of these 	requirements "up front" in the standard. <br/>  It was generally agreed that we would also like to consider a proposal   on dynamic extent functions at the next meeting. (Sandra said she would   prepare one, and has already done so. See <span class="issue-reference error">issue:DYNAMIC-EXTENT-FUNCTION.</span>) </section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>