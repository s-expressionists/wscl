<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” LISP-PACKAGE-NAME</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">LISP-PACKAGE-NAME</span><br/><ol class="local-toc"><li><a href="#section-Status">Status</a><ol> </ol></li><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit history">Edit history</a><ol> </ol></li><li><a href="#section-Problem Description">Problem Description</a><ol> </ol></li><li><a href="#issue-lisp-package-name:common-lisp">Proposal COMMON-LISP</a><ol> </ol></li><li><a href="#section-Test Case">Test Case</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Current Practice">Current Practice</a><ol> </ol></li><li><a href="#section-Cost to Implementors">Cost to Implementors</a><ol> </ol></li><li><a href="#section-Cost to Users">Cost to Users</a><ol> </ol></li><li><a href="#section-Cost of Non-Adoption">Cost of Non-Adoption</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Aesthetics">Aesthetics</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue LISP-PACKAGE-NAME [NIL] [CHANGE]</h1><section id="section-Status" class="status-passed section"><h2 class="section-title">Status</h2>passed, as amended, Mar 89 X3J13 </section><section id="section-References" class="section"><h2 class="section-title">References</h2>11.6 Built-in Packages (pp181-182) </section><section id="section-Edit history" class="section"><h2 class="section-title">Edit history</h2>22-Dec-88, Version 1 by Pitman 9-Apr-89, version 2 by Masinter, incorporate changes per Mar 89 amendments. </section><section id="section-Problem Description" class="section"><h2 class="section-title">Problem Description</h2>  Since ANSI Common Lisp will differ from the Common Lisp described by CLtL,   it will not be possible to have support for both in the same Lisp image   if ANSI Common Lisp insists on placing its functionality in the package   named <a class="package-reference" href="../chapter-A.xhtml#package-lisp">lisp</a>. <br/>  Further, use of the name unqualified name <a class="package-reference" href="../chapter-A.xhtml#package-lisp">lisp</a> by the ANSI Common Lisp   community is inconsistent with ANSI's expressed position to ISO that    the term "<a class="package-reference" href="../chapter-A.xhtml#package-lisp">lisp</a>" names a language family rather than a specific dialect   within that family. <br/></section><section class="status-passed proposal" id="issue-lisp-package-name:common-lisp"><h2 class="section-title">Proposal COMMON-LISP</h2>  Define that ANSI Common Lisp uses the package name <a class="proposal-reference" href="#issue-lisp-package-name:common-lisp">COMMON-LISP</a>, not <a class="package-reference" href="../chapter-A.xhtml#package-lisp">lisp</a>.   Define that the <a class="proposal-reference" href="#issue-lisp-package-name:common-lisp">COMMON-LISP</a> package has nickname <a class="package-reference" href="../chapter-11.xhtml#package-cl">cl</a>. <br/>  Since some symbols (e.g., <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>, <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>, and <a class="macro-reference" href="../chapter-3.xhtml#macro-lambda">lambda</a>) might have to be shared   between <a class="proposal-reference" href="#issue-lisp-package-name:common-lisp">COMMON-LISP</a> and <a class="package-reference" href="../chapter-A.xhtml#package-lisp">lisp</a> in implementations simultaneously supporting   both, clarify that the initial symbols specified by ANSI Common Lisp as   belonging in the <a class="proposal-reference" href="#issue-lisp-package-name:common-lisp">COMMON-LISP</a> package need not have a home package of    <a class="proposal-reference" href="#issue-lisp-package-name:common-lisp">COMMON-LISP</a>. <br/>  Similarly, rename the package <a class="package-reference" href="../chapter-A.xhtml#package-user">user</a> to be <a class="package-reference" href="../chapter-11.xhtml#package-common-lisp-user">common-lisp-user</a> with   nickname <a class="package-reference" href="../chapter-11.xhtml#package-cl-user">cl-user</a>. <br/></section><section id="section-Test Case" class="section"><h2 class="section-title">Test Case</h2><pre>  In an implementation supporting CLtL's <a class="package-reference" href="../chapter-A.xhtml#package-lisp">lisp</a> package and <br/>  the ANSI Common Lisp <a class="package-reference" href="../chapter-11.xhtml#package-cl">cl</a> package proposed here:<br/><br/>  <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-eq">eq</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">LISP:T</span></span> <span class="syntax-quote">'<a class="section-reference" href="../chapter-26.xhtml#section-T">T</a></span>)</span>
</span></code><br/>  <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; not specified, due to this proposal, but probably <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a><br/><br/>  <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-eq">eq</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">LISP:CAR</span></span> <span class="syntax-quote">'<a class="function-reference" href="../chapter-14.xhtml#function-car">car</a></span>)</span>
</span></code><br/>  <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; not specified, due to this proposal, but probably <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a><br/><br/>  <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-eq">eq</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">LISP:FUNCTIONP</span></span> <span class="syntax-quote">'<a class="function-reference" href="../chapter-5.xhtml#function-functionp">functionp</a></span>)</span>
</span></code><br/>  <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; not specified, due to this proposal, but since <a class="function-reference" href="../chapter-5.xhtml#function-functionp">functionp</a> is<br/>     changed incompatibly between CLtL <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">LISP</span>)</span>
</span></code> and <a class="package-reference" href="../chapter-11.xhtml#package-cl">cl</a> <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">ANSI</span>)</span>
</span></code>, there<br/>     are good reasons why this might return <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>.<br/><br/>  <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-10.xhtml#function-symbol-package">symbol-package</a> <span class="syntax-quote">'<a class="section-reference" href="../chapter-26.xhtml#section-T">T</a></span>)</span>
</span></code><br/>  <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; not specified, due to this proposal. Perhaps #&lt;Package <a class="package-reference" href="../chapter-11.xhtml#package-cl">cl</a>&gt;, <br/>     perhaps #&lt;Package <a class="package-reference" href="../chapter-A.xhtml#package-lisp">lisp</a>&gt;, or perhaps something implementation-specific.<br/><br/>  <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-10.xhtml#function-symbol-package">symbol-package</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">LISP:T</span></span>)</span>
</span></code><br/>  <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; not specified, not due to this proposal, but because CLtL didn't<br/>     specify this explicitly.<br/><br/></pre></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>  In practice, some implementations will have very legitimate reasons for    wanting to Lisp dialects to be coresident. As it stands, they will have   little other choice than to make the two use different packages, and so   will be forced to be incompatible with one or the other dialect unless   we choose a different package name for the one dialect for which there   is currently no existing code. <br/>  Not only is this important the CLtL and ANSI Common Lisp communities, but   also, if we continue to use the name <a class="package-reference" href="../chapter-A.xhtml#package-lisp">lisp</a>, it sends a signal to the ISO   Lisp community that the "latest and greatest" Lisp should use the generic   name <a class="package-reference" href="../chapter-A.xhtml#package-lisp">lisp</a>, and they may try to use it as well. If ISO Lisp turns out to   be very different than ANSI Common Lisp, there may be motivation down the   line for having ISO Lisp and ANSI Common Lisp co-resident, and conflicts   will inevitably arise if both want to use the name <a class="package-reference" href="../chapter-A.xhtml#package-lisp">lisp</a>. This will almost   certainly lead to a confrontation where one Lisp dialect tries to force   the other out by the artificial means of asserting its right to this   generic name. Choosing a name which compatibly admits the option of   introducing other dialects into the environment at a later date without   conflict is a good way to avoid a class of potential problems. <br/>  Although there are a few problems which could come up due to the symbol   package of initial symbols being unspecified, experience with    implementations that do this suggests that they are very few.   Problems occur only in the rare circumstance that all of the following   conditions are met: <br/>   <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> A symbol S on the <a class="package-reference" href="../chapter-A.xhtml#package-lisp">lisp</a> package but with home package H <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">that</span> <span class="syntax-interned-symbol">is</span> <a class="function-reference" href="../chapter-5.xhtml#function-not">not</a> <span class="syntax-string">"LISP"</span>)</span>
</span></code>      is shadowed in some package P of implementation A. <br/>   <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> A program F in package P uses the shadowed symbol H:S by an explicit      <a class="package-reference" href="../chapter-A.xhtml#package-lisp">lisp</a>: or H: package qualification. (Only the case of using "<a class="package-reference" href="../chapter-A.xhtml#package-lisp">lisp</a>:" is      interesting, of course, since if H were named explicitly, we would be      outside the bounds of portable code). <br/>   <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> The program F, referring to H:S, is printed out in implementation A       while using package P (or some other package that shadows S, so that      the H package qualifier appears explicitly) and an attempt is made to      re-read it in implementation B. <br/>   <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> Implementation B has no package named H, has a package named H but no      external symbol named S, or has a package named H with external symbol      S but the symbol H:S has different semantics in implementation B than      it did in implementation A. <br/>  In practice, this hardly ever happens. It would happen even less if    programmers were explicitly alerted that it was a potential problem they   needed to guard against. <br/></section><section id="section-Current Practice" class="section"><h2 class="section-title">Current Practice</h2>  Symbolics Genera already has a package named <a class="proposal-reference" href="#issue-lisp-package-name:common-lisp">COMMON-LISP</a> with nicknames   <a class="package-reference" href="../chapter-11.xhtml#package-cl">cl</a> and <a class="package-reference" href="../chapter-A.xhtml#package-lisp">lisp</a>. As such, this would be an incompatible change for Genera. <br/></section><section id="section-Cost to Implementors" class="section"><h2 class="section-title">Cost to Implementors</h2>  Small. <br/>  In some cases, this may even have `negative cost' because it will provide   implementors a way of avoiding incompatible changes to released operators. <br/></section><section id="section-Cost to Users" class="section"><h2 class="section-title">Cost to Users</h2>  Small. <br/>  In some cases, this may even have `negative cost' because existing code   would be able to continue to run in implementations which chose to support   both CLtL's <a class="package-reference" href="../chapter-A.xhtml#package-lisp">lisp</a> and ANSI Common Lisp's <a class="package-reference" href="../chapter-11.xhtml#package-cl">cl</a> packages, thereby allowing   developers to put off a massover changeover, perhaps doing the transition   more incrementally. <br/></section><section id="section-Cost of Non-Adoption" class="section"><h2 class="section-title">Cost of Non-Adoption</h2>  Implementations trying to support multiple dialects in the same environment   would be forced to violate one or the other spec. <br/>  Worse, different implementations faced with the same set of hard choices   about which spec to violate in order to concurrently support two dialects   might not make the same choices, leading to even more gratuitous    incompatibility. <br/>  ANSI's position in ISO that we are not trying to legislate the meaning of   -the<a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="package-reference" href="../chapter-A.xhtml#package-lisp">lisp</a> dialect would be weakened. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>  Needless incompatibility would be avoided in a variety of situations. <br/></section><section id="section-Aesthetics" class="section"><h2 class="section-title">Aesthetics</h2>  Failing to specify the home package of symbols in the <a class="package-reference" href="../chapter-A.xhtml#package-lisp">lisp</a> and <a class="package-reference" href="../chapter-11.xhtml#package-cl">cl</a> packages   seems unaesthetic because it appears to diminish print/read invertability,   but as observed above, that case is rare. <br/>  Failiing to specify a way in which lisp dialects can be co-resident is also   unaesthetic because in practice implementors with a need to do this will do   so whether the standard allows them or not, and it will be a source of    severe divergence among implementations. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>  Symbolics Genera offers two co-resident dialects of Lisp: Zetalisp and   Symbolics Common Lisp. The Symbolics Cloe development environment adds   a third co-resident dialect, making an environment in which two differing   Common Lisp dialects (Symbolics Common Lisp and Cloe) must cooperate.   Already in Cloe it is not possible for the home package to contain    package "<a class="package-reference" href="../chapter-A.xhtml#package-lisp">lisp</a>" since Cloe's concept of what the "<a class="package-reference" href="../chapter-A.xhtml#package-lisp">lisp</a>" package is differs   from Genera's concept of what the "<a class="package-reference" href="../chapter-A.xhtml#package-lisp">lisp</a>" package is, yet they are forced   by efficiency constraints to share the same symbol. It is Pitman's belief,   based on extensive experience with Cloe, that failure to pass this proposal   <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-or">or</a> <span class="syntax-interned-symbol">something</span> <span class="syntax-interned-symbol">very</span> <span class="syntax-interned-symbol">like</span> <span class="syntax-interned-symbol">it</span>)</span>
</span></code> will lead to all sorts of trouble for Common   Lisp users and implementors down the road. <br/>  Pitman strongly supports this proposal. <br/>Additional comments: <br/>Is it permissible for implementations to define "<a class="package-reference" href="../chapter-A.xhtml#package-lisp">lisp</a>" as a nickname for this package, for the sake of backward compatibility? <br/>Anyone wanting to make <a class="package-reference" href="../chapter-A.xhtml#package-lisp">lisp</a> a nickname could just as well create a <a class="package-reference" href="../chapter-A.xhtml#package-lisp">lisp</a> package which simply imported the appropriate symbols from the <a class="package-reference" href="../chapter-11.xhtml#package-cl">cl</a> package. <br/>With only modest additional effort, they could try to make new symbols where feasable <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">especially</span> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">most</span> <span class="syntax-interned-symbol">functions</span>)</span>
</span></code> and put borrowed functions plopped in their function cells. The amount of additional storage is small <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">compared</span>
<span class="syntax-interned-symbol">to</span> <span class="syntax-interned-symbol">implementing</span> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">whole</span> <span class="syntax-interned-symbol">new</span> <span class="syntax-interned-symbol">lisp</span>)</span>
</span></code></pre>, but it would leave open the possibility for users upgrading the level of compatibility without hurting the core system. eg, if I wanted <a class="function-reference" href="../chapter-14.xhtml#function-append">append</a> to signal an error on dotted lists, I would not consider redefining the system's <a class="function-reference" href="../chapter-14.xhtml#function-append">append</a> for fear of breaking the world, but if they told me that nothing depended on <a class="package-reference" href="../chapter-A.xhtml#package-lisp">lisp</a> other than compatibility code, I might feel ok about redefining (or doing <a class="function-reference" href="../chapter-11.xhtml#function-shadowing-import">shadowing-import</a> of <span class="issue-reference error">issue:LISP:APPEND</span> on a per-implementation basis <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">with</span>
<span class="syntax-interned-symbol">appropriate</span> <span class="syntax-interned-symbol">sharp</span> <span class="syntax-interned-symbol">conditionals</span>)</span>
</span></code></pre>) in order to up the level of compatibility. <br/>In fact, though, my guess is that implementations which are not going to do a serious compatibility effort are better off leaving the package missing. My experience has been that customers are often happier growing their own compatibility [or getting it from a public library] than being stuck with something which really doesn't do what they want but which seals off the place in the namespace which they needed in order to do their own thing. <br/></section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>