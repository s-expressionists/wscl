<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” STEP-ENVIRONMENT</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">STEP-ENVIRONMENT</span><br/><ol class="local-toc"><li><a href="#section-Status">Status</a><ol> </ol></li><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit history">Edit history</a><ol> </ol></li><li><a href="#section-Problem description">Problem description</a><ol> </ol></li><li><a href="#issue-step-environment:current">Proposal CURRENT</a><ol> </ol></li><li><a href="#section-Examples">Examples</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Current practice">Current practice</a><ol> </ol></li><li><a href="#section-Cost to Implementors">Cost to Implementors</a><ol> </ol></li><li><a href="#section-Cost to Users">Cost to Users</a><ol> </ol></li><li><a href="#section-Cost of non-adoption">Cost of non-adoption</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Esthetics">Esthetics</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue STEP-ENVIRONMENT [NIL] [CLARIFICATION/CHANGE]</h1><section id="section-Status" class="status-passed section"><h2 class="section-title">Status</h2>Passed, Jan 89 X3J13, as amended </section><section id="section-References" class="section"><h2 class="section-title">References</h2><a class="macro-reference" href="../chapter-25.xhtml#macro-step">step</a> (CLtL p.441) <a class="macro-reference" href="../chapter-25.xhtml#macro-time">time</a> (CLtL p.441) </section><section id="section-Edit history" class="section"><h2 class="section-title">Edit history</h2>Version 1, 12-Mar-88, Moon Version 2, 10-Jun-88, Masinter (add discussion) Version 3, 20-Jun-88, Loosemore (not a special form) version 4, 17-Mar-89, Masinter (as amended) </section><section id="section-Problem description" class="section"><h2 class="section-title">Problem description</h2>CLtL does not specify in what lexical environment the form given to <a class="macro-reference" href="../chapter-25.xhtml#macro-step">step</a> is evaluated.  Some people think it's supposed to be evaluated in the null environment, others think it is supposed to be evaluated in the current environment, the one in which the <a class="macro-reference" href="../chapter-25.xhtml#macro-step">step</a> form was evaluated. <br/>The same considerations apply to <a class="macro-reference" href="../chapter-25.xhtml#macro-time">time</a>. <br/></section><section class="status-passed proposal" id="issue-step-environment:current"><h2 class="section-title">Proposal CURRENT</h2><ol><li> Clarify that <a class="macro-reference" href="../chapter-25.xhtml#macro-step">step</a> and <a class="macro-reference" href="../chapter-25.xhtml#macro-time">time</a> evaluate the form in the current environment. </li><li> Clarify that calls to both <a class="macro-reference" href="../chapter-25.xhtml#macro-step">step</a> and <a class="macro-reference" href="../chapter-25.xhtml#macro-time">time</a> may be compiled, but that in the case of <a class="macro-reference" href="../chapter-25.xhtml#macro-step">step</a>, it is acceptable for an implementation to interactively step through only those parts of the computation that are interpreted. <br/></li></ol></section><section id="section-Examples" class="section"><h2 class="section-title">Examples</h2><pre>;Assuming X is not a special variable<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-number">1</span>)</span>
</span></code></pre><br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-number">2</span>)</span>)</span>
  <span class="syntax-cons">(<a class="macro-reference" href="../chapter-25.xhtml#macro-step">step</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-print">print</a> <span class="syntax-interned-symbol">x</span>)</span>)</span>)</span>
</span></code></pre><br/><br/>This should print and return 2, not 1, when interpreted.<br/><br/></pre></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2><ol><li> It is more useful for the lexical environment to pass transparently through <a class="macro-reference" href="../chapter-25.xhtml#macro-step">step</a> and <a class="macro-reference" href="../chapter-25.xhtml#macro-time">time</a> than to reset to the null environment. <br/></li><li> Although <a class="macro-reference" href="../chapter-25.xhtml#macro-step">step</a> is primarily a debugging tool, there is no reason to prevent it from being compiled correctly. <br/></li></ol></section><section id="section-Current practice" class="section"><h2 class="section-title">Current practice</h2>Vax Lisp behaves as proposed.  Symbolics Common Lisp treats <a class="macro-reference" href="../chapter-25.xhtml#macro-step">step</a> as a special  form and does not allow it to be compiled.  <br/></section><section id="section-Cost to Implementors" class="section"><h2 class="section-title">Cost to Implementors</h2>Minimal. <br/></section><section id="section-Cost to Users" class="section"><h2 class="section-title">Cost to Users</h2>None. <br/></section><section id="section-Cost of non-adoption" class="section"><h2 class="section-title">Cost of non-adoption</h2>These debugging tools will continue to have vague specifications. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>Slightly more preicse specification of Common Lisp. <br/></section><section id="section-Esthetics" class="section"><h2 class="section-title">Esthetics</h2>Slightly improved. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>There was some discussion of separating this out into two separate proposals, but it didn't seem useful. <br/>Eric Benson contributed the definition of <a class="macro-reference" href="../chapter-25.xhtml#macro-time">time</a> in Lucid Common Lisp: <br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-3.xhtml#macro-defmacro">defmacro</a> <a class="macro-reference" href="../chapter-25.xhtml#macro-time">time</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">form</span>)</span>
  <span class="syntax-quasiquote">`<span class="syntax-cons">(<span class="syntax-interned-symbol">time-internal</span> <span class="syntax-function">#'<span class="syntax-cons">(<a class="macro-reference" href="../chapter-3.xhtml#macro-lambda">lambda</a> <span class="syntax-symbol">()</span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">form</span></span>)</span></span>)</span></span>)</span>
</span></code></pre> <br/>  The function TIME-INTERNAL looks something like: <br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">time-internal</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">thunk</span>)</span>
  <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">before-time</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">get-time-state</span>)</span>)</span>)</span>
    <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-unwind-protect">unwind-protect</a>
        <span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-funcall">funcall</a> <span class="syntax-interned-symbol">thunk</span>)</span>
      <span class="syntax-cons">(<span class="syntax-interned-symbol">print-time-information</span> <span class="syntax-interned-symbol">before-time</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">get-time-state</span>)</span>)</span>)</span>)</span>)</span>
</span></code></pre> <br/>The definition of <a class="macro-reference" href="../chapter-25.xhtml#macro-step">step</a> is similar.  This is just to show that it is easy to get the right lexical environment even though <a class="macro-reference" href="../chapter-25.xhtml#macro-time">time</a> and <a class="macro-reference" href="../chapter-25.xhtml#macro-step">step</a> are macros. <br/>VaxLisp expands <a class="macro-reference" href="../chapter-25.xhtml#macro-step">step</a> into something like: <br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-3.xhtml#macro-defmacro">defmacro</a> <a class="macro-reference" href="../chapter-25.xhtml#macro-step">step</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">form</span>)</span>
    <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">*eval-hook*</span> <span class="syntax-function">#'<span class="syntax-interned-symbol">step-command-loop</span></span>)</span>)</span>
        <span class="syntax-unquote">,<span class="syntax-interned-symbol">form</span></span>)</span></span>)</span>
</span></code></pre> <br/> Additional comments: <br/>Verbally this was explained to mean that the body of the <a class="macro-reference" href="../chapter-25.xhtml#macro-step">step</a> would not be stepped when compiled, but if it just happened to call an interpreted function, that function would get stepped. </section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>