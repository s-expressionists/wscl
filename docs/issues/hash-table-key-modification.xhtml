<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” HASH-TABLE-KEY-MODIFICATION</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">HASH-TABLE-KEY-MODIFICATION</span><br/><ol class="local-toc"><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit history">Edit history</a><ol> </ol></li><li><a href="#section-Problem description">Problem description</a><ol> </ol></li><li><a href="#issue-hash-table-key-modification:specify">Proposal SPECIFY</a><ol> </ol></li><li><a href="#section-Test Cases/Examples">Test Cases/Examples</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Current practice">Current practice</a><ol> </ol></li><li><a href="#section-Cost to Implementors">Cost to Implementors</a><ol> </ol></li><li><a href="#section-Cost to Users">Cost to Users</a><ol> </ol></li><li><a href="#section-Cost of non-adoption">Cost of non-adoption</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Esthetics">Esthetics</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue HASH-TABLE-KEY-MODIFICATION [NIL] [CLARIFICATION]</h1><section id="section-References" class="section"><h2 class="section-title">References</h2>CLtL page 282, page 168 (last paragraph in 10.2) X3J13 Proposal <a class="issue-reference" href="../issues/equal-structure.xhtml#issue-equal-structure:maybe-status-quo">EQUAL-STRUCTURE:MAYBE-STATUS-QUO</a> (passed 6/89) </section><section id="section-Edit history" class="section"><h2 class="section-title">Edit history</h2>Version 1, 12-Sep-88, Moon, for discussion Version 2, 05-Feb-90, by Kim A. Barrett, rewrite with more explicit constraints Version 3, 16-Feb-90, by Kim Barrett, KMP (respond to comments from Moon) </section><section id="section-Problem description" class="section"><h2 class="section-title">Problem description</h2> CLtL is silent about what happens if you modify a component of an object that  is used as a <a class="type-reference" href="../chapter-18.xhtml#type-hash-table">hash-table</a> key. <br/></section><section class="status-unknown proposal" id="issue-hash-table-key-modification:specify"><h2 class="section-title">Proposal SPECIFY</h2> Define that the function supplied as the :TEST argument to <a class="function-reference" href="../chapter-18.xhtml#function-make-hash-table">make-hash-table</a>  specifies the `equivalence test' for the new hash table. <br/> Define that an object is `visibly modified' with regard to an equivalence test  if there exists some set of objects <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-or">or</a> <span class="syntax-interned-symbol">potential</span> <span class="syntax-interned-symbol">objects</span>)</span>
</span></code></pre> which are equivalent  to the object before the modification but are no longer equivalent afterwards. <br/> If an object is used as a key in a hash table and is then visibly modified  with regard to the equivalence test of the hash table, then using the object  as a key in further operations on the hash table has unspecified consequences.  Moreover, this applies for other objects which either are or were equivalent  to the key object.  Further, undoing the modification does not remove this  effect. <br/> Following are specifications of the modifications which are visible to the  equivalence tests which must be supported by hash tables.  The modifications  are described in terms of modification of components, and are defined  recursively.  Visible modifications of components of the object are visible  modifications of the object. <br/><ol><li> <a class="function-reference" href="../chapter-5.xhtml#function-eq">eq</a> and <a class="function-reference" href="../chapter-5.xhtml#function-eql">eql</a> Common Lisp does not specify any method for visibly modifying any data type with regard to either of these equivalence tests. <br/></li><li> <a class="function-reference" href="../chapter-5.xhtml#function-equal">equal</a> As a consequence of the behavior for <a class="function-reference" href="../chapter-5.xhtml#function-equal">equal</a> specified by Issue <a class="issue-reference" href="../issues/equal-structure.xhtml#issue-equal-structure">equal-structure</a>, the specification for this case reverts to the previous description for <a class="function-reference" href="../chapter-5.xhtml#function-eq">eq</a> and <a class="function-reference" href="../chapter-5.xhtml#function-eql">eql</a> for many data types.  The exceptions are <br/>a. <a class="function-reference" href="../chapter-14.xhtml#function-cons">cons</a>   The car and cdr. <br/>b. <a class="symbol-reference" href="../chapter-2.xhtml#symbol-bit-vector">bit-vector</a>   Elements of the vector, limited by the <a class="function-reference" href="../chapter-15.xhtml#function-fill-pointer">fill-pointer</a> if present.   The length of the vector, if adjustable or a <a class="function-reference" href="../chapter-15.xhtml#function-fill-pointer">fill-pointer</a> is present. <br/>c. <a class="function-reference" href="../chapter-16.xhtml#function-string">string</a>   Same as for <a class="symbol-reference" href="../chapter-2.xhtml#symbol-bit-vector">bit-vector</a>. <br/>d. <a class="function-reference" href="../chapter-19.xhtml#function-pathname">pathname</a>   Common Lisp does not specify any method for visibly modifying a <a class="function-reference" href="../chapter-19.xhtml#function-pathname">pathname</a>   with regard to <a class="function-reference" href="../chapter-5.xhtml#function-equal">equal</a>. <br/></li><li> <a class="function-reference" href="../chapter-5.xhtml#function-equalp">equalp</a> As a consequence of the behavior for <a class="function-reference" href="../chapter-5.xhtml#function-equalp">equalp</a> specified by Issue <a class="issue-reference" href="../issues/equal-structure.xhtml#issue-equal-structure">equal-structure</a>, the specification for this case reverts to the previous description for <a class="function-reference" href="../chapter-5.xhtml#function-equal">equal</a> for many data types.  The exceptions are <br/>a. <a class="type-reference" href="../chapter-12.xhtml#type-number">number</a>   Common Lisp does not specify any method for visibly modifying a <a class="type-reference" href="../chapter-12.xhtml#type-number">number</a>   with regard to <a class="function-reference" href="../chapter-5.xhtml#function-equalp">equalp</a>. <br/>b. <a class="function-reference" href="../chapter-13.xhtml#function-character">character</a>   Common Lisp does not specify any method for visibly modifying a <a class="function-reference" href="../chapter-13.xhtml#function-character">character</a>   with regard to <a class="function-reference" href="../chapter-5.xhtml#function-equalp">equalp</a>. <br/>c. <a class="symbol-reference" href="../chapter-2.xhtml#symbol-structure">structure</a>   The values of the slots. <br/>d. <a class="function-reference" href="../chapter-15.xhtml#function-vector">vector</a>   Elements of the vector, limited by the <a class="function-reference" href="../chapter-15.xhtml#function-fill-pointer">fill-pointer</a> if present.   The length of the vector, if adjustable or a <a class="function-reference" href="../chapter-15.xhtml#function-fill-pointer">fill-pointer</a> is present. <br/>e. <a class="symbol-reference" href="../chapter-2.xhtml#symbol-array">array</a>   Elements of the array, limited by the <a class="function-reference" href="../chapter-15.xhtml#function-fill-pointer">fill-pointer</a> if present.   The value of the <a class="function-reference" href="../chapter-15.xhtml#function-fill-pointer">fill-pointer</a>, if present.   The dimensions, if adjustable. <br/>f. <a class="type-reference" href="../chapter-18.xhtml#type-hash-table">hash-table</a>   The count of entries in the table.   The keys.  Note that the visibility of modifications to the keys depends     on the equivalence test of the hash table, not on the specification of     <a class="function-reference" href="../chapter-5.xhtml#function-equalp">equalp</a>.    The values associated with the keys. <br/></li></ol> Implementations which extend the language by providing additional mutator  functions <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-or">or</a> <span class="syntax-interned-symbol">additional</span> <span class="syntax-interned-symbol">behavior</span> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">existing</span> <span class="syntax-interned-symbol">mutator</span> <span class="syntax-interned-symbol">functions</span>)</span>
</span></code></pre> must  document how the use of these extensions interacts with equivalence tests and  hash table searches. <br/> Implementations which extend the language by defining additional acceptable  equivalence tests for hash tables <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">allowing</span> <span class="syntax-interned-symbol">additional</span> <a class="function-reference" href="../chapter-5.xhtml#function-values">values</a> <span class="syntax-interned-symbol">for</span> <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <span class="syntax-keyword-symbol">:TEST</span>
 <span class="syntax-interned-symbol">argument</span> <span class="syntax-interned-symbol">to</span> <a class="function-reference" href="../chapter-18.xhtml#function-make-hash-table">make-hash-table</a>)</span>
</span></code></pre> must document the visible components of these  tests. <br/></section><section id="section-Test Cases/Examples" class="section"><h2 class="section-title">Test Cases/Examples</h2><pre> <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-interned-symbol">ht</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-18.xhtml#function-make-hash-table">make-hash-table</a> <span class="syntax-keyword-symbol">:test</span> <span class="syntax-function">#'<a class="function-reference" href="../chapter-5.xhtml#function-eq">eq</a></span>)</span>)</span>
</span></code></pre><br/> <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-cons">cons</a> <span class="syntax-number">1</span> <span class="syntax-number">2</span>)</span>)</span>
</span></code></pre><br/> <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-18.xhtml#function-gethash">gethash</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">ht</span>)</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">win</span></span>)</span>
</span></code></pre><br/> <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-cdr">cdr</a> <span class="syntax-interned-symbol">a</span>)</span> <span class="syntax-number">3</span>)</span>
</span></code></pre><br/> <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-18.xhtml#function-gethash">gethash</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">ht</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">lose</span></span>)</span>
</span></code></pre> <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; win t<br/><br/> The same example with :test #'equal in the first line would be an error.<br/><br/> The following example is not an error, because <a class="function-reference" href="../chapter-5.xhtml#function-equal">equal</a> does not examine the<br/> components of general vectors:<br/><br/> <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-interned-symbol">ht</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-18.xhtml#function-make-hash-table">make-hash-table</a> <span class="syntax-keyword-symbol">:test</span> <span class="syntax-function">#'<a class="function-reference" href="../chapter-5.xhtml#function-equal">equal</a></span>)</span>)</span>
</span></code></pre><br/> <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-15.xhtml#function-vector">vector</a> <span class="syntax-number">1</span> <span class="syntax-number">2</span>)</span>)</span>
</span></code></pre><br/> <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-18.xhtml#function-gethash">gethash</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">ht</span>)</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">win</span></span>)</span>
</span></code></pre><br/> <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-15.xhtml#function-aref">aref</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-number">1</span>)</span> <span class="syntax-number">3</span>)</span>
</span></code></pre><br/> <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-18.xhtml#function-gethash">gethash</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">ht</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">lose</span></span>)</span>
</span></code></pre> <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; win t<br/><br/> The following example is not an error, because <a class="function-reference" href="../chapter-5.xhtml#function-equalp">equalp</a> is limited by the<br/> <a class="function-reference" href="../chapter-15.xhtml#function-fill-pointer">fill-pointer</a> when examining the elements of a vector:<br/><br/> <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-interned-symbol">ht</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-18.xhtml#function-make-hash-table">make-hash-table</a> <span class="syntax-keyword-symbol">:test</span> <span class="syntax-function">#'<a class="function-reference" href="../chapter-5.xhtml#function-equalp">equalp</a></span>)</span>)</span>
</span></code></pre><br/> <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-15.xhtml#function-make-array">make-array</a> <span class="syntax-number">3</span> <span class="syntax-keyword-symbol">:fill-pointer</span> <span class="syntax-number">2</span> <span class="syntax-keyword-symbol">:initial-contents</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">3</span>)</span></span>)</span>)</span>
</span></code></pre><br/> <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-18.xhtml#function-gethash">gethash</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">ht</span>)</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">win</span></span>)</span>
</span></code></pre><br/> <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-15.xhtml#function-aref">aref</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-number">2</span>)</span> <span class="syntax-number">4</span>)</span>
</span></code></pre><br/> <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-18.xhtml#function-gethash">gethash</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">ht</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">lose</span></span>)</span>
</span></code></pre> <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; win t<br/><br/> The following example is an error, because <a class="function-reference" href="../chapter-5.xhtml#function-equalp">equalp</a> may examine the dimensions<br/> of arrays:<br/><br/> <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-interned-symbol">ht</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-18.xhtml#function-make-hash-table">make-hash-table</a> <span class="syntax-keyword-symbol">:test</span> <span class="syntax-function">#'<a class="function-reference" href="../chapter-5.xhtml#function-equalp">equalp</a></span>)</span>)</span>
</span></code></pre><br/> <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-15.xhtml#function-make-array">make-array</a> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-number">2</span> <span class="syntax-number">3</span>)</span></span> <span class="syntax-keyword-symbol">:adjustable</span> <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>)</span>)</span>
</span></code></pre><br/> <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-18.xhtml#function-gethash">gethash</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">ht</span>)</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">win</span></span>)</span>
</span></code></pre><br/> <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-15.xhtml#function-adjust-array">adjust-array</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-number">3</span> <span class="syntax-number">2</span>)</span></span>)</span>)</span>
</span></code></pre><br/> <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-18.xhtml#function-gethash">gethash</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">ht</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">lose</span></span>)</span>
</span></code></pre> <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; `unspecified'<br/><br/> The following example is not an error, because <a class="function-reference" href="../chapter-5.xhtml#function-equalp">equalp</a> is case insensitive:<br/><br/> <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-interned-symbol">ht</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-18.xhtml#function-make-hash-table">make-hash-table</a> <span class="syntax-keyword-symbol">:test</span> <span class="syntax-function">#'<a class="function-reference" href="../chapter-5.xhtml#function-equalp">equalp</a></span>)</span>)</span>
</span></code></pre><br/> <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-string">"ABC"</span>)</span>
</span></code></pre><br/> <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-18.xhtml#function-gethash">gethash</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">ht</span>)</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">win</span></span>)</span>
</span></code></pre><br/> <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-16.xhtml#function-char">char</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-number">0</span>)</span> <span class="syntax-character">#\a</span>)</span>
</span></code></pre><br/> <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-18.xhtml#function-gethash">gethash</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">ht</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">lose</span></span>)</span>
</span></code></pre> <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; win t<br/><br/> The same example with :test #'equal in the first line would be an error.<br/><br/></pre></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2> <a class="function-reference" href="../chapter-5.xhtml#function-eq">eq</a> and <a class="function-reference" href="../chapter-5.xhtml#function-eql">eql</a> hash tables use the identity of the object as the key, while <a class="function-reference" href="../chapter-5.xhtml#function-equal">equal</a>  and <a class="function-reference" href="../chapter-5.xhtml#function-equalp">equalp</a> hash tables use the structure of the object as the key.  Component  modification changes the structure of an object, while the identity of an  object cannot be changed in Common Lisp. <br/> Specifying `unspecified consequences' provides implementation freedom, while  still providing guidance to users. <br/> This is a generalization of the warning on p.168 of CLtL. <br/> Note that this proposal implies that it is invalid to use an overly general  hash function, such as <a class="function-reference" href="../chapter-18.xhtml#function-sxhash">sxhash</a>, as the hash function for <a class="function-reference" href="../chapter-5.xhtml#function-eq">eq</a> or <a class="function-reference" href="../chapter-5.xhtml#function-eql">eql</a> hash tables.  The value of <a class="function-reference" href="../chapter-18.xhtml#function-sxhash">sxhash</a> can be affected by component modifications, and this is  likely to cause hash table entries to become inaccessible.  The general rule  for this is that a hash function must not depend on the value of some  property of an object if modification of that property is not visible to the  associated equivalence function. <br/> The documentation requirements for extensions seems like the minimal necessary  thing, assuming we want to talk about extensions at all. <br/></section><section id="section-Current practice" class="section"><h2 class="section-title">Current practice</h2> I am not aware of any implementations that do not conform to the proposal. <br/> Some implementations which provide any of the described extensions may not  conform to the documentation requirement. <br/></section><section id="section-Cost to Implementors" class="section"><h2 class="section-title">Cost to Implementors</h2> Most implementations probably already conform.  It is possible that some  implementations might have to use a different hash function in their  implementation of some hash tables in order to conform. <br/></section><section id="section-Cost to Users" class="section"><h2 class="section-title">Cost to Users</h2> None. <br/></section><section id="section-Cost of non-adoption" class="section"><h2 class="section-title">Cost of non-adoption</h2> Users would not be sure whether they were allowed to perform side effects on  objects that might have been used as keys of hash tables. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2> More specific language semantics. <br/></section><section id="section-Esthetics" class="section"><h2 class="section-title">Esthetics</h2> More specific language semantics. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2> Version 1   Discussion on the <a class="package-reference" href="../chapter-1.xhtml#package-common-lisp">common-lisp</a> mailing list was in favor of this. <br/> Version 2   Barrett:    The two paragraphs about language extensions could be stricken without really    affecting the proposal. <br/>   This proposal does not deal with any of the performance issues addressed by    <span class="issue-reference error">issue:Issue HASH-TABLE-STABILITY</span>.  Rather, it provides guidance to users and    implementors as to the requirements for conforming programs. <br/>   `Unspecified consequences' could be changed to 'undefined consequences',    though it seems unlikely that this is actually a 'crash and burn' situation.    (The program which was depending on the result of the operation may exhibit    undefined consequences as a result of the <a class="type-reference" href="../chapter-18.xhtml#type-hash-table">hash-table</a> operation's having    unspecified consequences, but that's not the same thing.) <br/>  Moon:     Re: Define that an object is 'visibly modified' with regard to an         equivalence test if there exists some class of objects which were  	equivalent to the object before the modification but are no longer  	equivalent afterwards.     Except for ... the use of "class" to mean "set" rather than the     usual CLOS meaning, it looks okay.  Actually where it says "some     class of objects", a single object would be sufficient.  X is     visibly modified if there exists any Y such that <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-funcall">funcall</a> <span class="syntax-interned-symbol">test</span> <span class="syntax-interned-symbol">X</span> <span class="syntax-interned-symbol">Y</span>)</span>
</span></code></pre>     produces a different result, provided (this is missing from Kim's     writeup) Y has not been modified [whatever that means exactly]. <br/>  Pitman and Barrett support this proposal <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">v3</span>)</span>
</span></code></pre>. </section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>