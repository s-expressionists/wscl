<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” FORMAT-STRING-ARGUMENTS</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">FORMAT-STRING-ARGUMENTS</span><br/><ol class="local-toc"><li><a href="#section-Edit history">Edit history</a><ol> </ol></li><li><a href="#section-Problem description">Problem description</a><ol> </ol></li><li><a href="#issue-format-string-arguments:specify">Proposal SPECIFY</a><ol> <li><a href="#section-Rationale">Rationale</a><ol> </ol></li></ol></li><li><a href="#issue-format-string-arguments:retract">Proposal RETRACT</a><ol> <li><a href="#section-Rationale">Rationale</a><ol> </ol></li></ol></li><li><a href="#section-Current Practice">Current Practice</a><ol> </ol></li><li><a href="#section-Cost to Implementors">Cost to Implementors</a><ol> </ol></li><li><a href="#section-Cost to Users">Cost to Users</a><ol> </ol></li><li><a href="#section-Cost of non-adoption">Cost of non-adoption</a><ol> </ol></li><li><a href="#section-Performance impact">Performance impact</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Esthetics">Esthetics</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue FORMAT-STRING-ARGUMENTS [NIL] [CLARIFICATION, CHANGE]</h1><h2>Related issues</h2><ul><a class="issue-reference" href="../issues/pretty-print-interface.xhtml#issue-pretty-print-interface">X3J13 Issue PRETTY-PRINT-INTERFACE</a></ul><section id="section-Edit history" class="section"><h2 class="section-title">Edit history</h2>V1, 10 May 90, Sandra Loosemore </section><section id="section-Problem description" class="section"><h2 class="section-title">Problem description</h2><a class="issue-reference" href="../issues/pretty-print-interface.xhtml#issue-pretty-print-interface">X3J13 Issue PRETTY-PRINT-INTERFACE</a> says that     The function <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> is extended so that it can accept a     function instead of a <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> string.  (This change is also made     in the other functions that accept <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> strings such as <a class="function-reference" href="../chapter-9.xhtml#function-error">error</a>     and <a class="function-reference" href="../chapter-9.xhtml#function-warn">warn</a>.) <br/>The pretty printer proposal did not explicitly address whether this also affects the :FORMAT-STRING slot of <a class="type-reference" href="../chapter-9.xhtml#type-simple-condition">simple-condition</a>  objects, and whether any macros <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">as</span> <span class="syntax-interned-symbol">well</span> <span class="syntax-interned-symbol">as</span> <span class="syntax-interned-symbol">functions</span>)</span>
</span></code></pre> specified  in the standard were affected by the change. <br/>Also, there is potential for confusion in using the terminology "format strings" to refer to objects that are now permitted to be either strings or functions. <br/>There are two proposals, <a class="proposal-reference" href="#issue-format-string-arguments:specify">SPECIFY</a> and <a class="proposal-reference" href="#issue-format-string-arguments:retract">RETRACT</a>. <br/>This is issue #1 from Loosemore's list. <br/></section><section class="status-unknown proposal" id="issue-format-string-arguments:specify"><h2 class="section-title">Proposal SPECIFY</h2><ol><li> Clarify that the following functions and macros which formerly were specified to take format strings as arguments now accept either a format string or a format function: <br/><a class="macro-reference" href="../chapter-9.xhtml#macro-assert">assert</a> (datum; treated like a string argument is now) <a class="function-reference" href="../chapter-9.xhtml#function-break">break</a> <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">format-string</span>)</span>
</span></code></pre> <a class="function-reference" href="../chapter-9.xhtml#function-cerror">cerror</a> <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">both</span> <span class="syntax-interned-symbol">continue-format-string</span> <a class="macro-reference" href="../chapter-5.xhtml#macro-and">and</a> <span class="syntax-interned-symbol">datum</span> <span class="syntax-interned-symbol">arguments</span>)</span>
</span></code></pre> <a class="macro-reference" href="../chapter-7.xhtml#macro-define-method-combination">define-method-combination</a> <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-keyword-symbol">:DESCRIPTION</span> <span class="syntax-interned-symbol">argument</span>)</span>
</span></code></pre> <a class="function-reference" href="../chapter-9.xhtml#function-error">error</a> (datum; treated like a string argument is now) <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">control-string</span>)</span>
</span></code></pre> <a class="function-reference" href="../chapter-9.xhtml#function-invalid-method-error">invalid-method-error</a>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">format-string</span>)</span>
</span></code></pre> <a class="function-reference" href="../chapter-9.xhtml#function-method-combination-error">method-combination-error</a> <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">format-string</span>)</span>
</span></code></pre> <a class="function-reference" href="../chapter-9.xhtml#function-signal">signal</a> (datum; treated like a string argument is now) <a class="function-reference" href="../chapter-9.xhtml#function-warn">warn</a> (datum; treated like a string argument is now) <a class="macro-reference" href="../chapter-9.xhtml#macro-with-simple-restart">with-simple-restart</a> <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">format-string</span>)</span>
</span></code></pre> <a class="function-reference" href="../chapter-21.xhtml#function-y-or-n-p">y-or-n-p</a> <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">format-string</span>)</span>
</span></code></pre> <a class="function-reference" href="../chapter-21.xhtml#function-yes-or-no-p">yes-or-no-p</a> <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">format-string</span>)</span>
</span></code></pre> <br/></li><li> Clarify that the :FORMAT-STRING argument passed to <a class="function-reference" href="../chapter-9.xhtml#function-make-condition">make-condition</a> to construct a condition which is a subtype of <a class="type-reference" href="../chapter-9.xhtml#type-simple-condition">simple-condition</a> may be either a string or a function, and the accessor  SIMPLE-CONDITION-FORMAT-STRING can return either a string or a function. <br/></li><li> Change the name of the :FORMAT-STRING argument to <a class="function-reference" href="../chapter-9.xhtml#function-make-condition">make-condition</a>  associated with <a class="type-reference" href="../chapter-9.xhtml#type-simple-condition">simple-condition</a> types to :FORMAT-CONTROL, and rename the accessor function to <a class="function-reference" href="../chapter-9.xhtml#function-simple-condition-format-control">simple-condition-format-control</a>.  As an editorial matter, change all references to arguments now named "format-string" to "format-control". <br/></li></ol><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>Items <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-number">1</span>)</span>
</span></code></pre> and <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-number">2</span>)</span>
</span></code></pre> were probably what was intended by the <a class="issue-reference" href="../issues/pretty-print-interface.xhtml#issue-pretty-print-interface">pretty-print-interface</a> proposal.  Item <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-number">3</span>)</span>
</span></code></pre> is a logical extension; since the arguments need not be strings, calling them "format-strings" is a misnomer. <br/></section></section><section class="status-unknown proposal" id="issue-format-string-arguments:retract"><h2 class="section-title">Proposal RETRACT</h2><ol><li> Retract the part of <a class="issue-reference" href="../issues/pretty-print-interface.xhtml#issue-pretty-print-interface">X3J13 Issue PRETTY-PRINT-INTERFACE</a> that required <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a>, related functions such as <a class="function-reference" href="../chapter-9.xhtml#function-error">error</a> and <a class="function-reference" href="../chapter-9.xhtml#function-warn">warn</a>, and the ~? and ~{~} directives to accept format control functions as well as strings. <br/></li><li> Remove the <a class="macro-reference" href="../chapter-22.xhtml#macro-formatter">formatter</a> macro from the language. </li></ol><br/><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>It is easier to remove this feature than to try to fix the rest of the language to be consistent with it.  Having a macro to "compile" format strings into functions is probably not useful in the absence of the extensions to <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a>. <br/></section></section><section id="section-Current Practice" class="section"><h2 class="section-title">Current Practice</h2>  Unknown.  The pretty printer specification is a fairly recent   addition to the language and it probably hasn't been fully   integrated into any implementation yet. <br/></section><section id="section-Cost to Implementors" class="section"><h2 class="section-title">Cost to Implementors</h2>  The actual implementation cost of extending the listed functions    and macros to accept function arguments is probably small, since   in most cases they just pass the argument to <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> anyway.   Both proposals probably involve changes to documentation. <br/></section><section id="section-Cost to Users" class="section"><h2 class="section-title">Cost to Users</h2>  For proposal <a class="proposal-reference" href="#issue-format-string-arguments:specify">SPECIFY</a>, the incompatible change to the name of the    :FORMAT-STRING slot of <a class="type-reference" href="../chapter-9.xhtml#type-simple-condition">simple-condition</a> objects may cause some    problems for users who have started using the condition system   in their code, but these ought to be fairly straightforward to    track down and fix. <br/>  Proposal <a class="proposal-reference" href="#issue-format-string-arguments:retract">RETRACT</a> may cause some problems for users who have   started writing code which uses the <a class="macro-reference" href="../chapter-22.xhtml#macro-formatter">formatter</a> macro and the   extension to <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> to accept functions, but again the   problems should generally be easy to find and fix. <br/></section><section id="section-Cost of non-adoption" class="section"><h2 class="section-title">Cost of non-adoption</h2>  Parts of the language are poorly specified. <br/></section><section id="section-Performance impact" class="section"><h2 class="section-title">Performance impact</h2>  The ability to "compile" format strings into functions in advance can   potentially lead to greater runtime efficiency.  On the other   hand, some implementations might implement <a class="macro-reference" href="../chapter-22.xhtml#macro-formatter">formatter</a> in such a   way that it is less efficient than passing a format string   directly.  Furthermore, even without <a class="macro-reference" href="../chapter-22.xhtml#macro-formatter">formatter</a> in the language,   it is still possible for implementations to do a compile-time   transformation to "compile" constant string arguments to <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a>   and related functions. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>  The language is better specified. <br/></section><section id="section-Esthetics" class="section"><h2 class="section-title">Esthetics</h2>  Either proposal would be an improvement over the current   situation. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>  Conceivably, the <a class="macro-reference" href="../chapter-22.xhtml#macro-formatter">formatter</a> macro could be left in the language   even while removing the extensions to <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> and friends, but it's    not clear how useful this would be to users. <br/>  Loosemore opposes other partial solutions <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">like</span> <span class="syntax-interned-symbol">requiring</span> <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> 
  <span class="syntax-interned-symbol">to</span> <span class="syntax-interned-symbol">accept</span> <span class="syntax-interned-symbol">both</span> <span class="syntax-interned-symbol">strings</span> <a class="macro-reference" href="../chapter-5.xhtml#macro-and">and</a> <span class="syntax-interned-symbol">functions</span> <span class="syntax-interned-symbol">but</span> <span class="syntax-interned-symbol">specifying</span> <span class="syntax-interned-symbol">everything</span> <span class="syntax-interned-symbol">else</span> 
  <span class="syntax-interned-symbol">to</span> <span class="syntax-interned-symbol">accept</span> <span class="syntax-interned-symbol">only</span> <span class="syntax-interned-symbol">strings</span>)</span>
</span></code></pre> on the grounds that they would   introduce additional, unnecessary complexity and inconsistency   into the language.  If the feeling is that this feature belongs   in the language, we ought to bite the bullet and do it   properly. </section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>