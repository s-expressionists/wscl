<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” PATHNAME-PRINT-READ</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">PATHNAME-PRINT-READ</span><br/><ol class="local-toc"><li><a href="#section-Status">Status</a><ol> </ol></li><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit history">Edit history</a><ol> </ol></li><li><a href="#section-Problem Description">Problem Description</a><ol> </ol></li><li><a href="#issue-pathname-print-read:sharpsign-p">Proposal SHARPSIGN-P</a><ol> </ol></li><li><a href="#section-Test Case">Test Case</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Current Practice">Current Practice</a><ol> </ol></li><li><a href="#section-Cost to Implementors">Cost to Implementors</a><ol> </ol></li><li><a href="#section-Cost to Users">Cost to Users</a><ol> </ol></li><li><a href="#section-Cost of Non-Adoption">Cost of Non-Adoption</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Aesthetics">Aesthetics</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue PATHNAME-PRINT-READ [NIL] [CHANGE/ADDITION]</h1><section id="section-Status" class="status-passed section"><h2 class="section-title">Status</h2>Passed, as amended, Jun89 X3J13 </section><section id="section-References" class="section"><h2 class="section-title">References</h2>File System Interface (pp409-427) </section><section id="section-Edit history" class="section"><h2 class="section-title">Edit history</h2>21-Oct-88, Version 1 by Pitman 3-Jul-89, Version 2 by Masinter </section><section id="section-Problem Description" class="section"><h2 class="section-title">Problem Description</h2>  Although pathnames are required to print re-readably, there is no   standardized representation for pathnames and so no standardized   way in which they should print. <br/>  Further, it is common in programs to want pathnames to print in   their file-system specific format. <br/></section><section class="status-passed proposal" id="issue-pathname-print-read:sharpsign-p"><h2 class="section-title">Proposal SHARPSIGN-P</h2>  Define the reader syntax #P"..." to be equivalent to    #.<code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-parse-namestring">parse-namestring</a> <span class="syntax-string">"..."</span>)</span>
</span></code>. <br/>  Define that when <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-escape*">*print-escape*</a> is true, the syntax #P"..." is   how a pathname should be printed by <a class="function-reference" href="../chapter-22.xhtml#function-write">write</a> (and hence by <a class="function-reference" href="../chapter-22.xhtml#function-prin1">prin1</a>,   <a class="function-reference" href="../chapter-22.xhtml#function-print">print</a>, etc.). The "..." is the namestring representation of the   pathname. <br/>  Define that when <a class="variable-reference" href="../chapter-22.xhtml#variable-*print-escape*">*print-escape*</a> is <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>, <a class="function-reference" href="../chapter-22.xhtml#function-write">write</a> writes a pathname   object P by writing <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-namestring">namestring</a> <span class="syntax-interned-symbol">p</span>)</span>
</span></code> instead. <br/></section><section id="section-Test Case" class="section"><h2 class="section-title">Test Case</h2><pre>  <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-parse-namestring">parse-namestring</a> <span class="syntax-string">"foo.lisp"</span>)</span>
</span></code><br/>  <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; #P"foo.lisp"<br/><br/>  (<a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> "Written to ~A." #P"foo.bin")<br/>  <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; "Written to foo.bin."<br/><br/>  (<a class="function-reference" href="../chapter-4.xhtml#function-typep">typep</a> #P"foo.bin" '<a class="function-reference" href="../chapter-19.xhtml#function-pathname">pathname</a>)<br/>  <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a><br/><br/></pre></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>  This satisfies the stated goals. <br/>  [For :ESCAPE <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>] It will not be possible to make the printed   pathname printed representation totally portable because of   variations in file systems, but for different Common Lisp   implementations on the same file system, or for Common Lisp   systems running on file systems having compatible syntax,   portability would be improved by this specification. <br/>  Also, some implementations (eg, Symbolics Genera) use   specialized representations for pathnames on different file   systems. Eg, an MSDOS pathname is of type MSDOS-PATHNAME,   not just type <a class="function-reference" href="../chapter-19.xhtml#function-pathname">pathname</a>. #S<code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-pathname">pathname</a> <span class="syntax-interned-symbol">...</span>)</span>
</span></code> is not only more   verbose than necessary but might be misleading to some users   because the object created will not have a <a class="function-reference" href="../chapter-4.xhtml#function-type-of">type-of</a> <a class="function-reference" href="../chapter-19.xhtml#function-pathname">pathname</a>. <br/>  [For :ESCAPE <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>] Printing the namestring of a pathname is   a common operation and it is convenient to have a shorthand   for doing it. Further, some implementations may be able to   optimize the presentation of a pathname in this mode by   printing it without actually consing the string. <br/></section><section id="section-Current Practice" class="section"><h2 class="section-title">Current Practice</h2>  Symbolics Genera implements the proposed behavior. <br/></section><section id="section-Cost to Implementors" class="section"><h2 class="section-title">Cost to Implementors</h2>  Fairly minor changes to the readtable and the printer. <br/></section><section id="section-Cost to Users" class="section"><h2 class="section-title">Cost to Users</h2>  Users who now use the non-portable syntax #S<code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">...</span>)</span>
</span></code> in order   to enter literal pathnames might have to change. [However,   implementations would be free to continue to support this   read syntax for compatibility.] <br/></section><section id="section-Cost of Non-Adoption" class="section"><h2 class="section-title">Cost of Non-Adoption</h2>  Portability of code and data involving pathnames within a   given file system <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-or">or</a> <span class="syntax-interned-symbol">between</span> <span class="syntax-interned-symbol">suitably</span> <span class="syntax-interned-symbol">similar</span> <span class="syntax-interned-symbol">file</span> <span class="syntax-interned-symbol">systems</span>)</span>
</span></code>   would be hampered needlessly. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>  The cost of non-adoption would be avoided. <br/></section><section id="section-Aesthetics" class="section"><h2 class="section-title">Aesthetics</h2>  The #P syntax is pretty and hides unimportant details. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>  Pitman supports this change. <br/>&mdash;&ndash; Summary of discussion on CL-Cleanup: <br/> EB noted that Lucid <a class="package-reference" href="../chapter-11.xhtml#package-cl">cl</a> implements the proposed behavior and that there   is cost to users who define their own #P read macro. He weakly supports   the proposal but wishes someone had pursued a `generic pathnames' proposal. <br/> Pierson noted that KCL uses #"...", but that this collides with proposed   syntax for Dick Waters' pretty printer. He also thinks #P is better   because it is already more widely used for that purpose. <br/> Masinter noted that Envos Medley prints pathnames with the syntax   #.<code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-pathname">pathname</a> <span class="syntax-string">"asdf"</span>)</span>
</span></code>, which he thinks is not as pretty as #P"asdf"   but currently more portable. <br/> KMP and JonL raised the issues that #. has the disadvantage that it must   be parsed by the full Lisp engine, while #P can be parsed by something   simpler.  Permitting #. leaves a gaping hole for trojan horses, and   also requires the presence of the evaluator in a delivery system. <br/> MLY, GSB, Peirson, and IIM argued for not using up an extra dispatch  character. <br/> MLY suggested #S<code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-pathname">pathname</a> <a class="function-reference" href="../chapter-19.xhtml#function-namestring">namestring</a> <span class="syntax-interned-symbol">[optional-host]</span>)</span>
</span></code>. <br/> IIM noted they use #.<code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-19.xhtml#function-pathname">pathname</a> <a class="function-reference" href="../chapter-19.xhtml#function-namestring">namestring</a> <span class="syntax-interned-symbol">host</span>)</span>
</span></code> because different file   systems have different parsing conventions.  <br/></section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>