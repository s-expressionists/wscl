<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” SYMBOL-MACROLET-SEMANTICS</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">SYMBOL-MACROLET-SEMANTICS</span><br/><ol class="local-toc"><li><a href="#section-Status">Status</a><ol> </ol></li><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit history">Edit history</a><ol> </ol></li><li><a href="#section-Problem Description">Problem Description</a><ol> </ol></li><li><a href="#issue-symbol-macrolet-semantics:special-form">Proposal SPECIAL-FORM</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Current Practice">Current Practice</a><ol> </ol></li><li><a href="#section-Cost to Implementors">Cost to Implementors</a><ol> </ol></li><li><a href="#section-Cost to Users">Cost to Users</a><ol> </ol></li><li><a href="#section-Cost of Non-Adoption">Cost of Non-Adoption</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Aesthetics">Aesthetics</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue SYMBOL-MACROLET-SEMANTICS [NIL] [CHANGE]</h1><h2>Related issues</h2><ul><a class="issue-reference" href="../issues/symbol-macrolet-declare.xhtml#issue-symbol-macrolet-declare">SYMBOL-MACROLET-DECLARE</a></ul><section id="section-Status" class="status-passed section"><h2 class="section-title">Status</h2>Version 5 passed Jan 89 X3J13 Version 6 passed Mar 89 X3J13 </section><section id="section-References" class="section"><h2 class="section-title">References</h2><a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-symbol-macrolet">symbol-macrolet</a> (88-002R page 2-81) <br/></section><section id="section-Edit history" class="section"><h2 class="section-title">Edit history</h2>29-July-88, Version 1 by Piazza 21-September-88, Version 2 by Piazza 22-September-88, Version 3 by Piazza  22-September-88, Version 4 by Piazza 30-Nov-88, Version 5 by Masinter 14-Mar-89, Version 6 by Steele </section><section id="section-Problem Description" class="section"><h2 class="section-title">Problem Description</h2>    The <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-symbol-macrolet">symbol-macrolet</a> construct, introduced with CLOS in X3J13 document     88-002R, profoundly alters the interpretation of symbols appearing as     forms in a Common Lisp program--what previously was necessarily a variable     might now be a symbol macro instead.  Macros which appear in the body of a     <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-symbol-macrolet">symbol-macrolet</a> form are currently unable to determine whether a symbol     form is a variable or a symbol macro, and, if the latter, what the     expansion of the symbol macro is.  Consequently, complex macros <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">such</span> <span class="syntax-interned-symbol">as</span>
    <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <a class="macro-reference" href="../chapter-5.xhtml#macro-or">or</a> <a class="macro-reference" href="../chapter-14.xhtml#macro-push">push</a>)</span>
</span></code></pre> which depend on the form of their argument<pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">s</span>)</span>
</span></code></pre>, are unable to     produce their desired results in some cases, as in the following example: <br/>	    <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-15.xhtml#function-make-array">make-array</a> <span class="syntax-number">5</span>)</span>)</span>
		  <span class="syntax-cons">(<span class="syntax-interned-symbol">i</span> <span class="syntax-number">0</span>)</span>)</span>
	      <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-symbol-macrolet">symbol-macrolet</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">place</span>  <span class="syntax-cons">(<a class="function-reference" href="../chapter-15.xhtml#function-aref">aref</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-12.xhtml#macro-incf">incf</a> <span class="syntax-interned-symbol">i</span>)</span>)</span>)</span>)</span>
	        <span class="syntax-cons">(<a class="macro-reference" href="../chapter-14.xhtml#macro-push">push</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">place</span>)</span>)</span>
	      <span class="syntax-interned-symbol">i</span>)</span>
</span></code></pre>		==&gt; 2 <br/>    In addition, it would be both natural and nice to be able to write <br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-7.xhtml#macro-with-slots">with-slots</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">rho</span> <span class="syntax-interned-symbol">theta</span>)</span> <span class="syntax-interned-symbol">point</span>
    <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-declare">declare</a> <span class="syntax-cons">(<a class="type-reference" href="../chapter-12.xhtml#type-single-float">single-float</a> <span class="syntax-interned-symbol">rho</span> <span class="syntax-interned-symbol">theta</span>)</span>)</span>
    <span class="syntax-interned-symbol">...computation...</span>)</span>
</span></code></pre> <br/>    as well as <a class="symbol-reference" href="../chapter-3.xhtml#symbol-declare">declare</a> within <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-symbol-macrolet">symbol-macrolet</a> forms. <br/></section><section class="status-passed proposal" id="issue-symbol-macrolet-semantics:special-form"><h2 class="section-title">Proposal SPECIAL-FORM</h2>    Change the definition of <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-symbol-macrolet">symbol-macrolet</a> to specify that it is a special     form, which affects the evaluation environment for symbols.  Enhance     <a class="function-reference" href="../chapter-3.xhtml#function-macroexpand">macroexpand</a> and <a class="function-reference" href="../chapter-3.xhtml#function-macroexpand-1">macroexpand-1</a> so that they can expand a symbol macro.     Modify <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> et al to use the new <a class="function-reference" href="../chapter-3.xhtml#function-macroexpand">macroexpand</a> and <a class="function-reference" href="../chapter-3.xhtml#function-macroexpand-1">macroexpand-1</a> to examine     even symbol subforms.  Specify that the expansion of a symbol macro IS     subject to further macro expansion in the same lexical environment as the     symbol macro invocation, exactly analogous to normal macros. Clarify that     within the body of a <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-symbol-macrolet">symbol-macrolet</a>, <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-setq">setq</a> of a symbol defined as     a symbol macro will be treated as if it were a <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a>. <br/>    Furthermore <a class="macro-reference" href="../chapter-5.xhtml#macro-psetq">psetq</a> of a symbol defined as a symbol macro will     behave as if it were a <a class="macro-reference" href="../chapter-5.xhtml#macro-psetf">psetf</a>, and <a class="macro-reference" href="../chapter-5.xhtml#macro-multiple-value-setq">multiple-value-setq</a> will behave     as if <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-setq">setq</a> were used on each variable to be set. <br/>    When <a class="function-reference" href="../chapter-3.xhtml#function-macroexpand">macroexpand</a> or <a class="function-reference" href="../chapter-3.xhtml#function-macroexpand-1">macroexpand-1</a> sees a symbol macro, it calls     the value of <a class="variable-reference" href="../chapter-3.xhtml#variable-*macroexpand-hook*">*macroexpand-hook*</a> in the same manner as for an     ordinary macro.  The three values given to the hook function     in this case will be an expansion function, a form <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">in</span> <span class="syntax-interned-symbol">this</span> <a class="macro-reference" href="../chapter-5.xhtml#macro-case">case</a>
    <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <a class="symbol-reference" href="../chapter-2.xhtml#symbol-symbol">symbol</a> <span class="syntax-interned-symbol">naming</span> <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <a class="symbol-reference" href="../chapter-2.xhtml#symbol-symbol">symbol</a> <span class="syntax-interned-symbol">macro</span>)</span>
</span></code></pre>, and an environment.  The     only guaranteed property of the expansion function is that when     it is applied to the form and the environment it will return the     correct expansion of the symbol macro.  (In particular, nothing     it said in this specification whether the expansion is conceptually     stored in the expansion function, the environment, or both.) <br/></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>    The potential for interaction between macros is exactly why &amp;environment     arguments were originally added to macros.  Changing <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-symbol-macrolet">symbol-macrolet</a> to be     a special form, which communicates through the &amp;environment arguments to     macros with <a class="function-reference" href="../chapter-3.xhtml#function-macroexpand">macroexpand</a> and <a class="function-reference" href="../chapter-3.xhtml#function-macroexpand-1">macroexpand-1</a>, would allow <a class="macro-reference" href="../chapter-14.xhtml#macro-push">push</a> and <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a>     <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">among</span> <span class="syntax-interned-symbol">others</span>)</span>
</span></code></pre> to work with <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-symbol-macrolet">symbol-macrolet</a> in the same way they work with     <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-macrolet">macrolet</a>. <br/>    This change cannot <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">reasonably</span>)</span>
</span></code></pre> support the currently specified semantics     that the expansion text is "outside" the scope of the symbol macro.  For     indeed, when the symbol macro is expanded, <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">copy</span> <span class="syntax-interned-symbol">of</span>)</span>
</span></code></pre> the expansion is     then within the scope of the <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-symbol-macrolet">symbol-macrolet</a>, and should then be subject     to further scrutiny.  The issue of "infinite expansion" of symbol macros is     no more dangerous than that of normal macros. <br/></section><section id="section-Current Practice" class="section"><h2 class="section-title">Current Practice</h2>    Portable Common Loops provides a code-walking implementation of     <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-symbol-macrolet">symbol-macrolet</a> as specified in 88-002R.  Symbolics Cloe has both a     code-walking version of a <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-symbol-macrolet">symbol-macrolet</a> macro and compiler support for     a <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-symbol-macrolet">symbol-macrolet</a> special form. <br/></section><section id="section-Cost to Implementors" class="section"><h2 class="section-title">Cost to Implementors</h2>    If <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-symbol-macrolet">symbol-macrolet</a> is modified to be a special form, compilers and     interpreters will have to change, as well as <a class="function-reference" href="../chapter-3.xhtml#function-macroexpand">macroexpand</a>, <a class="function-reference" href="../chapter-3.xhtml#function-macroexpand-1">macroexpand-1</a>,     <a class="macro-reference" href="../chapter-14.xhtml#macro-push">push</a>, <a class="macro-reference" href="../chapter-12.xhtml#macro-incf">incf</a>, <a class="macro-reference" href="../chapter-12.xhtml#macro-decf">decf</a>, and others. <br/></section><section id="section-Cost to Users" class="section"><h2 class="section-title">Cost to Users</h2>    If <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-symbol-macrolet">symbol-macrolet</a> is converted to a special form, code-walking programs     will have to be modified to handle <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-symbol-macrolet">symbol-macrolet</a> correctly.  Those same     programs would have to be modified to handle the other special forms     specified in CLOS, anyway. <br/></section><section id="section-Cost of Non-Adoption" class="section"><h2 class="section-title">Cost of Non-Adoption</h2>    <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-symbol-macrolet">symbol-macrolet</a> will retain its confusing semantics, leading to bugs when     it interacts with complex macros and forms which produce side-effects. <br/>    Implementations which support ONCE-ONLY will break.  For that matter, any     mechanism which examines code and assumes that "variables" have no side     effects will break. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>    <a class="issue-reference" href="#issue-symbol-macrolet-semantics:special-form">SYMBOL-MACROLET-SEMANTICS:SPECIAL-FORM</a> avoids the hairiest problems     surrounding interaction of macros <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">like</span> <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a>)</span>
</span></code></pre> and side effects, and makes     <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-symbol-macrolet">symbol-macrolet</a> consistent with <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-macrolet">macrolet</a>. <br/></section><section id="section-Aesthetics" class="section"><h2 class="section-title">Aesthetics</h2>    If <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-symbol-macrolet">symbol-macrolet</a> is made to be a special form, aesthetics are improved     by making symbol macros consistent with normal macros. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>    A case could be made for adding a new function, SYMBOL-MACRO-FUNCTION, as     a dual of <a class="function-reference" href="../chapter-3.xhtml#function-macro-function">macro-function</a>.  However, symbol macros are simpler than normal     macros: a symbol macro is associated with a single expansion form, rather     than an arbitrary function which computes the expansion.  For this reason,     the augmented <a class="function-reference" href="../chapter-3.xhtml#function-macroexpand-1">macroexpand-1</a> proposed here can also fill the role of     SYMBOL-MACRO-FUNCTION: the second value of <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-3.xhtml#function-macroexpand-1">macroexpand-1</a> <span class="syntax-interned-symbol">sym</span> <span class="syntax-interned-symbol">env</span>)</span>
</span></code></pre> will be     <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> if and only if sym is a symbol macro, while the first value gives the     expansion of sym, if it has one. <br/>    Rather than extending the existing <a class="function-reference" href="../chapter-3.xhtml#function-macroexpand">macroexpand</a> and <a class="function-reference" href="../chapter-3.xhtml#function-macroexpand-1">macroexpand-1</a>    functions, new functions could be introduced to expand symbol macros.     However, there seems to be no particular reason to do this. <br/><br/>     &mdash;&ndash; End Forwarded Messages &mdash;&ndash; </section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>