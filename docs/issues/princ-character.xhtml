<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” PRINC-CHARACTER</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">PRINC-CHARACTER</span><br/><ol class="local-toc"><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit History">Edit History</a><ol> </ol></li><li><a href="#section-Problem Description">Problem Description</a><ol> </ol></li><li><a href="#issue-princ-character:write-char">Proposal WRITE-CHAR</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Current Practice">Current Practice</a><ol> </ol></li><li><a href="#section-Adoption Cost">Adoption Cost</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Conversion Cost">Conversion Cost</a><ol> </ol></li><li><a href="#section-Aesthetics">Aesthetics</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue PRINC-CHARACTER [NIL] [CHANGE/CLARIFICATION]</h1><section id="section-References" class="section"><h2 class="section-title">References</h2><a class="function-reference" href="../chapter-22.xhtml#function-princ">PRINC</a> (p383) </section><section id="section-Edit History" class="section"><h2 class="section-title">Edit History</h2>23-Feb-87, Version 1 by Pitman 29-Apr-87, Version 2 by Pitman (removed <a class="issue-reference" href="../issues/format-op-c.xhtml#issue-format-op-c">FORMAT-OP-C</a>) </section><section id="section-Problem Description" class="section"><h2 class="section-title">Problem Description</h2> CLtL is not adequately specific about the function of <a class="function-reference" href="../chapter-22.xhtml#function-princ">PRINC</a>  when given a character as an argument.  <br/> For example, does <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-princ">PRINC</a> <span class="syntax-character">#\Space</span>)</span>
</span></code> print ``Space'' or `` ''?  <br/> The advice that "the general rule is that output from <a class="function-reference" href="../chapter-22.xhtml#function-princ">PRINC</a> is  intended to look good to people" is the root of a lot of the problem.  The truth is that what looks good varies with context. viz, <br/> * For <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-format">FORMAT</a> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"Foo~ABar"</span> <span class="syntax-character">#\Space</span>)</span>
</span></code>    Pretty result: "Foo Bar"    Ugly result:   "FooSpaceBar"    In other words, " " looks better here. <br/> * For <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-format">FORMAT</a> <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> <span class="syntax-string">"Type ~C to continue"</span> <span class="syntax-character">#\Space</span>)</span>
</span></code>    Pretty result: "Type Space to continue"    Ugly result:   "Type   to continue"    In other words, "Space" looks better here. <br/></section><section class="status-unknown proposal" id="issue-princ-character:write-char"><h2 class="section-title">Proposal WRITE-CHAR</h2> <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-princ">PRINC</a> <a class="function-reference" href="../chapter-16.xhtml#function-char">char</a> <a class="type-reference" href="../chapter-21.xhtml#type-stream">stream</a>)</span>
</span></code> should be defined to be equivalent to  <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-21.xhtml#function-write-char">WRITE-CHAR</a> <a class="function-reference" href="../chapter-16.xhtml#function-char">char</a> <a class="type-reference" href="../chapter-21.xhtml#type-stream">stream</a>)</span>
</span></code>. <br/></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2> The behavior of <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-princ">PRINC</a> <a class="function-reference" href="../chapter-16.xhtml#function-char">char</a>)</span>
</span></code> should be well-defined even if a  completely arbitrary decision had to be made. <br/> In fact, though, we can get some advice by appealing to history.  The only data type which corresponds to characters in most old  lisps was symbols. For example, in Maclisp,    <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-princ">PRINC</a> <span class="syntax-interned-symbol">char-symbol</span>)</span>
</span></code> == <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">TYO</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">GETCHARN</span> <span class="syntax-interned-symbol">char-symbol</span> <span class="syntax-number">1</span>)</span>)</span>
</span></code> <br/> In Common Lisp, it would make sense in the absence of arguments  to the contrary to preserve an analagous relation, namely:    <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-princ">PRINC</a> <a class="function-reference" href="../chapter-16.xhtml#function-char">char</a>)</span>
</span></code> == <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-21.xhtml#function-write-char">WRITE-CHAR</a> <a class="function-reference" href="../chapter-16.xhtml#function-char">char</a>)</span>
</span></code> <br/></section><section id="section-Current Practice" class="section"><h2 class="section-title">Current Practice</h2> Vaxlisp, Symbolics, Spice Lisp, and Lucid all print " " and not  "Space" for <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-princ">PRINC</a> <span class="syntax-character">#\Space</span>)</span>
</span></code>. <br/> Symbolics and Spice are known to use the <a class="function-reference" href="../chapter-21.xhtml#function-write-char">WRITE-CHAR</a> strategy.  Vaxlisp and Lucid might be using it, too, or they might be  using ~C in <a class="function-reference" href="../chapter-22.xhtml#function-format">FORMAT</a>; no one familiar with their internals has  commented. <br/> In any case, some other implementations are believed to differ  (ie, to output "Space" when you <a class="function-reference" href="../chapter-22.xhtml#function-princ">PRINC</a> a #\Space), but a specific  reference is not currently available. In any case, the wording  in CLtL is not clear enough to preclude such a differing  implementation from `legitimately' emerging. <br/></section><section id="section-Adoption Cost" class="section"><h2 class="section-title">Adoption Cost</h2> Any implementations which did not already implement this proposal  decided upon would suffer an incompatible change. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2> User code that uses <a class="function-reference" href="../chapter-22.xhtml#function-princ">PRINC</a> <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-and">and</a> <span class="syntax-interned-symbol">presumably</span> <span class="syntax-interned-symbol">~A</span>)</span>
</span></code> on characters would  have a chance of being portable. <br/></section><section id="section-Conversion Cost" class="section"><h2 class="section-title">Conversion Cost</h2> It's easy to search for occurrences of <a class="function-reference" href="../chapter-22.xhtml#function-princ">PRINC</a> and ~A in code, but  it may not always be apparent when the argument is a character.  Automatic conversion is unlikely to succeed. <br/></section><section id="section-Aesthetics" class="section"><h2 class="section-title">Aesthetics</h2> Making <a class="function-reference" href="../chapter-22.xhtml#function-princ">PRINC</a> do something well-defined for as many primitive data  types as possible will probably be perceived as a simplification. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2> The cleanup committee generally supports this proposal. <br/> Pitman thinks this is moderately important because it is embarrassing  to have commonly used functions like this vary so widely in behavior  between implementations. He doesn't think it is critical because  <code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-interned-symbol">nothing</span> <span class="syntax-interned-symbol">else</span>)</span>
</span></code> it is only one of many problems with the vague  contract of <a class="function-reference" href="../chapter-22.xhtml#function-princ">PRINC</a>. <br/> There was an alternate proposal <span class="issue-reference error">issue:PRINC-CHARACTER</span> which  suggested making <a class="function-reference" href="../chapter-22.xhtml#function-princ">PRINC</a> work like ~C in <a class="function-reference" href="../chapter-22.xhtml#function-format">FORMAT</a>, but no one seemed  to think that was useful and the proposal was removed for Version 2  to keep from muddying what's likely to be a very straightforward   vote in favor of <a class="issue-reference" href="#issue-princ-character:write-char">PRINC-CHARACTER:WRITE-CHAR</a>. <br/></section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>