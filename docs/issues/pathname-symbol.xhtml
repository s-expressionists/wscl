<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” PATHNAME-SYMBOL</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">PATHNAME-SYMBOL</span><br/><ol class="local-toc"><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit History">Edit History</a><ol> </ol></li><li><a href="#section-Problem Description">Problem Description</a><ol> </ol></li><li><a href="#issue-pathname-symbol:no">Proposal NO</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Current Practice">Current Practice</a><ol> </ol></li><li><a href="#section-Cost to implementors">Cost to implementors</a><ol> </ol></li><li><a href="#section-Cost to users">Cost to users</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Aesthetics">Aesthetics</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue PATHNAME-SYMBOL [NIL] [CHANGE]</h1><section id="section-References" class="section"><h2 class="section-title">References</h2><a class="function-reference" href="../chapter-19.xhtml#function-pathname">pathname</a> (p.413), Derived references: <a class="function-reference" href="../chapter-19.xhtml#function-parse-namestring">parse-namestring</a> (p.414), <a class="function-reference" href="../chapter-19.xhtml#function-merge-pathnames">merge-pathnames</a> (p.415), <a class="function-reference" href="../chapter-19.xhtml#function-pathname-host">pathname-host</a> etc. (p.417), <a class="function-reference" href="../chapter-19.xhtml#function-namestring">namestring</a> etc. (p.417), <a class="function-reference" href="../chapter-24.xhtml#function-load">load</a> (p. 426), <a class="function-reference" href="../chapter-24.xhtml#function-require">require</a>  Cleanup <a class="issue-reference" href="../issues/pathname-stream.xhtml#issue-pathname-stream">X3J13 Issue PATHNAME-STREAM</a> Common LispCraft, Wilensky 1986, p 51 <br/></section><section id="section-Edit History" class="section"><h2 class="section-title">Edit History</h2>Version 1 by Moon 11-May-87 Version 2 by Masinter 29-May-87 Version 3 by Masinter 23-Oct-87 Version 4 by Masinter 23-Nov-87 Version 5 by Masinter  5-Feb-88, fix minor typo <br/></section><section id="section-Problem Description" class="section"><h2 class="section-title">Problem Description</h2>Some Common Lisp functions are specified to accept a symbol where a pathname is expected.  Some others (<a class="function-reference" href="../chapter-21.xhtml#function-open">open</a>, <a class="macro-reference" href="../chapter-21.xhtml#macro-with-open-file">with-open-file</a>, <a class="function-reference" href="../chapter-20.xhtml#function-delete-file">delete-file</a>, and <a class="function-reference" href="../chapter-20.xhtml#function-rename-file">rename-file</a>) are not specified to accept a symbol. <br/></section><section class="status-unknown proposal" id="issue-pathname-symbol:no"><h2 class="section-title">Proposal NO</h2>Never allow symbols where pathnames are expected. More specifically, <a class="function-reference" href="../chapter-19.xhtml#function-pathname">pathname</a>, <a class="function-reference" href="../chapter-20.xhtml#function-truename">truename</a>, <a class="function-reference" href="../chapter-19.xhtml#function-parse-namestring">parse-namestring</a>, <a class="function-reference" href="../chapter-19.xhtml#function-merge-pathnames">merge-pathnames</a>, <a class="function-reference" href="../chapter-19.xhtml#function-pathname-host">pathname-host</a>, <a class="function-reference" href="../chapter-19.xhtml#function-pathname-device">pathname-device</a>, <a class="function-reference" href="../chapter-19.xhtml#function-pathname-directory">pathname-directory</a>, <a class="function-reference" href="../chapter-19.xhtml#function-pathname-name">pathname-name</a>, <a class="function-reference" href="../chapter-19.xhtml#function-pathname-type">pathname-type</a>, <a class="function-reference" href="../chapter-19.xhtml#function-pathname-version">pathname-version</a>, <a class="function-reference" href="../chapter-19.xhtml#function-namestring">namestring</a>, <a class="function-reference" href="../chapter-19.xhtml#function-file-namestring">file-namestring</a>, <a class="function-reference" href="../chapter-19.xhtml#function-directory-namestring">directory-namestring</a>, <a class="function-reference" href="../chapter-19.xhtml#function-host-namestring">host-namestring</a>, <a class="function-reference" href="../chapter-19.xhtml#function-enough-namestring">enough-namestring</a>, <a class="function-reference" href="../chapter-24.xhtml#function-require">require</a> are changed by this proposal to not allow symbols for their pathname argument. <br/>Reiterate that <a class="function-reference" href="../chapter-21.xhtml#function-open">open</a>, <a class="macro-reference" href="../chapter-21.xhtml#macro-with-open-file">with-open-file</a>, <a class="function-reference" href="../chapter-24.xhtml#function-load">load</a>, <a class="function-reference" href="../chapter-24.xhtml#function-compile-file">compile-file</a>, <a class="function-reference" href="../chapter-20.xhtml#function-rename-file">rename-file</a>, <a class="function-reference" href="../chapter-20.xhtml#function-delete-file">delete-file</a>, <a class="function-reference" href="../chapter-20.xhtml#function-file-write-date">file-write-date</a>, <a class="function-reference" href="../chapter-20.xhtml#function-file-author">file-author</a> do not allow symbols for their file or filename argument, and that <a class="function-reference" href="../chapter-20.xhtml#function-directory">directory</a> does not allow a symbol for its pathname argument. This is implied by the respective descriptions of those functions in CLtL, but not explicitly stated. <br/></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>Allowing symbols for pathnames was based on an obsolete practice in MacLisp <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">which</span> <span class="syntax-interned-symbol">did</span> <a class="function-reference" href="../chapter-5.xhtml#function-not">not</a> <span class="syntax-interned-symbol">have</span> <span class="syntax-interned-symbol">strings</span>)</span>
</span></code></pre> and causes much error-prone behavior. <br/></section><section id="section-Current Practice" class="section"><h2 class="section-title">Current Practice</h2>Varies.  Some implementations allow symbols here, some don't.  Symbolics doesn't allow symbols except in <a class="function-reference" href="../chapter-19.xhtml#function-parse-namestring">parse-namestring</a> and <a class="function-reference" href="../chapter-19.xhtml#function-merge-pathnames">merge-pathnames</a>, and allowing them there is probably a bug in the implementation.  <br/></section><section id="section-Cost to implementors" class="section"><h2 class="section-title">Cost to implementors</h2>It's easy to change implementations to stop accepting symbols.  Since this appears to be an "is an error" rather than "signals an error" situation, no implementation change is actually necessary. <br/></section><section id="section-Cost to users" class="section"><h2 class="section-title">Cost to users</h2>Some users might be using symbols as pathnames, in implementations where that works, and they would have to switch to using strings. For example, some users are used to typing interactively <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-24.xhtml#function-load">load</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">FOO</span></span>)</span>
</span></code></pre> to mean <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-24.xhtml#function-load">load</a> <span class="syntax-string">"FOO"</span>)</span>
</span></code></pre>. This is not explicitly allowed in CLtL, so such behavior has not been portable. However, such use is probably widespread among users of implementations that allow it (e.g., Common LISPCraft gives this form in an example.) <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>Pathname functions will be more consistent.  In implementations that check the type of this argument, program error checking will be improved. In dealing with case-sensitive file systems, users won't do <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-24.xhtml#function-load">load</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">foo</span></span>)</span>
</span></code></pre> and wonder why file "<a class="index/code-reference" href="../chapter-1.xhtml#index/code-foo">foo</a>" <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">rather</span> <span class="syntax-interned-symbol">than</span> <span class="syntax-string">"foo"</span>)</span>
</span></code></pre> is not found. <br/>One example of the type of bug caused by this occurs when <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> is erroneously substituted for a pathname, perhaps because <a class="function-reference" href="../chapter-18.xhtml#function-gethash">gethash</a> or <a class="function-reference" href="../chapter-14.xhtml#function-assoc">assoc</a> didn't find a table entry that was expected to exist and returned -false<a class="function-reference" href="../chapter-12.xhtml#function--">-</a>.  In systems that accept symbols as pathnames, this causes a reference to a file named "<a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>" on some perhaps unexpected directory. <br/></section><section id="section-Aesthetics" class="section"><h2 class="section-title">Aesthetics</h2>Improved by the change. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>Some users have reported that they thought <a class="function-reference" href="../chapter-19.xhtml#function-merge-pathnames">merge-pathnames</a> was in error because it accepted symbols. <br/>We believe that this feature was accidentally introduced as a historical artifact and that it has limited utility. It is likely that the feature of accepting a symbol was copied by Common Lisp from Zetalisp, which in turn copied it from Maclisp.  The reason Maclisp allowed a symbol here was that it did not have strings at all.  While the feature was removed from Zetalisp before Common Lisp was defined due to the poor state of Zetalisp documentation at the time the change was overlooked by the designers of Common Lisp. <br/>If a symbol can be coerced into a string, and a string can be coerced into a pathname, why can't a symbol be coerced into a pathname? An explicit decision was made early in the design of <a class="package-reference" href="../chapter-11.xhtml#package-cl">cl</a> not to make all coercions transitive.  For example, symbols coerce to strings <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">for</span> <a class="function-reference" href="../chapter-16.xhtml#function-string">string</a> <span class="syntax-interned-symbol">functions</span>)</span>
</span></code></pre>, and strings are sequences <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-and">and</a> <span class="syntax-interned-symbol">so</span> <span class="syntax-interned-symbol">can</span> <span class="syntax-interned-symbol">be</span> <span class="syntax-interned-symbol">mixed</span> <span class="syntax-interned-symbol">with</span> <span class="syntax-interned-symbol">other</span> <a class="type-reference" href="../chapter-17.xhtml#type-sequence">sequence</a> <span class="syntax-interned-symbol">types</span>)</span>
</span></code></pre>, but symbols are not sequences. <br/>There is some sentiment for extending <a class="function-reference" href="../chapter-4.xhtml#function-coerce">coerce</a> to allow explicit coersion of <a class="function-reference" href="../chapter-16.xhtml#function-string">string</a>s to <a class="function-reference" href="../chapter-19.xhtml#function-pathname">pathname</a>s, as a separate cleanup item. <br/>A careful reading of CLtL indicates that it is possible for an implementation to allow a symbol to be a <a class="type-reference" href="../chapter-21.xhtml#type-stream">stream</a> (there is no requirement that <a class="type-reference" href="../chapter-21.xhtml#type-stream">stream</a> and <a class="symbol-reference" href="../chapter-2.xhtml#symbol-symbol">symbol</a> be disjoint.) While there is some sentiment for making this requirement in a separate cleanup issue, it would otherwise prevent both symbol<a class="function-reference" href="../chapter-12.xhtml#function--">-</a>&gt;pathname and stream<a class="function-reference" href="../chapter-12.xhtml#function--">-</a>&gt;pathname to have consistent meaning. <br/></section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>