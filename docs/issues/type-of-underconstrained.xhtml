<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” TYPE-OF-UNDERCONSTRAINED</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">TYPE-OF-UNDERCONSTRAINED</span><br/><ol class="local-toc"><li><a href="#section-Status">Status</a><ol> </ol></li><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit history">Edit history</a><ol> </ol></li><li><a href="#section-Problem description">Problem description</a><ol> </ol></li><li><a href="#issue-type-of-underconstrained:add-constraints">Proposal ADD-CONSTRAINTS</a><ol> </ol></li><li><a href="#section-Examples">Examples</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Current practice">Current practice</a><ol> </ol></li><li><a href="#section-Cost to Implementors">Cost to Implementors</a><ol> </ol></li><li><a href="#section-Cost to Users">Cost to Users</a><ol> </ol></li><li><a href="#section-Cost of non-adoption">Cost of non-adoption</a><ol> </ol></li><li><a href="#section-Performance impact">Performance impact</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Esthetics">Esthetics</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue TYPE-OF-UNDERCONSTRAINED [Cleanup] [CLARIFICATION/CHANGE]</h1><h2>Related issues</h2><ul><a class="issue-reference" href="../issues/subtypep-too-vague.xhtml#issue-subtypep-too-vague">SUBTYPEP-TOO-VAGUE</a><span class="issue-reference error">issue:DATA-TYPE-HIERARCHY-UNDERSPECIFIED</span><a class="issue-reference" href="../issues/function-type.xhtml#issue-function-type">FUNCTION-TYPE</a><a class="issue-reference" href="../issues/array-type-element-type-semantics.xhtml#issue-array-type-element-type-semantics">ARRAY-TYPE-ELEMENT-TYPE-SEMANTICS</a><span class="issue-reference error">issue:COERCE-INCOMPLETE</span></ul><section id="section-Status" class="status-passed section"><h2 class="section-title">Status</h2>passed, Jun 89 X3J13 </section><section id="section-References" class="section"><h2 class="section-title">References</h2><a class="function-reference" href="../chapter-4.xhtml#function-type-of">type-of</a> (CLtL) 88-002R (<a class="function-reference" href="../chapter-7.xhtml#function-class-of">class-of</a>) 88-005, p 43f, Condition system types </section><section id="section-Edit history" class="section"><h2 class="section-title">Edit history</h2>Version 1,  1-Dec-88, Masinter Version 2,  9-Dec-88, Masinter Version 3, 12-Dec-88, Masinter (fix "egregious bug") Version 4, 3-14-89 Steele Version 5, 16-Mar-89, Masinter (add other amendments) Version 6, 22-Jun-89, Masinter (fix as per Moon) </section><section id="section-Problem description" class="section"><h2 class="section-title">Problem description</h2>The specification of <a class="function-reference" href="../chapter-4.xhtml#function-type-of">type-of</a> in CLtL is so weak as to leave it  nearly useless, if any implementor actually took the specification seriously.In particular, there are almost no constraints on the value that <a class="function-reference" href="../chapter-4.xhtml#function-type-of">type-of</a> might return for any of the built in types. The only constraint placed is that for objects created by the constructor function of <a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">defstruct</a>, the result of <a class="function-reference" href="../chapter-4.xhtml#function-type-of">type-of</a> is the name of the defstruct. <br/>This means that implementations could return <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> for all other objects. <br/></section><section class="status-passed proposal" id="issue-type-of-underconstrained:add-constraints"><h2 class="section-title">Proposal ADD-CONSTRAINTS</h2>Specify that the result of <a class="function-reference" href="../chapter-4.xhtml#function-type-of">type-of</a> satisfies the following: <br/><ol><li> For any object for which <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-4.xhtml#function-typep">typep</a> <span class="syntax-interned-symbol">object</span> <span class="syntax-interned-symbol">built-in-type</span>)</span>
</span></code> is true when built-in-type is one of  <br/><a class="type-reference" href="../chapter-12.xhtml#type-integer">integer</a>, <a class="symbol-reference" href="../chapter-22.xhtml#symbol-ratio">ratio</a>, <a class="function-reference" href="../chapter-12.xhtml#function-float">float</a>, <a class="function-reference" href="../chapter-12.xhtml#function-complex">complex</a>, <a class="type-reference" href="../chapter-12.xhtml#type-number">number</a>, <a class="function-reference" href="../chapter-14.xhtml#function-null">null</a>, <a class="symbol-reference" href="../chapter-2.xhtml#symbol-symbol">symbol</a>,  <a class="function-reference" href="../chapter-16.xhtml#function-string">string</a>, <a class="symbol-reference" href="../chapter-2.xhtml#symbol-bit-vector">bit-vector</a>, <a class="function-reference" href="../chapter-15.xhtml#function-vector">vector</a>, <a class="symbol-reference" href="../chapter-2.xhtml#symbol-array">array</a>, <a class="type-reference" href="../chapter-12.xhtml#type-random-state">random-state</a>, <a class="type-reference" href="../chapter-17.xhtml#type-sequence">sequence</a>,<a class="function-reference" href="../chapter-14.xhtml#function-cons">cons</a>,  <a class="type-reference" href="../chapter-21.xhtml#type-stream">stream</a>, <a class="type-reference" href="../chapter-11.xhtml#type-package">package</a>, <a class="function-reference" href="../chapter-13.xhtml#function-character">character</a>, <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a>, <a class="type-reference" href="../chapter-23.xhtml#type-readtable">readtable</a>, <a class="type-reference" href="../chapter-18.xhtml#type-hash-table">hash-table</a>, <a class="function-reference" href="../chapter-19.xhtml#function-pathname">pathname</a>, <a class="type-reference" href="../chapter-9.xhtml#type-condition">condition</a>, <a class="type-reference" href="../chapter-9.xhtml#type-restart">restart</a>, <a class="function-reference" href="../chapter-12.xhtml#function-rational">rational</a>, <a class="type-reference" href="../chapter-12.xhtml#type-short-float">short-float</a>, <a class="type-reference" href="../chapter-12.xhtml#type-long-float">long-float</a>, <a class="type-reference" href="../chapter-12.xhtml#type-single-float">single-float</a>, <a class="type-reference" href="../chapter-12.xhtml#type-double-float">double-float</a> <br/>the result of <a class="function-reference" href="../chapter-4.xhtml#function-type-of">type-of</a> will be a type specifier for which <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-4.xhtml#function-subtypep">subtypep</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-4.xhtml#function-type-of">type-of</a> <span class="syntax-interned-symbol">object</span>)</span> <span class="syntax-interned-symbol">built-in-type</span>)</span>
</span></code> returns <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>, i.e., either the build-in-type or a subtype of it (a subtype that the  implementation's <a class="function-reference" href="../chapter-4.xhtml#function-subtypep">subtypep</a> can recognize.) <br/></li><li>  For all objects, <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-4.xhtml#function-typep">typep</a> <span class="syntax-interned-symbol">object</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-4.xhtml#function-type-of">type-of</a> <span class="syntax-interned-symbol">object</span>)</span>)</span>
</span></code> will be true. (this implies that it will not be <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>, since no object is of type <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>.) <br/></li><li> will not be <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>, or use <a class="type-reference" href="../chapter-4.xhtml#type-satisfies">satisfies</a>, <a class="macro-reference" href="../chapter-5.xhtml#macro-and">and</a>, <a class="macro-reference" href="../chapter-5.xhtml#macro-or">or</a>, <a class="function-reference" href="../chapter-5.xhtml#function-not">not</a> or <a class="function-reference" href="../chapter-5.xhtml#function-values">values</a>. </li><li> The type returned by <a class="function-reference" href="../chapter-4.xhtml#function-type-of">type-of</a> is always a subtype of the class returned by <a class="function-reference" href="../chapter-7.xhtml#function-class-of">class-of</a>, and is a subtype that the implementation's <a class="function-reference" href="../chapter-4.xhtml#function-subtypep">subtypep</a> can recognize. <br/></li><li> For objects of metaclass <a class="type-reference" href="../chapter-4.xhtml#type-structure-class">structure-class</a> or <a class="type-reference" href="../chapter-4.xhtml#type-standard-class">standard-class</a>, <a class="function-reference" href="../chapter-4.xhtml#function-type-of">type-of</a> returns the proper name of the class returned by <a class="function-reference" href="../chapter-7.xhtml#function-class-of">class-of</a> if it has a proper name, and otherwise returns the class itself. <br/>In particular, for objects created by the "constructor" function of a structure defined with <a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">defstruct</a> without a :TYPE option, <a class="function-reference" href="../chapter-4.xhtml#function-type-of">type-of</a> will return the structure name. <br/>This proposal is intended to be consistent with 88-002R,  and not to conflict with any of the definitions in that document. <br/></li></ol></section><section id="section-Examples" class="section"><h2 class="section-title">Examples</h2><pre>It is legal for <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-4.xhtml#function-type-of">type-of</a> <span class="syntax-string">"abc"</span>)</span>
</span></code> to return <code><span class="syntax-root"><span class="syntax-cons">(<a class="type-reference" href="../chapter-16.xhtml#type-simple-string">simple-string</a> <span class="syntax-number">3</span>)</span>
</span></code>, or just<br/><a class="function-reference" href="../chapter-16.xhtml#function-string">string</a>. It is legal for <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-4.xhtml#function-type-of">type-of</a> <span class="syntax-number">112312</span>)</span>
</span></code> to return <span class="issue-reference error">issue:SI:MEDIUM-SIZE-FIXNUM</span>,<br/>as long as <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-4.xhtml#function-subtypep">subtypep</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">SI:MEDIUM-SIZE-FIXNUM</span></span> <span class="syntax-quote">'<a class="type-reference" href="../chapter-12.xhtml#type-integer">integer</a></span>)</span>
</span></code>.<br/><br/> Given:<br/><br/>   <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defvar">defvar</a> <span class="syntax-interned-symbol">*foo*</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-15.xhtml#function-make-array">make-array</a> <span class="syntax-number">5</span> <span class="syntax-keyword-symbol">:element-type</span> <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>)</span>)</span>
</span></code><br/>   <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-7.xhtml#function-class-name">class-name</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-7.xhtml#function-class-of">class-of</a> <span class="syntax-interned-symbol">*foo*</span>)</span>)</span>
</span></code>  <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt;  <a class="symbol-reference" href="../chapter-2.xhtml#symbol-simple-vector">simple-vector</a><br/>  It is legal for<br/>   <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-4.xhtml#function-type-of">type-of</a> <span class="syntax-interned-symbol">*foo*</span>)</span>
</span></code>                <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt;  <code><span class="syntax-root"><span class="syntax-cons">(<a class="symbol-reference" href="../chapter-2.xhtml#symbol-simple-vector">simple-vector</a> <span class="syntax-number">5</span>)</span>
</span></code><br/><br/></pre></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>The original specification for "<a class="function-reference" href="../chapter-4.xhtml#function-type-of">type-of</a>" was written to allow implementation freedom, but the wording is in fact more vague than was intended.  <br/></section><section id="section-Current practice" class="section"><h2 class="section-title">Current practice</h2>Most Common Lisp implementations seem to implement the proposal, at least for the types we've tried them on. <br/></section><section id="section-Cost to Implementors" class="section"><h2 class="section-title">Cost to Implementors</h2>Even if there are implementations that do not currently implement the proposal, the required changes for them are likely to be minimal.  <br/></section><section id="section-Cost to Users" class="section"><h2 class="section-title">Cost to Users</h2>Apparently none. <br/></section><section id="section-Cost of non-adoption" class="section"><h2 class="section-title">Cost of non-adoption</h2><a class="function-reference" href="../chapter-4.xhtml#function-type-of">type-of</a> would remain potentially inconsistent. <br/></section><section id="section-Performance impact" class="section"><h2 class="section-title">Performance impact</h2>Likely none. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>Bring the specification of <a class="function-reference" href="../chapter-4.xhtml#function-type-of">type-of</a> in like with its common implementation, while requiring it to be generally useful. <br/></section><section id="section-Esthetics" class="section"><h2 class="section-title">Esthetics</h2>Little effect. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>Originally, <a class="function-reference" href="../chapter-4.xhtml#function-type-of">type-of</a> was concieved as being useful for information display. CLOS specified <a class="function-reference" href="../chapter-7.xhtml#function-class-of">class-of</a> far more precisely, in that it must return exactly the class of an object. Unless <a class="function-reference" href="../chapter-4.xhtml#function-type-of">type-of</a> is removed from the language, it seems reasonable to require it to be at least as precise as <a class="function-reference" href="../chapter-7.xhtml#function-class-of">class-of</a>. <br/>The accepted CLOS specification does not define <a class="function-reference" href="../chapter-7.xhtml#function-class-of">class-of</a> in terms of <a class="function-reference" href="../chapter-4.xhtml#function-type-of">type-of</a>, but an earlier draft did.  <br/>This proposal presumes the <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">passed</span>)</span>
</span></code> proposals <a class="issue-reference" href="../issues/data-types-hierarchy-underspecified.xhtml#issue-data-types-hierarchy-underspecified:disjoint">DATA-TYPES-HIERARCHY-UNDERSPECIFIED:DISJOINT</a>, <a class="issue-reference" href="../issues/function-type.xhtml#issue-function-type">function-type</a>, and accomodates the Condition System <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">version</span> <span class="syntax-number">18</span>)</span>
</span></code> and CLOS. <br/>If <a class="issue-reference" href="../issues/array-type-element-type-semantics.xhtml#issue-array-type-element-type-semantics">array-type-element-type-semantics</a> does not pass,  and this proposal does pass, it may be that the only way an  implementation can satisfy <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-4.xhtml#function-typep">typep</a> <a class="symbol-reference" href="../chapter-2.xhtml#symbol-array">array</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-4.xhtml#function-type-of">type-of</a> <a class="symbol-reference" href="../chapter-2.xhtml#symbol-array">array</a>)</span>)</span>
</span></code> would be to have <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-4.xhtml#function-type-of">type-of</a> <a class="symbol-reference" href="../chapter-2.xhtml#symbol-array">array</a>)</span>
</span></code> return <a class="function-reference" href="../chapter-15.xhtml#function-vector">vector</a> or <a class="symbol-reference" href="../chapter-2.xhtml#symbol-array">array</a> as appropriate, i.e., with no element type qualification. <br/>It is possible to constrain <a class="function-reference" href="../chapter-4.xhtml#function-type-of">type-of</a> further, e.g., to eliminate the possibility that it might return a non-portable  implementation-specific value. For example,  <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-4.xhtml#function-type-of">type-of</a> <span class="syntax-number">112312</span>)</span>
</span></code> should not return <span class="issue-reference error">issue:SI:MEDIUM-SIZE-FIXNUM</span>, but rather some thing like <code><span class="syntax-root"><span class="syntax-cons">(<a class="type-reference" href="../chapter-12.xhtml#type-signed-byte">signed-byte</a> <span class="syntax-number">17</span>)</span>
</span></code> [if that's what <span class="issue-reference error">issue:SI:MEDIUM-SIZE-FIXNUM</span> means.] <br/>We would like to make this as an implementation recommendation, however, rather than as a constraint, at this point. <br/>About part <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">c</span>)</span>
</span></code>: the restriction on <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> is meaningless, since the <a class="function-reference" href="../chapter-7.xhtml#function-class-of">class-of</a> restriction dominates it. The restriction on <a class="function-reference" href="../chapter-14.xhtml#function-member">member</a> is OK, just to keep <a class="function-reference" href="../chapter-4.xhtml#function-type-of">type-of</a> from being the silly definition that <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-4.xhtml#function-type-of">type-of</a> <span class="syntax-interned-symbol">x</span>)</span>
</span></code> <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a> `<code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-member">member</a> <span class="syntax-interned-symbol">,x</span>)</span>
</span></code>.  I think we're running out of good reasons to leave out <a class="type-reference" href="../chapter-4.xhtml#type-satisfies">satisfies</a>, <a class="macro-reference" href="../chapter-5.xhtml#macro-and">and</a>, <a class="macro-reference" href="../chapter-5.xhtml#macro-or">or</a>, <a class="function-reference" href="../chapter-5.xhtml#function-not">not</a>, and <a class="function-reference" href="../chapter-5.xhtml#function-values">values</a>; they're probably no more useful, but we're probably overspecifying for no good reason. <br/>Some types are left out of the list in <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">a</span>)</span>
</span></code>, including: <br/><a class="type-reference" href="../chapter-12.xhtml#type-bignum">bignum</a> and <a class="type-reference" href="../chapter-12.xhtml#type-fixnum">fixnum</a> were left out because their division was implementation dependent. <br/><a class="type-reference" href="../chapter-10.xhtml#type-keyword">keyword</a> was left out because under odd circumstances it is possible to dynamically change the 'type' (e.g., by <a class="function-reference" href="../chapter-11.xhtml#function-unintern">unintern</a>). <br/><a class="type-reference" href="../chapter-13.xhtml#type-standard-char">standard-char</a> and <a class="index/code-reference" href="../chapter-A.xhtml#index/code-string-char">string-char</a> were left out for the same reasons they aren't built-in classes. <br/>(These reasonas are not 100% compelling.) </section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>