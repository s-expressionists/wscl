<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” FORMAT-COLON-UPARROW-SCOPE</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">FORMAT-COLON-UPARROW-SCOPE</span><br/><ol class="local-toc"><li><a href="#section-Status">Status</a><ol> </ol></li><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit history">Edit history</a><ol> </ol></li><li><a href="#section-Problem description">Problem description</a><ol> </ol></li><li><a href="#issue-format-colon-uparrow-scope:test-for-remaining-sublists">Proposal TEST-FOR-REMAINING-SUBLISTS</a><ol> </ol></li><li><a href="#section-Example">Example</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Current practice">Current practice</a><ol> </ol></li><li><a href="#section-Cost to Implementors">Cost to Implementors</a><ol> </ol></li><li><a href="#section-Cost to Users">Cost to Users</a><ol> </ol></li><li><a href="#section-Cost of non-adoption">Cost of non-adoption</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Esthetics">Esthetics</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue FORMAT-COLON-UPARROW-SCOPE [NIL] [CLARIFICATION]</h1><section id="section-Status" class="status-passed section"><h2 class="section-title">Status</h2>Passed, march 88 </section><section id="section-References" class="section"><h2 class="section-title">References</h2>CLtL p. 406 and also p. 403 </section><section id="section-Edit history" class="section"><h2 class="section-title">Edit history</h2>version 1: Guy Steele, 30 November 1987 version 2: Guy Steele, 18 January 1988 version 3: Masinter,  5 February 1988 </section><section id="section-Problem description" class="section"><h2 class="section-title">Problem description</h2>Implementations currently differ on the question of what is tested by the <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> command "~:^".  Some implementations test to see whether any arguments remain in the sublist for the current iteration step; others test to see whether any sublists remain.  The text on page 406 is not clear on this point. <br/></section><section class="status-passed proposal" id="issue-format-colon-uparrow-scope:test-for-remaining-sublists"><h2 class="section-title">Proposal TEST-FOR-REMAINING-SUBLISTS</h2>~:^ may be used only if the command it would terminate is ~:{ or ~:@{. The entire iteration process is terminated if and only if the sublist that is supplying the arguments for the current iteration step is the last sublist <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">in</span> <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <a class="macro-reference" href="../chapter-5.xhtml#macro-case">case</a> <span class="syntax-interned-symbol">of</span> <span class="syntax-interned-symbol">~:{</span>)</span>
</span></code></pre> or the last <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> argument <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">~:@{</span>)</span>
</span></code></pre>. Note that ~:^ is *not* equivalent to ~:#^; the latter terminates the entire iteration if and only if no arguments remain for the current iteration step. <br/></section><section id="section-Example" class="section"><h2 class="section-title">Example</h2><pre><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"~:{~@?~:^...~}"</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-string">"a"</span>)</span> <span class="syntax-cons">(<span class="syntax-string">"b"</span>)</span>)</span></span>)</span>
</span></code></pre><br/><br/>Under this proposal, this yields "a...b", rather than "a".<br/><br/></pre></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>This proposal is desirable because otherwise there is no way to test whether any sublists remain. The text on page 406 may be construed to hint at this proposal indirectly.  To quote Nick Gall: <br/>"If one thinks about the intent of the parenthetical `<pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">because</span> <span class="syntax-interned-symbol">in</span> <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <a class="symbol-reference" href="../chapter-7.xhtml#symbol-standard">standard</a> <a class="macro-reference" href="../chapter-5.xhtml#macro-case">case</a> <span class="syntax-interned-symbol">it</span> <span class="syntax-interned-symbol">tests</span> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">remaining</span> <span class="syntax-interned-symbol">arguments</span> <span class="syntax-interned-symbol">of</span> <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <span class="syntax-interned-symbol">current</span> <a class="macro-reference" href="../chapter-25.xhtml#macro-step">step</a> <span class="syntax-interned-symbol">only</span>)</span>
</span></code></pre>', one should agree that "a...b" will be returned.  In referring to ~^ as the `standard case', which tests the arguments remaining in the current argument sublist, this parenthetical implies that there is an `other case', which tests `something else.'  The only `other case' discussed is ~:^, which therefore must test `something else.'  I claim that the parentheical makes no sense if we interpret ~:^ as testing the same condition as ~^.  If they both test the same condition, why have the parenthetical explanation? <br/>"If ~:^ doesn't test the same condition as ~^, then what does it test? I claim that the only test that makes sense is for ~:^ to test the only thing that affects the `entire iteration process:' the number of sublists.  When there are no more sublists, `the entire iteration process' is terminated." <br/></section><section id="section-Current practice" class="section"><h2 class="section-title">Current practice</h2>Some implementations already have the proposed behavior, including Symbolics Common Lisp and TI Lisp. <br/>Many other implementations currently have a different interpretation: the test case returns "a", since ~:^ in those implementations test for the remaining arguments rather than remaining sublists. These currently include  Kyoto Common Lisp, Allegro Common Lisp, GCLISP, Xerox Common Lisp, Spice Lisp, and VAXLISP. <br/></section><section id="section-Cost to Implementors" class="section"><h2 class="section-title">Cost to Implementors</h2>Many implementations will have to make a small change, probably a one-liner. <br/></section><section id="section-Cost to Users" class="section"><h2 class="section-title">Cost to Users</h2>It is unlikely that much user code depends on the behavior of testing for remaining arguments, but it is possible.  The author of this writeup (Steele) judges it somewhat more likely that user code might depend on the behavior of testing for remaining sublists. <br/></section><section id="section-Cost of non-adoption" class="section"><h2 class="section-title">Cost of non-adoption</h2>Users would have to be warned not to use ~:^ in code that is meant to be portable. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>Elimination of yet one more ambiguity. The proposed semantics allows greater semantic power <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">there</span> <span class="syntax-interned-symbol">are</span> <span class="syntax-interned-symbol">more</span> <span class="syntax-interned-symbol">things</span> <span class="syntax-interned-symbol">one</span> <span class="syntax-interned-symbol">can</span> <span class="syntax-interned-symbol">test</span>)</span>
</span></code></pre>. <br/></section><section id="section-Esthetics" class="section"><h2 class="section-title">Esthetics</h2>``Absolutely none.  We're talking about <a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> here.'' &ndash; Guy L. Steele Jr. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>Guy Steele very strongly prefers the interpretation <a class="issue-reference" href="#issue-format-colon-uparrow-scope:test-for-remaining-sublists">FORMAT-COLON-UPARROW-SCOPE:TEST-FOR-REMAINING-SUBLISTS</a>. <br/>David Moon, Kent Pitman, Pavel Curtis, Dan Pierson, Rob Poor, Scott Fahlman and Nick Gall favor <a class="issue-reference" href="#issue-format-colon-uparrow-scope:test-for-remaining-sublists">FORMAT-COLON-UPARROW-SCOPE:TEST-FOR-REMAINING-SUBLISTS</a>. <br/>Kevin Layer and Rich Robbins have spoken in favor of an alternative proposal, to test for the remaining arguments. <br/>Historical note: Steele first implemented this "feature", in Zetalisp, and so the code in Symbolics Common Lisp is likely a direct descendant of the original code.  This might cause some to give weight to Steele's opinion. There are two arguments against such credence.  First, there is no reason why the original code should be regarded as part of the specification of Common Lisp any more than any other implementation; plainly, Steele botched the specification when he wrote the book.  Second, a professor of literature <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">I</span> <span class="syntax-interned-symbol">believe</span>)</span>
</span></code></pre> once told Isaac Asimov concerning a short story of his <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">I</span> <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-quote">quote</a> <span class="syntax-interned-symbol">from</span> <span class="syntax-interned-symbol">memory</span>)</span>
</span></code></pre>: "Tell me, Dr. Asimov, just because you wrote the story, what makes you think you know what it means?" <br/></section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>