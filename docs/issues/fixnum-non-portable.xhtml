<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” FIXNUM-NON-PORTABLE</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">FIXNUM-NON-PORTABLE</span><br/><ol class="local-toc"><li><a href="#section-Status">Status</a><ol> </ol></li><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit History">Edit History</a><ol> </ol></li><li><a href="#section-Problem Description">Problem Description</a><ol> </ol></li><li><a href="#issue-fixnum-nonportable:tighten-definition">Proposal TIGHTEN-DEFINITION</a><ol> </ol></li><li><a href="#section-Example">Example</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Current Practice">Current Practice</a><ol> </ol></li><li><a href="#section-Cost to implementors">Cost to implementors</a><ol> </ol></li><li><a href="#section-Cost to users">Cost to users</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue FIXNUM-NON-PORTABLE [NIL] [CHANGE, CLARIFICATION]</h1><section id="section-Status" class="status-passed section"><h2 class="section-title">Status</h2>Passed Jan 89 X3J13, as amended </section><section id="section-References" class="section"><h2 class="section-title">References</h2>CLtL p. 14, 34, 43, 231 </section><section id="section-Edit History" class="section"><h2 class="section-title">Edit History</h2>Version 1, 11-Jul-88, Sandra Loosemore Version 2, 15-Sep-88, Masinter Version 3, 23-Sep-88, Masinter Version 4,  7-Dec-88, Masinter (two proposals) Version 5, 16-Mar-89, Masinter (incorporate amendments) Version 6, 17-Mar-89, Masinter (incorporate amendments correctly) </section><section id="section-Problem Description" class="section"><h2 class="section-title">Problem Description</h2>Implementations of Common Lisp are required to support two disjoint subsets of integers, fixnums and bignums, with the promise that fixnums have a more efficient representation.  However, nothing is guaranteed about the range of integers which are fixnums: "Exactly which integers are fixnums is <a class="glossary-reference" href="../chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a>; typically they will be those integers in the range -2**n to 2**n <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> 1, inclusive, for some n not less than 15." <br/>There are few uses of the fixnum type that are portable, given the current definition.  In particular, many programmers use <a class="type-reference" href="../chapter-12.xhtml#type-fixnum">FIXNUM</a> type declarations where they really mean "small integer". <br/>While most Common Lisp implementations have a <a class="type-reference" href="../chapter-12.xhtml#type-fixnum">FIXNUM</a> range which is a subset of integers represeted and operated on most efficiently, many also have several other subranges.  The partitioning of <a class="type-reference" href="../chapter-12.xhtml#type-integer">INTEGER</a> into <a class="type-reference" href="../chapter-12.xhtml#type-bignum">BIGNUM</a> and <a class="type-reference" href="../chapter-12.xhtml#type-fixnum">FIXNUM</a> is merely confusing in these implementations, and not useful. <br/>CLtL p14 and p34 disagree about <a class="type-reference" href="../chapter-12.xhtml#type-bignum">BIGNUM</a>. One says that  <a class="type-reference" href="../chapter-12.xhtml#type-fixnum">FIXNUM</a> and <a class="type-reference" href="../chapter-12.xhtml#type-bignum">BIGNUM</a> are an exhaustive partition of the integer space, the other says they might not be! <br/></section><section class="status-passed proposal" id="issue-fixnum-nonportable:tighten-definition"><h2 class="section-title">Proposal TIGHTEN-DEFINITION</h2><ol><li> Change the description of the type <a class="type-reference" href="../chapter-12.xhtml#type-fixnum">FIXNUM</a> to reflect that it is required to be a supertype of <code><span class="syntax-root"><span class="syntax-cons">(<a class="type-reference" href="../chapter-12.xhtml#type-signed-byte">SIGNED-BYTE</a> <span class="syntax-number">16</span>)</span>
</span></code>. <br/></li><li> Define <a class="type-reference" href="../chapter-12.xhtml#type-bignum">BIGNUM</a> to be exactly <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-and">AND</a> <a class="type-reference" href="../chapter-12.xhtml#type-integer">INTEGER</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-not">NOT</a> <a class="type-reference" href="../chapter-12.xhtml#type-fixnum">FIXNUM</a>)</span>)</span>
</span></code> </li><li> require that <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-&lt;=">&lt;=</a> <a class="constant-reference" href="../chapter-15.xhtml#constant-array-dimension-limit">ARRAY-DIMENSION-LIMIT</a> <a class="constant-reference" href="../chapter-12.xhtml#constant-most-positive-fixnum">MOST-POSITIVE-FIXNUM</a>)</span>
</span></code> </li></ol></section><section id="section-Example" class="section"><h2 class="section-title">Example</h2><pre>Consider an implementation with three numeric representations:<br/><br/>	Fast                <code><span class="syntax-root"><span class="syntax-cons">(<a class="type-reference" href="../chapter-12.xhtml#type-integer">INTEGER</a> <span class="syntax-number">-1024</span> <span class="syntax-number">1023</span>)</span>
</span></code><br/>	Immediate           29 bits<br/>	Extended            Multi-precision<br/><br/>Such an implementation would have to define<br/><a class="type-reference" href="../chapter-12.xhtml#type-fixnum">FIXNUM</a> to be (<a class="macro-reference" href="../chapter-5.xhtml#macro-or">OR</a> Fast Immediate). <a class="type-reference" href="../chapter-12.xhtml#type-bignum">BIGNUM</a><br/>would then refer to multi-precision integers. <br/><br/></pre></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>Many programmers already use <a class="type-reference" href="../chapter-12.xhtml#type-fixnum">FIXNUM</a> to mean "small integer"; this proposal makes this usage portable.  <br/>However, there is little portable use for the type <a class="type-reference" href="../chapter-12.xhtml#type-bignum">BIGNUM</a>, and it is inconsistent with many current implementation techniques. Removing it is an incompatible change for a weak reason. <br/></section><section id="section-Current Practice" class="section"><h2 class="section-title">Current Practice</h2>Xerox Common Lisp has 17-bit fixnums.  Most other Common Lisp  implementations have  fixnum ranges of 24 bits or larger. We know of no implementation that currently violates the proposed minimum  size. <br/>Several existing Common Lisp implementations have more than two  representations for integers, such that the FIXNUM/BIGNUM distinction is confusing; they define <a class="type-reference" href="../chapter-12.xhtml#type-bignum">BIGNUM</a> to cover all of the larger number types. <br/></section><section id="section-Cost to implementors" class="section"><h2 class="section-title">Cost to implementors</h2>Slight.  All implementations we know of already define <a class="type-reference" href="../chapter-12.xhtml#type-fixnum">FIXNUM</a>s to be at least 16 bits. <br/></section><section id="section-Cost to users" class="section"><h2 class="section-title">Cost to users</h2>Slight.   <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>The <a class="type-reference" href="../chapter-12.xhtml#type-fixnum">FIXNUM</a> type specifier would have a portable interpretation. <br/>The language would be less confusing. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>There was little consensus on whether to leave <a class="type-reference" href="../chapter-12.xhtml#type-bignum">BIGNUM</a> in the language. <br/>Earlier discussion of a related proposal contained several other more controversial components (adding a constant MAX-INTEGER-LENGTH, allowing  <a class="constant-reference" href="../chapter-12.xhtml#constant-most-positive-fixnum">MOST-POSITIVE-FIXNUM</a> to be <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> as well as an integer.) This proposal is an attempt to address the part that cleanup committee seemed to agree on. <br/>It is possible that an implementation have a single  representation for all integers, and no way to identify any efficient range of integers. Those implementations might need to set <a class="constant-reference" href="../chapter-12.xhtml#constant-most-positive-fixnum">MOST-POSITIVE-FIXNUM</a>  and <a class="constant-reference" href="../chapter-12.xhtml#constant-most-negative-fixnum">MOST-NEGATIVE-FIXNUM</a> to arbitrary values, consistent with  the requirement that <code><span class="syntax-root"><span class="syntax-cons">(<a class="type-reference" href="../chapter-12.xhtml#type-signed-byte">SIGNED-BYTE</a> <span class="syntax-number">16</span>)</span>
</span></code> is a subtype of <a class="type-reference" href="../chapter-12.xhtml#type-fixnum">FIXNUM</a>. <br/>Other alternatives considered <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-and">and</a> <a class="function-reference" href="../chapter-5.xhtml#function-not">not</a> <span class="syntax-interned-symbol">necessarily</span> <span class="syntax-interned-symbol">mutually</span> <span class="syntax-interned-symbol">exclusive</span>
<span class="syntax-interned-symbol">with</span> <span class="syntax-interned-symbol">this</span> <span class="syntax-interned-symbol">proposal</span>)</span>
</span></code></pre>: <br/>  remove the <a class="type-reference" href="../chapter-12.xhtml#type-fixnum">FIXNUM</a> type specifier entirely, while leaving a way   to query what is the most efficient range of integers <br/>   leave the range of <a class="type-reference" href="../chapter-12.xhtml#type-fixnum">FIXNUM</a>s unconstrained  and introduce a     SMALL-INTEGER type with a fixed range <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">but</span> <span class="syntax-interned-symbol">no</span> <span class="syntax-interned-symbol">promises</span> <span class="syntax-interned-symbol">about</span>
   <span class="syntax-interned-symbol">efficiency</span>)</span>
</span></code></pre> .  <br/>It might be possible to specify the required performance behavior of <a class="type-reference" href="../chapter-12.xhtml#type-fixnum">FIXNUM</a>s more concretely, e.g., specify that the basic integer operations use algorithms that are not proportional to the size of the data;  it  should be just about as fast to add numbers in the middle of the fixnum  range as it is to add, say, 10 and 11. This might be a useful way to describe the intent of the <a class="type-reference" href="../chapter-12.xhtml#type-fixnum">FIXNUM</a> range, if not its specification. </section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>