<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp — DEFSTRUCT-PRINT-FUNCTION-INHERITANCE</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">DEFSTRUCT-PRINT-FUNCTION-INHERITANCE</span><br/><ol class="local-toc"><li><a href="#section-Status">Status</a><ol> </ol></li><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit History">Edit History</a><ol> </ol></li><li><a href="#section-Problem Description">Problem Description</a><ol> </ol></li><li><a href="#issue-defstruct-print-function-inheritance:yes">Proposal YES</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Current Practice">Current Practice</a><ol> </ol></li><li><a href="#section-Cost to implementors">Cost to implementors</a><ol> </ol></li><li><a href="#section-Cost to users">Cost to users</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue DEFSTRUCT-PRINT-FUNCTION-INHERITANCE [NIL] [CLARIFICATION]</h1><section id="section-Status" class="status-passed section"><h2 class="section-title">Status</h2>Passed, Jan 89 X3J13 </section><section id="section-References" class="section"><h2 class="section-title">References</h2>CLtL p. 312-314 </section><section id="section-Edit History" class="section"><h2 class="section-title">Edit History</h2>V1, 5 Aug 1988, Sandra Loosemore V2, 15 Sep 1988, Sandra Loosemore V3, 7 Dec 1988, Masinter </section><section id="section-Problem Description" class="section"><h2 class="section-title">Problem Description</h2>CLtL doesn't make clear whether defstructs that :INCLUDE another structure type and do not specify a :PRINT-FUNCTION inherit the :PRINT-FUNCTION of the parent structure type.  While it is stated on page 314 that #S syntax is used if a :PRINT-FUNCTION is not specified, the language on page 313 indicates that all operations on the parent type will also work on objects of the child type.  Because of the ambiguity, existing implementations have gone both ways, and users cannot depend on either #S syntax or the parent type's :PRINT-FUNCTION being used. <br/></section><section class="status-passed proposal" id="issue-defstruct-print-function-inheritance:yes"><h2 class="section-title">Proposal YES</h2>Clarify that defstruct types which :INCLUDE another type but do not specify an explicit :PRINT-FUNCTION inherit the structure print function from the :INCLUDE'd type.  A print function that uses the default #S syntax <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">overriding</span> <span class="syntax-interned-symbol">any</span> <a class="function-reference" href="../chapter-22.xhtml#function-print">print</a> <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> <span class="syntax-interned-symbol">for</span> <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <span class="syntax-interned-symbol">parent</span> <a class="symbol-reference" href="../chapter-25.xhtml#symbol-type">type</a>)</span>
</span></code></pre> can be specified by providing the :PRINT-FUNCTION option without an  argument. <br/>Supplying a :PRINT-FUNCTION in a <a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">defstruct</a> is equivalent to defining an appropriate method on the <a class="function-reference" href="../chapter-22.xhtml#function-print-object">print-object</a> generic function. <br/></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>Users typically specify a print function for a structure type because its slots will contain circular objects or large internal data structures which are confusing when printed.  Any structure type that :INCLUDEs this type will also contain the same slots; it seems more reasonable to inherit the parent's print function than to use the default #S syntax. <br/></section><section id="section-Current Practice" class="section"><h2 class="section-title">Current Practice</h2>Lucid Common Lisp makes structures inherit print functions. VaxLisp uses #S syntax unless an explicit :PRINT-FUNCTION is specified. <br/></section><section id="section-Cost to implementors" class="section"><h2 class="section-title">Cost to implementors</h2>The changes to non-conforming implementations should be fairly minor and localized. <br/></section><section id="section-Cost to users" class="section"><h2 class="section-title">Cost to users</h2>It can't be any worse than the status quo. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>An area of ambiguity in the language will be removed. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>Pitman and VanRoggen support this proposal. <br/>The original version of the proposal did not provide for a way to force #S syntax to be used.  This functionality was added to the current version because there seemed to be general agreement that it would be useful.  Other alternatives would be to name the function that does what the #S printer does, or to provide a function that returns the #S information as a list (as suggested by Waters) so users can write their own. </section></div></main><footer>Copyright © 2021 Jan Moringen</footer></body></html>