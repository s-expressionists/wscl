<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” HASH-TABLE-PACKAGE-GENERATORS</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">HASH-TABLE-PACKAGE-GENERATORS</span><br/><ol class="local-toc"><li><a href="#section-Status">Status</a><ol> </ol></li><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit history">Edit history</a><ol> </ol></li><li><a href="#section-Problem description">Problem description</a><ol> </ol></li><li><a href="#issue-hash-table-package-generators:add-with-wrapper">Proposal ADD-WITH-WRAPPER</a><ol> </ol></li><li><a href="#section-Examples">Examples</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Current Practice">Current Practice</a><ol> </ol></li><li><a href="#section-Cost to Implementors">Cost to Implementors</a><ol> </ol></li><li><a href="#section-Cost to Users">Cost to Users</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Aesthetics">Aesthetics</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue HASH-TABLE-PACKAGE-GENERATORS [Cleanup] [ADDITION]</h1><section id="section-Status" class="status-passed section"><h2 class="section-title">Status</h2>Passed, Jan 89 X3J13 (amended to remove example of test-package-iterator which has the values from the generator in the wrong order.) </section><section id="section-References" class="section"><h2 class="section-title">References</h2>Issue: <a class="issue-reference" href="../issues/do-symbols-duplicates.xhtml#issue-do-symbols-duplicates">do-symbols-duplicates</a>  </section><section id="section-Edit history" class="section"><h2 class="section-title">Edit history</h2>Version 1, 23-May-88 JonL Version 2,  6-Oct-88 JonL (convert to "with" scoping). Version 3,  7-Oct-88 JonL (mly's syntax for package iterator) Version 4,  8-Nov-88 JonL (fix example; clarify some nits) Version 5, 22-Nov-88 Moon (improve syntax for package iterator, add examples, fix typos) Version 6,  6-Oct-88 JonL (final nits) Version 7,  8-Dec-88, Masinter (add comment to discussion) </section><section id="section-Problem description" class="section"><h2 class="section-title">Problem description</h2>The Iteration subcommittee would like the several iteration proposals to be writable in portable Common Lisp code.  Unfortunately, the only complete access to hash-tables and packages is through <a class="function-reference" href="../chapter-18.xhtml#function-maphash">maphash</a> and <a class="macro-reference" href="../chapter-11.xhtml#macro-do-symbols">do-symbols</a> (and <a class="macro-reference" href="../chapter-11.xhtml#macro-do-external-symbols">do-external-symbols</a> and <a class="macro-reference" href="../chapter-11.xhtml#macro-do-all-symbols">do-all-symbols</a>); none of these existing primitives  is satisfactory for building complex iteration clauses.  In particular, these primitives are fully packaged and do not allow control over the individual operations of starting the iteration, stopping the iteration, and advancing to the next step of the iteration. <br/></section><section class="status-passed proposal" id="issue-hash-table-package-generators:add-with-wrapper"><h2 class="section-title">Proposal ADD-WITH-WRAPPER</h2>Add two new macros <a class="macro-reference" href="../chapter-18.xhtml#macro-with-hash-table-iterator">with-hash-table-iterator</a> and <a class="macro-reference" href="../chapter-11.xhtml#macro-with-package-iterator">with-package-iterator</a>  to the language as follows: <br/>    <a class="macro-reference" href="../chapter-18.xhtml#macro-with-hash-table-iterator">with-hash-table-iterator</a> <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">&lt;next-fn&gt;</span> <span class="syntax-interned-symbol">&lt;hash-table&gt;</span>)</span> <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-body">&amp;BODY</a> <span class="syntax-interned-symbol">body</span>)</span>
</span></code></pre>      [Macro] <br/>    Within the lexical scope of 'body', the name &lt;next-fn&gt; is defined     via <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-macrolet">macrolet</a> such that successive invocations of <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">&lt;next-fn&gt;</span>)</span>
</span></code></pre> will      return the items, one by one, from the <a class="type-reference" href="../chapter-18.xhtml#type-hash-table">hash-table</a> which is obtained      by evaluating &lt;<a class="type-reference" href="../chapter-18.xhtml#type-hash-table">hash-table</a>&gt; only once. <br/>    An invocation <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">&lt;next-fn&gt;</span>)</span>
</span></code></pre> returns three values as follows: <ol><li> a boolean indicating whether an entry is returned <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> <span class="syntax-interned-symbol">says</span> <span class="syntax-interned-symbol">yes</span>)</span>
</span></code></pre> </li><li> the key item (of a &lt;key, value&gt; pair) </li><li> the value item (of a &lt;key, value&gt; pair) </li></ol>    After all entries have been returned [by successive invocations of     <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">&lt;next-fn&gt;</span>)</span>
</span></code></pre>], then only one value is returned, namely <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>. <br/><br/>    <a class="macro-reference" href="../chapter-11.xhtml#macro-with-package-iterator">with-package-iterator</a> ((&lt;next-fn&gt; &lt;package-list&gt;                    [Macro]                             &amp;rest &lt;symbol-types&gt;)                            &amp;body body) <br/>    Within the lexical scope of 'body', the name &lt;next-fn&gt; is defined     via <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-macrolet">macrolet</a> such that successive invocations of <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">&lt;next-fn&gt;</span>)</span>
</span></code></pre> will      return symbols, one by one, from the packages that are elements     of the list which is obtained by evaluating &lt;package-list&gt; only once.       Each element of &lt;package-list&gt; can be a package or the name of a     package. <br/>    The order of symbols returned does not necessarily reflect the order     of packages in &lt;package-list&gt;.  When &lt;package-list&gt; has more than     one element, it is unspecified whether duplicate symbols are     returned once or more than once.  Even when &lt;package-list&gt; has only     one element, it is unspecified whether symbols inherited from     multiple packages are returned more than once.  See the proposal     <a class="issue-reference" href="../issues/do-symbols-duplicates.xhtml#issue-do-symbols-duplicates:allowed">DO-SYMBOLS-DUPLICATES:ALLOWED</a>. <br/>    As a convenience, the value of &lt;package-list&gt; can be a package or     the name of a package; this is equivalent to a list of one element.     An argument of <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> is treated as an empty list of packages. <br/>    The &lt;symbol-types&gt; subform consists of one or more symbols from the     set {:INTERNAL, :EXTERNAL, :INHERITED}.  Their order does not     matter.  The &lt;symbol-types&gt; subform is not evaluated.  This controls     which symbols accessible in a package are returned:         :INTERNAL  means the symbols that are present in the package,                    but which are not exported;         :EXTERNAL  means the symbols that are present and exported;         :INHERITED means the symbols that are exported by used packages                    and that are not shadowed.     When more than one argument is supplied for &lt;symbol-types&gt;, then a      symbol is returned if its accessibility matches any one of the      &lt;symbol-types&gt; specified.  <a class="macro-reference" href="../chapter-11.xhtml#macro-with-package-iterator">with-package-iterator</a> signals an error if      no &lt;symbol-types&gt; are specified or if a &lt;symbol-type&gt; not recognized      by the implementation is specified.  Implementations are permitted to      extend this syntax by recognizing additional symbol accessibility types. <br/>    An invocation <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">&lt;next-fn&gt;</span>)</span>
</span></code></pre> returns four values as follows: <ol><li> a boolean indicating whether a symbol is returned <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> <span class="syntax-interned-symbol">says</span> <span class="syntax-interned-symbol">yes</span>)</span>
</span></code></pre> </li></ol>	2. a symbol <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">accessible</span> <span class="syntax-interned-symbol">in</span> <span class="syntax-interned-symbol">one</span> <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <span class="syntax-interned-symbol">indicated</span> <span class="syntax-interned-symbol">packages</span>)</span>
</span></code></pre> 	3. the accessibility type for that symbol; i.e. one of 	   :INTERNAL, :EXTERNAL, or :INHERITED 	4. the package from which the symbol has been accessed.     After all symbols have been returned [by successive invocations of     <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">&lt;next-fn&gt;</span>)</span>
</span></code></pre>], then only one value is returned, namely <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>. <br/>   The fourth return value is one of the packages present or named in the    &lt;package-list&gt; argument.  The meaning of the second, third, and fourth    values is that the returned symbol is accessible in the returned package    in the way indicated by the second return value:         :INTERNAL   ==&gt;  present, and not exported,         :EXTERNAL   ==&gt;  present, and exported,          :INHERITED  ==&gt;  not present <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">thus</span> <a class="function-reference" href="../chapter-5.xhtml#function-not">not</a> <span class="syntax-interned-symbol">shadowed</span>)</span>
</span></code></pre> but inherited                          from some used package. <br/>It is unspecified what happens if any of the implicit interior state  of an iteration is returned outside the dynamic extent of the WITH-... form <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">such</span> <span class="syntax-interned-symbol">as</span> <span class="syntax-interned-symbol">by</span> <span class="syntax-interned-symbol">returning</span> <a class="function-reference" href="../chapter-5.xhtml#function-some">some</a> <span class="syntax-interned-symbol">closure</span> <span class="syntax-interned-symbol">over</span> <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <span class="syntax-interned-symbol">invocation</span> <span class="syntax-interned-symbol">form</span>)</span>
</span></code></pre>. <br/>Any number of invocations of <a class="macro-reference" href="../chapter-18.xhtml#macro-with-hash-table-iterator">with-hash-table-iterator</a> and <a class="macro-reference" href="../chapter-11.xhtml#macro-with-package-iterator">with-package-iterator</a> can be nested, and the body of the innermost one can invoke all of the <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-macrolet">macrolet</a>'ed macros, provided all those macros have distinct names. <br/></section><section id="section-Examples" class="section"><h2 class="section-title">Examples</h2><pre>The following function should return <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> on any <a class="type-reference" href="../chapter-18.xhtml#type-hash-table">hash-table</a>, and signal<br/>an error if the usage of '<a class="macro-reference" href="../chapter-18.xhtml#macro-with-hash-table-iterator">with-hash-table-iterator</a>' doesn't agree<br/>with the corresponding usage of 'maphash'.<br/><br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">test-hash-table-iterator</span> <span class="syntax-cons">(<a class="type-reference" href="../chapter-18.xhtml#type-hash-table">hash-table</a>)</span>
  <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">all-entries</span> <span class="syntax-quote">'<span class="syntax-symbol">()</span></span>)</span>
        <span class="syntax-cons">(<span class="syntax-interned-symbol">generated-entries</span> <span class="syntax-quote">'<span class="syntax-symbol">()</span></span>)</span>
        <span class="syntax-cons">(<span class="syntax-interned-symbol">unique</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-list">list</a> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>)</span>)</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="../chapter-18.xhtml#function-maphash">maphash</a> <span class="syntax-function">#'<span class="syntax-cons">(<a class="macro-reference" href="../chapter-3.xhtml#macro-lambda">lambda</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">key</span> <span class="syntax-interned-symbol">value</span>)</span> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-14.xhtml#macro-push">push</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">key</span> <span class="syntax-interned-symbol">value</span>)</span> <span class="syntax-interned-symbol">all-entries</span>)</span>)</span></span>
             <a class="type-reference" href="../chapter-18.xhtml#type-hash-table">hash-table</a>)</span>
    <span class="syntax-cons">(<a class="macro-reference" href="../chapter-18.xhtml#macro-with-hash-table-iterator">with-hash-table-iterator</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">generator-fn</span> <a class="type-reference" href="../chapter-18.xhtml#type-hash-table">hash-table</a>)</span>
      <span class="syntax-cons">(<a class="macro-reference" href="../chapter-6.xhtml#macro-loop">loop</a>     
        <span class="syntax-line-comment syntax-comment">;;Note &ndash; this is the "trivial" LOOP of CLtL p121
</span>        <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-multiple-value-bind">multiple-value-bind</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">more?</span> <span class="syntax-interned-symbol">key</span> <span class="syntax-interned-symbol">value</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">generator-fn</span>)</span>
          <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-unless">unless</a> <span class="syntax-interned-symbol">more?</span> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-return">return</a>)</span>)</span>
          <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-unless">unless</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-eql">eql</a> <span class="syntax-interned-symbol">value</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-18.xhtml#function-gethash">gethash</a> <span class="syntax-interned-symbol">key</span> <a class="type-reference" href="../chapter-18.xhtml#type-hash-table">hash-table</a> <span class="syntax-interned-symbol">unique</span>)</span>)</span>
            <span class="syntax-cons">(<a class="function-reference" href="../chapter-9.xhtml#function-error">error</a> <span class="syntax-string">"Key ~S not found for value ~S"</span> <span class="syntax-interned-symbol">key</span> <span class="syntax-interned-symbol">value</span>)</span>)</span>
          <span class="syntax-cons">(<a class="macro-reference" href="../chapter-14.xhtml#macro-push">push</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">key</span> <span class="syntax-interned-symbol">value</span>)</span> <span class="syntax-interned-symbol">generated-entries</span>)</span>)</span>)</span>)</span>
    <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-unless">unless</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-=">=</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-17.xhtml#function-length">length</a> <span class="syntax-interned-symbol">all-entries</span>)</span>
               <span class="syntax-cons">(<a class="function-reference" href="../chapter-17.xhtml#function-length">length</a> <span class="syntax-interned-symbol">generated-entries</span>)</span>
               <span class="syntax-cons">(<a class="function-reference" href="../chapter-17.xhtml#function-length">length</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-union">union</a> <span class="syntax-interned-symbol">all-entries</span> <span class="syntax-interned-symbol">generated-entries</span> <span class="syntax-keyword-symbol">:test</span> <span class="syntax-function">#'<a class="function-reference" href="../chapter-5.xhtml#function-equal">equal</a></span>)</span>)</span>)</span>
      <span class="syntax-cons">(<a class="function-reference" href="../chapter-9.xhtml#function-error">error</a> <span class="syntax-string">"Generated entries and Maphash entries don't correspond"</span>)</span>)</span>
    <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>)</span>)</span>
</span></code></pre><br/><br/>The following function should return <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> on any package, and signal<br/>an error if the usage of '<a class="macro-reference" href="../chapter-11.xhtml#macro-with-package-iterator">with-package-iterator</a>' doesn't agree<br/>with the corresponding usage of '<a class="macro-reference" href="../chapter-11.xhtml#macro-do-symbols">do-symbols</a>'.<br/><br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">test-package-iterator</span> <span class="syntax-cons">(<a class="type-reference" href="../chapter-11.xhtml#type-package">package</a>)</span>
  <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-unless">unless</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-11.xhtml#function-packagep">packagep</a> <a class="type-reference" href="../chapter-11.xhtml#type-package">package</a>)</span>
    <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-setq">setq</a> <a class="type-reference" href="../chapter-11.xhtml#type-package">package</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-11.xhtml#function-find-package">find-package</a> <a class="type-reference" href="../chapter-11.xhtml#type-package">package</a>)</span>)</span>)</span>
  <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">all-entries</span> <span class="syntax-quote">'<span class="syntax-symbol">()</span></span>)</span>
        <span class="syntax-cons">(<span class="syntax-interned-symbol">generated-entries</span> <span class="syntax-quote">'<span class="syntax-symbol">()</span></span>)</span>)</span>
    <span class="syntax-cons">(<a class="macro-reference" href="../chapter-11.xhtml#macro-do-symbols">do-symbols</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <a class="type-reference" href="../chapter-11.xhtml#type-package">package</a>)</span> 
      <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-multiple-value-bind">multiple-value-bind</a> <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-2.xhtml#symbol-symbol">symbol</a> <span class="syntax-interned-symbol">accessibility</span>)</span> 
          <span class="syntax-cons">(<a class="function-reference" href="../chapter-11.xhtml#function-find-symbol">find-symbol</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-10.xhtml#function-symbol-name">symbol-name</a> <span class="syntax-interned-symbol">x</span>)</span> <a class="type-reference" href="../chapter-11.xhtml#type-package">package</a>)</span>
        <span class="syntax-cons">(<a class="macro-reference" href="../chapter-14.xhtml#macro-push">push</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-list">list</a> <a class="symbol-reference" href="../chapter-2.xhtml#symbol-symbol">symbol</a> <span class="syntax-interned-symbol">accessibility</span>)</span> <span class="syntax-interned-symbol">all-entries</span>)</span>)</span>)</span>
    <span class="syntax-cons">(<a class="macro-reference" href="../chapter-11.xhtml#macro-with-package-iterator">with-package-iterator</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">generator-fn</span> <a class="type-reference" href="../chapter-11.xhtml#type-package">package</a> 
                            <span class="syntax-keyword-symbol">:internal</span> <span class="syntax-keyword-symbol">:external</span> <span class="syntax-keyword-symbol">:inherited</span>)</span>
      <span class="syntax-cons">(<a class="macro-reference" href="../chapter-6.xhtml#macro-loop">loop</a>     
        <span class="syntax-line-comment syntax-comment">;;Note &ndash; this is the "trivial" LOOP of CLtL p121
</span>        <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-multiple-value-bind">multiple-value-bind</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">more?</span> <a class="symbol-reference" href="../chapter-2.xhtml#symbol-symbol">symbol</a> <span class="syntax-interned-symbol">pkg</span> <span class="syntax-interned-symbol">accessibility</span>)</span>
            <span class="syntax-cons">(<span class="syntax-interned-symbol">generator-fn</span>)</span>
          <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-unless">unless</a> <span class="syntax-interned-symbol">more?</span> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-return">return</a>)</span>)</span>
          <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">l</span> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-multiple-value-list">multiple-value-list</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-11.xhtml#function-find-symbol">find-symbol</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-10.xhtml#function-symbol-name">symbol-name</a> <a class="symbol-reference" href="../chapter-2.xhtml#symbol-symbol">symbol</a>)</span> 
                                                     <a class="type-reference" href="../chapter-11.xhtml#type-package">package</a>)</span>)</span>)</span>)</span>
            <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-unless">unless</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-equal">equal</a> <span class="syntax-interned-symbol">l</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-list">list</a> <a class="symbol-reference" href="../chapter-2.xhtml#symbol-symbol">symbol</a> <span class="syntax-interned-symbol">accessibility</span>)</span>)</span>
              <span class="syntax-cons">(<a class="function-reference" href="../chapter-9.xhtml#function-error">error</a> <span class="syntax-string">"Symbol ~S not found as ~S in package ~A [~S]"</span>
                     <a class="symbol-reference" href="../chapter-2.xhtml#symbol-symbol">symbol</a> <span class="syntax-interned-symbol">accessibility</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-11.xhtml#function-package-name">package-name</a> <a class="type-reference" href="../chapter-11.xhtml#type-package">package</a>)</span> <span class="syntax-interned-symbol">l</span>)</span>)</span>
            <span class="syntax-cons">(<a class="macro-reference" href="../chapter-14.xhtml#macro-push">push</a> <span class="syntax-interned-symbol">l</span> <span class="syntax-interned-symbol">generated-entries</span>)</span>)</span>)</span>)</span>)</span>
    <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-unless">unless</a> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-and">and</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-subsetp">subsetp</a> <span class="syntax-interned-symbol">all-entries</span> <span class="syntax-interned-symbol">generated-entries</span> <span class="syntax-keyword-symbol">:test</span> <span class="syntax-function">#'<a class="function-reference" href="../chapter-5.xhtml#function-equal">equal</a></span>)</span>
                 <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-subsetp">subsetp</a> <span class="syntax-interned-symbol">generated-entries</span> <span class="syntax-interned-symbol">all-entries</span> <span class="syntax-keyword-symbol">:test</span> <span class="syntax-function">#'<a class="function-reference" href="../chapter-5.xhtml#function-equal">equal</a></span>)</span>)</span>
     <span class="syntax-cons">(<a class="function-reference" href="../chapter-9.xhtml#function-error">error</a> <span class="syntax-string">"Generated entries and Do-Symbols entries don't correspond"</span>)</span>)</span>
    <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>)</span>)</span>
</span></code></pre><br/><br/>The following function prints out every interned symbol <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">possibly</span>
<span class="syntax-interned-symbol">more</span> <span class="syntax-interned-symbol">than</span> <span class="syntax-interned-symbol">once</span>)</span>
</span></code></pre>:<br/><br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">print-all-symbols</span> <span class="syntax-symbol">()</span> 
  <span class="syntax-cons">(<a class="macro-reference" href="../chapter-11.xhtml#macro-with-package-iterator">with-package-iterator</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">next-symbol</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-11.xhtml#function-list-all-packages">list-all-packages</a>)</span>
                          <span class="syntax-keyword-symbol">:internal</span> <span class="syntax-keyword-symbol">:external</span>)</span>
    <span class="syntax-cons">(<a class="macro-reference" href="../chapter-6.xhtml#macro-loop">loop</a>
      <span class="syntax-line-comment syntax-comment">;;Note &ndash; this is the "trivial" LOOP of CLtL p121
</span>      <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-multiple-value-bind">multiple-value-bind</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">more?</span> <a class="symbol-reference" href="../chapter-2.xhtml#symbol-symbol">symbol</a>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">next-symbol</span>)</span>
        <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-interned-symbol">more?</span> 
           <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-print">print</a> <a class="symbol-reference" href="../chapter-2.xhtml#symbol-symbol">symbol</a>)</span>
           <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-return">return</a>)</span>)</span>)</span>)</span>)</span>)</span>
</span></code></pre><br/><br/>The following could be an acceptable definition of the function<br/><a class="function-reference" href="../chapter-18.xhtml#function-maphash">maphash</a>, implemented by <a class="macro-reference" href="../chapter-18.xhtml#macro-with-hash-table-iterator">with-hash-table-iterator</a>"<br/><br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a> <a class="function-reference" href="../chapter-18.xhtml#function-maphash">maphash</a> <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> <a class="type-reference" href="../chapter-18.xhtml#type-hash-table">hash-table</a>)</span>
  <span class="syntax-cons">(<a class="macro-reference" href="../chapter-18.xhtml#macro-with-hash-table-iterator">with-hash-table-iterator</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">next-entry</span> <a class="type-reference" href="../chapter-18.xhtml#type-hash-table">hash-table</a>)</span>
    <span class="syntax-cons">(<a class="macro-reference" href="../chapter-6.xhtml#macro-loop">loop</a> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-multiple-value-bind">multiple-value-bind</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">more</span> <span class="syntax-interned-symbol">key</span> <span class="syntax-interned-symbol">value</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">next-entry</span>)</span>
            <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-unless">unless</a> <span class="syntax-interned-symbol">more</span> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-return">return</a> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>)</span>)</span>
            <span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-funcall">funcall</a> <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> <span class="syntax-interned-symbol">key</span> <span class="syntax-interned-symbol">value</span>)</span>)</span>)</span>)</span>)</span>
</span></code></pre><br/><br/></pre></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>The particular way in which hash-tables and packages are represented need not be standardized, or even exposed to the user.  Yet a simpler  handle on them is needed for the various iteration paradigms to be written  in portable code.  In fact, after these iterator macros are put into an  implementation, then <a class="function-reference" href="../chapter-18.xhtml#function-maphash">maphash</a> and DO-&lt;mumble&gt;-SYMBOLS are trivial usages  of them; but no _efficient_ use of the current primitives will provide  the effect of the new macros, namely a form that _returns_ the elements of a table "one by one". <br/></section><section id="section-Current Practice" class="section"><h2 class="section-title">Current Practice</h2>Nobody does it this way, but both Symbolics and Lucid are not far off. <br/></section><section id="section-Cost to Implementors" class="section"><h2 class="section-title">Cost to Implementors</h2>Moderate.  Possibly a couple day's to a week's work for an implementation  that has to start completely afresh.  Something like this is already being done by the standard package macros [CLtL, p187]. <br/></section><section id="section-Cost to Users" class="section"><h2 class="section-title">Cost to Users</h2>None. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>Will provide a more basic primitive for iterating over hash-tables and  packages; will permit new iteration paradigms to be written in portable code. <br/></section><section id="section-Aesthetics" class="section"><h2 class="section-title">Aesthetics</h2>All other things being equal, it is better to have more general primitives than less general ones.   <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>The Iteration Subcommittee supports this proposal (or, "used to" &ndash;  JonL 6-Oct-88). <br/>One must be careful not to assume that the invocation <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">&lt;next-fn&gt;</span>)</span>
</span></code></pre> is a  "generator" function call &ndash; since &lt;next-fn&gt; is <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-macrolet">macrolet</a>'d in an  implementation dependent way, it could even turn into a special form like     <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-interned-symbol">something</span>
        <span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-values">values</a> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>)</span>
        <span class="syntax-cons">(<span class="syntax-interned-symbol">yet-another-function-call</span>)</span>)</span>
</span></code></pre> <br/>The scoping called for herein may not be quite so useful to the "generators" style proposals; in particular they offer an interface wherein one may  create a "generator" function of indefinite extent that returns, one-by-one, the elements of the table.  The constrained scoping implicit in these WITH-... macros is not so much for any kind of optimization, but rather for coordination of such <a class="type-reference" href="../chapter-18.xhtml#type-hash-table">hash-table</a> "locking" as may occur in multi<a class="function-reference" href="../chapter-12.xhtml#function--">-</a> processing implementations like Symbolics.  Nevertheless, Dick Waters  thinks these macros should be put in anyway, since it clearly is a  requirement for a portable <a class="macro-reference" href="../chapter-6.xhtml#macro-loop">loop</a>, and can be use in a limited context  (i.e., not "indefinite scope") for portable versions of ITERATE and OSS. <br/>Of course, if an implementation _can_ support an indefinite extent for a "generator" object returned out of the iterator forms, it is allowed  to do so by this proposal. <br/>The following macro definitions show how Common Lisp's DO-mumble-SYMBOLS  macros could have been defined in terms of <a class="macro-reference" href="../chapter-11.xhtml#macro-with-package-iterator">with-package-iterator</a>.  They  are intended as illustrative examples, not as new specifications of those  built-in Common Lisp facilities. [PARSE-BODY is as defined in Guy Steele's  "Clarifications" of 6-Dec-85.] <br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-3.xhtml#macro-defmacro">defmacro</a> <a class="macro-reference" href="../chapter-11.xhtml#macro-do-symbols">do-symbols</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">var</span> <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-optional">&amp;OPTIONAL</a> <span class="syntax-cons">(<a class="type-reference" href="../chapter-11.xhtml#type-package">package</a> <span class="syntax-quasiquote">`<a class="variable-reference" href="../chapter-11.xhtml#variable-*package*">*package*</a></span>)</span> <span class="syntax-interned-symbol">result-form</span>)</span>
                      <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-body">&amp;BODY</a> <span class="syntax-interned-symbol">body</span> 
                      <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-environment">&amp;ENVIRONMENT</a> <span class="syntax-interned-symbol">env</span>)</span> 
  <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-multiple-value-bind">multiple-value-bind</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">body</span> <span class="syntax-interned-symbol">decls</span> <span class="syntax-interned-symbol">docstring</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">parse-body</span> <span class="syntax-interned-symbol">body</span> <span class="syntax-interned-symbol">env</span>)</span>
    <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="macro-reference" href="../chapter-11.xhtml#macro-with-package-iterator">with-package-iterator</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">next-symbol</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-list">list</a> <span class="syntax-unquote">,<a class="type-reference" href="../chapter-11.xhtml#type-package">package</a></span>)</span>
                             <span class="syntax-keyword-symbol">:internal</span> <span class="syntax-keyword-symbol">:external</span> <span class="syntax-keyword-symbol">:inherited</span>)</span>
       <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">more?</span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">var</span></span>)</span>
         <span class="syntax-unquote">,@<span class="syntax-interned-symbol">decls</span></span>
         <span class="syntax-cons">(<a class="macro-reference" href="../chapter-6.xhtml#macro-loop">loop</a>
           <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-unless">unless</a> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-multiple-value-setq">multiple-value-setq</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">more?</span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">var</span></span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">next-symbol</span>)</span>)</span>
             <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-unquote">,<span class="syntax-interned-symbol">var</span></span> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>)</span>
             <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-return">return</a> <span class="syntax-unquote">,<span class="syntax-interned-symbol">result-form</span></span>)</span>)</span>
           <span class="syntax-unquote">,@<span class="syntax-interned-symbol">body</span></span>)</span>)</span>)</span></span>)</span>)</span>
</span></code></pre> <br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-3.xhtml#macro-defmacro">defmacro</a> <a class="macro-reference" href="../chapter-11.xhtml#macro-do-external-symbols">do-external-symbols</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">var</span> <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-optional">&amp;OPTIONAL</a> <span class="syntax-cons">(<a class="type-reference" href="../chapter-11.xhtml#type-package">package</a> <span class="syntax-quasiquote">`<a class="variable-reference" href="../chapter-11.xhtml#variable-*package*">*package*</a></span>)</span> <span class="syntax-interned-symbol">result-form</span>)</span>
                               <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-body">&amp;BODY</a> <span class="syntax-interned-symbol">body</span> 
                               <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-environment">&amp;ENVIRONMENT</a> <span class="syntax-interned-symbol">env</span>)</span> 
  <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-multiple-value-bind">multiple-value-bind</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">body</span> <span class="syntax-interned-symbol">decls</span> <span class="syntax-interned-symbol">docstring</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">parse-body</span> <span class="syntax-interned-symbol">body</span> <span class="syntax-interned-symbol">env</span>)</span>
    <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="macro-reference" href="../chapter-11.xhtml#macro-with-package-iterator">with-package-iterator</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">next-symbol</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-list">list</a> <span class="syntax-unquote">,<a class="type-reference" href="../chapter-11.xhtml#type-package">package</a></span>)</span>
                             <span class="syntax-keyword-symbol">:external</span>)</span>
       <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">more?</span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">var</span></span>)</span>
         <span class="syntax-unquote">,@<span class="syntax-interned-symbol">decls</span></span>
         <span class="syntax-cons">(<a class="macro-reference" href="../chapter-6.xhtml#macro-loop">loop</a>
           <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-unless">unless</a> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-multiple-value-setq">multiple-value-setq</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">more?</span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">var</span></span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">next-symbol</span>)</span>)</span>
             <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-unquote">,<span class="syntax-interned-symbol">var</span></span> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>)</span>
             <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-return">return</a> <span class="syntax-unquote">,<span class="syntax-interned-symbol">result-form</span></span>)</span>)</span>
           <span class="syntax-unquote">,@<span class="syntax-interned-symbol">body</span></span>)</span>)</span>)</span></span>)</span>)</span>
</span></code></pre> <br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-3.xhtml#macro-defmacro">defmacro</a> <a class="macro-reference" href="../chapter-11.xhtml#macro-do-all-symbols">do-all-symbols</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">var</span> <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-optional">&amp;OPTIONAL</a> <span class="syntax-interned-symbol">result-form</span>)</span> 
                          <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-body">&amp;BODY</a> <span class="syntax-interned-symbol">body</span> 
                          <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-environment">&amp;ENVIRONMENT</a> <span class="syntax-interned-symbol">env</span>)</span> 
  <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-multiple-value-bind">multiple-value-bind</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">body</span> <span class="syntax-interned-symbol">decls</span> <span class="syntax-interned-symbol">docstring</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">parse-body</span> <span class="syntax-interned-symbol">body</span> <span class="syntax-interned-symbol">env</span>)</span>
    <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="macro-reference" href="../chapter-11.xhtml#macro-with-package-iterator">with-package-iterator</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">next-symbol</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-11.xhtml#function-list-all-packages">list-all-packages</a>)</span>
                             <span class="syntax-keyword-symbol">:internal</span> <span class="syntax-keyword-symbol">:external</span>)</span>
       <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">more?</span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">var</span></span>)</span>
         <span class="syntax-unquote">,@<span class="syntax-interned-symbol">decls</span></span>
         <span class="syntax-cons">(<a class="macro-reference" href="../chapter-6.xhtml#macro-loop">loop</a>
           <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-unless">unless</a> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-multiple-value-setq">multiple-value-setq</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">more?</span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">var</span></span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">next-symbol</span>)</span>)</span>
             <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-unquote">,<span class="syntax-interned-symbol">var</span></span> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>)</span>
             <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-return">return</a> <span class="syntax-unquote">,<span class="syntax-interned-symbol">result-form</span></span>)</span>)</span>
           <span class="syntax-unquote">,@<span class="syntax-interned-symbol">body</span></span>)</span>)</span>)</span></span>)</span>)</span>
</span></code></pre> <br/>&mdash;&mdash;<a class="function-reference" href="../chapter-12.xhtml#function--">-</a> "Why not define &lt;next-fn&gt; as a local function as if defined by     <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-flet">flet</a> rather than a macro as if defined by <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-macrolet">macrolet</a>? " <br/>"a macro gave more scope to the implememtation to optimize without losing anything essential in these circumstances." </section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>