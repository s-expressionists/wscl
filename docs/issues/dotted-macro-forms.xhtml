<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” DOTTED-MACRO-FORMS</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">DOTTED-MACRO-FORMS</span><br/><ol class="local-toc"><li><a href="#section-Status">Status</a><ol> </ol></li><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit history">Edit history</a><ol> </ol></li><li><a href="#section-Problem Description">Problem Description</a><ol> </ol></li><li><a href="#issue-dotted-macro-forms:allow">Proposal ALLOW</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Test Case">Test Case</a><ol> </ol></li><li><a href="#section-Current Practice">Current Practice</a><ol> </ol></li><li><a href="#section-Cost to Implementors">Cost to Implementors</a><ol> </ol></li><li><a href="#section-Cost to Users">Cost to Users</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Aesthetics">Aesthetics</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue DOTTED-MACRO-FORMS [NIL] [CLARIFICATION/CHANGE]</h1><section id="section-Status" class="status-passed section"><h2 class="section-title">Status</h2>passed Jan 89 X3J13 </section><section id="section-References" class="section"><h2 class="section-title">References</h2>forms (p54), lists and dotted lists (pp26-27), <a class="macro-reference" href="../chapter-3.xhtml#macro-defmacro">defmacro</a> (p145), destructuring macro arguments (p146) </section><section id="section-Edit history" class="section"><h2 class="section-title">Edit history</h2>28-Jun-88, Version 1 by Pitman   (explicitly-vague vs allow) 01-Oct-88, Version 2 by Masinter (disallow) 15-Nov-88, Version 3 by Pitman   (revive allow, flush disallow) </section><section id="section-Problem Description" class="section"><h2 class="section-title">Problem Description</h2>  CLtL is not explicit about whether macro forms may be dotted lists. <br/>  p54 says that only certain forms are "meaningful": self-evaluating    forms, symbols, and "lists". <br/>  pp26-27 defines "list" and "dotted list". It goes on to say    ``Throughout this manual, unless otherwise specified, it is an    error to pass a dotted list to a function that is specified    to require a list as an argument.'' <br/>  p146 states that in <a class="macro-reference" href="../chapter-3.xhtml#macro-defmacro">defmacro</a> destructuring, ``the argument    form that would match the parameter is treated as a    <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">possibly</span> <span class="syntax-interned-symbol">dotted</span>)</span>
</span></code> list, to be used as an argument forms list    for satisfying the parameters in the embedded lambda list.''    It goes on to say that ". var" is treated like "&amp;rest var"    at any level of the defmacro lambda-list. <br/></section><section class="status-passed proposal" id="issue-dotted-macro-forms:allow"><h2 class="section-title">Proposal ALLOW</h2> Define that it is permissible for a macro form <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-or">or</a> <span class="syntax-interned-symbol">subform</span>)</span>
</span></code> to be  a dotted list when "<a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-rest">&amp;REST</a> var" or ". var" is used to match it. It  is the responsibility of the macro to recognize and deal with such  situations. <br/></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2> Some implementations permit dotted lists in macro forms at toplevel.  Most or all implementations permit dotted lists in macro forms at  embedded levels. This proposal makes the language internally  consistent without requiring changes to existing code. <br/> Also, there's no reason to unnecessarily restrict <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-rest">&amp;REST</a> since there  is no computational overhead and since there's no dispute about how  to interpret programmer intent in this gray area. <br/></section><section id="section-Test Case" class="section"><h2 class="section-title">Test Case</h2><pre>  #1: <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-3.xhtml#macro-defmacro">defmacro</a> <span class="syntax-interned-symbol">MACW</span> <span class="syntax-cons">(<a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-whole">&amp;WHOLE</a> <span class="syntax-interned-symbol">W</span> <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-rest">&amp;REST</a> <span class="syntax-interned-symbol">R</span>)</span> <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <span class="syntax-unquote">,<span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-cdr">cdr</a> <span class="syntax-interned-symbol">W</span>)</span></span>)</span></span>)</span>
</span></code><br/>      <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">MACW</span> <span class="syntax-symbol">.</span> <span class="syntax-number">1</span>)</span>
</span></code> <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; ??<br/><br/>  #2: <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-3.xhtml#macro-defmacro">defmacro</a> <span class="syntax-interned-symbol">MACR</span> <span class="syntax-cons">(<a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-rest">&amp;REST</a> <span class="syntax-interned-symbol">R</span>)</span> <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <span class="syntax-unquote">,<span class="syntax-interned-symbol">R</span></span>)</span></span>)</span>
</span></code><br/>      <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">MACR</span> <span class="syntax-symbol">.</span> <span class="syntax-number">1</span>)</span>
</span></code> <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; ??<br/><br/>  #3: <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-3.xhtml#macro-defmacro">defmacro</a> <span class="syntax-interned-symbol">MACX</span> <span class="syntax-cons">(<a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-whole">&amp;WHOLE</a> <span class="syntax-interned-symbol">W</span>)</span> <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <span class="syntax-unquote">,<span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-cdr">cdr</a> <span class="syntax-interned-symbol">W</span>)</span></span>)</span></span>)</span>
</span></code><br/>      <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">MACX</span> <span class="syntax-symbol">.</span> <span class="syntax-number">1</span>)</span>
</span></code><br/><br/>    <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">MACW</span> <span class="syntax-symbol">.</span> <span class="syntax-number">1</span>)</span>
</span></code> <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; -1 under this proposal.<br/>    <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">MACR</span> <span class="syntax-symbol">.</span> <span class="syntax-number">1</span>)</span>
</span></code> <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; -1 under this proposal.<br/><br/>    <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">MACX</span> <span class="syntax-symbol">.</span> <span class="syntax-number">1</span>)</span>
</span></code> is an error under CLtL semantics and is not<br/>	       changed by this proposal. The reason it is an<br/>	       error is that the argument pattern does not<br/>	       match. The pattern is dictated by the arguments<br/>	       -other than<a class="function-reference" href="../chapter-12.xhtml#function--">-</a> the <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-whole">&amp;WHOLE</a> argument, so the pattern<br/>	       is <code><span class="syntax-root"><span class="syntax-symbol">()</span>
</span></code> and MACX cannot be called with any arguments.<br/><br/></pre></section><section id="section-Current Practice" class="section"><h2 class="section-title">Current Practice</h2><ol><li> Some implementations bind W to <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">MACW</span> <span class="syntax-symbol">.</span> <span class="syntax-number">1</span>)</span>
</span></code> in #1 and #3 and bind R to 1 in #1 and #2. <br/></li><li> Some implementations bind W to <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">MACW</span> <span class="syntax-symbol">.</span> <span class="syntax-number">1</span>)</span>
</span></code> in #3     and signal a syntax error in #1 and #2. <br/></li><li> Some implementations signal a syntax error in #1, #2, and #3.  Symbolics Genera is such an implementation. <br/></li></ol></section><section id="section-Cost to Implementors" class="section"><h2 class="section-title">Cost to Implementors</h2> Some implementations would have to eliminate an error check. <br/> Some implementations which try to use <a class="function-reference" href="../chapter-5.xhtml#function-apply">apply</a> of a normal lambda  to accomplish part of the destructuring <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">in</span> <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <span class="syntax-interned-symbol">non-recursive</span> <a class="macro-reference" href="../chapter-5.xhtml#macro-case">case</a>)</span>
</span></code>  would have to be slightly more careful. <br/></section><section id="section-Cost to Users" class="section"><h2 class="section-title">Cost to Users</h2> None. This change is upward compatible. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2> People would know what to expect. <br/></section><section id="section-Aesthetics" class="section"><h2 class="section-title">Aesthetics</h2> Mixed opinion: certainly it is better to specify whether they are  allowed or an error than to be vague. <br/> Some feel that disallowing dotted macro forms helps catch syntax errors.  Some feel that allowing dotted macro forms makes the language more regular. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2> Goldman@VAXA.ISI.EDU raised this issue on <a class="package-reference" href="../chapter-1.xhtml#package-common-lisp">common-lisp</a>.  This issue came up primarily in the context of program-written programs;  a macro used in the program generated code might occasionally use  a dotted tail to a list to explicitly represent special conditions. <br/> Allowing dotted macro forms may blur the data/code distinction too much,   particularly for people who are new to Lisp. On the other hand, some people  argue that the point of macros is to help blur that distinction. Macro  forms are data which must be translated to program, and only once the  program claims to be macroexpanded ought syntax restrictions be imposed. <br/> This proposal was rewritten from `DISALLOW' to `<a class="proposal-reference" href="#issue-dotted-macro-forms:allow">ALLOW</a>' after Steele pointed  out in a recent meeting that dotted lists are allowed in subforms and   that permitting them at toplevel would be the most internally consistent  interpretation. <br/> Pitman supports <a class="issue-reference" href="#issue-dotted-macro-forms:allow">DOTTED-MACRO-FORMS:ALLOW</a>. </section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>