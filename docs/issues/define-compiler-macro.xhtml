<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” DEFINE-COMPILER-MACRO</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">DEFINE-COMPILER-MACRO</span><br/><ol class="local-toc"><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit History">Edit History</a><ol> </ol></li><li><a href="#section-Status">Status</a><ol> </ol></li><li><a href="#section-Problem Description">Problem Description</a><ol> </ol></li><li><a href="#issue-define-compiler-macro:x3j13-nov89">Proposal X3J13-NOV89</a><ol> </ol></li><li><a href="#issue-define-compiler-macro:new-facility">Proposal NEW-FACILITY</a><ol> <li><a href="#section-Rationale">Rationale</a><ol> </ol></li></ol></li><li><a href="#section-Current Practice">Current Practice</a><ol> </ol></li><li><a href="#section-Cost to Implementors">Cost to Implementors</a><ol> </ol></li><li><a href="#section-Cost to Users">Cost to Users</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue DEFINE-COMPILER-MACRO [Cleanup] [ADDITION]</h1><h2>Related issues</h2><ul><span class="issue-reference error">issue:Issue DEFINE-OPTIMIZER</span><span class="issue-reference error">issue:Issue SYNTACTIC-ENVIRONMENT-ACCESS</span><a class="issue-reference" href="../issues/lisp-symbol-redefinition.xhtml#issue-lisp-symbol-redefinition">X3J13 Issue LISP-SYMBOL-REDEFINITION</a><span class="issue-reference error">issue:Issue DEFINING-MACROS-NON-TOP-LEVEL</span><span class="issue-reference error">issue:Issue EVAL-WHEN-NON-TOP-LEVEL</span></ul><section id="section-References" class="section"><h2 class="section-title">References</h2>CLtL p. 151, p. 152 </section><section id="section-Edit History" class="section"><h2 class="section-title">Edit History</h2>28-Jun-89, Version 1 by JonL White and Steve Haflich 12-Jul-89, Version 2 by Loosemore 24-Oct-89, Version 3 by Loosemore 19-Oct-90, Version 4 by Loosemore </section><section id="section-Status" class="status-passed section"><h2 class="section-title">Status</h2>Version 2 (proposal <a class="proposal-reference" href="#issue-define-compiler-macro:new-facility">NEW-FACILITY</a>) passed at June 89 meeting Version 4 (proposal <a class="proposal-reference" href="#issue-define-compiler-macro:x3j13-nov89">X3J13-NOV89</a>) passed at Nov 89 meeting (replaces proposal <a class="proposal-reference" href="#issue-define-compiler-macro:new-facility">NEW-FACILITY</a>) <br/></section><section id="section-Problem Description" class="section"><h2 class="section-title">Problem Description</h2>Occasionally one would like to define a macro which is expanded only "in the compiler", but which would not normally affect the actions of the interpreter.  For example, the OSS/Generator proposal has several functions for which it would like to specify some alternative source code sequences for the compiler to compile, rather than just compiling a closed-call to the function. <br/>Also, it is occasionally desirable for a macro expansion to be different based on the various compiler optimization qualities (e.g., <a class="symbol-reference" href="../chapter-3.xhtml#symbol-speed">speed</a>, <a class="symbol-reference" href="../chapter-3.xhtml#symbol-safety">safety</a>, and so on); but if the expansion is for the interpreter rather than the compiler, then such variation based on compiler optimizers is not needed. <br/>So-called "compiler optimizers" are just a special case of macro-like expansions, which are limited to being done "in the compiler" and which are generally required to produce semantically equivalent code to replace an apparent function call.  There is a need for a facility that at least covers this capability. <br/><br/></section><section class="status-unknown proposal" id="issue-define-compiler-macro:x3j13-nov89"><h2 class="section-title">Proposal X3J13-NOV89</h2>Add the concept of "compiler macros" to the language, along with the defining macro <a class="macro-reference" href="../chapter-3.xhtml#macro-define-compiler-macro">define-compiler-macro</a> and accessor function <a class="function-reference" href="../chapter-3.xhtml#function-compiler-macro-function">compiler-macro-function</a>. <br/><ol><li> What compiler macros are   The purpose of this facility is to permit selective source-code   transformations as optimization advice to the compiler.  When a   nonatomic form is being processed <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">as</span> <span class="syntax-interned-symbol">by</span> <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <span class="syntax-interned-symbol">compiler</span>)</span>
</span></code>, if the   operator names a compiler macro then that compiler macro may be   invoked on the form, and the resulting expansion recursively processed   in preference to performing the usual processing on the original form   according to its normal interpretation as a function or macro call. <br/>  A compiler macro function, like an ordinary macro function, is a   function of two arguments: the entire call form and the environment.   Unlike an ordinary macro, a compiler macro can decline to provide an   expansion merely by returning a value that is <a class="function-reference" href="../chapter-5.xhtml#function-eql">eql</a> to the original   form.  The consequences are undefined if a compiler macro function   destructively modifies any part of its form argument. <br/>  The form passed to the compiler macro function can either be a list   whose <a class="function-reference" href="../chapter-14.xhtml#function-car">car</a> is the function name, or a list whose <a class="function-reference" href="../chapter-14.xhtml#function-car">car</a> is <a class="function-reference" href="../chapter-5.xhtml#function-funcall">funcall</a> and   whose <a class="function-reference" href="../chapter-14.xhtml#function-cadr">cadr</a> is a list <code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> <span class="syntax-interned-symbol">&lt;name&gt;</span>)</span>
</span></code>; note that this affects   destructuring of the form argument by the compiler macro function.   <a class="macro-reference" href="../chapter-3.xhtml#macro-define-compiler-macro">define-compiler-macro</a> arranges for destructuring of arguments to be   performed correctly for both possible formats. <br/></li><li> Naming of compiler macros   Compiler macros may be defined for function names that name macros as   well as functions.  It is not permitted to define a compiler macro for   names which are external symbols in the <a class="package-reference" href="../chapter-1.xhtml#package-common-lisp">common-lisp</a> package; see issue   <a class="issue-reference" href="../issues/lisp-symbol-redefinition.xhtml#issue-lisp-symbol-redefinition">lisp-symbol-redefinition</a>. <br/>  Compiler macro definitions are strictly global.  There is no provision   for defining local compiler macros in the way that <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-macrolet">macrolet</a> defines   local macros.  Lexical bindings of a function name shadow any compiler   macro definition associated with the name as well as its global   function or macro definition. <br/>  Note that the presence of a compiler macro definition does not affect   the values returned by FUNCTION-INFORMATION, or other accessors such   as <a class="function-reference" href="../chapter-5.xhtml#function-fboundp">fboundp</a> or <a class="function-reference" href="../chapter-3.xhtml#function-macroexpand">macroexpand</a>.  Compiler macros are global and the function   <a class="function-reference" href="../chapter-3.xhtml#function-compiler-macro-function">compiler-macro-function</a> is sufficient to resolve their interaction   with other lexical and global definitions. <br/></li><li> When compiler macros might/must/must not be used   The presence of a compiler macro definition for a function or macro   indicates that it is desirable for the compiler to use the expansion   of the compiler macro instead of the original function call or macro   call form.  However, it is not required for any language processor   (compiler, evaluator, or other code walker) to actually invoke compiler   macro functions, or to make use of the resulting expansion. <br/>  There two situations in which a compiler macro definition must not be   applied by any language processor: <br/>      <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> The global function name binding associated with the compiler         macro is shadowed by lexical rebinding of the function name. <br/>      <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> The function name has been declared or proclaimed <a class="symbol-reference" href="../chapter-3.xhtml#symbol-notinline">notinline</a> and         the call form appears within the scope of the declaration. <br/>  When a compiler macro function is called as part of processing by the   evaluator or compiler, it is invoked by calling the function that is   the value of <a class="variable-reference" href="../chapter-3.xhtml#variable-*macroexpand-hook*">*macroexpand-hook*</a>. <br/>  When <a class="function-reference" href="../chapter-24.xhtml#function-compile-file">compile-file</a> chooses to expand a top-level compiler macro call,   the expansion is also treated as a top-level form for the purposes of   <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-eval-when">eval-when</a> processing, in the same way as the expansion of an ordinary   macro. <br/><br/></li><li> Specification of <a class="macro-reference" href="../chapter-3.xhtml#macro-define-compiler-macro">define-compiler-macro</a>   <a class="macro-reference" href="../chapter-3.xhtml#macro-define-compiler-macro">define-compiler-macro</a> name lambda-list         [[ {declaration}* | doc-string ]] {form}*                [macro] <br/>  <a class="macro-reference" href="../chapter-3.xhtml#macro-define-compiler-macro">define-compiler-macro</a> is the normal mechanism for defining a compiler   macro function.  Its syntax resembles that of <a class="macro-reference" href="../chapter-3.xhtml#macro-defmacro">defmacro</a>.  The function   is defined in the lexical environment in which the <a class="macro-reference" href="../chapter-3.xhtml#macro-define-compiler-macro">define-compiler-macro</a>   form appears; see <span class="issue-reference error">issue:Issue DEFINING-MACROS-NON-TOP-LEVEL</span>. <br/>  The &lt;name&gt; must be a function name. <br/>  The &lt;lambda-list&gt; supports destructuring and may include <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-environment">&amp;ENVIRONMENT</a>   and <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-whole">&amp;WHOLE</a>, in the same way as a <a class="macro-reference" href="../chapter-3.xhtml#macro-defmacro">defmacro</a> lambda-list.  The <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-whole">&amp;WHOLE</a>   argument is bound to the form argument that is passed to the compiler   macro function.  The remaining lambda-list parameters are specified   as if this form contained the function name in the <a class="function-reference" href="../chapter-14.xhtml#function-car">car</a> and the actual   arguments in the <a class="function-reference" href="../chapter-14.xhtml#function-cdr">cdr</a>, but if the <a class="function-reference" href="../chapter-14.xhtml#function-car">car</a> of the actual form is the symbol   <a class="function-reference" href="../chapter-5.xhtml#function-funcall">funcall</a>, then the destructuring of the the arguments will actually be   performed using its <a class="function-reference" href="../chapter-14.xhtml#function-cddr">cddr</a> instead. <br/>  When a call to <a class="macro-reference" href="../chapter-3.xhtml#macro-define-compiler-macro">define-compiler-macro</a> appears at top-level in a file   being compiled by <a class="function-reference" href="../chapter-24.xhtml#function-compile-file">compile-file</a>, the compiler macro definition is made   known to the file compiler <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">analagous</span> <span class="syntax-interned-symbol">to</span> <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <span class="syntax-interned-symbol">way</span> <span class="syntax-interned-symbol">top-level</span> <a class="macro-reference" href="../chapter-3.xhtml#macro-defmacro">defmacro</a>
  <span class="syntax-interned-symbol">calls</span> <span class="syntax-interned-symbol">are</span> <span class="syntax-interned-symbol">handled</span>)</span>
</span></code></pre>. <br/><br/></li><li> Specification of <a class="function-reference" href="../chapter-3.xhtml#function-compiler-macro-function">compiler-macro-function</a>   <a class="function-reference" href="../chapter-3.xhtml#function-compiler-macro-function">compiler-macro-function</a> name &amp;optional env                       [function] <br/>  This is the accessor for the compiler macro definition associated   with a given name. <br/>  The &lt;name&gt; argument must be a function name.  If there is a compiler   macro definition associated with that name in the given environment   &lt;env&gt;, <a class="function-reference" href="../chapter-3.xhtml#function-compiler-macro-function">compiler-macro-function</a> returns that function; otherwise it   returns <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>. <br/>  If there is a local function or macro named &lt;name&gt; defined in the   environment &lt;env&gt;, this definition shadows any global compiler macro   definition for that &lt;name&gt; and <a class="function-reference" href="../chapter-3.xhtml#function-compiler-macro-function">compiler-macro-function</a> must return   <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>. <br/>  <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> may be used with <a class="function-reference" href="../chapter-3.xhtml#function-compiler-macro-function">compiler-macro-function</a> to install a compiler   macro function for the name &lt;name&gt;, analogously to using <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> on   <a class="function-reference" href="../chapter-3.xhtml#function-macro-function">macro-function</a>.  The value must be a function of two arguments, as   described above.  It is also permissible to provide a value of <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> to   remove any existing compiler macro definition.  The &lt;env&gt; argument to   <a class="function-reference" href="../chapter-3.xhtml#function-compiler-macro-function">compiler-macro-function</a> must be omitted when it appears as a <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a>   place. <br/><br/></li></ol></section><section class="status-passed proposal" id="issue-define-compiler-macro:new-facility"><h2 class="section-title">Proposal NEW-FACILITY</h2>Introduce a new facility by additions as follows: <br/>Macro: <br/><a class="macro-reference" href="../chapter-3.xhtml#macro-define-compiler-macro">define-compiler-macro</a> name lambda-list {doc-string} {declarations}* {form}* <br/>  This is just like <a class="macro-reference" href="../chapter-3.xhtml#macro-defmacro">defmacro</a> except the definition isn't stored in the   symbol function cell of 'name', and isn't seen by <a class="function-reference" href="../chapter-3.xhtml#function-macroexpand-1">macroexpand-1</a> (but   is seen by COMPILER-MACROEXPAND-1 &ndash; see below).  Like <a class="macro-reference" href="../chapter-3.xhtml#macro-defmacro">defmacro</a>, the   lambdalist may include <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-environment">&amp;ENVIRONMENT</a> and <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-whole">&amp;WHOLE</a>.  The definition is   "global"; there is no explicit provision for defining local compiler   macros in the way that <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-macrolet">macrolet</a> defines local macros. <br/>  A toplevel call to <a class="macro-reference" href="../chapter-3.xhtml#macro-define-compiler-macro">define-compiler-macro</a> in a file being compiled by   <a class="function-reference" href="../chapter-24.xhtml#function-compile-file">compile-file</a> has an effect on the compilation environment similar to   what a call to <a class="macro-reference" href="../chapter-3.xhtml#macro-defmacro">defmacro</a> would have, except it is noticed as a   "compiler macro". <br/>Function: <br/><a class="function-reference" href="../chapter-3.xhtml#function-compiler-macro-function">compiler-macro-function</a> name <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-optional">&amp;OPTIONAL</a> env <br/>  If 'name' is a symbol that has been defined as a compiler macro, then   calling <a class="function-reference" href="../chapter-3.xhtml#function-compiler-macro-function">compiler-macro-function</a> on it returns the macro expansion   function; otherwise it returns <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>.  'name' must be a symbol.  The   local lexical environment may override a global definition for 'name'   by defining a local function or local macro (such as by <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-flet">flet</a>,   <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-macrolet">macrolet</a>, etc.), in which case <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> is returned; the optional argument   'env' is provided so that clients may pass in &amp;environment objects for   this purpose. <br/>  <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> may be used with <a class="function-reference" href="../chapter-3.xhtml#function-compiler-macro-function">compiler-macro-function</a> to install a function as   the expansion function for the compiler macro 'name', analogously to   using <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> on <a class="function-reference" href="../chapter-3.xhtml#function-macro-function">macro-function</a>.  <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a>'ing to <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> removes any existing   compiler macro definition.  Like <a class="function-reference" href="../chapter-3.xhtml#function-macro-function">macro-function</a>, the <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> value <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-if">if</a> <a class="function-reference" href="../chapter-5.xhtml#function-not">not</a>
  <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>)</span>
</span></code></pre> must be a function of two arguments:  the entire macro call, and   the environment.  The second argument to <a class="function-reference" href="../chapter-3.xhtml#function-compiler-macro-function">compiler-macro-function</a> must   be omitted when it is SETFed. <br/>Functions: <br/>COMPILER-MACROEXPAND form <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-optional">&amp;OPTIONAL</a> env COMPILER-MACROEXPAND-1 form <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-optional">&amp;OPTIONAL</a> env <br/>  This is just like <a class="function-reference" href="../chapter-3.xhtml#function-macroexpand">macroexpand</a> and <a class="function-reference" href="../chapter-3.xhtml#function-macroexpand-1">macroexpand-1</a> (see CLtL p.151)   except that the expander function is obtained as if by a call to   <a class="function-reference" href="../chapter-3.xhtml#function-compiler-macro-function">compiler-macro-function</a> on the <a class="function-reference" href="../chapter-14.xhtml#function-car">car</a> of 'form' rather than by a call to   <a class="function-reference" href="../chapter-3.xhtml#function-macro-function">macro-function</a>.  There are three cases wherein no expansion happens: <br/><ol><li> There is no compiler macro definition for the <a class="function-reference" href="../chapter-14.xhtml#function-car">car</a> of 'form'; </li><li> There is such a definition but there is also a <a class="symbol-reference" href="../chapter-3.xhtml#symbol-notinline">notinline</a>  declaration, either globally or in the lexical environment 'env'; </li><li> A global compiler macro definition is shadowed by a local  function or macro definition (such as by <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-flet">flet</a>, <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-labels">labels</a>, or <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-macrolet">macrolet</a>). <br/></li></ol>  Note that if there is no expansion, the original form is returned as   the first value, and <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> as the second value. <br/>  When COMPILER-MACROEXPAND-1 discovers that there is to be an expansion   it does it by calling the function in <a class="variable-reference" href="../chapter-3.xhtml#variable-*macroexpand-hook*">*macroexpand-hook*</a> (see CltL p.152). <br/>The purpose of this facility is to permit selective source-code transformations based on whether the compiler is processing the code. When the compiler is about to compile a nonatomic form, it first calls COMPILER-MACROEXPAND-1 repeatedly until there is no more expansion <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">there</span> <span class="syntax-interned-symbol">might</span> <a class="function-reference" href="../chapter-5.xhtml#function-not">not</a> <span class="syntax-interned-symbol">be</span> <span class="syntax-interned-symbol">any</span> <span class="syntax-interned-symbol">to</span> <span class="syntax-interned-symbol">begin</span> <span class="syntax-interned-symbol">with</span>)</span>
</span></code>.  Then it continues its remaining processing, which may include calling <a class="function-reference" href="../chapter-3.xhtml#function-macroexpand-1">macroexpand-1</a> etc. <br/>The compiler is required to expand compiler macros; it is unspecified whether the interpreter does so.  The intention is that only the compiler will do so, but the range of possible "compiled-only" implementation strategies precludes any firm specification. <br/>Note that a compiler macro may decline to provide any expansion merely by returning the original form; this is useful when using the facility to put "compiler optimizers" on various function names.  For example, here is a compiler macro that "optimizes" the 0<a class="function-reference" href="../chapter-12.xhtml#function--">-</a> and 1-argument cases of a function called PLUS: <br/>    <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-3.xhtml#macro-define-compiler-macro">define-compiler-macro</a> <span class="syntax-interned-symbol">plus</span> <span class="syntax-cons">(<a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-whole">&amp;WHOLE</a> <span class="syntax-interned-symbol">form</span> <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-rest">&amp;REST</a> <span class="syntax-interned-symbol">args</span>)</span>
        <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-case">case</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-17.xhtml#function-length">length</a> <span class="syntax-interned-symbol">args</span>)</span>
            <span class="syntax-cons">(<span class="syntax-number">0</span> <span class="syntax-number">0</span>)</span>
            <span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-car">car</a> <span class="syntax-interned-symbol">args</span>)</span>)</span>
            <span class="syntax-cons">(<a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> <span class="syntax-interned-symbol">form</span>)</span>)</span>)</span>
</span></code></pre> <br/>The <a class="issue-reference" href="../issues/lisp-symbol-redefinition.xhtml#issue-lisp-symbol-redefinition">X3J13 Issue LISP-SYMBOL-REDEFINITION</a> precludes user definition of any compiler macros for symbols external in the Lisp package that have a definition as a function, macro, or special form. <br/>Note that compiler macros do not appear in information returned by FUNCTION-INFORMATION; they are global, and their interaction with other lexical and global definitions can be reconstructed by <a class="function-reference" href="../chapter-3.xhtml#function-compiler-macro-function">compiler-macro-function</a>.  It is up to code-walking programs to decide whether to invoke compiler macro expansion. <br/><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>Many implementations have it.  Many users have requested a way to add source-code "optimizers" to the compiler. <br/>Other than <a class="declaration-reference" href="../chapter-3.xhtml#declaration-inline">inline</a> declarations for functions there is no other way to customize how calls to a specific function are compiled.  <a class="macro-reference" href="../chapter-3.xhtml#macro-defmacro">defmacro</a> is not usable for this purpose since it requires use of the <a class="function-reference" href="../chapter-10.xhtml#function-symbol-function">symbol-function</a> cell, which would prevent the functional definition from being active in the compilation environment. <br/><br/></section></section><section id="section-Current Practice" class="section"><h2 class="section-title">Current Practice</h2>Lucid, Franz, and Symbolics have very similar facilities.  Hunoz about the others? <br/></section><section id="section-Cost to Implementors" class="section"><h2 class="section-title">Cost to Implementors</h2>Minor: implement a method for storing named expansion functions, and tweak the compiler in one or two places. <br/></section><section id="section-Cost to Users" class="section"><h2 class="section-title">Cost to Users</h2>None.  This is an upward-compatible addition. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>Increased portability for clients of the existing facilities. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>There has been extensive discussion under the <span class="issue-reference error">issue:Issue DEFINE-OPTIMIZER</span>. &mdash;&mdash;<a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <br/></section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>