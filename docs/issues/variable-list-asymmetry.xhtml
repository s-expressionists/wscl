<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp — VARIABLE-LIST-ASYMMETRY</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">VARIABLE-LIST-ASYMMETRY</span><br/><ol class="local-toc"><li><a href="#section-Status">Status</a><ol> </ol></li><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit history">Edit history</a><ol> </ol></li><li><a href="#section-Problem Description">Problem Description</a><ol> </ol></li><li><a href="#issue-variable-list-asymmetry:symmetrize">Proposal SYMMETRIZE</a><ol> </ol></li><li><a href="#section-Test Cases">Test Cases</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Current Practice">Current Practice</a><ol> </ol></li><li><a href="#section-Cost to Implementors">Cost to Implementors</a><ol> </ol></li><li><a href="#section-Cost to Users">Cost to Users</a><ol> </ol></li><li><a href="#section-Cost of Non-Adoption">Cost of Non-Adoption</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Aesthetics">Aesthetics</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue VARIABLE-LIST-ASYMMETRY [NIL] [ADDITION]</h1><section id="section-Status" class="status-passed section"><h2 class="section-title">Status</h2>Passed, Jan 89 X3J13 </section><section id="section-References" class="section"><h2 class="section-title">References</h2>CLtL pgs. 110, 122, 131 </section><section id="section-Edit history" class="section"><h2 class="section-title">Edit history</h2>26-Jul-88, Version 1 by Skona Brittain 04-Aug-88, Version 2 by Skona Brittain 08-Oct-88, Version 3 by Pitman </section><section id="section-Problem Description" class="section"><h2 class="section-title">Problem Description</h2> The syntax of items in the variable-list for various control structues  (do, do*, let, let*, prog, prog*, and compiler-let) varies.  This  variation seems unnecessary. <br/> The allowed variations are indicated in the following chart: <br/> do &amp; do*:             <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">var</span>)</span>
</span></code>    <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">var</span> <span class="syntax-interned-symbol">init</span>)</span>
</span></code>    <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">var</span> <span class="syntax-interned-symbol">init</span> <a class="macro-reference" href="../chapter-25.xhtml#macro-step">step</a>)</span>
</span></code>  prog &amp; prog*:   var   <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">var</span>)</span>
</span></code>    <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">var</span> <span class="syntax-interned-symbol">init</span>)</span>
</span></code>       n.a.  let &amp; let*:     var            <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">var</span> <span class="syntax-interned-symbol">val</span>)</span>
</span></code>        n.a.  compiler-let    var            <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">var</span> <span class="syntax-interned-symbol">value</span>)</span>
</span></code> <br/> Note that just plain `` var '' is prohibited in do forms  and that the case of ``<code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">var</span>)</span>
</span></code>'' is prohibited in let forms  and compiler-let forms. <br/></section><section class="status-passed proposal" id="issue-variable-list-asymmetry:symmetrize"><h2 class="section-title">Proposal SYMMETRIZE</h2> Allow all the variations in all of the forms;  i.e. add the prohibited cases mentioned above. <br/> I.e. change the variable-list in the syntax descriptions as follows: <br/>  do &amp; do*:     <code><span class="syntax-root"><span class="syntax-cons">( <span class="syntax-interned-symbol">{</span> <span class="syntax-interned-symbol">var</span> <span class="syntax-interned-symbol">| (var [init [step]] ) }* )
¶</span></span></span></code>   let &amp; let*:   <code><span class="syntax-root"><span class="syntax-cons">( <span class="syntax-interned-symbol">{</span> <span class="syntax-interned-symbol">var</span> <span class="syntax-interned-symbol">| (var [value]       ) }* )
¶</span></span></span></code>   compiler-let: <code><span class="syntax-root"><span class="syntax-cons">( <span class="syntax-interned-symbol">{</span> <span class="syntax-interned-symbol">var</span> <span class="syntax-interned-symbol">| (var [value]       ) }* )
¶</span></span></span></code> <br/></section><section id="section-Test Cases" class="section"><h2 class="section-title">Test Cases</h2><pre> <code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a>          <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">b</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">c</span> <span class="syntax-number">3</span>)</span>)</span> <span class="syntax-interned-symbol">...</span> )</span>
</span></code>  would be valid.<br/> <code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let*">let*</a>         <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">b</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">c</span> <span class="syntax-number">3</span>)</span>)</span> <span class="syntax-interned-symbol">...</span> )</span>
</span></code>  would be valid.<br/> <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-6.xhtml#macro-do">do</a>           <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">b</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">c</span> <span class="syntax-number">3</span>)</span>)</span> <span class="syntax-interned-symbol">...</span> )</span>
</span></code>  would be valid.<br/> <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-6.xhtml#macro-do*">do*</a>          <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">b</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">c</span> <span class="syntax-number">3</span>)</span>)</span> <span class="syntax-interned-symbol">...</span> )</span>
</span></code>  would be valid.<br/> <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">compiler-let</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">b</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">c</span> <span class="syntax-number">3</span>)</span>)</span> <span class="syntax-interned-symbol">...</span> )</span>
</span></code>  would be valid.<br/><br/></pre></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2> The asymmetry is unnecessary and impedes learning of <a class="package-reference" href="../chapter-11.xhtml#package-cl">cl</a>. <br/> Any other way to make these cases consistent, such as either  omitting just ``var'' from do &amp; do* and prog &amp; prog*, or  omitting ``<code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">var</span>)</span>
</span></code>'' from let &amp; let* and prog &amp; prog*,   would be an incompatible change to the language.    This way just adds the flexibility found in some of the forms to all of them. <br/></section><section id="section-Current Practice" class="section"><h2 class="section-title">Current Practice</h2> KCL allows ``<code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">var</span>)</span>
</span></code>'' in let &amp; let* but not ``var'' in do &amp; do*. <br/> Symbolics Genera allows all three cases in all the forms; i.e. it conforms  to this proposal. <br/></section><section id="section-Cost to Implementors" class="section"><h2 class="section-title">Cost to Implementors</h2> Extremely slight. (May involve subtracting code rather than adding it). <br/></section><section id="section-Cost to Users" class="section"><h2 class="section-title">Cost to Users</h2> None. <br/></section><section id="section-Cost of Non-Adoption" class="section"><h2 class="section-title">Cost of Non-Adoption</h2> The variation in syntax makes them harder to learn. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2> Ease of learning. <br/></section><section id="section-Aesthetics" class="section"><h2 class="section-title">Aesthetics</h2> Symmetry is more aesthetic than asymmetry, at least to some of us. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2> Pitman supports this proposal. <br/> The issue about whether the atomic ``var'' should be allowed at all in the   variable lists for let &amp; let* is a separate issue.  (So is whether  it should mean that the var is initially bound to nil.)  Since it is allowed,   this proposal merely says that the alternative syntax of an atom within a   list with no initial value, ``<code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">var</span>)</span>
</span></code>'', should also be allowed. </section></div></main><footer>Copyright © 2021 Jan Moringen</footer></body></html>