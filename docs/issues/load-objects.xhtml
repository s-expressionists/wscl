<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” LOAD-OBJECTS</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">LOAD-OBJECTS</span><br/><ol class="local-toc"><li><a href="#section-Status">Status</a><ol> </ol></li><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit history">Edit history</a><ol> </ol></li><li><a href="#section-Problem description">Problem description</a><ol> </ol></li><li><a href="#issue-load-objects:make-load-form">Proposal MAKE-LOAD-FORM</a><ol> </ol></li><li><a href="#section-Examples">Examples</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Current practice">Current practice</a><ol> </ol></li><li><a href="#section-Cost to Implementors">Cost to Implementors</a><ol> </ol></li><li><a href="#section-Cost to Users">Cost to Users</a><ol> </ol></li><li><a href="#section-Cost of non-adoption">Cost of non-adoption</a><ol> </ol></li><li><a href="#section-Performance impact">Performance impact</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Esthetics">Esthetics</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue LOAD-OBJECTS [Cleanup] [ADDITION]</h1><h2>Related issues</h2><ul><span class="issue-reference error">issue:LOAD-TIME-EVAL</span><span class="issue-reference error">issue:CONSTANT-COMPILABLE-TYPES</span><span class="issue-reference error">issue:CONSTANT-CIRCULAR-COMPILATION</span></ul><section id="section-Status" class="status-passed section"><h2 class="section-title">Status</h2>Passed, as amended, Mar 89 X3J13 (18-0 vote) </section><section id="section-References" class="section"><h2 class="section-title">References</h2>none </section><section id="section-Edit history" class="section"><h2 class="section-title">Edit history</h2>Version 1, 2-Jan-89, by Moon (for discussion) Version 2, 13-Jan-89, by Moon (draft updated from discussion) Version 3,  9-Mar-89, by Moon (changes suggested by discussion) Version 4, 4-Apr-89, by Pitman (changes per X3J13 Mar 89;  MAKE-LOAD-FORM-USING-SLOTS <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; <a class="function-reference" href="../chapter-7.xhtml#function-make-load-form-saving-slots">make-load-form-saving-slots</a>) </section><section id="section-Problem description" class="section"><h2 class="section-title">Problem description</h2>  Common Lisp doesn't provide any way to use an object of a user-defined   type <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">defined</span> <span class="syntax-interned-symbol">with</span> <a class="macro-reference" href="../chapter-7.xhtml#macro-defclass">defclass</a> <a class="macro-reference" href="../chapter-5.xhtml#macro-or">or</a> <a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">defstruct</a>)</span>
</span></code> as a constant in a program   compiled with <a class="function-reference" href="../chapter-24.xhtml#function-compile-file">compile-file</a>.  The problem is that <a class="function-reference" href="../chapter-24.xhtml#function-load">load</a> has to be able   to "reconstruct" an equivalent object when the compiled-code file is   loaded, but the programmer has no way to tell <a class="function-reference" href="../chapter-24.xhtml#function-load">load</a> how to do that. <br/></section><section class="status-passed proposal" id="issue-load-objects:make-load-form"><h2 class="section-title">Proposal MAKE-LOAD-FORM</h2>  Define a new generic function named <a class="function-reference" href="../chapter-7.xhtml#function-make-load-form">make-load-form</a>, which takes one   argument and returns two values.  The argument is an object that is   referenced as a constant or as a self-evaluating form in a file being   compiled by <a class="function-reference" href="../chapter-24.xhtml#function-compile-file">compile-file</a>.  The objective is to enable <a class="function-reference" href="../chapter-24.xhtml#function-load">load</a> to   construct an equivalent object. <br/>  The first value, called the "creation form," is a form that, when   evaluated at load time, should return an object that is equivalent to   the argument.  The exact meaning of "equivalent" depends on the type   of object and is up to the programmer who defines a method for   <a class="function-reference" href="../chapter-7.xhtml#function-make-load-form">make-load-form</a>.  This is the same type of equivalence discussed   in <span class="issue-reference error">issue:Issue CONSTANT-COMPILABLE-TYPES</span>. <br/>  The second value, called the "initialization form," is a form that,   when evaluated at load time, should perform further initialization of   the object.  The value returned by the initialization form is ignored.   If the <a class="function-reference" href="../chapter-7.xhtml#function-make-load-form">make-load-form</a> method returns only one value, the   initialization form is <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>, which has no effect.  If the object used   as the argument to <a class="function-reference" href="../chapter-7.xhtml#function-make-load-form">make-load-form</a> appears as a constant in the   initialization form, at load time it will be replaced by the   equivalent object constructed by the creation form; this is how the   further initialization gains access to the object. <br/>  Both the creation form and the initialization form can contain   references to objects of user-defined types <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">defined</span> <span class="syntax-interned-symbol">precisely</span> <span class="syntax-interned-symbol">below</span>)</span>
</span></code>.   However, there must not be any circular dependencies in creation forms.   An example of a circular dependency is when the creation form for the   object X contains a reference to the object Y, and the creation form   for the object Y contains a reference to the object X.  A simpler   example would be when the creation form for the object X contains   a reference to X itself.  Initialization forms are not subject to   any restriction against circular dependencies, which is the entire   reason that initialization forms exist.  See the example of circular   data structures below. <br/>  The creation form for an object is always evaluated before the   initialization form for that object.  When either the creation form or   the initialization form references other objects of user-defined types   that have not been referenced earlier in the <a class="function-reference" href="../chapter-24.xhtml#function-compile-file">compile-file</a>, the   compiler collects all of the creation and initialization forms.  Each   initialization form is evaluated as soon as possible after its   creation form, as determined by data flow.  If the initialization form   for an object does not reference any other objects of user-defined   types that have not been referenced earlier in the <a class="function-reference" href="../chapter-24.xhtml#function-compile-file">compile-file</a>, the   initialization form is evaluated immediately after the creation form.   If a creation or initialization form F references other objects of   user-defined types that have not been referenced earlier in the   <a class="function-reference" href="../chapter-24.xhtml#function-compile-file">compile-file</a>, the creation forms for those other objects are evaluated   before F, and the initialization forms for those other objects are   also evaluated before F whenever they do not depend on the object   created or initialized by F.  Where the above rules do not uniquely   determine an order of evaluation, which of the possible orders of   evaluation is chosen is unspecified. <br/>  While these creation and initialization forms are being evaluated, the   objects are possibly in an uninitialized state, analogous to the state   of an object between the time it has been created by <a class="function-reference" href="../chapter-7.xhtml#function-allocate-instance">allocate-instance</a>   and it has been processed fully by <a class="function-reference" href="../chapter-7.xhtml#function-initialize-instance">initialize-instance</a>.  Programmers   writing methods for <a class="function-reference" href="../chapter-7.xhtml#function-make-load-form">make-load-form</a> must take care in manipulating   objects not to depend on slots that have not yet been initialized. <br/>  It is unspecified whether <a class="function-reference" href="../chapter-24.xhtml#function-load">load</a> calls <a class="function-reference" href="../chapter-3.xhtml#function-eval">eval</a> on the forms or does some   other operation that has an equivalent effect.  For example, the   forms might be translated into different but equivalent forms and   then evaluated, they might be compiled and the resulting functions   called by <a class="function-reference" href="../chapter-24.xhtml#function-load">load</a>, or they might be interpreted by a special-purpose   interpreter different from <a class="function-reference" href="../chapter-3.xhtml#function-eval">eval</a>.  All that is required is that the   effect be equivalent to evaluating the forms. <br/>  <a class="function-reference" href="../chapter-24.xhtml#function-compile-file">compile-file</a> calls <a class="function-reference" href="../chapter-7.xhtml#function-make-load-form">make-load-form</a> on any object that is referenced as   a constant or as a self-evaluating form, if the object's metaclass is   <a class="type-reference" href="../chapter-4.xhtml#type-standard-class">standard-class</a>, <a class="type-reference" href="../chapter-4.xhtml#type-structure-class">structure-class</a>, any user-defined metaclass <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-not">not</a> <span class="syntax-interned-symbol">a</span>
  <span class="syntax-interned-symbol">subclass</span> <span class="syntax-interned-symbol">of</span> <a class="type-reference" href="../chapter-4.xhtml#type-built-in-class">built-in-class</a>)</span>
</span></code></pre>, or any of a possibly-empty   <a class="glossary-reference" href="../chapter-26.xhtml#glossary-implementation-defined">implementation-defined</a> list of other metaclasses.  <a class="function-reference" href="../chapter-24.xhtml#function-compile-file">compile-file</a> will   only call <a class="function-reference" href="../chapter-7.xhtml#function-make-load-form">make-load-form</a> once for any given object <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">compared</span> <span class="syntax-interned-symbol">with</span> <a class="function-reference" href="../chapter-5.xhtml#function-eq">eq</a>)</span>
</span></code>   within a single file. <br/>  It is valid for user programs to call <a class="function-reference" href="../chapter-7.xhtml#function-make-load-form">make-load-form</a> in other   circumstances, providing the argument's metaclass is not <a class="type-reference" href="../chapter-4.xhtml#type-built-in-class">built-in-class</a>   or a subclass of <a class="type-reference" href="../chapter-4.xhtml#type-built-in-class">built-in-class</a>. <br/>  Define a new function named <a class="function-reference" href="../chapter-7.xhtml#function-make-load-form-saving-slots">make-load-form-saving-slots</a>, which takes   one required argument and one optional argument and returns two   values.  This can be useful in user-written <a class="function-reference" href="../chapter-7.xhtml#function-make-load-form">make-load-form</a> methods.   The first argument is the object.  The optional second argument is a   list of the names of the slots to preserve; it defaults to all of the   local slots.  <a class="function-reference" href="../chapter-7.xhtml#function-make-load-form-saving-slots">make-load-form-saving-slots</a> returns forms that construct   an equivalent object using <a class="function-reference" href="../chapter-7.xhtml#function-make-instance">make-instance</a> and <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> of <a class="function-reference" href="../chapter-7.xhtml#function-slot-value">slot-value</a> for   slots with values, or <a class="function-reference" href="../chapter-7.xhtml#function-slot-makunbound">slot-makunbound</a> for slots without values, or   using other functions of equivalent effect.   <a class="function-reference" href="../chapter-7.xhtml#function-make-load-form-saving-slots">make-load-form-saving-slots</a> returns two values, thus it can deal with   circular structures.  <a class="function-reference" href="../chapter-7.xhtml#function-make-load-form-saving-slots">make-load-form-saving-slots</a> works for any object   of metaclass <a class="type-reference" href="../chapter-4.xhtml#type-standard-class">standard-class</a> or <a class="type-reference" href="../chapter-4.xhtml#type-structure-class">structure-class</a>.  Whether the result is   useful in an application depends on whether the object's type and slot   contents fully capture the application's idea of the object's state. <br/>  <a class="function-reference" href="../chapter-7.xhtml#function-make-load-form">make-load-form</a> of an object of metaclass <a class="type-reference" href="../chapter-4.xhtml#type-standard-class">standard-class</a> or   <a class="type-reference" href="../chapter-4.xhtml#type-structure-class">structure-class</a> for which no user-defined method is applicable signals   an error.  It is valid to implement this either by defining default   methods on <a class="type-reference" href="../chapter-4.xhtml#type-standard-object">standard-object</a> and <a class="type-reference" href="../chapter-4.xhtml#type-structure-object">structure-object</a> that signal an error   or by having no applicable method for those classes. <br/></section><section id="section-Examples" class="section"><h2 class="section-title">Examples</h2><pre>  ;; Example 1<br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-7.xhtml#macro-defclass">defclass</a> <span class="syntax-interned-symbol">my-class</span> <span class="syntax-symbol">()</span>
     <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-keyword-symbol">:initarg</span> <span class="syntax-keyword-symbol">:a</span> <span class="syntax-keyword-symbol">:reader</span> <span class="syntax-interned-symbol">my-a</span>)</span>
      <span class="syntax-cons">(<span class="syntax-interned-symbol">b</span> <span class="syntax-keyword-symbol">:initarg</span> <span class="syntax-keyword-symbol">:b</span> <span class="syntax-keyword-symbol">:reader</span> <span class="syntax-interned-symbol">my-b</span>)</span>
      <span class="syntax-cons">(<span class="syntax-interned-symbol">c</span> <span class="syntax-keyword-symbol">:accessor</span> <span class="syntax-interned-symbol">my-c</span>)</span>)</span>)</span>
</span></code></pre><br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-7.xhtml#macro-defmethod">defmethod</a> <a class="function-reference" href="../chapter-7.xhtml#function-shared-initialize">shared-initialize</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">self</span> <span class="syntax-interned-symbol">my-class</span>)</span> <a class="declaration-reference" href="../chapter-3.xhtml#declaration-ignore">ignore</a> <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-rest">&amp;REST</a> <a class="declaration-reference" href="../chapter-3.xhtml#declaration-ignore">ignore</a>)</span>
    <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-unless">unless</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-7.xhtml#function-slot-boundp">slot-boundp</a> <span class="syntax-interned-symbol">self</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">c</span></span>)</span>
      <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">my-c</span> <span class="syntax-interned-symbol">self</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">some-computation</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">my-a</span> <span class="syntax-interned-symbol">self</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">my-b</span> <span class="syntax-interned-symbol">self</span>)</span>)</span>)</span>)</span>)</span>
</span></code></pre><br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-7.xhtml#macro-defmethod">defmethod</a> <a class="function-reference" href="../chapter-7.xhtml#function-make-load-form">make-load-form</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">self</span> <span class="syntax-interned-symbol">my-class</span>)</span>)</span>
    <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="function-reference" href="../chapter-7.xhtml#function-make-instance">make-instance</a> <span class="syntax-quote">'<span class="syntax-unquote">,<span class="syntax-cons">(<a class="function-reference" href="../chapter-7.xhtml#function-class-name">class-name</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-7.xhtml#function-class-of">class-of</a> <span class="syntax-interned-symbol">self</span>)</span>)</span></span></span>
                    <span class="syntax-keyword-symbol">:a</span> <span class="syntax-quote">'<span class="syntax-unquote">,<span class="syntax-cons">(<span class="syntax-interned-symbol">my-a</span> <span class="syntax-interned-symbol">self</span>)</span></span></span> <span class="syntax-keyword-symbol">:b</span> <span class="syntax-quote">'<span class="syntax-unquote">,<span class="syntax-cons">(<span class="syntax-interned-symbol">my-b</span> <span class="syntax-interned-symbol">self</span>)</span></span></span>)</span></span>)</span>
</span></code></pre><br/><br/>  In this example, an equivalent instance of my-class is reconstructed<br/>  by using the values of two of its slots.  The value of the third slot<br/>  is derived from those two values.<br/><br/>  Another way to write the last form in the above example would have been<br/><br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-7.xhtml#macro-defmethod">defmethod</a> <a class="function-reference" href="../chapter-7.xhtml#function-make-load-form">make-load-form</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">self</span> <span class="syntax-interned-symbol">my-class</span>)</span>)</span>
     <span class="syntax-cons">(<a class="function-reference" href="../chapter-7.xhtml#function-make-load-form-saving-slots">make-load-form-saving-slots</a> <span class="syntax-interned-symbol">self</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span>)</span></span>)</span>)</span>
</span></code></pre><br/><br/>  ;; Example 2<br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-7.xhtml#macro-defclass">defclass</a> <span class="syntax-interned-symbol">my-frob</span> <span class="syntax-symbol">()</span>
     <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">name</span> <span class="syntax-keyword-symbol">:initarg</span> <span class="syntax-keyword-symbol">:name</span> <span class="syntax-keyword-symbol">:reader</span> <span class="syntax-interned-symbol">my-name</span>)</span>)</span>)</span>
</span></code></pre><br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-7.xhtml#macro-defmethod">defmethod</a> <a class="function-reference" href="../chapter-7.xhtml#function-make-load-form">make-load-form</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">self</span> <span class="syntax-interned-symbol">my-frob</span>)</span>)</span>
    <span class="syntax-quasiquote">`<span class="syntax-cons">(<span class="syntax-interned-symbol">find-my-frob</span> <span class="syntax-quote">'<span class="syntax-unquote">,<span class="syntax-cons">(<span class="syntax-interned-symbol">my-name</span> <span class="syntax-interned-symbol">self</span>)</span></span></span> <span class="syntax-keyword-symbol">:if-does-not-exist</span> <span class="syntax-keyword-symbol">:create</span>)</span></span>)</span>
</span></code></pre><br/><br/>  In this example, instances of my-frob are "interned" in some way.<br/>  An equivalent instance is reconstructed by using the value of the<br/>  name slot as a key for searching existing objects.  In this case<br/>  the programmer has chosen to create a new object if no existing<br/>  object is found; alternatively she could have chosen to signal an<br/>  error in that case.<br/><br/>  ;; Example 3<br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-7.xhtml#macro-defclass">defclass</a> <span class="syntax-interned-symbol">tree-with-parent</span> <span class="syntax-symbol">()</span> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">parent</span> <span class="syntax-keyword-symbol">:accessor</span> <span class="syntax-interned-symbol">tree-parent</span>)</span>
                                 <span class="syntax-cons">(<span class="syntax-interned-symbol">children</span> <span class="syntax-keyword-symbol">:initarg</span> <span class="syntax-keyword-symbol">:children</span>)</span>)</span>)</span>
</span></code></pre><br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-7.xhtml#macro-defmethod">defmethod</a> <a class="function-reference" href="../chapter-7.xhtml#function-make-load-form">make-load-form</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">tree-with-parent</span>)</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-values">values</a>
      <span class="syntax-line-comment syntax-comment">;; creation form
</span>      <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="function-reference" href="../chapter-7.xhtml#function-make-instance">make-instance</a> <span class="syntax-quote">'<span class="syntax-unquote">,<span class="syntax-cons">(<a class="function-reference" href="../chapter-7.xhtml#function-class-of">class-of</a> <span class="syntax-interned-symbol">x</span>)</span></span></span> <span class="syntax-keyword-symbol">:children</span> <span class="syntax-quote">'<span class="syntax-unquote">,<span class="syntax-cons">(<a class="function-reference" href="../chapter-7.xhtml#function-slot-value">slot-value</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">children</span></span>)</span></span></span>)</span></span>
      <span class="syntax-line-comment syntax-comment">;; initialization form
</span>      <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">tree-parent</span> <span class="syntax-quote">'<span class="syntax-unquote">,<span class="syntax-interned-symbol">x</span></span></span>)</span> <span class="syntax-quote">'<span class="syntax-unquote">,<span class="syntax-cons">(<a class="function-reference" href="../chapter-7.xhtml#function-slot-value">slot-value</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">parent</span></span>)</span></span></span>)</span></span>)</span>)</span>
</span></code></pre><br/><br/>  In this example, the data structure to be dumped is circular, because<br/>  each parent has a list of its children and each child has a reference<br/>  back to its parent.  Suppose <a class="function-reference" href="../chapter-7.xhtml#function-make-load-form">make-load-form</a> is called on one object in<br/>  such a structure.  The creation form creates an equivalent object and<br/>  fills in the children slot, which forces creation of equivalent<br/>  objects for all of its children, grandchildren, etc.  At this point<br/>  none of the parent slots have been filled in.  The initialization form<br/>  fills in the parent slot, which forces creation of an equivalent<br/>  object for the parent if it was not already created.  Thus the entire<br/>  tree is recreated at load time.  At compile time, <a class="function-reference" href="../chapter-7.xhtml#function-make-load-form">make-load-form</a> is<br/>  called once for each object in the true.  All of the creation forms<br/>  are evaluated, in unspecified order, and then all of the<br/>  initialization forms are evaluated, also in unspecified order.<br/><br/>  ;; Example 4<br/>  <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">defstruct</a> <span class="syntax-interned-symbol">my-struct</span> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span>)</span>
</span></code><br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-7.xhtml#macro-defmethod">defmethod</a> <a class="function-reference" href="../chapter-7.xhtml#function-make-load-form">make-load-form</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">s</span> <span class="syntax-interned-symbol">my-struct</span>)</span>)</span>
     <span class="syntax-cons">(<a class="function-reference" href="../chapter-7.xhtml#function-make-load-form-saving-slots">make-load-form-saving-slots</a> <span class="syntax-interned-symbol">s</span>)</span>)</span>
</span></code></pre><br/><br/>  In this example, the data structure to be dumped has no special<br/>  properties and an equivalent structure can be reconstructed<br/>  simply by reconstructing the slots' contents.<br/><br/></pre></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>  Only the programmer who designed a class can know the correct   way to reconstruct objects of that class at load time, therefore   the reconstruction should be controlled by a generic function.   Using <a class="function-reference" href="../chapter-3.xhtml#function-eval">eval</a> as the interface for telling <a class="function-reference" href="../chapter-24.xhtml#function-load">load</a> what to do provides   full generality. <br/>  <a class="function-reference" href="../chapter-7.xhtml#function-make-load-form">make-load-form</a> returns two values so that circular structures can   be handled.  If CONSTANT-CIRCULAR-COMPILATION is rejected,   <a class="function-reference" href="../chapter-7.xhtml#function-make-load-form">make-load-form</a> will only return one value, although implementations   that make an extension to support circular constants will probably   also make the extension to accept two values from <a class="function-reference" href="../chapter-7.xhtml#function-make-load-form">make-load-form</a>. <br/>  The default for class objects and structures is to signal an error,   rather than picking some particular object reconstruction technique,   because no reconstruction technique is appropriate for all objects.   It only takes two lines of code, as in example 4, to instruct the   compiler to use the technique that most often has been suggested   as the default. <br/>  <a class="function-reference" href="../chapter-7.xhtml#function-make-load-form">make-load-form</a> has a natural resemblance to <a class="function-reference" href="../chapter-22.xhtml#function-print-object">print-object</a>, as a hook   for the programmer to control the system's actions. <br/>  The order of evaluation rules for creation and initialization forms   eliminate the possibility of partially initialized objects in the   absence of circular structures, and reduce it to the minimum possible   in the presence of circular structures.  This allows nodes in   non-circular structures to be built out of fully initialized subparts. <br/></section><section id="section-Current practice" class="section"><h2 class="section-title">Current practice</h2>  Symbolics Flavors has something like this, but under a different name.   The name Symbolics uses is not suitable for standardization. <br/>  JonL reports that Lucid is getting more and more requests for this. <br/></section><section id="section-Cost to Implementors" class="section"><h2 class="section-title">Cost to Implementors</h2>  This seems like only a few one-line changes in the compiled-code   file writer and reader.  <a class="function-reference" href="../chapter-7.xhtml#function-make-load-form-saving-slots">make-load-form-saving-slots</a> is a couple   dozen lines of code, assuming the presence of the CLOS metaobject   protocol or an <a class="glossary-reference" href="../chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a> equivalent. <br/></section><section id="section-Cost to Users" class="section"><h2 class="section-title">Cost to Users</h2>  None. <br/></section><section id="section-Cost of non-adoption" class="section"><h2 class="section-title">Cost of non-adoption</h2>  Serious impairment of the ability to use extended-type objects.  Each   implementation will probably make up its own version of this as an   extension. <br/></section><section id="section-Performance impact" class="section"><h2 class="section-title">Performance impact</h2>  None. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>  See Cost of non-adoption. <br/></section><section id="section-Esthetics" class="section"><h2 class="section-title">Esthetics</h2>  No significant positive or negative impact. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>  It would be possible to define an additional level of protocol that   allows multiple classes to contribute to the reconstruction of an   object, combining initialization arguments contributed by each class.   Since a user can easily define that in terms of <a class="function-reference" href="../chapter-7.xhtml#function-make-load-form">make-load-form</a> without   modifying the Lisp system, it is not being proposed now. <br/>  Any type that has a read syntax is likely to appear as a quoted   constant or inside a quoted constant.  Pathnames are one example, user   programs often define others.  Also many implementations provide a way   to create a compiled-code file full of data (rather than compiled Lisp   programs), and such data probably include extended-type objects. <br/>  Moon supports this.  David Gray and John Rose made major contributions   to the discussion that produced this improved version 2 proposal. </section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>