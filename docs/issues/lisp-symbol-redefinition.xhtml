<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” LISP-SYMBOL-REDEFINITION</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">LISP-SYMBOL-REDEFINITION</span><br/><ol class="local-toc"><li><a href="#section-Status">Status</a><ol> </ol></li><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit history">Edit history</a><ol> </ol></li><li><a href="#section-Problem description">Problem description</a><ol> </ol></li><li><a href="#issue-lisp-symbol-redefinition:mar89-x3j13">Proposal MAR89-X3J13</a><ol> </ol></li><li><a href="#section-Examples">Examples</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Current practice">Current practice</a><ol> </ol></li><li><a href="#section-Cost to Implementors">Cost to Implementors</a><ol> </ol></li><li><a href="#section-Cost to Users">Cost to Users</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Cost of non-adoption">Cost of non-adoption</a><ol> </ol></li><li><a href="#section-Esthetics">Esthetics</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue LISP-SYMBOL-REDEFINITION [Cleanup] [CLARIFICATION]</h1><section id="section-Status" class="status-passed section"><h2 class="section-title">Status</h2>Version 8 passed (superseding version 6), 6/8/90 </section><section id="section-References" class="section"><h2 class="section-title">References</h2>Cleanup <a class="issue-reference" href="../issues/package-clutter.xhtml#issue-package-clutter">X3J13 Issue PACKAGE-CLUTTER</a> CLtL pp 67-69 Defining named functions CLtL pp 101-106 Generalized variables Cleanup <a class="issue-reference" href="../issues/function-name.xhtml#issue-function-name">X3J13 Issue FUNCTION-NAME</a> Condition System, version 18 CLOS specification, 88-002R </section><section id="section-Edit history" class="section"><h2 class="section-title">Edit history</h2>Masinter, Version 1, 17-Sep-88 from (Kolb, 14-Aug-87) Masinter, Version 2, 7-Oct-88 Masinter, Version 3,  7-Oct-88, fix typos van Roggen, Version 4, 13-Oct-88, undefined, not unspecified Masinter, Version 5, 22-Nov-88, add more cases Masinter, Version 6,  9-Apr-89, make Mar 89 X3j13 amendments Barrett, Version 7, 3-Jan-90, add more cases Barrett, Version 8, 9-Jan-90, make Jun 90 X3J13 ammendments </section><section id="section-Problem description" class="section"><h2 class="section-title">Problem description</h2>Is it legal to redefine Common Lisp functions? There is no explicit prohibition, and many implementations do allow redefinition of functions in the Lisp package. <br/>CLtL only says that special forms can not be redefined. But this doesn't  solve the general problem of redefining system functions. <br/></section><section class="status-passed proposal" id="issue-lisp-symbol-redefinition:mar89-x3j13"><h2 class="section-title">Proposal MAR89-X3J13</h2>Except where explicitly allowed, the consequences are undefined if any of the following actions are performed on symbols exported from the <a class="package-reference" href="../chapter-1.xhtml#package-common-lisp">common-lisp</a> package: <br/><ol><li> Binding or altering its value <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">lexically</span> <a class="macro-reference" href="../chapter-5.xhtml#macro-or">or</a> <span class="syntax-interned-symbol">dynamically</span>)</span>
</span></code> </li><li> Defining, undefining, or binding it as a function </li><li> Defining, undefining, or binding it as a macro or <a class="symbol-reference" href="../chapter-25.xhtml#symbol-compiler-macro">compiler-macro</a> </li><li> Defining it as a type specifier (defstruct, defclass, <a class="macro-reference" href="../chapter-9.xhtml#macro-define-condition">define-condition</a>,  deftype) </li><li> Defining it as a structure <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">defstruct</a>)</span>
</span></code> </li><li> Defining it as a declaration (declaration, define-declaration) </li><li> Using it as a symbol macro </li><li> Altering its print name <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">this</span> <span class="syntax-interned-symbol">may</span> <span class="syntax-interned-symbol">already</span> <span class="syntax-interned-symbol">be</span> <span class="syntax-interned-symbol">prohibited</span>)</span>
</span></code> </li><li> Altering its package </li><li> Tracing it </li><li> Declaring or proclaiming it special </li><li> Declaring or proclaiming its type or ftype </li><li> Uninterning or unexporting it from the package <a class="package-reference" href="../chapter-1.xhtml#package-common-lisp">common-lisp</a> </li><li> Defining a setf method for it (defsetf, define-setf-method, defining,  undefining, or binding the function named <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <a class="symbol-reference" href="../chapter-2.xhtml#symbol-symbol">symbol</a>)</span>
</span></code>) </li><li> Defining it as a method combination type </li><li> Using it as the <a class="function-reference" href="../chapter-7.xhtml#function-class-name">class-name</a> argument to <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> of <a class="function-reference" href="../chapter-7.xhtml#function-find-class">find-class</a> If such a symbol is not globally defined as a variable or a constant, it is allowed to lexically bind it as a variable or as a symbol-macro and declare the type of that binding. <br/>If such a symbol is not defined as a function, macro, or special form, it is allowed to <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">lexically</span>)</span>
</span></code> bind it as a function and to declare the ftype of that binding and to trace that binding. <br/>If such a symbol is not defined as a function, macro, or special form, it is allowed to <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">lexically</span>)</span>
</span></code> bind it as a macro. <br/>If such a symbol does not have a setf method defined for it, it is allowed to <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">lexically</span>)</span>
</span></code> bind the function named <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <a class="symbol-reference" href="../chapter-2.xhtml#symbol-symbol">symbol</a>)</span>
</span></code>. <br/></li></ol></section><section id="section-Examples" class="section"><h2 class="section-title">Examples</h2><pre>The behavior of the construct:<br/><br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-flet">flet</a> <span class="syntax-cons">(<span class="syntax-cons">(<a class="function-reference" href="../chapter-21.xhtml#function-open">open</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">filename</span> <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-key">&amp;KEY</a> <span class="syntax-interned-symbol">direction</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> <span class="syntax-string">"Open called...."</span>)</span> 
			<span class="syntax-cons">(<a class="function-reference" href="../chapter-21.xhtml#function-open">open</a> <span class="syntax-interned-symbol">filename</span> <span class="syntax-keyword-symbol">:direction</span> <span class="syntax-interned-symbol">direction</span>)</span>)</span>)</span>
    <span class="syntax-cons">(<a class="macro-reference" href="../chapter-21.xhtml#macro-with-open-file">with-open-file</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-string">"frob"</span> <span class="syntax-keyword-symbol">:direction</span> <span class="syntax-quote">'<span class="syntax-keyword-symbol">:output</span></span>)</span> 
		<span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> <span class="syntax-string">"was Open called?"</span>)</span>)</span>)</span>
</span></code></pre><br/><br/>is undefined; for example, the macro expansion of <a class="macro-reference" href="../chapter-21.xhtml#macro-with-open-file">with-open-file</a> might refer<br/>to the <a class="function-reference" href="../chapter-21.xhtml#function-open">open</a> function and might not.<br/><br/><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a> <a class="function-reference" href="../chapter-14.xhtml#function-car">car</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">X</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-cdr">cdr</a> <span class="syntax-interned-symbol">X</span>)</span>)</span>
</span></code><br/><br/>might signal an error.<br/><br/></pre></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>This proposal is the only simple resolution of the problem description that we can imagine that is consistent with current implementation techniques. <br/>Allowing arbitrary redefinition of symbols in the system would place severe restrictions on implementations not to actually use those symbols in macro expansions of other symbols, in function calls, etc. While some looser restrictions might do for any particular Common Lisp implementation, there seems to be no good way to distinguish between those symbols that are redefinable and those that are not. <br/>In general, programs can redefine functions safely by creating new symbols in their own package, possibly shadowing the name. <br/></section><section id="section-Current practice" class="section"><h2 class="section-title">Current practice</h2>Many Lisp environments have some mechanism for warning about redefinition of Lisp symbols and preventing accidental redefinition while allowing it where necessary (e.g., to patch the Lisp system itself, fix a bug, add an optimization.) <br/>Fewer check for lexical redefinition, since such redefinition is not as dangerous. Certainly, there are some symbols that are never used in macro expansions of the standard Common Lisp macros. However, implementations do differ on the behavior of macro expansions. <br/></section><section id="section-Cost to Implementors" class="section"><h2 class="section-title">Cost to Implementors</h2>This proposal clarifies the status quo &ndash; that the consequences are undefined. It allows and encourages implementors to check for such redefinition, but does not require it. <br/></section><section id="section-Cost to Users" class="section"><h2 class="section-title">Cost to Users</h2>This proposal clarifies that implementations are free to check for a condition that they might not have before, and may clarify that some current user code is non-portable. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>This issue frequently arises. Adopting this proposal would clarify a frequent source of question about Common Lisp.  <br/></section><section id="section-Cost of non-adoption" class="section"><h2 class="section-title">Cost of non-adoption</h2>Continued questions. <br/></section><section id="section-Esthetics" class="section"><h2 class="section-title">Esthetics</h2>Disallowing all redefinition is the simplest way of disallowing the ones that really are trouble.  <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>At the March 89 X3j13 meeting, a proposed additional constraint  <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-string">"Altering its property list"</span>)</span>
</span></code> was removed. Presumably this means that conformal programs are allowed to alter the property list of  symbols in the <a class="package-reference" href="../chapter-1.xhtml#package-common-lisp">common-lisp</a> package. <br/></section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>