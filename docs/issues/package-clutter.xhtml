<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” PACKAGE-CLUTTER</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">PACKAGE-CLUTTER</span><br/><ol class="local-toc"><li><a href="#section-Status">Status</a><ol> </ol></li><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit history">Edit history</a><ol> </ol></li><li><a href="#section-Problem Description">Problem Description</a><ol> </ol></li><li><a href="#issue-package-clutter:reduce">Proposal REDUCE</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Current Practice">Current Practice</a><ol> </ol></li><li><a href="#section-Performance Impact">Performance Impact</a><ol> </ol></li><li><a href="#section-Cost to Implementors">Cost to Implementors</a><ol> </ol></li><li><a href="#section-Cost to Users">Cost to Users</a><ol> </ol></li><li><a href="#section-Cost of Non-Adoption">Cost of Non-Adoption</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Aesthetics">Aesthetics</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue PACKAGE-CLUTTER [NIL] [CHANGE/CLARIFICATION]</h1><h2>Related issues</h2><ul><li><a class="issue-reference" href="../issues/lisp-symbol-redefinition.xhtml#issue-lisp-symbol-redefinition">LISP-SYMBOL-REDEFINITION</a></li><li><a class="issue-reference" href="../issues/defpackage.xhtml#issue-defpackage">DEFPACKAGE</a></li><li><span class="issue-reference error">issue:MAKE-PACKAGE-USE-DEFAULT</span></li><li><a class="issue-reference" href="../issues/in-package-functionality.xhtml#issue-in-package-functionality">IN-PACKAGE-FUNCTIONALITY</a></li><li><a class="issue-reference" href="../issues/function-name.xhtml#issue-function-name">FUNCTION-NAME</a></li></ul><section id="section-Status" class="status-passed section"><h2 class="section-title">Status</h2>Accepted v8 (superseding v7) on 15-0 vote, Jun-90 </section><section id="section-References" class="section"><h2 class="section-title">References</h2><a class="package-reference" href="../chapter-A.xhtml#package-lisp">LISP</a>, <a class="package-reference" href="../chapter-A.xhtml#package-user">USER</a>, <a class="package-reference" href="../chapter-A.xhtml#package-system">SYSTEM</a> packages (p181) </section><section id="section-Edit history" class="section"><h2 class="section-title">Edit history</h2>07-Jul-88, Version 1 by Pitman 23-Sep-88, Version 2 by Masinter 5-Oct-88, Version 3 by Masinter 7-Oct-88, Version 4 by Masinter (response to KMP) 8-Dec-88, Version 5 by Masinter (add property lists) 12-Dec-88, Version 6 by Masinter (respond to comments) 17-Mar-89, Version 7 by Masinter (as amended Jan 89 X3J13) 3-Jan-90, Version 8 by Barrett (add more cases) </section><section id="section-Problem Description" class="section"><h2 class="section-title">Problem Description</h2>  CLtL specifies that <br/>   ``The package named <a class="package-reference" href="../chapter-A.xhtml#package-lisp">LISP</a> contains the primitives of      the Common Lisp system. Its external symbols include      all of the user-visible functions and global variables      that are present in the Common Lisp system, such as      <a class="function-reference" href="../chapter-14.xhtml#function-car">CAR</a>, <a class="function-reference" href="../chapter-14.xhtml#function-cdr">CDR</a>, <a class="variable-reference" href="../chapter-11.xhtml#variable-*package*">*PACKAGE*</a>, etc. Almost all other packages will      want to use <a class="package-reference" href="../chapter-A.xhtml#package-lisp">LISP</a> so that these symbosl will be accessible      without qualification.'' <br/>  It specifies "all" but not "all and only". <br/>  Some implementations place their extensions in the Lisp package.   Nothing in CLtL explicitly prohibits this, but it leads to problems    in general.  For example: <br/>  <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> A user defining a function by a name not mentioned in CLtL may be     surprised to clobber a system function in some implementations <br/>  <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> In one particular implementation, the variable HELP was a system     constant, so that <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-cons">(<a class="macro-reference" href="../chapter-3.xhtml#macro-lambda">LAMBDA</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">HELP</span>)</span> <span class="syntax-interned-symbol">...HELP...</span>)</span> <span class="syntax-string">"Press ? for help."</span>)</span>
</span></code>     signalled a correctable error <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">asking</span> <span class="syntax-interned-symbol">what</span> <a class="symbol-reference" href="../chapter-25.xhtml#symbol-variable">variable</a> <span class="syntax-interned-symbol">to</span> <span class="syntax-interned-symbol">bind</span>
    <span class="syntax-interned-symbol">instead</span> <span class="syntax-interned-symbol">of</span> <span class="syntax-interned-symbol">HELP</span> <span class="syntax-keyword-symbol">:-</span>)</span>
</span></code></pre>. <br/></section><section class="status-passed proposal" id="issue-package-clutter:reduce"><h2 class="section-title">Proposal REDUCE</h2>  Specify that, not only must the <a class="package-reference" href="../chapter-A.xhtml#package-lisp">LISP</a> package contain at least all of the   symbols listed in the standard, it will have no other external symbols.   (The <a class="package-reference" href="../chapter-A.xhtml#package-lisp">LISP</a> package may have additional internal symbols.) <br/>  External symbols of the <a class="package-reference" href="../chapter-A.xhtml#package-lisp">LISP</a> package may have function, macro, or special   form definitions, setf method definition, top level value or <a class="symbol-reference" href="../chapter-3.xhtml#symbol-special">SPECIAL</a>   proclamations, or type definitions only if explicitly permitted in the   specification.  That is, a program is valid Common Lisp if it assumes that   this is true; for example, <a class="function-reference" href="../chapter-5.xhtml#function-fboundp">FBOUNDP</a> will be false for all external symbols of   the <a class="package-reference" href="../chapter-A.xhtml#package-lisp">LISP</a> package except those documented to be functions, macros or special   forms; no setf method will be defined for such a symbol, and <a class="function-reference" href="../chapter-5.xhtml#function-fboundp">FBOUNDP</a> on   <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">SETF</a> <a class="symbol-reference" href="../chapter-2.xhtml#symbol-symbol">symbol</a>)</span>
</span></code> will be false; <a class="function-reference" href="../chapter-10.xhtml#function-boundp">BOUNDP</a> will be false for all those except those   documented to be variables, and portable programs can use symbols in the   <a class="package-reference" href="../chapter-A.xhtml#package-lisp">LISP</a> package as local lexical variables with the presumption that the   variables are not proclaimed special, except for those variables specified   as constants or variables. <br/>  No external symbols of the <a class="package-reference" href="../chapter-A.xhtml#package-lisp">LISP</a> package may have properties with   property indicators that are either external symbols of packages   defined in the standard or are otherwise accessible in the <a class="package-reference" href="../chapter-A.xhtml#package-user">USER</a>   package. <br/>  This proposal constrains implementations as to what their   initial package configuration must be. That is, valid programs   can assume that the conformal Lisp implementation will not   have prohibited properties.  The proposal <a class="issue-reference" href="../issues/lisp-symbol-redefinition.xhtml#issue-lisp-symbol-redefinition">LISP-SYMBOL-REDEFINITION</a>   addresses the converse; that is, what user programs are allowed   to do. <br/>  Eliminate the requirement that the initial Common Lisp system    have a package named "<a class="package-reference" href="../chapter-A.xhtml#package-system">SYSTEM</a>". Specify that implementations may   have several other packages available, that these should be   documented. If it is appropriate, the standard might contain   as an example that implementations might have a package named   "<a class="package-reference" href="../chapter-A.xhtml#package-system">SYSTEM</a>". <br/>  Clarify that the "<a class="package-reference" href="../chapter-A.xhtml#package-user">USER</a>" package may have additional symbols interned   within it and that it may :USE other implementation-specific packages. <br/>   Examples: <br/>  #1: The symbol HELP may not be on the <a class="package-reference" href="../chapter-A.xhtml#package-lisp">LISP</a> package because it is not       mentioned in CLtL. <br/>  #2: The symbol <a class="symbol-reference" href="../chapter-25.xhtml#symbol-variable">VARIABLE</a> is specified to be on the <a class="package-reference" href="../chapter-A.xhtml#package-lisp">LISP</a> package <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">because</span>
      <span class="syntax-interned-symbol">it</span> <span class="syntax-interned-symbol">is</span> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">valid</span> <a class="function-reference" href="../chapter-14.xhtml#function-second">second</a> <span class="syntax-interned-symbol">argument</span> <span class="syntax-interned-symbol">to</span> <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <a class="function-reference" href="../chapter-25.xhtml#function-documentation">DOCUMENTATION</a> <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a>)</span>
</span></code></pre>. Since       it is not defined as a variable, type, or function, however, it will       not initially be bound, defined as a type, or defined as a function,       macro or special form. <br/></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>  If extra symbols are permitted in the <a class="package-reference" href="../chapter-A.xhtml#package-lisp">LISP</a> package, users may be surprised   by relationships between the <a class="package-reference" href="../chapter-A.xhtml#package-lisp">LISP</a> package and other packages which they   did not expect, or may be surprised by functionality that they did not   expect. The degenerate case is: <br/>   <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defconstant">DEFCONSTANT</a> <span class="syntax-interned-symbol">LISP:A</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">YOU-LOSE</span></span>)</span>
</span></code>    <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defconstant">DEFCONSTANT</a> <span class="syntax-interned-symbol">LISP:B</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">YOU-LOSE</span></span>)</span>
</span></code>    <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defconstant">DEFCONSTANT</a> <span class="syntax-interned-symbol">LISP:C</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">YOU-LOSE</span></span>)</span>
</span></code>       ...    <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defconstant">DEFCONSTANT</a> <span class="syntax-interned-symbol">LISP:AA</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">YOU-LOSE</span></span>)</span>
</span></code>    <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defconstant">DEFCONSTANT</a> <span class="syntax-interned-symbol">LISP:AB</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">YOU-LOSE</span></span>)</span>
</span></code>    <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defconstant">DEFCONSTANT</a> <span class="syntax-interned-symbol">LISP:AB</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">YOU-LOSE</span></span>)</span>
</span></code>    ...etc. <br/>  Given such an implementation, even things like <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-3.xhtml#macro-lambda">LAMBDA</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">X</span>)</span> <span class="syntax-interned-symbol">X</span>)</span>
</span></code> are not   valid because they attempt to bind "system constants". It is necessary   that the programmer be able to know for sure that an arbitrary name is   "free for use" and best way to conveniently assure this is to require   that the <a class="package-reference" href="../chapter-A.xhtml#package-lisp">LISP</a> package be unadulterated. <br/>  As for the additional definitions, there are situations where additional   definitions would cause a problem. For example, if a symbol on the Lisp   package were declared as a special variable even though that value was   not mentioned in the standard, that variable would behave incorrectly when   used as a lexical variable. Similarly, if a symbol in the lisp package   were defined as an <a class="glossary-reference" href="../chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a> special form, problems might   result if a user redefined or even bound <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">as</span> <span class="syntax-interned-symbol">by</span> <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-flet">FLET</a> <a class="macro-reference" href="../chapter-5.xhtml#macro-or">or</a> <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-macrolet">MACROLET</a>)</span>
</span></code> that   name. <br/>  The <a class="package-reference" href="../chapter-A.xhtml#package-lisp">LISP</a> package is the foothold from which portable programs establish   their desired environment. Careful control is desirable to make sure   everyone is starting off on the right foot. <br/></section><section id="section-Current Practice" class="section"><h2 class="section-title">Current Practice</h2>  Some implementations have been known to add additional symbols <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">usually</span>
  <span class="syntax-interned-symbol">functional</span> <span class="syntax-interned-symbol">and/or</span> <a class="symbol-reference" href="../chapter-25.xhtml#symbol-variable">variable</a> <span class="syntax-interned-symbol">extensions</span>)</span>
</span></code></pre> to the <a class="package-reference" href="../chapter-A.xhtml#package-lisp">LISP</a> package. <br/>  Several implementations have restricted the <a class="package-reference" href="../chapter-A.xhtml#package-lisp">LISP</a> package to only contain   those symbols in CLtL. (The exact set was difficult to extract because not all   <a class="package-reference" href="../chapter-A.xhtml#package-lisp">LISP</a> package symbols appeared in the index of CLtL.) <br/>  Even in those implementations that have only the prescribed symbols in CLtL,   there can be extra definitions for those symbols. For example, in Symbolics Genera,   the symbols EVALHOOK, <a class="function-reference" href="../chapter-25.xhtml#function-room">ROOM</a>, and APPLYHOOK   are spuriously defined as special variables, and the symbol <a class="macro-reference" href="../chapter-3.xhtml#macro-lambda">LAMBDA</a> is defined   as a macro.  <br/></section><section id="section-Performance Impact" class="section"><h2 class="section-title">Performance Impact</h2>  None <br/></section><section id="section-Cost to Implementors" class="section"><h2 class="section-title">Cost to Implementors</h2>  The actual cost of moving the symbols out of the <a class="package-reference" href="../chapter-A.xhtml#package-lisp">LISP</a> package in cases   where they are not already gone is quite small. However, if any   implementation really has to do this, it may have a number of suppositions   about what is in what package, and the changes could potentially be extensive. <br/></section><section id="section-Cost to Users" class="section"><h2 class="section-title">Cost to Users</h2>  This change is upward compatible with any portable program, but users   of a particular implementation's extensions may be forced to find their   functions in a different package, so there may be a measurable practical   cost. <br/>  In many cases where an extension symbol <a class="index/code-reference" href="../chapter-1.xhtml#index/code-foo">FOO</a> is simply expected to have   been directly available <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">due</span> <span class="syntax-interned-symbol">to</span> <span class="syntax-keyword-symbol">:USE</span> <span class="syntax-string">"LISP"</span>)</span>
</span></code>, it will work to just just   do (<a class="function-reference" href="../chapter-11.xhtml#function-import">IMPORT</a> 'new-home-package-for-foo:FOO) where the user's package is   declared. <br/>  More likely the extension symbols would be moved to one or more   extensions packages, e.g. ACME-COMMON-LISP, so user packages in which   the extensions were desired could simply :USE the extensions package<code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">s</span>)</span>
</span></code>.   Implementations might want to use this way of conforming with this   proposal in order to minimize cost to users. <br/>  In many cases where an extension symbol <a class="index/code-reference" href="../chapter-1.xhtml#index/code-foo">FOO</a> is used by explicit package   prefix, such as <span class="issue-reference error">issue:LISP</span>, it should be easy to search for `<span class="issue-reference error">issue:LISP</span>' or   even `<a class="package-reference" href="../chapter-A.xhtml#package-lisp">LISP</a>:' to find the cases. <br/></section><section id="section-Cost of Non-Adoption" class="section"><h2 class="section-title">Cost of Non-Adoption</h2>  The potential for the <a class="package-reference" href="../chapter-A.xhtml#package-lisp">LISP</a> package to be adulterated and for supposedly   portable programs to have difficulty getting a foothold in some   implementations will be `noticeably non-zero'. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>  Portability of some programs will be enhanced. <br/></section><section id="section-Aesthetics" class="section"><h2 class="section-title">Aesthetics</h2>  This change probably supports the naive expectation of most programmers   writing portable code. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>  This proposal basically affects what implementors are allowed to do;   it says that portable programs can rely on a standard initial package   structure with the same symbols in it. A separate proposal,    <a class="issue-reference" href="../issues/lisp-symbol-redefinition.xhtml#issue-lisp-symbol-redefinition">LISP-SYMBOL-REDEFINITION</a>, discusses the restrictions on portable   programs as far as redefining <a class="package-reference" href="../chapter-A.xhtml#package-lisp">LISP</a> symbols. <br/>  Whether the <a class="package-reference" href="../chapter-A.xhtml#package-user">USER</a> package may contain symbols other than those    specified in the standard was controversial.  The smart programmer   of portable code will never rely on the contents of the   <a class="package-reference" href="../chapter-A.xhtml#package-user">USER</a> package. However, if someone wants a completely empty    package that uses only Lisp, it's easy and portable to create one. <br/>  While it would improve portability slightly to disallow additional internal   symbols in the <a class="package-reference" href="../chapter-A.xhtml#package-lisp">LISP</a> package <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">since</span> <span class="syntax-interned-symbol">it</span> <span class="syntax-interned-symbol">affects</span> <span class="syntax-interned-symbol">what</span> <a class="macro-reference" href="../chapter-11.xhtml#macro-do-symbols">DO-SYMBOLS</a> <span class="syntax-interned-symbol">will</span> <a class="macro-reference" href="../chapter-6.xhtml#macro-do">do</a>)</span>
</span></code>   explicitly prohibiting a common practice didn't seem like the best way   to discourage a possibly troublesome implementation technique.  <br/>  Implementors should be especially careful about accidentally    exporting unwanted additional definitions for symbols,e.g., a variable    definition for EVALHOOK which might show through because of    an unintended name collision. <br/>  It is likely that the recently included portions of the standard <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">CLOS</span> <a class="macro-reference" href="../chapter-5.xhtml#macro-and">and</a>
  <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <a class="function-reference" href="../chapter-9.xhtml#function-signal">signal</a> <span class="syntax-interned-symbol">mechanism</span>)</span>
</span></code></pre> will reside in their own packages. These externally   defined packages should have the same constraints as outlined for   the <a class="package-reference" href="../chapter-A.xhtml#package-lisp">LISP</a> package here. <br/>  There has been a suggestion that vendor-specific extensions should   be placed in a package named like ACME-COMMON-LISP for the "Acme"   company.  <br/>  A registry of packages (as well as features, modules and other global   names) would be useful, although probably not a part of the language   standard, per se. <br/>  Barrett and Pitman support superseding version 7 with version 8. <br/>&mdash;&mdash;&mdash;<a class="function-reference" href="../chapter-12.xhtml#function--">-</a> Additional comments on the write-up: <br/> "This is clearly correct." &ndash;Moon (9 Jan 90) </section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>