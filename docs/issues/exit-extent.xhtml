<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” EXIT-EXTENT</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">EXIT-EXTENT</span><br/><ol class="local-toc"><li><a href="#section-Status">Status</a><ol> </ol></li><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit history">Edit history</a><ol> </ol></li><li><a href="#section-Problem description">Problem description</a><ol> </ol></li><li><a href="#issue-exit-extent:minimal">Proposal MINIMAL</a><ol> </ol></li><li><a href="#issue-exit-extent:medium">Proposal MEDIUM</a><ol> </ol></li><li><a href="#section-Examples">Examples</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Current practice">Current practice</a><ol> </ol></li><li><a href="#section-Cost to Implementors">Cost to Implementors</a><ol> </ol></li><li><a href="#section-Cost to Users">Cost to Users</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Cost of non-adoption ">Cost of non-adoption </a><ol> </ol></li><li><a href="#section-Esthetics">Esthetics</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue EXIT-EXTENT [NIL] [CLARIFICATION]</h1><h2>Related issues</h2><ul><span class="issue-reference error">issue:UNWIND-PROTECT-NON-LOCAL-EXIT</span></ul><section id="section-Status" class="status-passed section"><h2 class="section-title">Status</h2>proposal <a class="proposal-reference" href="#issue-exit-extent:minimal">MINIMAL</a>, as amended, passed Mar 89 X3J13 by vote of 11-5. </section><section id="section-References" class="section"><h2 class="section-title">References</h2><a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-catch">catch</a>, <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-throw">throw</a> (p 142), <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-block">block</a>, <a class="macro-reference" href="../chapter-5.xhtml#macro-return">return</a>, <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-return-from">return-from</a>, <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-tagbody">tagbody</a>, <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-go">go</a>, <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-unwind-protect">unwind-protect</a>, Dynamic extent (CLtL p.37), Nested dynamic extents (CLtL p.38), Blocks can only be exited once (CLtL p.120), Catch is disestablished just before the values  are returned (CLtL p.139). </section><section id="section-Edit history" class="section"><h2 class="section-title">Edit history</h2>... Version 5 of UNWIND-PROTECT-NON-LOCAL-EXIT, 23-May-88 ... Version 1, 5-Sep-88, by Moon, for discussion Version 2, 1-Oct-88, by Masinter, minor edits Version 3, 7-Oct-88, by Moon, wording improvements Version 4,  7-Dec-88, by Masinter, add <a class="proposal-reference" href="#issue-exit-extent:medium">MEDIUM</a> from UNWIND-PROTECT-NON-LOCAL-EXIT, discussion. Version 5, 12-Dec-88, Masinter, clarify <a class="proposal-reference" href="#issue-exit-extent:minimal">MINIMAL</a> allows <a class="proposal-reference" href="#issue-exit-extent:medium">MEDIUM</a> Version 6,  8-Jan-89, Masinter, fix some bugs Version 7,  4-Apr-89, Moon, amend per X3J13 Mar-89, and make rationale and examples consistent with that </section><section id="section-Problem description" class="section"><h2 class="section-title">Problem description</h2>CLtL does not specify precisely when the dynamic extent <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">lifetime</span>)</span>
</span></code> of a nonlocal exit such as a <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-catch">catch</a>, <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-block">block</a>, or <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-tagbody">tagbody</a> ends.  For example, at what point is it no longer possible to <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-return-from">return-from</a> a particular <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-block">block</a>? <br/>An "exit" refers to a point from which control can be transferred. For a <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-throw">throw</a> or <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-return-from">return-from</a>, the "exit" is the corresponding <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-catch">catch</a> or <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-block">block</a> body. For a <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-go">go</a>, the "exit" is the form within the <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-tagbody">tagbody</a> which was being executed at the time the <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-go">go</a> is performed. <br/>The extent of an exit is dynamic; it is not indefinite. The extent of an exit begins when the corresponding form (<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-catch">catch</a>, <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-block">block</a> or <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-tagbody">tagbody</a> clause) is entered.  When the extent of an exit has ended, it is no longer legal to return from it. <br/>The extent of an exit is not the same thing as the scope of the designator by which the exit is identified. For example, a <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-block">block</a> name has lexical scope but the extent of its exit is dynamic; the scope of a <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-catch">catch</a> tag could differ from the extent of the <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-catch">catch</a>'s return point. (That's part of what is at issue here.) <br/>The ambiguity at issue arises for the case where there are transfers of control from the cleanup clauses of an <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-unwind-protect">unwind-protect</a>. <br/>When a transfer of control is initiated by <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-go">go</a>, <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-return-from">return-from</a> or <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-throw">throw</a>, a variety of events occur before the transfer of control is complete. In particular,  <br/><ol><li> the cleanup clauses of any intervening <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-unwind-protect">unwind-protect</a> clauses  are evaluated, <br/></li><li> intervening dynamic bindings of special variables and catch tags  are undone, <br/></li><li> intervening exits are "abandoned", i.e., their extent ends and it  is no longer legal to attempt to transfer control through them, <br/></li><li> the extent of the exit being invoked ends, </li><li> control is finally passed to the target. The order of these events is not explicit in CLtL, however. The  implementation note on p.142 gives a clue about the interweaving of <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">a</span>)</span>
</span></code> and <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">b</span>)</span>
</span></code>, but there are differing opinions about the times at which <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">c</span>)</span>
</span></code> and <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">d</span>)</span>
</span></code> may occur. In particular, <br/>Is it legal for an implementation to end the extent of all  intervening exits before processing the cleanup clauses of intervening  <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-unwind-protect">unwind-protect</a>s? <br/>What is the dynamic context at the time <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-unwind-protect">unwind-protect</a> clauses are  evaluated: how is the unwinding of dynamic bindings intertwined with  evaluation of <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-unwind-protect">unwind-protect</a> cleanup clauses?  <br/></li></ol></section><section class="status-passed proposal" id="issue-exit-extent:minimal"><h2 class="section-title">Proposal MINIMAL</h2>The extent of an exit being "abandoned" because it is being passed over ends as soon as the transfer of control is initiated. That is, the event <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">c</span>)</span>
</span></code> occurs at the beginning of the initiation of the transfer of control. In the language of the implementation note on p.142, the extent ends at the beginning of the second pass.  It is an error to attempt a transfer of control to an exit whose dynamic extent has ended. <br/>The event <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">d</span>)</span>
</span></code> occurs at the end of the transfer of control. <br/>Otherwise, events <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">a</span>)</span>
</span></code> and <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">b</span>)</span>
</span></code>&ndash;the undoing of dynamic binding of special variables and <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-catch">catch</a> tags, and the execution of <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-unwind-protect">unwind-protect</a> cleanup clauses--are performed in the order corresponding to the reverse order in which they were established, as implied by the implementation note on p.142. The effect of this is that the cleanup clauses of an <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-unwind-protect">unwind-protect</a> will see the same dynamic bindings of variables and <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-catch">catch</a> tags as were visible when the <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-unwind-protect">unwind-protect</a> was entered. <br/>This proposal is called "minimal" because it gives exits the smallest extent consistent with CLtL, except that event <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">d</span>)</span>
</span></code> occurs later than CLtL requires.  A program that presumed a longer extent would be in error. Implementations may support longer extents for exits than is required by this proposal; in particular, an implementation which allowed the larger extent of the <a class="proposal-reference" href="#issue-exit-extent:medium">MEDIUM</a> proposal below would still conform. <br/></section><section class="status-unknown proposal" id="issue-exit-extent:medium"><h2 class="section-title">Proposal MEDIUM</h2>The events of <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">a</span>)</span>
</span></code>, <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">b</span>)</span>
</span></code>, <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">c</span>)</span>
</span></code> and <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">d</span>)</span>
</span></code> are interwoven in the reverse  order in which they were established. In particular, the extent of  a passed-over exit ends when control reaches a frame that was  established before the exit was established.   <br/>In particular, it is legal, during the evaluation of an <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-unwind-protect">unwind-protect</a>  cleanup form executed because of a non-local transfer of control, to initiate a new transfer of control to an exit intervening between the  <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-unwind-protect">unwind-protect</a> and the original target; the original processing of  transfer of control is abandoned.   <br/></section><section id="section-Examples" class="section"><h2 class="section-title">Examples</h2><pre>;; Error under either proposal: <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-block">block</a> exits normally before <a class="macro-reference" href="../chapter-5.xhtml#macro-return">return</a><br/><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-funcall">funcall</a> <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-block">block</a> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-function">#'<span class="syntax-cons">(<a class="macro-reference" href="../chapter-3.xhtml#macro-lambda">lambda</a> <span class="syntax-symbol">()</span> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-return">return</a>)</span>)</span></span>)</span>)</span>
</span></code><br/><br/>;; Error under either proposal: normal exit before <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-go">go</a><br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>)</span>)</span> 
  <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-tagbody">tagbody</a> <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-function">#'<span class="syntax-cons">(<a class="macro-reference" href="../chapter-3.xhtml#macro-lambda">lambda</a> <span class="syntax-symbol">()</span> <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-go">go</a> <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>)</span>)</span></span>)</span>)</span>
  <span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-funcall">funcall</a> <span class="syntax-interned-symbol">a</span>)</span>)</span>
</span></code></pre><br/><br/>;; Error under either proposal: <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-tagbody">tagbody</a> is passed over, before <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-go">go</a><br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-funcall">funcall</a> <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-block">block</a> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>
           <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-tagbody">tagbody</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-return">return</a> <span class="syntax-function">#'<span class="syntax-cons">(<a class="macro-reference" href="../chapter-3.xhtml#macro-lambda">lambda</a> <span class="syntax-symbol">()</span> <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-go">go</a> <span class="syntax-interned-symbol">a</span>)</span>)</span></span>)</span>)</span>)</span>)</span>
</span></code></pre><br/><br/>;;returns 2 under <a class="proposal-reference" href="#issue-exit-extent:medium">MEDIUM</a> and <a class="proposal-reference" href="#issue-exit-extent:minimal">MINIMAL</a>, was error under <a class="proposal-reference" href="#issue-exit-extent:minimal">MINIMAL</a> version 6<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-block">block</a> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>   
  <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-unwind-protect">unwind-protect</a> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-return">return</a> <span class="syntax-number">1</span>)</span>
    <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-return">return</a> <span class="syntax-number">2</span>)</span>)</span>)</span>
</span></code></pre><br/><br/>;;returns 2 under <a class="proposal-reference" href="#issue-exit-extent:medium">MEDIUM</a>, is error under <a class="proposal-reference" href="#issue-exit-extent:minimal">MINIMAL</a><br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-block">block</a> <span class="syntax-interned-symbol">a</span>    
  <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-block">block</a> <span class="syntax-interned-symbol">b</span>
    <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-unwind-protect">unwind-protect</a> <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-return-from">return-from</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-number">1</span>)</span>
      <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-return-from">return-from</a> <span class="syntax-interned-symbol">b</span> <span class="syntax-number">2</span>)</span>)</span>)</span>)</span>
</span></code></pre><br/><br/>;; returns 2 under <a class="proposal-reference" href="#issue-exit-extent:medium">MEDIUM</a> and <a class="proposal-reference" href="#issue-exit-extent:minimal">MINIMAL</a>, was error under <a class="proposal-reference" href="#issue-exit-extent:minimal">MINIMAL</a> version 6<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-catch">catch</a> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> 
  <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-unwind-protect">unwind-protect</a> <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-throw">throw</a> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-number">1</span>)</span>
    <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-throw">throw</a> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-number">2</span>)</span>)</span>)</span>
</span></code></pre><br/><br/>;; returns 2 under <a class="proposal-reference" href="#issue-exit-extent:medium">MEDIUM</a>, is error under <a class="proposal-reference" href="#issue-exit-extent:minimal">MINIMAL</a><br/>;; because the catch of B is passed over by<br/>;; the first <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-throw">throw</a>, hence portable programs must assume its dynamic extent<br/>;; is terminated.  The binding of the catch tag is not yet disestablished<br/>;; and therefore it is the target of the second throw.<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-catch">catch</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">a</span></span>
  <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-catch">catch</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">b</span></span>
    <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-unwind-protect">unwind-protect</a> <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-throw">throw</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">a</span></span> <span class="syntax-number">1</span>)</span>
      <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-throw">throw</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">b</span></span> <span class="syntax-number">2</span>)</span>)</span>)</span>)</span>
</span></code></pre><br/><br/>;; the following was an error under <a class="proposal-reference" href="#issue-exit-extent:minimal">MINIMAL</a> version 6; the extent of<br/>;; the inner catch terminates as soon as the <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-throw">throw</a> commences, even<br/>;; though it remains in scope. Thus, the <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-throw">throw</a> of :SECOND-THROW<br/>;; sees the inner <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-catch">catch</a>, but its extent has ended.<br/>;; under <a class="proposal-reference" href="#issue-exit-extent:medium">MEDIUM</a> and <a class="proposal-reference" href="#issue-exit-extent:minimal">MINIMAL</a> version 7,<br/>;; it prints "The inner catch returns :SECOND-THROW"<br/>;; and then returns :OUTER-CATCH.<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-catch">catch</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">foo</span></span>
        <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> <span class="syntax-string">"The inner catch returns ~s.~%"</span>
                <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-catch">catch</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">foo</span></span>
                    <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-unwind-protect">unwind-protect</a> <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-throw">throw</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">foo</span></span> <span class="syntax-keyword-symbol">:first-throw</span>)</span>
                        <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-throw">throw</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">foo</span></span> <span class="syntax-keyword-symbol">:second-throw</span>)</span>)</span>)</span>)</span>
        <span class="syntax-keyword-symbol">:outer-catch</span>)</span>
</span></code></pre>)<br/><br/>;; Following returns 10 under either proposal.  The inner<br/>;; <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-catch">catch</a> of A is passed over, but because that <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-catch">catch</a><br/>;; is disestablished before the <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-throw">throw</a> to A is executed,<br/>;; it isn't seen.<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-catch">catch</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">a</span></span>
  <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-catch">catch</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">b</span></span>
    <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-unwind-protect">unwind-protect</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-1+">1+</a> <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-catch">catch</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">a</span></span> <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-throw">throw</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">b</span></span> <span class="syntax-number">1</span>)</span>)</span>)</span>
      <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-throw">throw</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">a</span></span> <span class="syntax-number">10</span>)</span>)</span>)</span>)</span>
</span></code></pre><br/><br/>;; Following is an error under <a class="proposal-reference" href="#issue-exit-extent:minimal">MINIMAL</a> because the extent of<br/>;; the <code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-catch">catch</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">BAR</span></span> <span class="syntax-interned-symbol">...</span>)</span>
</span></code> exit ends when the <code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-throw">throw</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">FOO</span></span> <span class="syntax-interned-symbol">...</span>)</span>
</span></code><br/>;; commences.<br/>;; Under <a class="proposal-reference" href="#issue-exit-extent:medium">MEDIUM</a>, the pending exit to tag <a class="index/code-reference" href="../chapter-1.xhtml#index/code-foo">foo</a> is discarded by the<br/>;; second <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-throw">throw</a> to <a class="index/code-reference" href="../chapter-1.xhtml#index/code-bar">bar</a> and the value 4 is transferred to<br/>;; <code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-catch">catch</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">BAR</span></span> <span class="syntax-interned-symbol">...</span>)</span>
</span></code>, which returns 4. The <code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-catch">catch</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">FOO</span></span> <span class="syntax-interned-symbol">...</span>)</span>
</span></code><br/>;; then returns the 4 because its first argument has returned<br/>;; normally.  XXX is not printed.<br/><br/>    <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-catch">catch</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">FOO</span></span>
      <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-catch">catch</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">BAR</span></span>
          <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-unwind-protect">unwind-protect</a> <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-throw">throw</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">FOO</span></span> <span class="syntax-number">3</span>)</span>
            <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-throw">throw</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">BAR</span></span> <span class="syntax-number">4</span>)</span>
            <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-print">print</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">XXX</span></span>)</span>)</span>)</span>)</span>
</span></code></pre><br/><br/> <br/>;; Following returns 4 under either proposal; XXX is not printed.<br/>;; The <code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-throw">throw</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">FOO</span></span> <span class="syntax-interned-symbol">...</span>)</span>
</span></code> has no effect on the scope of the <a class="index/code-reference" href="../chapter-1.xhtml#index/code-bar">bar</a><br/>;; catch tag or the extent of the <code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-catch">catch</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">BAR</span></span> <span class="syntax-interned-symbol">...</span>)</span>
</span></code> exit.<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-catch">catch</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">BAR</span></span>
    <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-catch">catch</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">FOO</span></span>
        <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-unwind-protect">unwind-protect</a> <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-throw">throw</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">FOO</span></span> <span class="syntax-number">3</span>)</span>
          <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-throw">throw</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">BAR</span></span> <span class="syntax-number">4</span>)</span>
          <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-print">print</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">XXX</span></span>)</span>)</span>)</span>)</span>
</span></code></pre><br/><br/>;;The following are legal and print 5 under either proposal:<br/>    <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-block">block</a> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>
      <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-number">5</span>)</span>)</span>
        <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-declare">declare</a> <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-special">special</a> <span class="syntax-interned-symbol">x</span>)</span>)</span>
        <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-unwind-protect">unwind-protect</a> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-return">return</a>)</span>
          <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-print">print</a> <span class="syntax-interned-symbol">x</span>)</span>)</span>)</span>)</span>
</span></code></pre>          <br/><br/>    <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-block">block</a> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>
      <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-number">5</span>)</span>)</span>
        <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-declare">declare</a> <span class="syntax-cons">(<a class="symbol-reference" href="../chapter-3.xhtml#symbol-special">special</a> <span class="syntax-interned-symbol">x</span>)</span>)</span>
        <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-unwind-protect">unwind-protect</a>
            <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">test</span>)</span> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-return">return</a>)</span>)</span>
          <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-print">print</a> <span class="syntax-interned-symbol">x</span>)</span>)</span>)</span>)</span>
</span></code></pre>  <br/><br/></pre></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>For <a class="proposal-reference" href="#issue-exit-extent:minimal">MINIMAL</a>: Giving exits the smallest extent consistent with CLtL maximizes freedom for implementations; there are few applications, if any, that require a longer extent.  Delaying event <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">d</span>)</span>
</span></code> until the transfer of control is completed allows multiple attempts to exit from a single exit, if the first attempt is interrupted, possibly by an error. <br/>For <a class="proposal-reference" href="#issue-exit-extent:medium">MEDIUM</a>: Giving exits a longer extent has cleaner semantics. <br/></section><section id="section-Current practice" class="section"><h2 class="section-title">Current practice</h2>Both implementations of Symbolics Genera (3600 and Ivory) end the extent of a target <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-block">block</a> or <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-catch">catch</a> at the moment the values are returned, and end the extent of a passed-over exit at the moment the <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-throw">throw</a>, <a class="macro-reference" href="../chapter-5.xhtml#macro-return">return</a>, or <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-go">go</a> commences.  This choice of extent maximizes efficiency within the particular stack structure used by these implementations, by avoiding the need to retain the control information needed to use a passed over exit through the transfer of control.  Genera signals an error if an attempt is made to use an exit that has been passed over. <br/>In some implementations, it is possible for a throw or non-local exit to be effectively "stopped" by an <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-unwind-protect">unwind-protect</a> cleanup clause that performs a non-local transfer of control to a passed-over exit. <br/>Some implementations crash or otherwise generate garbage code for non-local exits from cleanup clauses of <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-unwind-protect">unwind-protect</a>. <br/></section><section id="section-Cost to Implementors" class="section"><h2 class="section-title">Cost to Implementors</h2>No currently valid implementation will be made invalid by the <a class="proposal-reference" href="#issue-exit-extent:minimal">MINIMAL</a> proposal. Some implementors may wish to add error checks if they do not already have them. <br/><a class="proposal-reference" href="#issue-exit-extent:medium">MEDIUM</a> would have a high cost for those implementations that currently have shorter extent. <br/></section><section id="section-Cost to Users" class="section"><h2 class="section-title">Cost to Users</h2>Most user programs don't do this, so there is likely little cost of converting existing code in any case. In any case, current implementations differ enough that this issue ostensibly does not affect current portable programs. Some users might have code that relies on the "unstoppable loops" that can be created with the <a class="proposal-reference" href="#issue-exit-extent:medium">MEDIUM</a> proposal. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>Either proposal would make Common Lisp more precisely defined. <br/></section><section id="section-Cost of non-adoption " class="section"><h2 class="section-title">Cost of non-adoption </h2>The semantics of exits will remain ambiguous. <br/></section><section id="section-Esthetics" class="section"><h2 class="section-title">Esthetics</h2>Precisely specifying the meaning of dynamic extent improves the language. Leaving implementations free to implement a longer extent if they choose can be regarded as unesthetic, but consistent with Common Lisp philosophy. Having a <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-catch">catch</a> that is in scope even though its extent has ended may seem unesthetic, but it is consistent with how <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-block">block</a> behaves. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>This issue is controversial. It was first discussed under the issue  named UNWIND-PROTECT-CLEANUP-NON-LOCAL-EXIT. The issue was recast as the more global one of "extent of exits" rather than the specific  one of "what happens if a cleanup in an <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-unwind-protect">unwind-protect</a> does a non<a class="function-reference" href="../chapter-12.xhtml#function--">-</a> local exit", but the problem cases for both topics are the same. <br/>The goal of the <a class="proposal-reference" href="#issue-exit-extent:minimal">MINIMAL</a> proposal is to clarify the ambiguity in CLtL while minimizing changes to the current situation. The <a class="proposal-reference" href="#issue-exit-extent:medium">MEDIUM</a> proposal defines the extent of an exit to end at the last moment possible within some particular reference implementation.  It has a cost to implementors whose implementation is not identical to the reference implementation.  Another alternative proposal, not considered here, would duck the issue by outlawing all non-local exits from <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-unwind-protect">unwind-protect</a> cleanup forms. That alternative would have a substantial cost to some users. <br/>Scheme is cleaner: it avoids this issue by specifying that the extent of an exit never ends. <br/>An argument for the <a class="proposal-reference" href="#issue-exit-extent:medium">MEDIUM</a> proposal was made based on the example: <br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-block">block</a> <span class="syntax-interned-symbol">foo</span>
    <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-block">block</a> <span class="syntax-interned-symbol">bar</span>
      <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-unwind-protect">unwind-protect</a>
          <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-return-from">return-from</a> <span class="syntax-interned-symbol">foo</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">foo</span></span>)</span>
        <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-return-from">return-from</a> <span class="syntax-interned-symbol">bar</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">bar</span></span>)</span>)</span>)</span>)</span>
</span></code></pre> <br/>Since there is no reason for <a class="index/code-reference" href="../chapter-1.xhtml#index/code-foo">foo</a> and <a class="index/code-reference" href="../chapter-1.xhtml#index/code-bar">bar</a> not to be treated interchangeably, calling this an error would be inappropriate.  <br/>It was argued that the <a class="proposal-reference" href="#issue-exit-extent:minimal">MINIMAL</a> proposal is equivalent to practically outlawing non-local exits from <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-unwind-protect">unwind-protect</a> cleanup clauses, because there is no general way to determine the target of the non-local exit that caused the cleanup clause to be invoked.  <br/>The following example was offered as an argument against <a class="proposal-reference" href="#issue-exit-extent:minimal">MINIMAL</a>. Given: <br/>    <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-block">block</a> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>
      <span class="syntax-cons">(<a class="macro-reference" href="../chapter-9.xhtml#macro-handler-case">handler-case</a>
          <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-unwind-protect">unwind-protect</a> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-return">return</a>)</span>
            <span class="syntax-cons">(<a class="function-reference" href="../chapter-9.xhtml#function-error">error</a> <span class="syntax-string">"foo"</span>)</span>)</span>             <span class="syntax-line-comment syntax-comment">;probably an error, under the proposal
</span>        <span class="syntax-cons">(<a class="function-reference" href="../chapter-9.xhtml#function-error">error</a> <span class="syntax-symbol">()</span>
          <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-print">print</a> <span class="syntax-string">"foo"</span>)</span>)</span>)</span>)</span>
</span></code></pre> <br/>If the <a class="function-reference" href="../chapter-9.xhtml#function-error">error</a> handler has the same scope and extent a <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-catch">catch</a> in the same place would have (and that seems reasonable, though I'm not certain that the condition system specifically requires that interpretation), then the handler will be apparent to the call to <a class="function-reference" href="../chapter-9.xhtml#function-error">error</a>, but will no longer be a valid target <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">its</span> <span class="syntax-interned-symbol">extent</span> <span class="syntax-interned-symbol">was</span> <span class="syntax-interned-symbol">exited</span> <span class="syntax-interned-symbol">by</span> <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <a class="macro-reference" href="../chapter-5.xhtml#macro-return">return</a> <span class="syntax-interned-symbol">in</span> <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-unwind-protect">unwind-protect</a> <span class="syntax-interned-symbol">body</span>)</span>
</span></code>. <br/>The extent of an object with dynamic extent is the extent of the form  which created it.  Code which is executed "within" that form is within the extent of the object<code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">s</span>)</span>
</span></code>.  This applies to all dynamic objects, such as special variable bindings, not just exits.  Actually, I think the intent of the implementation note on p.142 is fairly clear and supports this interpretation.  The supposedly ambiguous use of "frame" should be read as something like "form which establishes a dynamic extent".  It might be clearer if the last sentence were changed to read something like: <br/>"On the second pass the stack is actually unwound.  Each form which establishes a dynamic extent is undone in reverse order of creation until the matching <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-catch">catch</a> is reached.  The meaning of undoing a form depends on the type of form. For <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-unwind-protect">unwind-protect</a>, it means executing the cleanup forms.  For <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-catch">catch</a> it means removing the <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-catch">catch</a> tag.  For dynamic bindings it means undoing the binding, restoring the previous saved value. {This is not an exhaustive listing of the possibilities.}" <br/></section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>