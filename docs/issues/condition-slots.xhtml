<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” CONDITION-SLOTS</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">CONDITION-SLOTS</span><br/><ol class="local-toc"><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit history">Edit history</a><ol> </ol></li><li><a href="#section-Problem description">Problem description</a><ol> </ol></li><li><a href="#issue-condition-slots:hidden">Proposal HIDDEN</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Current practice">Current practice</a><ol> </ol></li><li><a href="#section-Cost to Implementors">Cost to Implementors</a><ol> </ol></li><li><a href="#section-Cost to Users">Cost to Users</a><ol> </ol></li><li><a href="#section-Cost of non-adoption">Cost of non-adoption</a><ol> </ol></li><li><a href="#section-Performance impact">Performance impact</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Esthetics">Esthetics</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue CONDITION-SLOTS [NIL] [CLARIFICATION]</h1><section id="section-References" class="section"><h2 class="section-title">References</h2>Condition System, version 18 <a class="issue-reference" href="../issues/clos-conditions.xhtml#issue-clos-conditions">X3J13 Issue CLOS-CONDITIONS</a> <a class="issue-reference" href="../issues/package-clutter.xhtml#issue-package-clutter">X3J13 Issue PACKAGE-CLUTTER</a> ANSI <a class="package-reference" href="../chapter-11.xhtml#package-cl">cl</a> draft pp.5-4, 5-5 </section><section id="section-Edit history" class="section"><h2 class="section-title">Edit history</h2>3-Jan-90, Version 1 by Barrett 30-Apr-90, Version 2 by Moon (rewrite, just one proposal, extend to cover all specified objects that have slots) </section><section id="section-Problem description" class="section"><h2 class="section-title">Problem description</h2>  Pages 5-4 and 5-5 of the ANSI <a class="package-reference" href="../chapter-11.xhtml#package-cl">cl</a> draft specification from last fall refer   to slots of specified conditions.  However these slots were not put into   the specification in a consistent way. <br/>  <a class="issue-reference" href="../issues/clos-conditions.xhtml#issue-clos-conditions:integrate">CLOS-CONDITIONS:INTEGRATE</a>, which was adopted by X3J13, changed condition   slots to be the same as CLOS slots, but did not say that the specified   conditions have any specified slots.  However, some people have taken it   to mean that the condition classes defined by the standard all contain   slots whose names are external symbols in the <a class="package-reference" href="../chapter-11.xhtml#package-cl">cl</a> package which are   <a class="function-reference" href="../chapter-16.xhtml#function-string=">string=</a> to the specified initargs for creating conditions.  The ANSI <a class="package-reference" href="../chapter-11.xhtml#package-cl">cl</a>   draft specification was edited in some places as if this were true. <br/>  Revision 18 of the conditions document, which was adopted by X3J13,   refers to initialization arguments and accessors, but carefully avoids   naming the slots themselves.  The philosophy of that document was that   slots are only defined for programmer defined conditions, and that the   only sanctioned interface for the standard condition classes is through   the use of the defined accessor functions. <br/>  A related, more general issue that <a class="issue-reference" href="../issues/package-clutter.xhtml#issue-package-clutter:reduce">PACKAGE-CLUTTER:REDUCE</a> failed to   address is whether there are naming restrictions on   <a class="glossary-reference" href="../chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a> slots of specified classes. <br/>  This is Symbolics issue #8 and Loosemore issue #15 of 27 Feb 90. <br/></section><section class="status-unknown proposal" id="issue-condition-slots:hidden"><h2 class="section-title">Proposal HIDDEN</h2><ol><li> Clarify that no specified condition classes have any specified slots. The implementation of the required information storage by the specified condition classes is <a class="glossary-reference" href="../chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a>.  We need to be clear that specified conditions are not required to have any particular slots with any particular names.  They -are<a class="function-reference" href="../chapter-12.xhtml#function--">-</a> required to be the type of object that is able to have slots.  User-defined conditions -are<a class="function-reference" href="../chapter-12.xhtml#function--">-</a> required to have slots with the names mentioned in the <a class="macro-reference" href="../chapter-9.xhtml#macro-define-condition">define-condition</a> form. <br/></li><li> Table 5-1 in the ANSI <a class="package-reference" href="../chapter-11.xhtml#package-cl">cl</a> draft specification should not contain slot names, because they will not necessarily be accessible via <a class="macro-reference" href="../chapter-7.xhtml#macro-with-slots">with-slots</a> in the way people might infer.  Instead, the table should mention initargs and accessors.  For example, :FORMAT-STRING and SIMPLE-CONDITION-FORMAT-STRING &ndash; but not the symbol FORMAT-STRING. <br/></li><li> Define that it is unspecified whether slots are involved in the operation of specified functions on instances of specified classes, except when slots are explicitly specified by the standard. <br/></li><li> Define that if in a particular implementation a specified class has slots that are not specified by the standard, the names of these slots must not be external symbols of packages defined in the standard nor otherwise accessible in the <a class="package-reference" href="../chapter-A.xhtml#package-user">user</a> package. <br/></li></ol></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>  Allowing the information storage to be <a class="glossary-reference" href="../chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a> is   essential to compatibility with existing systems, which may not represent   this information in the "obvious" way. <br/>  Specifying slots for the condition classes would require putting the slot   names into the <a class="package-reference" href="../chapter-1.xhtml#package-common-lisp">common-lisp</a> package, adding many symbols. <br/>  Part 4 of the proposal repairs an omission in <a class="issue-reference" href="../issues/package-clutter.xhtml#issue-package-clutter:reduce">PACKAGE-CLUTTER:REDUCE</a>.  It   is necessary if users are to be able to define a subclass of a condition   class <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">which</span> <span class="syntax-interned-symbol">is</span> <span class="syntax-interned-symbol">necessary</span> <span class="syntax-interned-symbol">whenever</span> <span class="syntax-interned-symbol">users</span> <span class="syntax-interned-symbol">define</span> <span class="syntax-interned-symbol">their</span> <span class="syntax-interned-symbol">own</span> <span class="syntax-interned-symbol">conditions</span>)</span>
</span></code></pre> and   give slots to their class without potentially interfering with   <a class="glossary-reference" href="../chapter-26.xhtml#glossary-implementation-defined">implementation-defined</a> slots. <br/></section><section id="section-Current practice" class="section"><h2 class="section-title">Current practice</h2>  Parts 1 through 3 are likely to be consistent with all existing   implementations.  Part 4 is not known to be specifically violated by any   implementation, but it might well be violated by accident.  I have not   tested any implementations specifically. <br/></section><section id="section-Cost to Implementors" class="section"><h2 class="section-title">Cost to Implementors</h2>  Easy, all they have to do is keep slot names out of user visible packages. <br/></section><section id="section-Cost to Users" class="section"><h2 class="section-title">Cost to Users</h2>  Easy, all they have to do is use the specified accessors rather than   <a class="function-reference" href="../chapter-7.xhtml#function-slot-value">slot-value</a> or <a class="macro-reference" href="../chapter-7.xhtml#macro-with-slots">with-slots</a> to access information in conditions. <br/></section><section id="section-Cost of non-adoption" class="section"><h2 class="section-title">Cost of non-adoption</h2>  Substantially increased size of the <a class="package-reference" href="../chapter-1.xhtml#package-common-lisp">common-lisp</a> package and considerable   extra work on the ANSI <a class="package-reference" href="../chapter-11.xhtml#package-cl">cl</a> specification to document all the slots.   Porting problems for any code that defines its own condition types   because of slot name collisions. <br/></section><section id="section-Performance impact" class="section"><h2 class="section-title">Performance impact</h2>  None of any consequence.  <a class="function-reference" href="../chapter-7.xhtml#function-slot-value">slot-value</a> might be faster than calling an   accessor in some implementations (although in most implementations it is   slower, when not called from a method), but access to a slot of a   condition never occurs in important inner loops. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>  Conditions will be specified as originally intended. <br/></section><section id="section-Esthetics" class="section"><h2 class="section-title">Esthetics</h2>  Abstraction is better than mandating one particular implementation   of information storage. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>  None. </section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>