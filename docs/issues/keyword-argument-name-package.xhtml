<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” KEYWORD-ARGUMENT-NAME-PACKAGE</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">KEYWORD-ARGUMENT-NAME-PACKAGE</span><br/><ol class="local-toc"><li><a href="#section-Status">Status</a><ol> </ol></li><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit history">Edit history</a><ol> </ol></li><li><a href="#section-Problem Description">Problem Description</a><ol> </ol></li><li><a href="#issue-keyword-argument-name-package:any">Proposal ANY</a><ol> </ol></li><li><a href="#section-Test case">Test case</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Examples would be useful. On p.64 the following examples might be added">Examples would be useful. On p.64 the following examples might be added</a><ol> </ol></li><li><a href="#section-Current Practice">Current Practice</a><ol> </ol></li><li><a href="#section-Cost to implementors">Cost to implementors</a><ol> </ol></li><li><a href="#section-Cost to users">Cost to users</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Aesthetics">Aesthetics</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue KEYWORD-ARGUMENT-NAME-PACKAGE [NIL] [CLARIFICATION/CHANGE]</h1><section id="section-Status" class="status-passed section"><h2 class="section-title">Status</h2>Passed, Mar 88 </section><section id="section-References" class="section"><h2 class="section-title">References</h2>Lambda Expressions (CLtL pp60-64) </section><section id="section-Edit history" class="section"><h2 class="section-title">Edit history</h2>20-Apr-87, Version 1 by Moon 29-Apr-87, Version 2 by Pitman 11-May-87, Version 3 by Moon 29-May-87, Version 4 by Masinter  5-Jun-87, Version 5 by Masinter 11-Jun-87, Version 6 by Masinter 23-Oct-87, Version 7 by Masinter 8-Nov-87, Version 8 by Moon </section><section id="section-Problem Description" class="section"><h2 class="section-title">Problem Description</h2>CLtL says that only keyword symbols can be used as keyword-names in &amp;key parameter specifiers (page 60, "each -keyword<a class="function-reference" href="../chapter-12.xhtml#function--">-</a> must be a keyword symbol, such as :start.") <br/>As Common Lisp is currently defined, if someone wants to define a function that accepts keyword <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">rather</span> <span class="syntax-interned-symbol">than</span> <span class="syntax-interned-symbol">positional</span>)</span>
</span></code></pre> arguments whose keyword-names are symbols in packages other than the <a class="type-reference" href="../chapter-10.xhtml#type-keyword">keyword</a> package, they cannot use <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-key">&amp;KEY</a>. Instead, they have to duplicate the <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-key">&amp;KEY</a> mechanism using <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-rest">&amp;REST</a>, <a class="function-reference" href="../chapter-14.xhtml#function-getf">getf</a>, and <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-interned-symbol">they</span> <span class="syntax-interned-symbol">want</span> <a class="function-reference" href="../chapter-9.xhtml#function-error">error</a> <span class="syntax-interned-symbol">checking</span> <span class="syntax-interned-symbol">of</span> <span class="syntax-interned-symbol">argument</span> <span class="syntax-interned-symbol">names</span>)</span>
</span></code></pre> <a class="macro-reference" href="../chapter-6.xhtml#macro-do">do</a>. <br/>Some applications (including the draft proposal for the Common Lisp Object System <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">CLOS</span>)</span>
</span></code></pre>) require this capability. [See Rationale below.] <br/></section><section class="status-passed proposal" id="issue-keyword-argument-name-package:any"><h2 class="section-title">Proposal ANY</h2>Remove restrictions on the package of the keyword-names of keyword parameters; allow any symbol. That is: <br/>If, following an <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-key">&amp;KEY</a>, a variable appears alone or in a <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="symbol-reference" href="../chapter-25.xhtml#symbol-variable">variable</a>
<span class="syntax-interned-symbol">default-value</span>)</span>
</span></code></pre> pair, the behavior specified in CLtL is unchanged: a keyword symbol with the same print name as the variable is created and is used as the keyword-name when matching arguments to parameter specifiers.  A keyword-name that is not a keyword symbol can be specified with the <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">-keyword-</span> <span class="syntax-interned-symbol">-var-</span>)</span> <span class="syntax-interned-symbol">...</span>)</span>
</span></code></pre> syntax of parameter specifier. The -keyword<a class="function-reference" href="../chapter-12.xhtml#function--">-</a> can be any symbol, not just a keyword. <br/>A future specification of Common Lisp could be written with revised terminology that did not use the term "keyword" to refer to three different things: symbols in the <a class="type-reference" href="../chapter-10.xhtml#type-keyword">keyword</a> package, symbols beginning with &amp; that have special meaning in lambda-lists, and keyword-names used to match function arguments to keyword parameter specifiers. However, this proposal does not propose to change any terminology. <br/></section><section id="section-Test case" class="section"><h2 class="section-title">Test case</h2><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">RESULT</span> <span class="syntax-cons">(<a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-key">&amp;KEY</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">SECRET-KEYWORD</span> <span class="syntax-interned-symbol">SECRET</span>)</span> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>)</span> <span class="syntax-interned-symbol">AMOUNT</span>)</span>
    <span class="syntax-cons">(<a class="function-reference" href="../chapter-22.xhtml#function-format">format</a> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"You ~A $~D"</span> <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-interned-symbol">SECRET</span> <span class="syntax-string">"win"</span> <span class="syntax-string">"lose"</span>)</span> <span class="syntax-interned-symbol">AMOUNT</span>)</span>)</span>
</span></code></pre> <br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">RESULT</span> <span class="syntax-keyword-symbol">:AMOUNT</span> <span class="syntax-number">100</span>)</span>
</span></code></pre> <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; "You lose $100" <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">RESULT</span> <span class="syntax-keyword-symbol">:AMOUNT</span> <span class="syntax-number">100</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">SECRET-KEYWORD</span></span> <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>)</span>
</span></code></pre> <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; "You win $100" <br/></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>The "rationale" box on p.62 of CLtL is an argument in favor of requiring keyword-names to be symbols, and disallowing numbers, but does not speak to the issue of whether or not those symbols should be further restricted to be in the <a class="type-reference" href="../chapter-10.xhtml#type-keyword">keyword</a> package. <br/>The desire for keyword parameters whose keyword-names are not in the <a class="type-reference" href="../chapter-10.xhtml#type-keyword">keyword</a> package arises when the set of keyword-names accepted by a function is the union of the sets of keyword-names accepted by several other functions, rather than being enumerated in a single place.  In this case, it becomes desirable to use packages to prevent accidental name clashes among keyword-names of different functions. <br/>One example of a Common Lisp application that requires this capability is the draft proposal for an object-oriented programming standard <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">CLOS</span>)</span>
</span></code></pre>.  It will have generic functions that accept arguments and pass them on to one or more applicable methods, with each method defining its own set of keyword-names that it is interested in.  If this proposal is not adopted, either the keyword-names will be required to be keywords, which will require the methods to have non-modular knowledge of each other in order to avoid name clashes, or the methods will have to be defined with an ad hoc mechanism that duplicates the essential functionality of &amp;key but removes the restriction. <br/>A second example of a Common Lisp application that requires this capability is private communication channels between functions.  Suppose a public routine MAKE-FOO needs to accept arbitrary arguments from the caller and passes those arguments along to an internal routine with additional arguments of its own, and suppose that keyword parameters are used to receive these arguments. <br/> <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-11.xhtml#macro-in-package">in-package</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">FOOLAND</span></span>)</span>
</span></code></pre>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">MAKE-FOO</span> <span class="syntax-cons">(<a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-rest">&amp;REST</a> <span class="syntax-interned-symbol">NAME-VALUE-PAIRS</span> <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-key">&amp;KEY</a> <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-allow-other-keys">&amp;ALLOW-OTHER-KEYS</a>)</span>
   <span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-apply">apply</a> <span class="syntax-function">#'<span class="syntax-interned-symbol">MAKE-FOO-INTERNAL</span></span> <span class="syntax-quote">'<span class="syntax-interned-symbol">EXPLICIT</span></span> <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> <span class="syntax-interned-symbol">NAME-VALUE-PAIRS</span>)</span>)</span>
</span></code></pre> <br/>This could be done without fear that the use of EXPLICIT <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a> would override some argument in NAME-VALUE-PAIRS, since the only way that could happen is if someone had done <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">MAKE-FOO</span> <span class="syntax-quote">'<span class="syntax-two-package-markers syntax-interned-symbol">FOOLAND::EXPLICIT</span></span>
<a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>)</span>
</span></code></pre>, or if the user was programming explicitly in the FOOLAND package, either of which is an implicit admission of willingness to violate FOOLAND's modularity. <br/>Documentation Impact: <br/>Some careful rewording of the existing language in CLtL is necessary in the standard to avoid confusion between "keyword", indicating a symbol in the <a class="type-reference" href="../chapter-10.xhtml#type-keyword">keyword</a> package, and "keyword name", indicating a syntactic part of a keyword parameter specifier.  It is likely that this is best served by changing those instances of "keyword" to "named argument" when the specification is discussing the indicator which introduces an actual parameter in a call to a function defined with <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-key">&amp;KEY</a>. <br/>The wording which refers to named arguments as being introduced by keyword symbols would change to simply refer to those arguments being introduced by symbols. For example, in the middle of p.60, the sentence:    ... each -keyword<a class="function-reference" href="../chapter-12.xhtml#function--">-</a> must be a keyword symbol, such as :start.  would become    ... each named argument name must be a symbol. <br/>The word "keyword" in the first complete sentence on p.62 would be changed to "symbol" for similar reasons. <br/>Extra wording would have to be added on p.60 to explain that by convention keyword symbols are normally used as the names for named arguments, and that all functions built into the Common Lisp language follow that convention. <br/></section><section id="section-Examples would be useful. On p.64 the following examples might be added" class="section"><h2 class="section-title">Examples would be useful. On p.64 the following examples might be added</h2><pre>    <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-cons">(<a class="macro-reference" href="../chapter-3.xhtml#macro-lambda">lambda</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-key">&amp;KEY</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-keyword-symbol">:sea</span> <span class="syntax-interned-symbol">c</span>)</span>)</span> <span class="syntax-interned-symbol">d</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">d</span>)</span>)</span> <span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-keyword-symbol">:sea</span> <span class="syntax-number">6</span>)</span>
</span></code></pre><br/>    <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">6</span> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>)</span>
</span></code></pre><br/><br/>    <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-cons">(<a class="macro-reference" href="../chapter-3.xhtml#macro-lambda">lambda</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-key">&amp;KEY</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">c</span>)</span>)</span> <span class="syntax-interned-symbol">d</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">d</span>)</span>)</span> <span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">c</span></span> <span class="syntax-number">6</span>)</span>
</span></code></pre><br/>    <a class="function-reference" href="../chapter-12.xhtml#function-=">=</a>&gt; <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">6</span> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>)</span>
</span></code></pre><br/><br/></pre></section><section id="section-Current Practice" class="section"><h2 class="section-title">Current Practice</h2>We do not currently know of an implementation that enforces the restriction that this proposal seeks to remove. <br/>Some implementations have bugs that prevent <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> from working as a keyword argument name, but allow all <a class="glossary-reference" href="../chapter-26.xhtml#glossary-non-nil">non-nil</a> symbols. (One Symbolics version that was checked had this bug.) <br/></section><section id="section-Cost to implementors" class="section"><h2 class="section-title">Cost to implementors</h2>Some implementors might have to rearrange their error checking slightly, but it should be very easy. <br/></section><section id="section-Cost to users" class="section"><h2 class="section-title">Cost to users</h2>None--no existing programs will stop working.   <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>This will help with the object-oriented programming standard, among other things. <br/></section><section id="section-Aesthetics" class="section"><h2 class="section-title">Aesthetics</h2>The restriction of &amp;key to only keyword symbols is arbitrary and unnecessary. <br/>There will probably be an argument about whether the restriction is more aesthetic or less aesthetic than the freedom, but in either case the aesthetic effect is slight. <br/>In any case, users who do not want to use the extended functionality can generally avoid it. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>The cleanup committee generally supports this extension.  <br/>Moon was under the impression that this proposal was actually adopted around December 1985 <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">although</span> <span class="syntax-interned-symbol">no</span> <span class="syntax-interned-symbol">formal</span> <span class="syntax-interned-symbol">mechanism</span> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">adopting</span>
<span class="syntax-interned-symbol">proposals</span> <span class="syntax-interned-symbol">existed</span> <span class="syntax-interned-symbol">at</span> <span class="syntax-interned-symbol">that</span> <a class="macro-reference" href="../chapter-25.xhtml#macro-time">time</a>)</span>
</span></code></pre>, but may be mistaken. <br/>If Common Lisp truly has a restriction that only keyword symbols can be used as keyword names in calls to functions that take keyword arguments, it will be more difficult to come up with an object-oriented programming standard that fits within Common Lisp. <br/>The cleanup committee considered, but did not adopt, a proposal to exclude <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a> as a legal indicator. It might catch some errors, but is otherwise an odd restriction. <br/></section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>