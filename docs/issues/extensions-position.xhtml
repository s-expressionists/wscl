<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp — EXTENSIONS-POSITION</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">EXTENSIONS-POSITION</span><br/><ol class="local-toc"><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit history">Edit history</a><ol> </ol></li><li><a href="#section-Problem Description">Problem Description</a><ol> </ol></li><li><a href="#issue-extensions-position:documentation">Proposal DOCUMENTATION</a><ol> </ol></li><li><a href="#issue-extensions-position:disable">Proposal DISABLE</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Current Practice">Current Practice</a><ol> </ol></li><li><a href="#section-Cost to Implementors">Cost to Implementors</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Conversion Cost">Conversion Cost</a><ol> </ol></li><li><a href="#section-Aesthetics">Aesthetics</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue EXTENSIONS-POSITION [NIL] [Clarification]</h1><h2>Related issues</h2><ul><span class="issue-reference error">issue:CONFORMANCE-POSITION</span><span class="issue-reference error">issue:IF-BODY</span><span class="issue-reference error">issue:ERROR-TERMINOLOGY</span><span class="issue-reference error">issue:EXTRA-SYNTAX</span><span class="issue-reference error">issue:EXTRA-OPTIONAL-KEYWORD-ARGUMENTS</span><span class="issue-reference error">issue:UNSPECIFIED-DATATYPES</span><span class="issue-reference error">issue:MACRO-AS-FUNCTION</span><span class="issue-reference error">issue:UNSOLCITED-MESSAGES</span><span class="issue-reference error">issue:EXTRA-RETURN-VALUES</span></ul><section id="section-References" class="section"><h2 class="section-title">References</h2>Chapter 1, Working draft of standard </section><section id="section-Edit history" class="section"><h2 class="section-title">Edit history</h2>12-DEC-88, Version 1 by Chapman 20-DEC-88, Version 2 by Chapman 9-JAN-89, Version 3 by Chapman 10-JAN-89, Version 4 by Chapman 2-FEB-89, Version 5 by Chapman 24-FEB-89, Version 6 by Chapman (added RPG's comment) 10-MAR-89, Version 7 by Chapman (added discussion) </section><section id="section-Problem Description" class="section"><h2 class="section-title">Problem Description</h2>What is the definition of a language extension? What effect does a language extension have on a conforming program?  What obligation does an implementation have to warn the user that an  extension is being used? <br/>Presumably the only thing that defining it as an extension can mean from <a class="package-reference" href="../chapter-11.xhtml#package-cl">cl</a>'s point of view is `initially defining' it as an extension. Whether an implementation permits redefinition of an extension is between that implementation and its users and beyond the scope of Common Lisp. For example, it is common practice to redefine some kinds of system functions in Genera &ndash; to extend the system in interesting ways, to fix bugs, etc. <br/>  </section><section class="status-unknown proposal" id="issue-extensions-position:documentation"><h2 class="section-title">Proposal DOCUMENTATION</h2>The standard document should define a language extension to be any implementation-supplied tool that isn't explicitly defined in the standard. This includes facilities added to tools defined in the standard. The standard document should levy the following requirement on a  conforming implementation's documentation: The documentation that accompanies a conforming implementation should clearly state which parts of the implementation are extensions.   <br/>If the standard says that "the results are unspecified", and an implementation specifies the results, this an extension in the sense that if the correct behavior of a program depends on the results, only implementations with the same extension will execute the program correctly. <br/>In places where the standard says that "an implementation may be extended", this implies that a conforming, but probably non-portable, program can be written using the implementation's extension. <br/></section><section class="status-unknown proposal" id="issue-extensions-position:disable"><h2 class="section-title">Proposal DISABLE</h2>Same as <a class="issue-reference" href="#issue-extensions-position:documentation">EXTENSIONS-POSITION:DOCUMENTATION</a> except that an implementation is required to have a way to disable its extensions, so that a programmer can be told when he is using a feature that might affect his program's portability.  <br/></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>The standard should contain information about language extensions since most implementations have extended the language. <br/></section><section id="section-Current Practice" class="section"><h2 class="section-title">Current Practice</h2>CLtL allows any extension, provided that it doesn't alter the behavior of a program that only uses what is specified in CLtL.  In particular, any situation that "is an error" <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">either</span> <span class="syntax-interned-symbol">explicitly</span> <a class="macro-reference" href="../chapter-5.xhtml#macro-or">or</a> <span class="syntax-interned-symbol">implicitly</span>)</span>
</span></code> is a potential area for extension. <br/>  </section><section id="section-Cost to Implementors" class="section"><h2 class="section-title">Cost to Implementors</h2>Vendors will have to improve their documentation to list all their extensions.  Vendors will have to go through their implementation and determine what is or isn't an extension. <br/>  </section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>This definition will provide a basis for proper understanding of  the error terminology used in the standard. The implementation documentation requirement will aid the user in producing portable code. <br/></section><section id="section-Conversion Cost" class="section"><h2 class="section-title">Conversion Cost</h2>None. <br/></section><section id="section-Aesthetics" class="section"><h2 class="section-title">Aesthetics</h2>None. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>Masinter says: It seems to be a constraint on "documentation" rather than "implementation" if you turn the accidental behavior of <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-car">car</a> <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>)</span>
</span></code> into a "feature" of your implementation. We might want to disallow such an extension as "conforming to the standard". An implementation which had such an extension might conform, even if the extension did not conform. <br/>RPG says: I favor remaining mute on this topic in the standard. <br/>Moon says: "I favor <a class="issue-reference" href="#issue-extensions-position:documentation">EXTENSIONS-POSITION:DOCUMENTATION</a>. <br/>I oppose <a class="issue-reference" href="#issue-extensions-position:disable">EXTENSIONS-POSITION:DISABLE</a> because it mandates a particular development environment feature, but Common Lisp has avoided saying anything about development environments since that is an area of extreme controversy. <br/>Gabriel's position of standing mute would be okay with me." </section></div></main><footer>Copyright © 2021 Jan Moringen</footer></body></html>