<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” FUNCTION-TYPE-KEY-NAME</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">FUNCTION-TYPE-KEY-NAME</span><br/><ol class="local-toc"><li><a href="#section-Status">Status</a><ol> </ol></li><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit history">Edit history</a><ol> </ol></li><li><a href="#section-Problem description">Problem description</a><ol> </ol></li><li><a href="#issue-function-type-key-name:specify-keyword">Proposal SPECIFY-KEYWORD</a><ol> </ol></li><li><a href="#section-Example">Example</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Current practice">Current practice</a><ol> </ol></li><li><a href="#section-Cost to Implementors">Cost to Implementors</a><ol> </ol></li><li><a href="#section-Cost to users">Cost to users</a><ol> </ol></li><li><a href="#section-Cost of non-adoption">Cost of non-adoption</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Esthetics">Esthetics</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue FUNCTION-TYPE-KEY-NAME [NIL] [CLARIFICATION, CHANGE]</h1><h2>Related issues</h2><ul><a class="issue-reference" href="../issues/function-type-rest-list-element.xhtml#issue-function-type-rest-list-element">FUNCTION-TYPE-REST-LIST-ELEMENT</a><a class="issue-reference" href="../issues/keyword-argument-name-package.xhtml#issue-keyword-argument-name-package">KEYWORD-ARGUMENT-NAME-PACKAGE</a><span class="issue-reference error">issue:FUNCTION-ARGUMENT-TYPE-SEMANTICS</span></ul><section id="section-Status" class="status-passed section"><h2 class="section-title">Status</h2>Passed, 1988? (Not sure which meeting) </section><section id="section-References" class="section"><h2 class="section-title">References</h2>CLtL p.47-48, 61 </section><section id="section-Edit history" class="section"><h2 class="section-title">Edit history</h2>Version 1, 23-Nov-1987 Sandra Loosemore Version 2, 15-Jan-1988 Sandra Loosemore  (from comments by Kent Pitman) Version 3, 13-Feb-88 Masinter </section><section id="section-Problem description" class="section"><h2 class="section-title">Problem description</h2>The <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> type specifier list is provided to allow declaration of function argument types and return value types.  This type specifier uses a syntax similar to the usual lambda list syntax to specify which types go with which lambda list variables.  However, there is a problem with <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-key">&amp;KEY</a> lambda variables because CLtL does not specify how the types specified in the <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> declaration are matched up to either the actual arguments passed to the function, or the lambda variables in the function definition <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">since</span> <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <span class="syntax-interned-symbol">ordering</span> <span class="syntax-interned-symbol">of</span> <a class="type-reference" href="../chapter-10.xhtml#type-keyword">keyword</a> <span class="syntax-interned-symbol">arguments</span> <span class="syntax-interned-symbol">is</span> <span class="syntax-interned-symbol">arbitrary</span>)</span>
</span></code>. <br/></section><section class="status-passed proposal" id="issue-function-type-key-name:specify-keyword"><h2 class="section-title">Proposal SPECIFY-KEYWORD</h2><ol><li> Specify that the <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-key">&amp;KEY</a> parameters in a <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> type specifier lambda list should be supplied as lists of the form <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">&lt;keyword&gt;</span> <span class="syntax-interned-symbol">&lt;type&gt;</span>)</span>
</span></code>.  The &lt;keyword&gt; must be a valid keyword-name symbol as must be supplied in the actual arguments of a call. (This is usually a symbol in the keyword package, but, as per <a class="issue-reference" href="../issues/keyword-argument-name-package.xhtml#issue-keyword-argument-name-package">keyword-argument-name-package</a>, not necessarily so.)  </li><li> Allow <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-allow-other-keys">&amp;ALLOW-OTHER-KEYS</a> to appear in a <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> type specifier lambda list.  The interpretation of such declarations is that, when <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-key">&amp;KEY</a> is given in a <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> type specifier lambda list, it is safe to assume that the <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-key">&amp;KEY</a>s given are exhaustive unless <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-allow-other-keys">&amp;ALLOW-OTHER-KEYS</a> is present.  <br/><a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-allow-other-keys">&amp;ALLOW-OTHER-KEYS</a> is an indication that other keyword arguments may actually be supplied and, if supplied, may be used.  <br/></li></ol></section><section id="section-Example" class="section"><h2 class="section-title">Example</h2><pre>The type of the function <a class="function-reference" href="../chapter-14.xhtml#function-make-list">make-list</a> could be declared as:<br/><br/>   <code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> <a class="function-reference" href="../chapter-14.xhtml#function-make-list">make-list</a> <span class="syntax-cons">(<span class="syntax-cons">(<a class="type-reference" href="../chapter-12.xhtml#type-integer">integer</a> <span class="syntax-number">0</span>)</span> <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-key">&amp;KEY</a> <span class="syntax-cons">(<span class="syntax-keyword-symbol">:INITIAL-ELEMENT</span> <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>)</span>)</span> <a class="function-reference" href="../chapter-14.xhtml#function-list">list</a>)</span>
</span></code><br/><br/></pre></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2><ol><li> This specifies a direct correspondence between the argument type and its matching keyword.  All of the information is in one place, and the user does not have to remember <code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-or">or</a> <span class="syntax-interned-symbol">even</span> <span class="syntax-interned-symbol">know</span>)</span>
</span></code> the order in which <a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-key">&amp;KEY</a> arguments appear in the actual function definition. </li><li> This is probably an oversight in the original specification. </li></ol></section><section id="section-Current practice" class="section"><h2 class="section-title">Current practice</h2>Many Common Lisp implementations currently ignore <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> type declarations.  The situation regarding type specifications for keyword arguments is so ambiguous that few users attempt to use them. <br/></section><section id="section-Cost to Implementors" class="section"><h2 class="section-title">Cost to Implementors</h2>Implementations that ignore the <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> type specifier or keyword arguments in a <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> type specifier may continue to do so.  This proposal should not involve massive amounts of code to be rewritten. <br/></section><section id="section-Cost to users" class="section"><h2 class="section-title">Cost to users</h2>Because the current situation is so ambiguous, <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> type specifiers and particularly the specification of keyword argument types are not widely used. However, since this is an incompatible change, it would be nice if implementations check for, and warn about, old-style usage. <br/></section><section id="section-Cost of non-adoption" class="section"><h2 class="section-title">Cost of non-adoption</h2>If nothing is done, the <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> type specifier will continue to be of limited use for its intended purpose. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>Adopting the proposal will clear up an area of confusion in the language design. <br/></section><section id="section-Esthetics" class="section"><h2 class="section-title">Esthetics</h2>The syntax is fairly obvious and is analogous to the <code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">&lt;keyword&gt;</span> <span class="syntax-interned-symbol">&lt;variable&gt;</span>)</span>
</span></code> lambda list syntax. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>The exact semantics of function declarations and the types of arguments  is still under discussion, as are several other issues dealing with declarations. However, this issue seemed separable. <br/></section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>