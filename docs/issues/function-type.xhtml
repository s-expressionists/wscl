<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” FUNCTION-TYPE</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">FUNCTION-TYPE</span><br/><ol class="local-toc"><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit History">Edit History</a><ol> </ol></li><li><a href="#section-Problem Description">Problem Description</a><ol> </ol></li><li><a href="#issue-function-type:x3j13-march-88">Proposal X3J13-MARCH-88</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Current Practice">Current Practice</a><ol> </ol></li><li><a href="#section-Cost to Implementors">Cost to Implementors</a><ol> </ol></li><li><a href="#section-Cost to Users">Cost to Users</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Aesthetics">Aesthetics</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue FUNCTION-TYPE [NIL] [CHANGE]</h1><section id="section-References" class="section"><h2 class="section-title">References</h2>functions (p32), types (p33), <a class="function-reference" href="../chapter-5.xhtml#function-functionp">functionp</a> (p76), <a class="function-reference" href="../chapter-10.xhtml#function-symbol-function">symbol-function</a> (p90), <a class="function-reference" href="../chapter-5.xhtml#function-apply">apply</a> (p107), <a class="function-reference" href="../chapter-4.xhtml#function-coerce">coerce</a> (pp51-52) </section><section id="section-Edit History" class="section"><h2 class="section-title">Edit History</h2>26-Feb-87, Version 1 by Gabriel 15-Mar-87, Version 2 by Cleanup Committee 10-May-87, Version 3 by Fahlman 29-May-87, Version 4 by Masinter (incorporate comments) 15-Jun-87, Version 5 by Fahlman (include two options) 23-Oct-87, Version 6 by Masinter (only STRICT-REDEFINITION) 09-Nov-87, Version 7 by Masinter (minor cleanup) 14-Nov-87, Version 8 by Pitman (major restructuring) 13-Feb-88, Version 9 by Masinter, (add back 2nd option) 19-May-88, Version 10 by Masinter, (modify as per X3J13) 24-May-88, Version 11 by van Roggen (don't coerce lists, relax <a class="function-reference" href="../chapter-10.xhtml#function-symbol-function">symbol-function</a> reqs) 4-Sep-88, Version 12 by Masinter (incorporate amendments adopted at June 88 X3J13) </section><section id="section-Problem Description" class="section"><h2 class="section-title">Problem Description</h2> The definition of the term ``function'' in CLtL includes all symbols and  many lists in addition to `true' functions. <br/> Also, page 47 of CLtL states that the <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> type specifier can only  be used for declaration and not for discrimination. Some of the original  Common Lisp designers maintain that this restriction on the use of the  <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> specifier was meant to apply only to long-form <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a>  specifiers, but since this intent was not explicitly stated, the status  of <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> as a type is blurred.  <br/> A consequence of the p47 confusion is that <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-5.xhtml#function-functionp">functionp</a> <span class="syntax-interned-symbol">x</span>)</span>
</span></code></pre> cannot portably  be relied upon to be equivalent to <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-4.xhtml#function-typep">typep</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-quote">'<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a></span>)</span>
</span></code></pre>. <br/></section><section class="status-unknown proposal" id="issue-function-type:x3j13-march-88"><h2 class="section-title">Proposal X3J13-MARCH-88</h2>This proposal is basically the STRICT-REDEFINITION proposal of version 9 of this issue, correcting a few typos, changing section 2E as agreed upon at X3J13 March 1988, allowing symbols but not lists to be FUNCALLed or APPLYed, and relaxing some SYMBOL-FUNCTION/FBOUNDP requirements. <br/><ol><li> Redefine the type <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> so that it can be used for discrimination  as well as declaration. <br/> 1a. The types <a class="function-reference" href="../chapter-14.xhtml#function-cons">cons</a>, <a class="symbol-reference" href="../chapter-2.xhtml#symbol-symbol">symbol</a>, <a class="symbol-reference" href="../chapter-2.xhtml#symbol-array">array</a>, <a class="type-reference" href="../chapter-12.xhtml#type-number">number</a>, <a class="function-reference" href="../chapter-13.xhtml#function-character">character</a>, and <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a>      are pairwise disjoint.  In particular, a list may not be used      to implement any <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> subtype. <br/> 1b. Define that the type <a class="type-reference" href="../chapter-4.xhtml#type-compiled-function">compiled-function</a> is a subtype of <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a>.      Implementations are free to define other subtypes of <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a>. <br/></li><li> Define that a ``function'' as used throughout the CLtL is restricted  to be exactly those objects of type <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a>. <br/> 2a. This type no longer includes objects of type <a class="symbol-reference" href="../chapter-2.xhtml#symbol-symbol">symbol</a> or lists      whose <a class="function-reference" href="../chapter-14.xhtml#function-car">car</a> is <a class="macro-reference" href="../chapter-3.xhtml#macro-lambda">lambda</a>. <br/> 2b. The behavior of <a class="function-reference" href="../chapter-5.xhtml#function-functionp">functionp</a> is defined to be exactly equivalent to      #'<pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-3.xhtml#macro-lambda">lambda</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">X</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="../chapter-4.xhtml#function-typep">typep</a> <span class="syntax-interned-symbol">X</span> <span class="syntax-quote">'<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a></span>)</span>)</span>
</span></code></pre>.  This is an incompatible      change. <br/> 2c. Clarify that the list form of the <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> type specifier may      still only be used for declaration. <br/> 2d. Clarify that the symbol form of the <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> type specifier may      be used for type discrimination. <br/> 2e. <a class="function-reference" href="../chapter-5.xhtml#function-funcall">funcall</a> and <a class="function-reference" href="../chapter-5.xhtml#function-apply">apply</a> and all Common Lisp functions that </li></ol>	take function arguments to also take a symbol, which will 	be coerced to a function as if by <a class="function-reference" href="../chapter-10.xhtml#function-symbol-function">symbol-function</a>. <br/>    2f. This is an incompatible change in that it is an error to pass 	  anything other than a function or symbol as the functional 	  argument. <br/> 3. Clarify that the result of a <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> special form must be a function. <br/>    3a. This implies that some <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> <span class="syntax-interned-symbol">name</span>)</span>
</span></code></pre> may be implicitly interpreted 	as <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> <span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> <span class="syntax-interned-symbol">name</span>)</span>)</span>
</span></code></pre>.  <br/> 4. Clarify that it is an error to use the special form <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> on a     symbol that does not denote a function in the lexical environment in     which the special form appears. Specifically, it is an error to use the     <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> special form on a symbol that denotes a macro or special form. <br/>    4a. Some implementations may choose not to signal this error for         performance reasons, but implementations are forbidden from         defining the failure to signal an error as a `useful' behavior. <br/> 5. Clarify that <a class="function-reference" href="../chapter-5.xhtml#function-fboundp">fboundp</a> must return true for a symbol naming a macro or     a special form, and that it is permissible to call <a class="function-reference" href="../chapter-10.xhtml#function-symbol-function">symbol-function</a>     on any symbol for which <a class="function-reference" href="../chapter-5.xhtml#function-fboundp">fboundp</a> returns true. <br/>    5a. The value returned by <a class="function-reference" href="../chapter-10.xhtml#function-symbol-function">symbol-function</a> when <a class="function-reference" href="../chapter-5.xhtml#function-fboundp">fboundp</a> returns true         but the symbol denotes a macro or special form is not well-defined,         but <a class="function-reference" href="../chapter-10.xhtml#function-symbol-function">symbol-function</a> will not signal an error.  <br/>    5b. <a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> of <a class="function-reference" href="../chapter-10.xhtml#function-symbol-function">symbol-function</a> requires a <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> as the new value. 	It is an error to set the <a class="function-reference" href="../chapter-10.xhtml#function-symbol-function">symbol-function</a> of a symbol to a 	symbol or a list or the value returned by <a class="function-reference" href="../chapter-10.xhtml#function-symbol-function">symbol-function</a> on 	the name of a macro or a special form. <br/>    5c. The motivation for this distinction between <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> and  	<a class="function-reference" href="../chapter-10.xhtml#function-symbol-function">symbol-function</a> is that <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> is intended for day-to-day 	use within programs while <a class="function-reference" href="../chapter-10.xhtml#function-symbol-function">symbol-function</a> is a data structure 	accessor used primarily for meta-level applications and not 	recommended for general use. It is provided primarily to 	complete the set of accessors on symbols. <br/> 6. <a class="function-reference" href="../chapter-4.xhtml#function-coerce">coerce</a> is extended to allow objects to be coerced to type <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a>. <br/>    6a. <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-4.xhtml#function-coerce">coerce</a> <a class="symbol-reference" href="../chapter-2.xhtml#symbol-symbol">symbol</a> <span class="syntax-quote">'<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a></span>)</span>
</span></code></pre> extracts the <a class="function-reference" href="../chapter-10.xhtml#function-symbol-function">symbol-function</a> of the         given symbol, signalling an error if the symbol is not <a class="function-reference" href="../chapter-5.xhtml#function-fboundp">fboundp</a> or 	if the symbol names a macro or a special-form. <br/>    6b. <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-4.xhtml#function-coerce">coerce</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-quote">'<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a></span>)</span>
</span></code></pre>, where the value of x is a list that 		 begins with <a class="macro-reference" href="../chapter-3.xhtml#macro-lambda">lambda</a>, will return a <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> similar to 		 <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-3.xhtml#function-eval">eval</a> <span class="syntax-quote">'<span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> <span class="syntax-interned-symbol">,x</span>)</span></span>)</span>
</span></code></pre>. <br/> 7. Clarify that the value of <a class="variable-reference" href="../chapter-3.xhtml#variable-*macroexpand-hook*">*macroexpand-hook*</a> is first coerced to a     function before being called as the expansion interface hook by     <a class="function-reference" href="../chapter-3.xhtml#function-macroexpand-1">macroexpand-1</a>. <br/></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2> The fuzzy definition of ``function'' has descended from older dialects of  Lisp, such as Maclisp. Many places in existing code make assumptions about  the current meaning, making any change painful. <br/> It is very important both for documentation clarity and for program type  discrimination <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">such</span> <span class="syntax-interned-symbol">as</span> <span class="syntax-interned-symbol">CLOS</span>)</span>
</span></code></pre> to have a clear term which denotes a   ``true function.'' <br/> This proposal is a compromise between a CONSERVATIVE proposal <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">which</span> <span class="syntax-interned-symbol">left</span>
 <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> <span class="syntax-interned-symbol">alone</span> <a class="macro-reference" href="../chapter-5.xhtml#macro-and">and</a> <span class="syntax-interned-symbol">introduced</span> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">new</span> <a class="symbol-reference" href="../chapter-25.xhtml#symbol-type">type</a>)</span>
</span></code></pre>, and a STRICT-REDEFINITION proposal,  which incompatibly changed not only the <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> type and <a class="function-reference" href="../chapter-10.xhtml#function-symbol-function">symbol-function</a>,  but also the behavior of <a class="function-reference" href="../chapter-5.xhtml#function-funcall">funcall</a>, <a class="function-reference" href="../chapter-5.xhtml#function-apply">apply</a> and functions with functional  arguments. <br/> For compatibility reasons symbols are still acceptable to <a class="function-reference" href="../chapter-5.xhtml#function-funcall">funcall</a> et al.,  but for aesthetic reasons lambda-expressions <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">lists</span> <span class="syntax-interned-symbol">whose</span> <a class="function-reference" href="../chapter-14.xhtml#function-car">car</a> <span class="syntax-interned-symbol">is</span> <a class="macro-reference" href="../chapter-3.xhtml#macro-lambda">lambda</a>
 <a class="macro-reference" href="../chapter-5.xhtml#macro-and">and</a> <span class="syntax-interned-symbol">whose</span> <a class="function-reference" href="../chapter-14.xhtml#function-cadr">cadr</a> <span class="syntax-interned-symbol">is</span> <span class="syntax-interned-symbol">a</span> <a class="function-reference" href="../chapter-14.xhtml#function-list">list</a>)</span>
</span></code></pre> are no longer acceptable. <br/></section><section id="section-Current Practice" class="section"><h2 class="section-title">Current Practice</h2> In some implementations, <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-4.xhtml#function-typep">typep</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-quote">'<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a></span>)</span>
</span></code></pre> signals an error.  In some implementations, <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-4.xhtml#function-typep">typep</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-quote">'<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a></span>)</span>
</span></code></pre> is true for values    returned by <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a>, symbols that are <a class="function-reference" href="../chapter-5.xhtml#function-fboundp">fboundp</a>, and lambda expressions.   In some implementations, <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-4.xhtml#function-typep">typep</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-quote">'<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a></span>)</span>
</span></code></pre> is true only for values    returned by <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a>. <br/> Implementations vary on what may go into the function cell, depending on  how much error checking they want to have to do at function call time, and  depending on whether they store other kinds of information <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">such</span> <span class="syntax-interned-symbol">as</span> <a class="symbol-reference" href="../chapter-3.xhtml#symbol-special">special</a>
 <span class="syntax-interned-symbol">form</span> <span class="syntax-interned-symbol">information</span>)</span>
</span></code></pre> in the function cell. <br/> Few current Common Lisp implementations have exactly the  semantics described in this proposal. <br/></section><section id="section-Cost to Implementors" class="section"><h2 class="section-title">Cost to Implementors</h2> Bringing type predicates (<a class="function-reference" href="../chapter-5.xhtml#function-functionp">functionp</a>, etc.) and higher order functions  (<a class="function-reference" href="../chapter-5.xhtml#function-apply">apply</a>, etc.) into compliance should require little effort in most  implementations. <br/> Compiled functions are true functions in almost all current  implementations, but in many implementations, interpreted functions and  closures stored in the function cell of a symbol are represented as lists.  Under this proposal, this representation would have to be different  <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">implemented</span> <span class="syntax-interned-symbol">either</span> <span class="syntax-interned-symbol">as</span> <span class="syntax-interned-symbol">structures</span> <a class="macro-reference" href="../chapter-5.xhtml#macro-or">or</a> <span class="syntax-interned-symbol">as</span> <a class="function-reference" href="../chapter-5.xhtml#function-some">some</a> <a class="symbol-reference" href="../chapter-3.xhtml#symbol-special">special</a> <span class="syntax-interned-symbol">internal</span> <span class="syntax-interned-symbol">data</span> <a class="symbol-reference" href="../chapter-25.xhtml#symbol-type">type</a>)</span>
</span></code></pre>.  The behavior of <a class="function-reference" href="../chapter-3.xhtml#function-compile">compile</a>, <a class="macro-reference" href="../chapter-25.xhtml#macro-step">step</a>, <a class="macro-reference" href="../chapter-25.xhtml#macro-trace">trace</a>, and possibly <a class="function-reference" href="../chapter-25.xhtml#function-ed">ed</a> would have to be   modified to deal with functions that are not lists <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">but</span> <span class="syntax-interned-symbol">from</span> <span class="syntax-interned-symbol">which</span> <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a>
 <a class="function-reference" href="../chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">form</span> <span class="syntax-interned-symbol">can</span> <span class="syntax-interned-symbol">be</span> <span class="syntax-interned-symbol">reconstructed</span> <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-interned-symbol">necessary</span>)</span>
</span></code></pre>. <br/></section><section id="section-Cost to Users" class="section"><h2 class="section-title">Cost to Users</h2> The changes to <a class="function-reference" href="../chapter-5.xhtml#function-functionp">functionp</a> and the <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> type declaration are relatively easy  to deal with.  <br/> Because CLtL's language was somewhat fuzzy about what might go into the  function cell of a symbol, some code that explicitly deposited symbols  or lists in a symbol's function cell, or expected lists back, will  have to change. Such code was already not portable, however, since some  implementations signal an error when this is done. <br/> The original STRICT-REDEFINITION proposal required users to deal with  the use of symbols and lambda-expressions as functional arguments.  However  this proposal is compatible with current CLtL definition in the use of  symbols, which would be the hardest change to make.  There are probably  relatively few uses of lambda-expressions as ``functions'', which can  be dealt with by <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-3.xhtml#function-eval">eval</a> <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> <span class="syntax-unquote">,<span class="syntax-interned-symbol">lambda-expresssion</span></span>)</span></span>)</span>
</span></code></pre>. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2> The term ``function'' would be given a useful and precise meaning.  The <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> datatype would be useful for type discrimination in CLOS. <br/> The type hierarchy would be simplified. <br/> This proposal brings Common Lisp slightly closer to Scheme and the  work of the EuLisp committee. Scheme, for example, also has the concept  of a ``procedure'' which is compatible with the <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> type. <br/></section><section id="section-Aesthetics" class="section"><h2 class="section-title">Aesthetics</h2> This proposal improves the aesthetics of the language. <br/> Lambda-expressions do not obey the normal, apparent scoping rules because  free variables cannot refer to lexical bindings.  This is because  coercing a list to a function would mean <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-3.xhtml#function-eval">eval</a> <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> <span class="syntax-unquote">,<a class="function-reference" href="../chapter-14.xhtml#function-list">list</a></span>)</span></span>)</span>
</span></code></pre>. <br/> The following code does -not<a class="function-reference" href="../chapter-12.xhtml#function--">-</a> count the number of nodes in a graph: <br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">COUNTER</span> <span class="syntax-number">0</span>)</span>)</span>
    <span class="syntax-cons">(<span class="syntax-interned-symbol">TRAVERSE-THING</span> <span class="syntax-quote">'<span class="syntax-cons">(<a class="macro-reference" href="../chapter-3.xhtml#macro-lambda">lambda</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">NODE</span>)</span> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-12.xhtml#macro-incf">incf</a> <span class="syntax-interned-symbol">COUNTER</span>)</span>)</span></span>
                    <span class="syntax-cons">(<span class="syntax-interned-symbol">THING-ROOT</span>)</span>)</span>)</span>
</span></code></pre> <br/> since it is not the same as <br/>  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">COUNTER</span> <span class="syntax-number">0</span>)</span>)</span>
    <span class="syntax-cons">(<span class="syntax-interned-symbol">TRAVERSE-THING</span> <span class="syntax-function">#'<span class="syntax-cons">(<a class="macro-reference" href="../chapter-3.xhtml#macro-lambda">lambda</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">NODE</span>)</span> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-12.xhtml#macro-incf">incf</a> <span class="syntax-interned-symbol">COUNTER</span>)</span>)</span></span>
                    <span class="syntax-cons">(<span class="syntax-interned-symbol">THING-ROOT</span>)</span>)</span>)</span>
</span></code></pre> <br/> which does pass around a closure incrementing the <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a> variable.  (These examples assume COUNTER wasn't PROCLAIMed <a class="symbol-reference" href="../chapter-3.xhtml#symbol-special">special</a>.) <br/> Making the coercion of lambda-expressions to functions explicit with  the use of <a class="function-reference" href="../chapter-3.xhtml#function-eval">eval</a> will encourage less confusing code and also highlight  that use of <a class="function-reference" href="../chapter-3.xhtml#function-eval">eval</a>. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>This issue has been discussed at great length; this section attempts only to summarize the important points. <br/>There is general agreement that the definition of the <a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-function">function</a> data type must be clarified or revised. The cleanup of the type hierarchy is important to the CLOS group. <br/>The description of <a class="function-reference" href="../chapter-3.xhtml#function-compile">compile</a> must be changed, since it is no longer meaningful to speak of a symbol with a definition that "is a lambda-expression".  We believe this is a subject for a separate proposal, as the behavior of <a class="function-reference" href="../chapter-3.xhtml#function-compile">compile</a> needs additional clarification. <br/>Many different alternatives have been discussed both in the cleanup committee and X3J13. Two proposals were circulated at the March 1988 meeting of X3J13; this version is the result of discussions at that meeting. It is a compromise between the conflicting goals of backward compatibility, flexibility in the language, and simple semantics. <br/>This proposal does not address the issue of when coercion to functions occur. For example, it is allowed to write <br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-mapcar">mapcar</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">FROB</span></span> <span class="syntax-interned-symbol">my-list</span>)</span>
</span></code></pre> <br/>It is not specified when the coercion of FROB to its <a class="function-reference" href="../chapter-10.xhtml#function-symbol-function">symbol-function</a>  occurs. For example,  <br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">FROB</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">X</span>)</span> 
   <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-when">when</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-12.xhtml#function-&gt;">&gt;</a> <span class="syntax-interned-symbol">X</span> <span class="syntax-number">0</span>)</span> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-10.xhtml#function-symbol-function">symbol-function</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">FROB</span></span>)</span> <span class="syntax-function">#'<span class="syntax-cons">(<a class="macro-reference" href="../chapter-3.xhtml#macro-lambda">lambda</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">X</span>)</span> <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>)</span></span>)</span>)</span>
   <a class="section-reference" href="../chapter-26.xhtml#section-T">T</a>)</span>
</span></code></pre> <br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-mapcar">mapcar</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">FROB</span></span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-number">-1</span> <span class="syntax-number">-1</span> <span class="syntax-number">1</span> <span class="syntax-number">1</span>)</span></span>)</span>
</span></code></pre> <br/>may return different results if <a class="function-reference" href="../chapter-14.xhtml#function-mapcar">mapcar</a> coerces its functional argument once rather than for each element. This may require a separate cleanup issue. </section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>