<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” MAKE-PACKAGE-USE-DEFAULT </title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">MAKE-PACKAGE-USE-DEFAULT </span><br/><ol class="local-toc"><li><a href="#section-Status">Status</a><ol> </ol></li><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit history">Edit history</a><ol> </ol></li><li><a href="#section-Problem description">Problem description</a><ol> </ol></li><li><a href="#issue-make-package-use-default:implementation-dependent">Proposal IMPLEMENTATION-DEPENDENT</a><ol> </ol></li><li><a href="#section-Examples">Examples</a><ol> </ol></li><li><a href="#section-Test Cases">Test Cases</a><ol> </ol></li><li><a href="#section-Rationale">Rationale</a><ol> </ol></li><li><a href="#section-Current practice">Current practice</a><ol> </ol></li><li><a href="#section-Cost to Implementors">Cost to Implementors</a><ol> </ol></li><li><a href="#section-Cost to Users">Cost to Users</a><ol> </ol></li><li><a href="#section-Cost of non-adoption">Cost of non-adoption</a><ol> </ol></li><li><a href="#section-Performance impact">Performance impact</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Esthetics">Esthetics</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue MAKE-PACKAGE-USE-DEFAULT  [NIL] [CHANGE]</h1><h2>Related issues</h2><ul><a class="issue-reference" href="../issues/package-clutter.xhtml#issue-package-clutter">PACKAGE-CLUTTER</a></ul><section id="section-Status" class="status-passed section"><h2 class="section-title">Status</h2>Passed, as amended </section><section id="section-References" class="section"><h2 class="section-title">References</h2><a class="function-reference" href="../chapter-11.xhtml#function-make-package">make-package</a>, CLtL p183 "<a class="package-reference" href="../chapter-A.xhtml#package-user">user</a>" package, CLtL p181 </section><section id="section-Edit history" class="section"><h2 class="section-title">Edit history</h2>JonL White, 6-Oct-88 (version 1) Masinter,  8-Oct-88  (version 2) Masinter, 16-Mar-89, Version 3 (make amendments  per Jan 89 X3J13) </section><section id="section-Problem description" class="section"><h2 class="section-title">Problem description</h2>The proposal in the <a class="issue-reference" href="../issues/package-clutter.xhtml#issue-package-clutter">X3J13 Issue PACKAGE-CLUTTER</a> would specify that  implementation-specific extensions are not in the <a class="package-reference" href="../chapter-A.xhtml#package-lisp">lisp</a> package. <br/>With that restriction, access to implementation-specific features is awkward; it is necessary to always name the vendor-specific extensions in the :USE list of <a class="function-reference" href="../chapter-11.xhtml#function-make-package">make-package</a> or <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-if">if</a> <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <span class="syntax-interned-symbol">proposal</span>
<span class="syntax-interned-symbol">in</span> <a class="macro-reference" href="../chapter-11.xhtml#macro-defpackage">defpackage</a> <span class="syntax-interned-symbol">is</span> <span class="syntax-interned-symbol">adopted</span>)</span>
</span></code></pre> in <a class="macro-reference" href="../chapter-11.xhtml#macro-defpackage">defpackage</a>. <br/>This forces users of a specific implementation to always have to type something to get the default set of features for that implementation, even if they have no intention of writing portable code. <br/></section><section class="status-passed proposal" id="issue-make-package-use-default:implementation-dependent"><h2 class="section-title">Proposal IMPLEMENTATION-DEPENDENT</h2>Change the specification of <a class="function-reference" href="../chapter-11.xhtml#function-make-package">make-package</a> (and <a class="macro-reference" href="../chapter-11.xhtml#macro-defpackage">defpackage</a>, if adopted, and <a class="macro-reference" href="../chapter-11.xhtml#macro-in-package">in-package</a>, if <a class="issue-reference" href="../issues/in-package-functionality.xhtml#issue-in-package-functionality">in-package-functionality</a> is not adopted) so that the default for the :USE keyword is  undefined. Normally, the default will include the packages containing the implementation-specific features. <br/>Portable programs should instead always specify :USE '<pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-string">"LISP"</span>)</span>
</span></code></pre> explicitly.   <br/></section><section id="section-Examples" class="section"><h2 class="section-title">Examples</h2><pre><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-11.xhtml#function-package-use-list">package-use-list</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-11.xhtml#function-make-package">make-package</a> <span class="syntax-string">"SOME-USER"</span>)</span>)</span>
</span></code></pre><br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="../chapter-11.xhtml#function-package-use-list">package-use-list</a> <span class="syntax-string">"USER"</span>)</span>
</span></code></pre><br/><br/></pre></section><section id="section-Test Cases" class="section"><h2 class="section-title">Test Cases</h2><pre><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-9.xhtml#macro-assert">assert</a> 
    <span class="syntax-cons">(<a class="function-reference" href="../chapter-14.xhtml#function-subsetp">subsetp</a> <span class="syntax-quasiquote">`<span class="syntax-cons">(<span class="syntax-unquote">,<span class="syntax-cons">(<a class="function-reference" href="../chapter-11.xhtml#function-find-package">find-package</a> <span class="syntax-string">"LISP"</span>)</span></span>)</span></span>
              <span class="syntax-cons">(<a class="function-reference" href="../chapter-11.xhtml#function-package-use-list">package-use-list</a> <span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-or">or</a> <span class="syntax-cons">(<a class="function-reference" href="../chapter-11.xhtml#function-find-package">find-package</a> <span class="syntax-string">"SOME-USER"</span>)</span>
				    <span class="syntax-cons">(<a class="function-reference" href="../chapter-11.xhtml#function-make-package">make-package</a> <span class="syntax-string">"SOME-USER"</span>)</span>)</span>)</span>)</span>)</span>
</span></code></pre><br/><br/></pre></section><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>Every implementation either already does the equivalent of this, or else has a confusing assymetry about the <a class="package-reference" href="../chapter-A.xhtml#package-user">user</a> package (i.e., their extensions are "available" in <a class="package-reference" href="../chapter-A.xhtml#package-user">user</a>, but not in SOME-USER). <br/></section><section id="section-Current practice" class="section"><h2 class="section-title">Current practice</h2>TI and Lucid's  3.0 versions "implement" this proposal in that they set  the default :USE argument to be a list of the <a class="package-reference" href="../chapter-A.xhtml#package-lisp">lisp</a> package and the  implementation-specific package.  <br/>In VAXLISP the <a class="package-reference" href="../chapter-A.xhtml#package-lisp">lisp</a> package is the implementation-specific package, which contains the 775 symbols supposed to be in the <a class="package-reference" href="../chapter-A.xhtml#package-lisp">lisp</a> packge along with all the extensions; the package named <a class="package-reference" href="../chapter-1.xhtml#package-common-lisp">common-lisp</a> has only the 775.  Thus this implements the proposal in the sense that the inheritance of a package made with a default :USE list contains all the implementation-specific symbols &ndash; not just the 775 "<a class="package-reference" href="../chapter-A.xhtml#package-lisp">lisp</a>" ones. <br/>Symbolics release 7, and Lucid's 2.1 release use only '<pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-string">"LISP"</span>)</span>
</span></code></pre> for the default <a class="function-reference" href="../chapter-11.xhtml#function-make-package">make-package</a> use list, but have the aforementioned assymetry about the <a class="package-reference" href="../chapter-A.xhtml#package-user">user</a> package. <br/></section><section id="section-Cost to Implementors" class="section"><h2 class="section-title">Cost to Implementors</h2>None; this relaxes a constraint imposed by CLtL. <br/></section><section id="section-Cost to Users" class="section"><h2 class="section-title">Cost to Users</h2>In theory, every user porting code from one vendor to another would have to ensure that every package definition, via <a class="macro-reference" href="../chapter-11.xhtml#macro-in-package">in-package</a> or <a class="function-reference" href="../chapter-11.xhtml#function-make-package">make-package</a>, had an explicit :USE list.  This is probably at most a 5-minute text editor search.  But in fact this imposition is moot, since virtually every such user has *already* supplied explicit :USE lists; given the current practice, he has had no alternative. <br/></section><section id="section-Cost of non-adoption" class="section"><h2 class="section-title">Cost of non-adoption</h2>There will continue to be a lack of clear standardization in this area, especially since vendors are more willing to violate this apparently unuseful mandate from CLtL than they are to give up a minor bias towards their customer base. <br/></section><section id="section-Performance impact" class="section"><h2 class="section-title">Performance impact</h2>None. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>This new default behaviour for package creation will permit  documented extensions to appear on equal footing with the basic facilities in the <a class="package-reference" href="../chapter-A.xhtml#package-lisp">lisp</a> package.  It appears as though the _majority_ of any   users are developing and running their code totally within the  enviornment provided by that one vendor; hence it seems reasonable for implementations to bias their default use list towards those making  frequent use of their specific extensions to Common Lisp. <br/></section><section id="section-Esthetics" class="section"><h2 class="section-title">Esthetics</h2>Some feel that fewer <a class="proposal-reference" href="#issue-make-package-use-default:implementation-dependent">IMPLEMENTATION-DEPENDENT</a> loopholes in the language is preferable, even when the practical import is virtually moot. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>Lucid "exposes" the default :use list as the value of the special variable *DEFAULT-MAKE-PACKAGE-USE-LIST*, so that at site-configuration time, one could do 	  <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">*DEFAULT-MAKE-PACKAGE-USE-LIST*</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-string">"LISP"</span>)</span></span>)</span>
</span></code></pre> to return to the 1984 CLtL behaviour.  [This is not being proposed at this time.] <br/>      &mdash;&ndash; Additional Comments &mdash;&ndash; <br/>" I don't like this proposal, but I made a note to myself about another  reason that just occurred to me:  There is no syntax for getting the default  (ie, system-dependent) package included if you want to -also<a class="function-reference" href="../chapter-12.xhtml#function--">-</a> use some other  package." <br/> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <br/>"<a class="issue-reference" href="#issue-make-package-use-default:implementation-dependent">MAKE-PACKAGE-USE-DEFAULT:IMPLEMENTATION-DEPENDENT</a> is okay with me. I think it might be better to strengthen it and say that the default for :USE is identical to the use list of the <a class="package-reference" href="../chapter-A.xhtml#package-user">user</a> package. Does anyone agree? <br/>In response to Kent's remarks, the issue is whether the default should be a portable way to get the local extensions, or a portable way to get the portable language without the extensions.  I think either of those choices is portable and reasonable, it just depends on what you want to make easier, which probably depends on whether a package is being set up for use only by a predefined program or for use by user typein and/or user-written programs, either of which are likely to expect the local extensions. <br/>Hence I would also accept a proposal to make the default for :USE continue to be the <a class="package-reference" href="../chapter-A.xhtml#package-lisp">lisp</a> package, rather than incompatibly changing it, and add a portable name for the local extensions."  <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <br/>"re: I think it might be better to strengthen it and say that the     default for :USE is identical to the use list of the <a class="package-reference" href="../chapter-A.xhtml#package-user">user</a> package.     Does anyone agree? <br/>I agree, sort of.  Especially since one of the motivating factors for  this proposal was that some Lucid 2.1 user's were complaining that  "things" look a lot different from the <a class="package-reference" href="../chapter-A.xhtml#package-user">user</a> package than from a  user-created package. <br/>The only question is whether or not you really want the default to be sensitive to subsequent alterations of <a class="package-reference" href="../chapter-A.xhtml#package-user">user</a>'s :use list.  As mentioned in the Discussion section of the proposal, Lucid's implementation exposes the default as the value of a global variable, which happens to be a copy of the initial :use list of <a class="package-reference" href="../chapter-A.xhtml#package-user">user</a>; but subsequent changes  to <a class="package-reference" href="../chapter-A.xhtml#package-user">user</a> have no affect on this global variable."  <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <br/>"The point:  non-portable programs should declare that intent up-front. This is a virtue of the current situation:  if the program uses a non-portable package, they have to state that at the head of the file.  Us poor losers who try to load it into the wrong environment get a error before we've gotten on with the load." <br/></section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>