<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="../style.css"/><script src="../permalink.js"/><script src="../navigation.js"/><title>Well-specified Common Lisp â€” DEFSTRUCT-CONSTRUCTOR-SLOT-VARIABLES</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="../chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="../symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="../figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="../issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="../note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="../chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">DEFSTRUCT-CONSTRUCTOR-SLOT-VARIABLES</span><br/><ol class="local-toc"><li><a href="#section-References">References</a><ol> </ol></li><li><a href="#section-Edit History">Edit History</a><ol> </ol></li><li><a href="#section-Problem Description">Problem Description</a><ol> </ol></li><li><a href="#section-Background">Background</a><ol> </ol></li><li><a href="#issue-defstruct-constructor-slot-variables:bound">Proposal BOUND</a><ol> <li><a href="#section-Rationale">Rationale</a><ol> </ol></li></ol></li><li><a href="#issue-defstruct-constructor-slot-variables:not-bound">Proposal NOT-BOUND</a><ol> <li><a href="#section-Rationale">Rationale</a><ol> </ol></li></ol></li><li><a href="#issue-defstruct-constructor-slot-variables:visibly-bound">Proposal VISIBLY-BOUND</a><ol> <li><a href="#section-Rationale">Rationale</a><ol> </ol></li></ol></li><li><a href="#section-Example/Test Cases">Example/Test Cases</a><ol> </ol></li><li><a href="#section-Current Practice">Current Practice</a><ol> </ol></li><li><a href="#section-Cost to implementors">Cost to implementors</a><ol> </ol></li><li><a href="#section-Cost to users">Cost to users</a><ol> </ol></li><li><a href="#section-Benefits">Benefits</a><ol> </ol></li><li><a href="#section-Discussion">Discussion</a><ol> </ol></li></ol></nav><div class="content"><h1>X3J13 Issue DEFSTRUCT-CONSTRUCTOR-SLOT-VARIABLES [Cleanup] [CLARIFICATION, CHANGE]</h1><section id="section-References" class="section"><h2 class="section-title">References</h2><a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">defstruct</a>; CLtL p. 309 <a class="issue-reference" href="../issues/defstruct-constructor-key-mixture.xhtml#issue-defstruct-constructor-key-mixture">X3J13 Issue DEFSTRUCT-CONSTRUCTOR-KEY-MIXTURE</a> (passed) </section><section id="section-Edit History" class="section"><h2 class="section-title">Edit History</h2>V1, 11 Oct 1989, Sandra Loosemore V2, 02 Nov 1989, Sandra Loosemore (update discussion) <br/></section><section id="section-Problem Description" class="section"><h2 class="section-title">Problem Description</h2>Must the symbols which name <a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">defstruct</a> slots be bound as lambda variables by the default keyword constructor function?  Normally it would not matter, but if any of these symbols have been proclaimed <a class="symbol-reference" href="../chapter-3.xhtml#symbol-special">special</a> it will affect the dynamic environment in which the slot init forms are evaluated. <br/>There are three proposals, <a class="proposal-reference" href="#issue-defstruct-constructor-slot-variables:bound">BOUND</a>, <a class="proposal-reference" href="#issue-defstruct-constructor-slot-variables:not-bound">NOT-BOUND</a>, and <a class="proposal-reference" href="#issue-defstruct-constructor-slot-variables:visibly-bound">VISIBLY-BOUND</a>. <br/></section><section id="section-Background" class="section"><h2 class="section-title">Background</h2>CLtL requires each default slot init form to be evaluated "in the lexical environment of the <a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">defstruct</a> form in which it appeared".  This means that the obvious technique of supplying the init forms as the defaults for the keyword arguments in the lambda list of the constructor function is incorrect, unless care is taken to avoid shadowing any variable bindings of the symbols which correspond to those arguments. <br/>For example, given     <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">defstruct</a> <span class="syntax-interned-symbol">foo</span>
        <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">&lt;a-init&gt;</span>)</span>
        <span class="syntax-cons">(<span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">&lt;b-init&gt;</span>)</span>
        <span class="syntax-cons">(<span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">&lt;c-init&gt;</span>)</span>)</span>
</span></code></pre> <br/>Generating the constructor as     <pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">make-foo</span> <span class="syntax-cons">(<a class="lambda-list-keyword-reference" href="../chapter-3.xhtml#lambda-list-keyword-key">&amp;KEY</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">&lt;a-init&gt;</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">&lt;b-init&gt;</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">&lt;c-init&gt;</span>)</span>)</span> <span class="syntax-interned-symbol">...</span>)</span>
</span></code></pre> may not evaluate &lt;b-init&gt; and &lt;c-init&gt; in the correct lexical environment as specified in CLtL.  Proposal <a class="proposal-reference" href="#issue-defstruct-constructor-slot-variables:visibly-bound">VISIBLY-BOUND</a> would change the specification to make this the correct behavior. <br/>One alternative is to wrap the init forms in closures named with gensyms:     (flet ((#:g1 <pre><code><span class="syntax-root"><span class="syntax-symbol">()</span>
</span></code></pre> &lt;a-init&gt;)            (#:g2 <pre><code><span class="syntax-root"><span class="syntax-symbol">()</span>
</span></code></pre> &lt;b-init&gt;)            (#:g3 <pre><code><span class="syntax-root"><span class="syntax-symbol">()</span>
</span></code></pre> &lt;c-init&gt;))         (defun make-foo (&amp;key (a (#:g1)) (b (#:g2)) (c (#:g3))) ...)) Under proposal <a class="proposal-reference" href="#issue-defstruct-constructor-slot-variables:bound">BOUND</a>, this would be the correct way to implement the constructor function. <br/>Another alternative is to make the lambda variables themselves gensyms:     (defun make-foo (&amp;key ((:a #:g4) &lt;a-init&gt;)                           ((:b #:g5) &lt;b-init&gt;)                           ((:c #:g6) &lt;c-init&gt;)) ...) Under proposal <a class="proposal-reference" href="#issue-defstruct-constructor-slot-variables:not-bound">NOT-BOUND</a>, this would be the correct way to implement the constructor function. <br/>(Of course, it's possible that <a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">defstruct</a> could produce a simplified expansion in many cases by examining the init forms and/or lexical environment.) <br/><a class="issue-reference" href="../issues/defstruct-constructor-key-mixture.xhtml#issue-defstruct-constructor-key-mixture">X3J13 Issue DEFSTRUCT-CONSTRUCTOR-KEY-MIXTURE</a> implies that BOA constructors do bind the symbols which name slots as lambda variables, since these variables can be referenced in the init forms for subsequent arguments. <br/></section><section class="status-unknown proposal" id="issue-defstruct-constructor-slot-variables:bound"><h2 class="section-title">Proposal BOUND</h2>Clarify that the symbols which name slots must be bound as lambda variables by the keyword constructor function, in the order in which the slots are specified in the <a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">defstruct</a> form.  Variables for inherited slots are bound before variables for explitly specified slots, in the order in which they were specified in the definition of the inherited structure.  Special bindings of these variables will be visible during the evaluation of the default init forms for subsequent slots.  The slot default init forms are still evaluated in the  lexical environment in which the <a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">defstruct</a> form itself appears. <br/><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>This appears to be closest to the intent of CLtL. <br/></section></section><section class="status-unknown proposal" id="issue-defstruct-constructor-slot-variables:not-bound"><h2 class="section-title">Proposal NOT-BOUND</h2>Clarify that the symbols which name slots must *not* be bound as lambda variables by the keyword constructor function.  The slot default init forms are evaluated in the lexical environment in which the <a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">defstruct</a> form itself appears and the dynamic environment in which the call to the constructor function appears. <br/><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>This avoids the overhead of creating and invoking closures to compute the default values of the slots for the default keyword constructor. <br/></section></section><section class="status-unknown proposal" id="issue-defstruct-constructor-slot-variables:visibly-bound"><h2 class="section-title">Proposal VISIBLY-BOUND</h2>Clarify that the symbols which name slots must be bound as lambda variables by the keyword constructor function, in the order in which the slots are specified in the <a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">defstruct</a> form.  Variables for inherited slots are bound before variables for explitly specified slots, in the order in which they were specified in the definition of the inherited structure.  Special bindings of these variables will be visible during the evaluation of the default init forms for subsequent slots.   <br/>Remove the requirement that the slot default init forms be evaluated in the lexical environment in which the <a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">defstruct</a> form itself appears. Instead, require that they be evaluated in a lexical environment that contains bindings for the previous lambda variables of the constructor function.  This applies to both the default keyword constructor function and BOA constructors. <br/><section id="section-Rationale" class="section"><h2 class="section-title">Rationale</h2>This alternative corresponds most closely to current practice.  It avoids the overhead of creating and invoking closures to compute the default values of the slots for both the default keyword constructor and BOA constructors. <br/></section></section><section id="section-Example/Test Cases" class="section"><h2 class="section-title">Example/Test Cases</h2><pre><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="../chapter-5.xhtml#macro-defvar">defvar</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">global-x</span></span>)</span>
</span></code></pre><br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="../chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">y</span>  <span class="syntax-quote">'<span class="syntax-interned-symbol">local-y</span></span>)</span>)</span>
    <span class="syntax-cons">(<a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">defstruct</a> <span class="syntax-interned-symbol">baz</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">x-init</span></span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">y</span> <span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">z</span> <span class="syntax-interned-symbol">y</span>)</span>)</span>)</span>
</span></code></pre><br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">make-baz</span>)</span>
</span></code></pre><br/><br/>Under proposal <a class="proposal-reference" href="#issue-defstruct-constructor-slot-variables:bound">BOUND</a>,<br/>    slot X is initialized to X-INIT<br/>    slot Y is initialized to X-INIT<br/>        <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">since</span> <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <span class="syntax-interned-symbol">init</span> <span class="syntax-interned-symbol">form</span> <span class="syntax-interned-symbol">X</span> <span class="syntax-interned-symbol">is</span> <span class="syntax-interned-symbol">evaluated</span> <span class="syntax-interned-symbol">in</span> <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <span class="syntax-interned-symbol">dynamic</span> <span class="syntax-interned-symbol">environment</span>
        <span class="syntax-interned-symbol">containing</span> <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <span class="syntax-interned-symbol">binding</span> <span class="syntax-interned-symbol">to</span> <span class="syntax-interned-symbol">X-INIT</span>)</span>
</span></code></pre><br/>    slot Z is initialized to LOCAL-Y<br/>        <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">since</span> <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <span class="syntax-interned-symbol">init</span> <span class="syntax-interned-symbol">form</span> <span class="syntax-interned-symbol">Y</span> <span class="syntax-interned-symbol">is</span> <span class="syntax-interned-symbol">evaluated</span> <span class="syntax-interned-symbol">in</span> <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <span class="syntax-interned-symbol">lexical</span> <span class="syntax-interned-symbol">environment</span> <span class="syntax-interned-symbol">in</span>
        <span class="syntax-interned-symbol">which</span> <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">defstruct</a> <span class="syntax-interned-symbol">appears</span>)</span>
</span></code></pre><br/><br/>Under proposal <a class="proposal-reference" href="#issue-defstruct-constructor-slot-variables:not-bound">NOT-BOUND</a>,<br/>    slot X is initialized to X-INIT<br/>    slot Y is initialized to GLOBAL-X<br/>        <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">since</span> <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <span class="syntax-interned-symbol">constructor</span> <span class="syntax-interned-symbol">does</span> <a class="function-reference" href="../chapter-5.xhtml#function-not">not</a> <span class="syntax-interned-symbol">rebind</span> <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <a class="symbol-reference" href="../chapter-3.xhtml#symbol-special">special</a> <a class="symbol-reference" href="../chapter-25.xhtml#symbol-variable">variable</a> <span class="syntax-interned-symbol">X</span>)</span>
</span></code></pre><br/>    slot Z is initialized to LOCAL-Y<br/><br/>Under proposal <a class="proposal-reference" href="#issue-defstruct-constructor-slot-variables:visibly-bound">VISIBLY-BOUND</a>,<br/>    slot X is initialized to X-INIT<br/>    slot Y is initialized to X-INIT<br/>        <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">since</span> <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <a class="symbol-reference" href="../chapter-3.xhtml#symbol-special">special</a> <span class="syntax-interned-symbol">binding</span> <span class="syntax-interned-symbol">of</span> <span class="syntax-interned-symbol">X</span> <span class="syntax-interned-symbol">made</span> <span class="syntax-interned-symbol">by</span> <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <span class="syntax-interned-symbol">constructor</span> <span class="syntax-interned-symbol">is</span> <span class="syntax-interned-symbol">visible</span>)</span>
</span></code></pre><br/>    slot Z is initialized to X-INIT<br/>        <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">since</span> <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <span class="syntax-interned-symbol">lexical</span> <span class="syntax-interned-symbol">binding</span> <span class="syntax-interned-symbol">of</span> <span class="syntax-interned-symbol">Y</span> <span class="syntax-interned-symbol">made</span> <span class="syntax-interned-symbol">by</span> <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <span class="syntax-interned-symbol">constructor</span> <span class="syntax-interned-symbol">is</span> <span class="syntax-interned-symbol">visible</span>)</span>
</span></code></pre><br/><br/></pre></section><section id="section-Current Practice" class="section"><h2 class="section-title">Current Practice</h2>Most implementations (including Lucid <a class="package-reference" href="../chapter-11.xhtml#package-cl">cl</a>, HPCL-I, KCL, CMU Common Lisp) appear to implement proposal <a class="proposal-reference" href="#issue-defstruct-constructor-slot-variables:visibly-bound">VISIBLY-BOUND</a> even though it is in conflict with what is required by CLtL. <br/>Utah Common Lisp currently implements proposal <a class="proposal-reference" href="#issue-defstruct-constructor-slot-variables:not-bound">NOT-BOUND</a>. <br/></section><section id="section-Cost to implementors" class="section"><h2 class="section-title">Cost to implementors</h2>For proposal <a class="proposal-reference" href="#issue-defstruct-constructor-slot-variables:bound">BOUND</a>, the cost of implementing the proposal correctly is fairly small.  The cost of implementing it both correctly and efficiently is potentially much larger. <br/>For proposal <a class="proposal-reference" href="#issue-defstruct-constructor-slot-variables:not-bound">NOT-BOUND</a>, the implementation cost is again fairly small,  but it still requires essentially the same work as in proposal <a class="proposal-reference" href="#issue-defstruct-constructor-slot-variables:bound">BOUND</a> to handle BOA constructors correctly. <br/>Proposal <a class="proposal-reference" href="#issue-defstruct-constructor-slot-variables:visibly-bound">VISIBLY-BOUND</a> has the least implementation cost, since this is what most implementations already do and is the least complicated of the alternatives. <br/></section><section id="section-Cost to users" class="section"><h2 class="section-title">Cost to users</h2>Adopting any of these proposals would improve the situation faced by users now. <br/>Users may find proposal <a class="proposal-reference" href="#issue-defstruct-constructor-slot-variables:visibly-bound">VISIBLY-BOUND</a> to be marginally more useful than the other alternatives since it allows the values of slots to be referenced in the subsequent default init forms. <br/></section><section id="section-Benefits" class="section"><h2 class="section-title">Benefits</h2>An area of confusion in the language is removed. <br/></section><section id="section-Discussion" class="section"><h2 class="section-title">Discussion</h2>Loosemore doesn't care much about which of these alternatives we adopt, but thinks that leaving this unspecified would be a mistake. <br/>Margolin says:   By the way, I prefer this proposal [<a class="proposal-reference" href="#issue-defstruct-constructor-slot-variables:not-bound">NOT-BOUND</a>].  I think lexical   environments should be captured <pre><code><span class="syntax-root"><span class="syntax-cons">(<span class="syntax-interned-symbol">I</span> <span class="syntax-interned-symbol">think</span> <span class="syntax-interned-symbol">we</span><span class="syntax-quote">'<span class="syntax-interned-symbol">ve</span></span> <span class="syntax-interned-symbol">fixed</span> <span class="syntax-interned-symbol">everything</span> <span class="syntax-interned-symbol">so</span>
  <span class="syntax-interned-symbol">that</span> <span class="syntax-interned-symbol">init-forms</span> <span class="syntax-interned-symbol">are</span> <span class="syntax-interned-symbol">always</span> <span class="syntax-interned-symbol">evaluated</span> <span class="syntax-interned-symbol">in</span> <a class="special-operator-reference" href="../chapter-3.xhtml#special-operator-the">the</a> <span class="syntax-interned-symbol">appropriate</span> <span class="syntax-interned-symbol">lexical</span>
  <span class="syntax-interned-symbol">environment</span>)</span>
</span></code></pre>, but I don't like making the order of slots significant   by allowing init forms to reference other slots.  Order of slots is   often constrained by other requirements (such as the :INCLUDE   hierarchy, or using :TYPE to match a pre-existing structure), so they   shouldn't have an effect on the semantics of the structure. <br/>Moon says:   Surely the default constructor function and "BOA constructors" must work   compatibly.  Unspecified initforms for optional and keyword arguments in   a "BOA constructor" default from the slot initform rather than <a class="section-reference" href="../chapter-1.xhtml#section-NIL">NIL</a>, so   "BOA constructors" face the same issue as default constructors. <br/>  <a class="proposal-reference" href="#issue-defstruct-constructor-slot-variables:visibly-bound">VISIBLY-BOUND</a> seems semantically wrong. <br/>  I would go with <a class="proposal-reference" href="#issue-defstruct-constructor-slot-variables:bound">BOUND</a>, assuming we can't just get rid of <a class="macro-reference" href="../chapter-8.xhtml#macro-defstruct">defstruct</a>   entirely.  I don't care about the supposed efficiency issue, which is   easily gotten around or ignored. <br/>&mdash;&mdash;<a class="function-reference" href="../chapter-12.xhtml#function--">-</a> <br/></section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>