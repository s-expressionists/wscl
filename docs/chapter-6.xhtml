<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
  "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/><link rel="stylesheet" type="text/css" href="style.css"/><script src="permalink.js"/><script src="navigation.js"/><title>Well-specified Common Lisp â€” Iteration</title></head><body><main><nav class="sidebar"><span class="name">Entry Points</span><br/><ol><li><a href="chap-0.xhtml#section-Figures">Table of Contents</a></li><li><a href="symbol-index.xhtml#section-SymbolIndex">Symbol Index</a></li><li><a href="figure-index.xhtml#section-FigureIndex">Figure Index</a></li><li><a href="issue-index.xhtml#section-IssueIndices">Issue Index</a></li><li><a href="note-indices.xhtml#section-ReviewerNoteIndex">Note Indices</a></li><li><a href="chapter-26.xhtml#section-Glossary">Glossary</a></li></ol><hr/><span class="name">Iteration</span><br/><ol class="local-toc"><li><a href="#section-LoopFacility">The LOOP Facility</a><ol> <li><a href="#section-OverviewoftheLoopFacility">Overview of the Loop Facility</a><ol> <li><a href="#section-SimplevsExtendedLoop">Simple vs Extended Loop</a><ol> <li><a href="#section-SimpleLoop">Simple Loop</a><ol> </ol></li><li><a href="#section-ExtendedLoop">Extended Loop</a><ol> </ol></li></ol></li><li><a href="#section-LoopKeywords">Loop Keywords</a><ol> </ol></li><li><a href="#section-ParsingLoopClauses">Parsing Loop Clauses</a><ol> </ol></li><li><a href="#section-ExpandingLoopForms">Expanding Loop Forms</a><ol> </ol></li><li><a href="#section-SummaryofLoopClauses">Summary of Loop Clauses</a><ol> <li><a href="#section-SummaryofVariableInitializationandSteppingClauses">Summary of Variable Initialization and Stepping Clauses</a><ol> </ol></li><li><a href="#section-SummaryofValueAccumulationClauses">Summary of Value Accumulation Clauses</a><ol> </ol></li><li><a href="#section-SummaryofTerminationTestClauses">Summary of Termination Test Clauses</a><ol> </ol></li><li><a href="#section-SummaryofUnconditionalExecutionClauses">Summary of Unconditional Execution Clauses</a><ol> </ol></li><li><a href="#section-SummaryofConditionalExecutionClauses">Summary of Conditional Execution Clauses</a><ol> </ol></li><li><a href="#section-SummaryofMiscellaneousClauses">Summary of Miscellaneous Clauses</a><ol> </ol></li></ol></li><li><a href="#section-OrderofExecution">Order of Execution</a><ol> </ol></li><li><a href="#section-DestructuringLOOPVars">Destructuring</a><ol> </ol></li><li><a href="#section-RestrictionsonSide-Effects">Restrictions on Side-Effects</a><ol> </ol></li></ol></li><li><a href="#section-LOOPVarInitAndStep">Variable Initialization and Stepping Clauses</a><ol> <li><a href="#section-IterationControl">Iteration Control</a><ol> <li><a href="#section-Thefor-as-arithmeticsubclause">The for-as-arithmetic subclause</a><ol> <li><a href="#section-Examplesoffor-as-arithmeticsubclause">Examples of for-as-arithmetic subclause</a><ol> </ol></li></ol></li><li><a href="#section-Thefor-as-in-listsubclause">The for-as-in-list subclause</a><ol> <li><a href="#section-Examplesoffor-as-in-listsubclause">Examples of for-as-in-list subclause</a><ol> </ol></li></ol></li><li><a href="#section-Thefor-as-on-listsubclause">The for-as-on-list subclause</a><ol> <li><a href="#section-Examplesoffor-as-on-listsubclause">Examples of for-as-on-list subclause</a><ol> </ol></li></ol></li><li><a href="#section-Thefor-as-equals-thensubclause">The for-as-equals-then subclause</a><ol> <li><a href="#section-Examplesoffor-as-equals-thensubclause">Examples of for-as-equals-then subclause</a><ol> </ol></li></ol></li><li><a href="#section-Thefor-as-acrosssubclause">The for-as-across subclause</a><ol> <li><a href="#section-Examplesoffor-as-acrosssubclause">Examples of for-as-across subclause</a><ol> </ol></li></ol></li><li><a href="#section-Thefor-as-hashsubclause">The for-as-hash subclause</a><ol> </ol></li><li><a href="#section-Thefor-as-packagesubclause">The for-as-package subclause</a><ol> <li><a href="#section-Examplesoffor-as-packagesubclause">Examples of for-as-package subclause</a><ol> </ol></li></ol></li></ol></li><li><a href="#section-LocalVariableInitializations">Local Variable Initializations</a><ol> <li><a href="#section-ExamplesofWITHclause">Examples of WITH clause</a><ol> </ol></li></ol></li></ol></li><li><a href="#section-LOOPValAcc">Value Accumulation Clauses</a><ol> <li><a href="#section-ExamplesofCOLLECTclause">Examples of COLLECT clause</a><ol> </ol></li><li><a href="#section-ExamplesofAPPENDandNCONCclauses">Examples of APPEND and NCONC clauses</a><ol> </ol></li><li><a href="#section-ExamplesofCOUNTclause">Examples of COUNT clause</a><ol> </ol></li><li><a href="#section-ExamplesofMAXIMIZEandMINIMIZEclauses">Examples of MAXIMIZE and MINIMIZE clauses</a><ol> </ol></li><li><a href="#section-ExamplesofSUMclause">Examples of SUM clause</a><ol> </ol></li></ol></li><li><a href="#section-LOOPTermTest">Termination Test Clauses</a><ol> <li><a href="#section-ExamplesofREPEATclause">Examples of REPEAT clause</a><ol> </ol></li><li><a href="#section-ExamplesofALWAYS,NEVER,andTHEREISclauses">Examples of ALWAYS, NEVER, and THEREIS clauses</a><ol> </ol></li><li><a href="#section-ExamplesofWHILEandUNTILclauses">Examples of WHILE and UNTIL clauses</a><ol> </ol></li></ol></li><li><a href="#section-LOOPUnconditional">Unconditional Execution Clauses</a><ol> <li><a href="#section-Examplesofunconditionalexecution">Examples of unconditional execution</a><ol> </ol></li></ol></li><li><a href="#section-LOOPConditional">Conditional Execution Clauses</a><ol> <li><a href="#section-ExamplesofWHENclause">Examples of WHEN clause</a><ol> </ol></li></ol></li><li><a href="#section-LOOPMisc">Miscellaneous Clauses</a><ol> <li><a href="#section-ControlTransferClauses">Control Transfer Clauses</a><ol> <li><a href="#section-ExamplesofNAMEDclause">Examples of NAMED clause</a><ol> </ol></li></ol></li><li><a href="#section-InitialandFinalExecution">Initial and Final Execution</a><ol> </ol></li></ol></li><li><a href="#section-ExamplesofMiscellaneousLoopFeatures">Examples of Miscellaneous Loop Features</a><ol> <li><a href="#section-Examplesofclausegrouping">Examples of clause grouping</a><ol> </ol></li></ol></li><li><a href="#section-NotesaboutLoop">Notes about Loop</a><ol> </ol></li></ol></li><li><a href="#section-Dictionary">Dictionary</a><ol> <li><a href="#macro-do">do, do*</a></li><li><a href="#macro-dotimes">dotimes</a></li><li><a href="#macro-dolist">dolist</a></li><li><a href="#macro-loop">loop</a></li><li><a href="#macro-loop-finish">loop-finish</a></li></ol></li></ol></nav><div class="content"><section id="section-ChapSix"><h1 class="section-title">6. Iteration</h1><section id="section-LoopFacility"><h2 class="section-title">The LOOP Facility</h2>

<section id="section-OverviewoftheLoopFacility"><h3 class="section-title">Overview of the Loop Facility</h3>The <a class="macro-reference" href="#macro-loop">loop</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a> performs iteration.<br/><section id="section-SimplevsExtendedLoop"><h4 class="section-title">Simple vs Extended Loop</h4><a class="macro-reference" href="#macro-loop">loop</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a> are partitioned into two categories: 
     simple <a class="macro-reference" href="#macro-loop">loop</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a> 
 and extended <a class="macro-reference" href="#macro-loop">loop</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a>.<br/><section id="section-SimpleLoop"><h5 class="section-title">Simple Loop</h5><br/>A simple <a class="macro-reference" href="#macro-loop">loop</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> is one that has a body containing
only <a class="glossary-reference" href="chapter-26.xhtml#glossary-compound form">compound forms</a>.
Each <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> is <span class="glossary-reference error">glossary:evaluated</span> in turn from left to right.
When the last <span class="parameter">form</span> has been <span class="glossary-reference error">glossary:evaluated</span>, 
then the first <span class="parameter">form</span> is evaluated again, and so on, in a never-ending cycle.
A simple <a class="macro-reference" href="#macro-loop">loop</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> establishes an <a class="glossary-reference" href="chapter-26.xhtml#glossary-implicit block">implicit block</a> named <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.
The execution of a simple <a class="macro-reference" href="#macro-loop">loop</a> can be terminated by explicitly
transfering control to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-implicit block">implicit block</a> (using <a class="macro-reference" href="chapter-5.xhtml#macro-return">return</a> or
<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-return-from">return-from</a>) or to some <a class="glossary-reference" href="chapter-26.xhtml#glossary-exit point">exit point</a> outside of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-block">block</a> 
(<span class="explicit-italic"> e.g.</span>,  using <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-throw">throw</a>, <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-go">go</a>, or <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-return-from">return-from</a>).<br/>
</section><section id="section-ExtendedLoop"><h5 class="section-title">Extended Loop</h5>An extended <a class="macro-reference" href="#macro-loop">loop</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> is one that has a body containing
<a class="glossary-reference" href="chapter-26.xhtml#glossary-atomic">atomic</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-expression">expressions</a>.  When the <a class="macro-reference" href="#macro-loop">loop</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a> processes such a
<a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>, it invokes a facility that is commonly called ``the Loop Facility.''<br/>The Loop Facility provides standardized access to mechanisms commonly used 
in iterations through Loop schemas, which are introduced by <a class="glossary-reference" href="chapter-26.xhtml#glossary-loop keyword">loop keywords</a>.<br/>The body of an extended <a class="macro-reference" href="#macro-loop">loop</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> is divided into <a class="macro-reference" href="#macro-loop">loop</a> clauses,
each which is in turn made up of <a class="glossary-reference" href="chapter-26.xhtml#glossary-loop keyword">loop keywords</a> and <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a>. <br/></section></section><section id="section-LoopKeywords"><h4 class="section-title">Loop Keywords</h4><a class="glossary-reference" href="chapter-26.xhtml#glossary-loop keyword">Loop keywords</a> are not true <a class="glossary-reference" href="chapter-26.xhtml#glossary-keyword">keywords</a><sub>1</sub>; 
they are special <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbols</a>, recognized by <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> rather than <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> identity,
that are meaningful only to the <a class="macro-reference" href="#macro-loop">loop</a> facility.
A <a class="glossary-reference" href="chapter-26.xhtml#glossary-loop keyword">loop keyword</a> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> but is recognized by its <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a>
(not its identity), regardless of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-package">packages</a> in which it is <a class="glossary-reference" href="chapter-26.xhtml#glossary-accessible">accessible</a>.  <br/><div class="issue-annotation"><span class="issue-reference error">issue:Issue JUN90-TRIVIAL-ISSUES:11</span>In general, <a class="glossary-reference" href="chapter-26.xhtml#glossary-loop keyword">loop keywords</a> are not <a class="glossary-reference" href="chapter-26.xhtml#glossary-external symbol">external symbols</a> of the <a class="package-reference" href="chapter-1.xhtml#package-common-lisp">common-lisp</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-package">package</a>,
except in the coincidental situation that a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> with the same name as a
<a class="glossary-reference" href="chapter-26.xhtml#glossary-loop keyword">loop keyword</a> was needed for some other purpose in <span class="explicit-roman">Common Lisp</span>.  For example,
there is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> in the <a class="package-reference" href="chapter-1.xhtml#package-common-lisp">common-lisp</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-package">package</a> whose <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> is <code><span class="syntax-root"><span class="syntax-string">"UNLESS"</span>
</span></code> but
not one whose <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">name</a> is <code><span class="syntax-root"><span class="syntax-string">"UNTIL"</span>
</span></code>.
</div>
If no <a class="glossary-reference" href="chapter-26.xhtml#glossary-loop keyword">loop keywords</a> are supplied in a <a class="macro-reference" href="#macro-loop">loop</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>,
the Loop Facility executes the loop body repeatedly; see <span class="section-reference error">section:SimpleLoop.</span><br/></section><section id="section-ParsingLoopClauses"><h4 class="section-title">Parsing Loop Clauses</h4>The syntactic parts of an extended <a class="macro-reference" href="#macro-loop">loop</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> are called clauses; 
the rules for parsing are determined by 
that clause's keyword.
The following example shows a <a class="macro-reference" href="#macro-loop">loop</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> with six clauses:<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">from</span> <span class="syntax-number">1</span> <span class="syntax-interned-symbol">to</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">compute-top-value</span>)</span>       <span class="syntax-line-comment syntax-comment">; first clause
</span>      <span class="syntax-interned-symbol">while</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-not">not</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">unacceptable</span> <span class="syntax-interned-symbol">i</span>)</span>)</span>              <span class="syntax-line-comment syntax-comment">; second clause
</span>      <span class="syntax-interned-symbol">collect</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">square</span> <span class="syntax-interned-symbol">i</span>)</span>                        <span class="syntax-line-comment syntax-comment">; third clause
</span>      <a class="macro-reference" href="#macro-do">do</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-22.xhtml#function-format">format</a> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a> <span class="syntax-string">"Working on ~D now"</span> <span class="syntax-interned-symbol">i</span>)</span>       <span class="syntax-line-comment syntax-comment">; fourth clause
</span>      <a class="macro-reference" href="chapter-5.xhtml#macro-when">when</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-evenp">evenp</a> <span class="syntax-interned-symbol">i</span>)</span>                            <span class="syntax-line-comment syntax-comment">; fifth clause
</span>        <a class="macro-reference" href="#macro-do">do</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-22.xhtml#function-format">format</a> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a> <span class="syntax-string">"~D is a non-odd number"</span> <span class="syntax-interned-symbol">i</span>)</span>
      <span class="syntax-interned-symbol">finally</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-22.xhtml#function-format">format</a> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a> <span class="syntax-string">"About to exit!"</span>)</span>)</span>      ; sixth clause
</span></code></pre><br/>Each <a class="glossary-reference" href="chapter-26.xhtml#glossary-loop keyword">loop keyword</a> introduces 
either a compound loop clause or a simple loop clause
that can consist of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-loop keyword">loop keyword</a> followed by a single <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>.
The number of <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a> in a clause is determined by the <a class="glossary-reference" href="chapter-26.xhtml#glossary-loop keyword">loop keyword</a> 
that begins the clause and by the auxiliary keywords in the clause.
The keywords <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">do</span>, 
<div class="issue-annotation"><span class="issue-reference error">issue:Issue LOOP-MISCELLANEOUS-REPAIRS:FIX</span><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">doing</span>,
</div><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">initially</span>, and <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">finally</span> 
are the only loop keywords that can take any number of <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a> and 
group them as an <a class="glossary-reference" href="chapter-26.xhtml#glossary-implicit progn">implicit progn</a>.<br/>Loop clauses can contain auxiliary keywords, which are sometimes
called prepositions.  For example, the first clause in the code
above includes the prepositions <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">from</span> and <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">to</span>, 
which mark the value from which stepping begins and the value at which stepping
ends.<br/>For detailed information about <a class="macro-reference" href="#macro-loop">loop</a> syntax,
see the <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a> <a class="macro-reference" href="#macro-loop">loop</a>.<br/></section><section id="section-ExpandingLoopForms"><h4 class="section-title">Expanding Loop Forms</h4>A <a class="macro-reference" href="#macro-loop">loop</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro form">macro form</a> expands into a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> containing
one or more binding forms (that <a class="glossary-reference" href="chapter-26.xhtml#glossary-establish">establish</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a> of loop variables)
and a <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-block">block</a> and a <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-tagbody">tagbody</a> (that express a looping control 
structure). The variables established in <a class="macro-reference" href="#macro-loop">loop</a> are bound as
if by <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> or <a class="symbol-reference" href="chapter-3.xhtml#symbol-lambda">lambda</a>.  <br/>Implementations can interleave the setting of initial values with the <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a>.  
However, the assignment of the initial values is always calculated in the order
specified by the user.  A variable is thus sometimes bound to a meaningless value 
of the correct <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a>, and then later in the prologue it is set to the true
initial value by using <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a>.
<div class="issue-annotation"><span class="issue-reference error">issue:Issue LOOP-INITFORM-ENVIRONMENT:PARTIAL-INTERLEAVING-VAGUE</span>One implication of this interleaving is that it is <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a>
whether the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical environment">lexical environment</a> in which the initial value <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a>
(variously called the <span class="parameter">form1</span>, <span class="parameter">form2</span>, <span class="parameter">form3</span>, <span class="parameter">step-fun</span>,
 <span class="parameter">vector</span>, <span class="parameter">hash-table</span>, and <span class="parameter">package</span>) in any <span class="parameter">for-as-subclause</span>,
except <span class="parameter">for-as-equals-then</span>,
are <span class="glossary-reference error">glossary:evaluated</span> includes only the loop variables preceding that <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>
or includes more or all of the loop variables;
the <span class="parameter">form1</span> and <span class="parameter">form2</span> in a <span class="parameter">for-as-equals-then</span> form
includes the <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical environment">lexical environment</a> of all the loop variables.
</div> 
After the <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> is expanded, it consists of three basic parts in the 
<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-tagbody">tagbody</a>: 
      the loop prologue,
      the loop body,
  and the loop epilogue.<br/><dl><dt><span class="explicit-bold"> Loop prologue</span></dt><dd>The loop prologue contains <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a> 
that are executed before iteration begins, such as
any automatic variable initializations prescribed 
by the <span class="parameter">variable</span> clauses, along with any <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">initially</span> clauses
in the order they appear in the source.<br/></dd><dt><span class="explicit-bold"> Loop body</span></dt><dd>The loop body contains those <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a> that are executed during iteration, 
including application-specific calculations, termination tests,
and variable <span class="glossary-reference error">glossary:stepping</span><sub>1</sub>.<br/></dd><dt><span class="explicit-bold"> Loop epilogue</span></dt><dd>The loop epilogue contains <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a> that are executed after iteration 
terminates, such as <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">finally</span> clauses, if any, along
with any implicit return value from an <span class="parameter">accumulation</span> clause or
an <span class="parameter">termination-test</span> clause.<br/></dd></dl><br/>Some clauses from the source <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>
contribute code only to the loop prologue; these clauses must
  come before other clauses that are in the main body of the <a class="macro-reference" href="#macro-loop">loop</a> form.            
  Others contribute code only to the loop epilogue.
  All other clauses contribute to the final 
translated <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> in the same 
  order given in the original source <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> of the <a class="macro-reference" href="#macro-loop">loop</a>.<br/>Expansion of the <a class="macro-reference" href="#macro-loop">loop</a> macro produces an <a class="glossary-reference" href="chapter-26.xhtml#glossary-implicit block">implicit block</a> named <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a> 
<div class="issue-annotation"><span class="issue-reference error">issue:Issue LOOP-NAMED-BLOCK-NIL:OVERRIDE</span>unless <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">named</span> is supplied.
</div>Thus, <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-return-from">return-from</a> (and sometimes <a class="macro-reference" href="chapter-5.xhtml#macro-return">return</a>)
can be used to return values from <a class="macro-reference" href="#macro-loop">loop</a> or to exit <a class="macro-reference" href="#macro-loop">loop</a>.

</section><section id="section-SummaryofLoopClauses"><h4 class="section-title">Summary of Loop Clauses</h4>Loop clauses fall into one of the following categories:<br/><section id="section-SummaryofVariableInitializationandSteppingClauses"><h5 class="section-title">Summary of Variable Initialization and Stepping Clauses</h5>The <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">for</span> and <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">as</span> constructs provide iteration control clauses
that establish a variable to be initialized.
<math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">for</span> and <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">as</span> clauses can be combined with the loop
keyword <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">and</span> to get <a class="glossary-reference" href="chapter-26.xhtml#glossary-parallel">parallel</a> initialization and <span class="glossary-reference error">glossary:stepping</span><sub>1</sub>.
Otherwise, the initialization and <span class="glossary-reference error">glossary:stepping</span><sub>1</sub> are <a class="glossary-reference" href="chapter-26.xhtml#glossary-sequential">sequential</a>.<br/>
The <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">with</span> construct is similar to a single <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> clause.
<math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">with</span> clauses can be combined using the <a class="glossary-reference" href="chapter-26.xhtml#glossary-loop keyword">loop keyword</a> <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">and</span>
to get <a class="glossary-reference" href="chapter-26.xhtml#glossary-parallel">parallel</a> initialization.<br/>
For more information, see <span class="section-reference error">section:LOOPVarInitAndStep.</span><br/></section><section id="section-SummaryofValueAccumulationClauses"><h5 class="section-title">Summary of Value Accumulation Clauses</h5>The <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">collect</span> (or <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">collecting</span>) construct
takes one <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> in its clause
and adds the value of that <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> to the end of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> 
of values.  By default, the <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> of values is returned 
when the <a class="macro-reference" href="#macro-loop">loop</a> finishes.<br/>The <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">append</span> (or <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">appending</span>) construct 
takes one <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> in its clause
and appends the value of that <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> to the end of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a>
of values.  By default, the <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> of values is returned when the 
<a class="macro-reference" href="#macro-loop">loop</a> finishes.<br/>The <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">nconc</span> (or <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">nconcing</span>) construct 
is similar to the <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">append</span> construct,  
but its <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> values are concatenated as if by the function
<a class="function-reference" href="chapter-14.xhtml#function-nconc">nconc</a>.  By default, the <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> of values is returned when 
the <a class="macro-reference" href="#macro-loop">loop</a> finishes.<br/>The <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">sum</span> (or <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">summing</span>) construct 
takes one <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> in its clause 
that must evaluate to a <a class="glossary-reference" href="chapter-26.xhtml#glossary-number">number</a> and accumulates the sum of all these
<a class="glossary-reference" href="chapter-26.xhtml#glossary-number">numbers</a>.  By default, the cumulative sum is returned when the
<a class="macro-reference" href="#macro-loop">loop</a> finishes.<br/>The <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">count</span> (or <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">counting</span>) construct 
takes one <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> in its clause 
and counts the number of times that the <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> evaluates to <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>.
By default, the count is returned when the <a class="macro-reference" href="#macro-loop">loop</a> finishes.<br/>The <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">minimize</span> (or <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">minimizing</span>) construct
takes one <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> in its clause 
and determines the minimum value obtained by evaluating that <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>.
By default, the minimum value is returned when the <a class="macro-reference" href="#macro-loop">loop</a> finishes.<br/>The <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">maximize</span> (or <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">maximizing</span>) construct
takes one <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> in its clause 
and determines the maximum value obtained by evaluating that <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>.
By default, the maximum value is returned when the <a class="macro-reference" href="#macro-loop">loop</a> finishes.<br/>For more information, see <span class="section-reference error">section:LOOPValAcc.</span><br/></section><section id="section-SummaryofTerminationTestClauses"><h5 class="section-title">Summary of Termination Test Clauses</h5>The <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">for</span> and <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">as</span> constructs provide a termination test
that is determined by the iteration control clause.<br/>The <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">repeat</span> construct causes termination after a specified
number of iterations.
(It uses an internal variable to keep track of the number of iterations.)<br/>The <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">while</span> construct takes one <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>, a <span class="parameter">test</span>, 
and terminates the iteration if the <span class="parameter">test</span> evaluates to <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>.
A <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">while</span> clause is equivalent to the expression 
<code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-not">not</a> <span class="parameter">test</span>)</span> <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop-finish">loop-finish</a>)</span>)</span>
</span></code>.<br/>The <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">until</span> construct is the inverse of <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">while</span>;
it terminates the iteration if the <span class="parameter">test</span> evaluates to
any <a class="glossary-reference" href="chapter-26.xhtml#glossary-non-nil">non-nil</a> value.
An <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">until</span> clause is equivalent to the expression
<code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-if">if</a> <span class="parameter">test</span> <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop-finish">loop-finish</a>)</span>)</span>
</span></code>.<br/>The <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">always</span> construct takes one <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> and
terminates the <a class="macro-reference" href="#macro-loop">loop</a> if the <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> ever evaluates to <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>;
in this case, the <a class="macro-reference" href="#macro-loop">loop</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> returns <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.
Otherwise, it provides a default return value of <a class="symbol-reference" href="chapter-5.xhtml#symbol-t">t</a>.<br/>The <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">never</span> construct takes one <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> and
terminates the <a class="macro-reference" href="#macro-loop">loop</a> if the <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> ever evaluates to <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>;
in this case, the <a class="macro-reference" href="#macro-loop">loop</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> returns <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.
Otherwise, it provides a default return value of <a class="symbol-reference" href="chapter-5.xhtml#symbol-t">t</a>.<br/>The <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">thereis</span> construct takes one <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> and
terminates the <a class="macro-reference" href="#macro-loop">loop</a> if the <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> ever evaluates to
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-non-nil">non-nil</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>;
in this case, the <a class="macro-reference" href="#macro-loop">loop</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> returns that <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.
<div class="issue-annotation"><span class="issue-reference error">issue:Issue LOOP-MISCELLANEOUS-REPAIRS:FIX</span>Otherwise, it provides a default return value of <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.
</div>
If multiple termination test clauses are specified, 
the <a class="macro-reference" href="#macro-loop">loop</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> terminates if any are satisfied.<br/><span class="issue-annotation"><span class="issue-reference error">issue:Issue LOOP-MISCELLANEOUS-REPAIRS:FIX</span></span> 
For more information, see <span class="section-reference error">section:LOOPTermTest.</span><br/></section><section id="section-SummaryofUnconditionalExecutionClauses"><h5 class="section-title">Summary of Unconditional Execution Clauses</h5>The <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">do</span> (or <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">doing</span>) construct evaluates all <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a> in its clause.<br/>The <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">return</span> construct takes one 
<div class="issue-annotation"><span class="issue-reference error">issue:Issue LOOP-MISCELLANEOUS-REPAIRS:FIX</span>  <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>. Any <span class="glossary-reference error">glossary:values</span> returned by the <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> are
  immediately returned by the <a class="macro-reference" href="#macro-loop">loop</a> form.
   It is equivalent to the clause
   <code><span class="syntax-root"><a class="macro-reference" href="#macro-do">do</a> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-return-from">return-from</a> <span class="explicit-italic"> block-name</span> <span class="explicit-italic"> value</span>)</span>
</span></code>,
   where <span class="explicit-italic"> block-name</span> is the name specified in a <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">named</span>
   clause, or <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a> if there is no <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">named</span> clause.
</div>
For more information, see <span class="section-reference error">section:LOOPUnconditional.</span><br/></section><section id="section-SummaryofConditionalExecutionClauses"><h5 class="section-title">Summary of Conditional Execution Clauses</h5>The <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">if</span> and <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">when</span> constructs take one <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> as a test 
and a clause that is executed when the test <a class="glossary-reference" href="chapter-26.xhtml#glossary-yield">yields</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>.
The clause can be a value accumulation, unconditional, or 
another conditional clause; it can also be any combination
of such clauses connected by the <a class="macro-reference" href="#macro-loop">loop</a> <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">and</span> keyword.<br/>The <a class="macro-reference" href="#macro-loop">loop</a> <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">unless</span> construct is similar to the <a class="macro-reference" href="#macro-loop">loop</a> <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">when</span> construct
except that it complements the test result.<br/>The <a class="macro-reference" href="#macro-loop">loop</a> <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">else</span> construct provides an optional component of <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">if</span>,
<math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">when</span>, and <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">unless</span> clauses that is executed 
     when an <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">if</span> or <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">when</span> test <a class="glossary-reference" href="chapter-26.xhtml#glossary-yield">yields</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>
  or when an <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">unless</span> test <a class="glossary-reference" href="chapter-26.xhtml#glossary-yield">yields</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>.
The component is one of the clauses described under <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">if</span>.<br/>The <a class="macro-reference" href="#macro-loop">loop</a> <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">end</span> construct provides an optional component to mark the
end of a conditional clause.<br/>For more information, see <span class="section-reference error">section:LOOPConditional.</span><br/></section><section id="section-SummaryofMiscellaneousClauses"><h5 class="section-title">Summary of Miscellaneous Clauses</h5>The <a class="macro-reference" href="#macro-loop">loop</a> <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">named</span> construct gives a name for the <a class="glossary-reference" href="chapter-26.xhtml#glossary-block">block</a> of the loop.<br/>The <a class="macro-reference" href="#macro-loop">loop</a> <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">initially</span> construct causes its <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a> to be
evaluated in the loop prologue, which precedes all <a class="macro-reference" href="#macro-loop">loop</a> code
except for initial settings supplied by the constructs <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">with</span>,
<math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">for</span>, or <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">as</span>.<br/>The <a class="macro-reference" href="#macro-loop">loop</a> <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">finally</span> construct causes its <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a> to
be evaluated in the loop epilogue after normal iteration terminates.
<span class="issue-annotation"><span class="issue-reference error">issue:Issue LOOP-MISCELLANEOUS-REPAIRS:FIX</span></span> <br/>For more information, see <span class="section-reference error">section:LOOPMisc.</span><br/></section></section><section id="section-OrderofExecution"><h4 class="section-title">Order of Execution</h4><a id="index/text-order of evaluation"></a><a id="index/text-evaluation order"></a><br/> 
  With the exceptions listed below, clauses are executed in the loop body
  in the order in which they appear in the source.  Execution is repeated 
  until a clause
  terminates the <a class="macro-reference" href="#macro-loop">loop</a> or until a <a class="macro-reference" href="chapter-5.xhtml#macro-return">return</a>, <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-go">go</a>,
  or <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-throw">throw</a> form is encountered 
which transfers control to a point outside of the loop.
 The following actions are
  exceptions to the linear order of execution:<br/><ul><li>All variables are initialized first, 
  regardless of where the establishing clauses appear in the
  source.  The order of initialization follows the order of these clauses.<br/></li><li>The code for any <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">initially</span> clauses is collected
  into one <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-progn">progn</a> in the order in which the clauses appear in
  the source.  The collected code is executed once in the loop prologue
  after any implicit variable initializations.<br/></li><li>The code for any <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">finally</span> clauses is collected 
  into one <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-progn">progn</a> in the order in which the clauses appear in
  the source.  The collected code is executed once in the loop epilogue
  before any implicit values from the accumulation clauses are returned.
  Explicit returns anywhere in the source, however, will exit the 
  <a class="macro-reference" href="#macro-loop">loop</a> without executing the epilogue code.<br/></li><li>A <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">with</span> clause introduces a variable <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a>
  and an optional initial value.  The initial values are calculated 
  in the order in which the <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">with</span> clauses occur.<br/></li><li>Iteration control clauses implicitly perform the following actions:<br/><ul><li>initialize variables;<br/></li><li><a class="glossary-reference" href="chapter-26.xhtml#glossary-step">step</a> variables, generally 
between each execution of the loop body;<br/></li><li>perform termination tests, 
generally just before the execution of the
  loop body.<br/>  </li></ul>
  </li></ul><br/></section><section id="section-DestructuringLOOPVars"><h4 class="section-title">Destructuring</h4><br/>The <span class="parameter">d-type-spec</span> argument is used for destructuring.
If the
<span class="parameter">d-type-spec</span> argument consists solely of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-12.xhtml#type-fixnum">fixnum</a>,
<a class="type-reference" href="chapter-12.xhtml#type-float">float</a>, <a class="type-reference" href="chapter-4.xhtml#type-t">t</a>, or <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>, the <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">of-type</span> keyword is optional.
The <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">of-type</span> construct is optional in these cases to provide backwards
compatibility; thus, the following two expressions are the same:<br/><pre><code><span class="syntax-root">;;; This expression uses the old syntax for type specifiers.
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">i</span> <a class="type-reference" href="chapter-12.xhtml#type-fixnum">fixnum</a> <span class="syntax-interned-symbol">upfrom</span> <span class="syntax-number">3</span> <span class="syntax-interned-symbol">...</span>)</span>
 
;;; This expression uses the new syntax for type specifiers.
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">of-type</span> <a class="type-reference" href="chapter-12.xhtml#type-fixnum">fixnum</a> <span class="syntax-interned-symbol">upfrom</span> <span class="syntax-number">3</span> <span class="syntax-interned-symbol">...</span>)</span>

;; Declare X and Y to be of type VECTOR and FIXNUM respectively.
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span> <span class="syntax-interned-symbol">of-type</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-15.xhtml#function-vector">vector</a> <a class="type-reference" href="chapter-12.xhtml#type-fixnum">fixnum</a>)</span> 
       <span class="syntax-interned-symbol">in</span> <span class="syntax-interned-symbol">l</span> <a class="macro-reference" href="#macro-do">do</a> <span class="syntax-interned-symbol">...</span>)</span>
</span></code></pre><br/>A <a class="glossary-reference" href="chapter-26.xhtml#glossary-type specifier">type specifier</a> for a destructuring pattern is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-tree">tree</a> of 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-type specifier">type specifiers</a> with the same shape as the <a class="glossary-reference" href="chapter-26.xhtml#glossary-tree">tree</a> of
<a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variable</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">names</a>, with the following exceptions:<br/><ul><li>When aligning the <span class="glossary-reference error">glossary:trees</span>, an <a class="glossary-reference" href="chapter-26.xhtml#glossary-atom">atom</a> in the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-tree">tree</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type specifier">type specifiers</a> that matches a <a class="glossary-reference" href="chapter-26.xhtml#glossary-cons">cons</a> 
in the variable tree declares the same <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> for each variable
in the subtree rooted at the <a class="glossary-reference" href="chapter-26.xhtml#glossary-cons">cons</a>.<br/></li><li>A <a class="glossary-reference" href="chapter-26.xhtml#glossary-cons">cons</a> in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-tree">tree</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type specifier">type specifiers</a> that 
matches an <a class="glossary-reference" href="chapter-26.xhtml#glossary-atom">atom</a> in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-tree">tree</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variable</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">names</a>
is a <span class="glossary-reference error">glossary:compound type specifer</span>.<br/></li></ul><br/>Destructuring allows <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> of a set of variables to a corresponding
set of values anywhere that a value can normally be bound to a single
variable.  During <a class="macro-reference" href="#macro-loop">loop</a> expansion, 
each variable in the variable list
is matched with the values in the values list.  If there are more variables
in the variable list than there are values in the values list, the 
remaining variables are given a value of <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.  If there are more
values than variables listed, the extra values are discarded.<br/> 
To assign values from a list to the variables <code><span class="syntax-root"><span class="syntax-interned-symbol">a</span>
</span></code>,
<code><span class="syntax-root"><span class="syntax-interned-symbol">b</span>
</span></code>, and <code><span class="syntax-root"><span class="syntax-interned-symbol">c</span>
</span></code>, the <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">for</span> clause could be used to
bind the variable <code><span class="syntax-root"><span class="syntax-interned-symbol">numlist</span>
</span></code> to the 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-car">car</a> of the supplied <span class="parameter">form</span>,
and then another <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">for</span> clause could be used to bind the variables
<code><span class="syntax-root"><span class="syntax-interned-symbol">a</span>
</span></code>, <code><span class="syntax-root"><span class="syntax-interned-symbol">b</span>
</span></code>, and <code><span class="syntax-root"><span class="syntax-interned-symbol">c</span>
</span></code> <a class="glossary-reference" href="chapter-26.xhtml#glossary-sequentially">sequentially</a>.  <br/><div class="issue-annotation"><a class="issue-reference" href="issues/loop-and-discrepancy.xhtml#issue-loop-and-discrepancy:no-reiteration">Issue LOOP-AND-DISCREPANCY:NO-REITERATION</a><pre><code><span class="syntax-root">;; Collect values by using FOR constructs.
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">numlist</span> <span class="syntax-interned-symbol">in</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">4.0</span>)</span> <span class="syntax-cons">(<span class="syntax-number">5</span> <span class="syntax-number">6</span> <span class="syntax-number">8.3</span>)</span> <span class="syntax-cons">(<span class="syntax-number">8</span> <span class="syntax-number">9</span> <span class="syntax-number">10.4</span>)</span>)</span></span>
       <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">of-type</span> <a class="type-reference" href="chapter-12.xhtml#type-integer">integer</a> <a class="function-reference" href="chapter-12.xhtml#function-=">=</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-first">first</a> <span class="syntax-interned-symbol">numlist</span>)</span>
       <a class="macro-reference" href="chapter-5.xhtml#macro-and">and</a> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">of-type</span> <a class="type-reference" href="chapter-12.xhtml#type-integer">integer</a> <a class="function-reference" href="chapter-12.xhtml#function-=">=</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-second">second</a> <span class="syntax-interned-symbol">numlist</span>)</span>
       <a class="macro-reference" href="chapter-5.xhtml#macro-and">and</a> <span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">of-type</span> <a class="function-reference" href="chapter-12.xhtml#function-float">float</a> <a class="function-reference" href="chapter-12.xhtml#function-=">=</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-third">third</a> <span class="syntax-interned-symbol">numlist</span>)</span>
       <span class="syntax-interned-symbol">collect</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">a</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-number">4.0</span> <span class="syntax-number">2</span> <span class="syntax-number">1</span>)</span> <span class="syntax-cons">(<span class="syntax-number">8.3</span> <span class="syntax-number">6</span> <span class="syntax-number">5</span>)</span> <span class="syntax-cons">(<span class="syntax-number">10.4</span> <span class="syntax-number">9</span> <span class="syntax-number">8</span>)</span>)</span>
</span></code></pre></div> 
Destructuring makes this process easier by allowing the variables to
be bound in each loop iteration.  
<a class="glossary-reference" href="chapter-26.xhtml#glossary-type">Types</a> can be declared by using a 
list of <span class="parameter">type-spec</span> arguments.  If 
all the <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">types</a>
are the same, a shorthand destructuring syntax can be used, as the second
example illustrates.<br/><pre><code><span class="syntax-root">;; Destructuring simplifies the process.
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span>)</span> <span class="syntax-interned-symbol">of-type</span> <span class="syntax-cons">(<a class="type-reference" href="chapter-12.xhtml#type-integer">integer</a> <a class="type-reference" href="chapter-12.xhtml#type-integer">integer</a> <a class="function-reference" href="chapter-12.xhtml#function-float">float</a>)</span> <span class="syntax-interned-symbol">in</span>
       <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">4.0</span>)</span> <span class="syntax-cons">(<span class="syntax-number">5</span> <span class="syntax-number">6</span> <span class="syntax-number">8.3</span>)</span> <span class="syntax-cons">(<span class="syntax-number">8</span> <span class="syntax-number">9</span> <span class="syntax-number">10.4</span>)</span>)</span></span>
       <span class="syntax-interned-symbol">collect</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">a</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-number">4.0</span> <span class="syntax-number">2</span> <span class="syntax-number">1</span>)</span> <span class="syntax-cons">(<span class="syntax-number">8.3</span> <span class="syntax-number">6</span> <span class="syntax-number">5</span>)</span> <span class="syntax-cons">(<span class="syntax-number">10.4</span> <span class="syntax-number">9</span> <span class="syntax-number">8</span>)</span>)</span>
 

;; If all the types are the same, this way is even simpler.
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span>)</span> <span class="syntax-interned-symbol">of-type</span> <a class="function-reference" href="chapter-12.xhtml#function-float">float</a> <span class="syntax-interned-symbol">in</span>
       <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-number">1.0</span> <span class="syntax-number">2.0</span> <span class="syntax-number">4.0</span>)</span> <span class="syntax-cons">(<span class="syntax-number">5.0</span> <span class="syntax-number">6.0</span> <span class="syntax-number">8.3</span>)</span> <span class="syntax-cons">(<span class="syntax-number">8.0</span> <span class="syntax-number">9.0</span> <span class="syntax-number">10.4</span>)</span>)</span></span>
       <span class="syntax-interned-symbol">collect</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">a</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-number">4.0</span> <span class="syntax-number">2.0</span> <span class="syntax-number">1.0</span>)</span> <span class="syntax-cons">(<span class="syntax-number">8.3</span> <span class="syntax-number">6.0</span> <span class="syntax-number">5.0</span>)</span> <span class="syntax-cons">(<span class="syntax-number">10.4</span> <span class="syntax-number">9.0</span> <span class="syntax-number">8.0</span>)</span>)</span>
</span></code></pre><br/> <br/>If destructuring is used to declare or initialize a number of groups
of variables into <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">types</a>, the <a class="glossary-reference" href="chapter-26.xhtml#glossary-loop keyword">loop keyword</a> <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">and</span> can be used
to simplify the process further.
<div class="issue-annotation"><a class="issue-reference" href="issues/loop-and-discrepancy.xhtml#issue-loop-and-discrepancy:no-reiteration">Issue LOOP-AND-DISCREPANCY:NO-REITERATION</a> 
<pre><code><span class="syntax-root">;; Initialize and declare variables in parallel by using the AND construct.\kern-7pt
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">with</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span>)</span> <span class="syntax-interned-symbol">of-type</span> <a class="function-reference" href="chapter-12.xhtml#function-float">float</a> <a class="function-reference" href="chapter-12.xhtml#function-=">=</a> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-number">1.0</span> <span class="syntax-number">2.0</span>)</span></span>
       <a class="macro-reference" href="chapter-5.xhtml#macro-and">and</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">d</span>)</span> <span class="syntax-interned-symbol">of-type</span> <a class="type-reference" href="chapter-12.xhtml#type-integer">integer</a> <a class="function-reference" href="chapter-12.xhtml#function-=">=</a> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-number">3</span> <span class="syntax-number">4</span>)</span></span>
       <a class="macro-reference" href="chapter-5.xhtml#macro-and">and</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">e</span> <span class="syntax-interned-symbol">f</span>)</span>
       <a class="macro-reference" href="chapter-5.xhtml#macro-return">return</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">d</span> <span class="syntax-interned-symbol">e</span> <span class="syntax-interned-symbol">f</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-number">1.0</span> <span class="syntax-number">2.0</span> <span class="syntax-number">3</span> <span class="syntax-number">4</span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span>
</span></code></pre></div> <br/> 
If <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a> is used in a destructuring list, no variable is provided for
its place.<br/><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-interned-symbol">b</span>)</span> <a class="function-reference" href="chapter-12.xhtml#function-=">=</a> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">3</span>)</span></span>
       <a class="macro-reference" href="#macro-do">do</a> <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-return">return</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span>)</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">3</span>)</span>
</span></code></pre><br/>Note that 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-dotted list">dotted lists</a>
can specify destructuring.<br/><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-symbol">.</span> <span class="syntax-interned-symbol">y</span>)</span> <a class="function-reference" href="chapter-12.xhtml#function-=">=</a> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-symbol">.</span> <span class="syntax-number">2</span>)</span></span>
       <a class="macro-reference" href="#macro-do">do</a> <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-return">return</a> <span class="syntax-interned-symbol">y</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">2</span>
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-symbol">.</span> <span class="syntax-interned-symbol">b</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">c</span> <span class="syntax-symbol">.</span> <span class="syntax-interned-symbol">d</span>)</span>)</span> <span class="syntax-interned-symbol">of-type</span> <span class="syntax-cons">(<span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-float">float</a> <span class="syntax-symbol">.</span> <a class="function-reference" href="chapter-12.xhtml#function-float">float</a>)</span> <span class="syntax-cons">(<a class="type-reference" href="chapter-12.xhtml#type-integer">integer</a> <span class="syntax-symbol">.</span> <a class="type-reference" href="chapter-12.xhtml#type-integer">integer</a>)</span>)</span> <span class="syntax-interned-symbol">in</span>
       <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-number">1.2</span> <span class="syntax-symbol">.</span> <span class="syntax-number">2.4</span>)</span> <span class="syntax-cons">(<span class="syntax-number">3</span> <span class="syntax-symbol">.</span> <span class="syntax-number">4</span>)</span>)</span> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-number">3.4</span> <span class="syntax-symbol">.</span> <span class="syntax-number">4.6</span>)</span> <span class="syntax-cons">(<span class="syntax-number">5</span> <span class="syntax-symbol">.</span> <span class="syntax-number">6</span>)</span>)</span>)</span></span>
       <span class="syntax-interned-symbol">collect</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">d</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-number">1.2</span> <span class="syntax-number">2.4</span> <span class="syntax-number">3</span> <span class="syntax-number">4</span>)</span> <span class="syntax-cons">(<span class="syntax-number">3.4</span> <span class="syntax-number">4.6</span> <span class="syntax-number">5</span> <span class="syntax-number">6</span>)</span>)</span>
</span></code></pre><br/>An error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-5.xhtml#type-program-error">program-error</a> is signaled (at macro expansion time)
if the same variable is bound twice in any variable-binding
clause of a single <a class="macro-reference" href="#macro-loop">loop</a> expression.  Such variables include
local variables, iteration control variables, and variables found by
destructuring.<br/></section><section id="section-RestrictionsonSide-Effects"><h4 class="section-title">Restrictions on Side-Effects</h4><div class="issue-annotation"><a class="issue-reference" href="issues/mapping-destructive-interaction.xhtml#issue-mapping-destructive-interaction:explicitly-vague">Issue MAPPING-DESTRUCTIVE-INTERACTION:EXPLICITLY-VAGUE</a>See <span class="section-reference error">section:TraversalRules.</span></div>
</section></section><section id="section-LOOPVarInitAndStep"><h3 class="section-title">Variable Initialization and Stepping Clauses</h3><br/><section id="section-IterationControl"><h4 class="section-title">Iteration Control</h4>Iteration control clauses allow direction of <a class="macro-reference" href="#macro-loop">loop</a> iteration.
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-loop keyword">loop keywords</a> <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">for</span> and <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">as</span>
designate iteration control clauses.
Iteration control clauses differ with respect to the specification of
termination tests and to the initialization and <span class="glossary-reference error">glossary:stepping</span><sub>1</sub>
of loop variables.  Iteration clauses by themselves
do not cause the Loop Facility to return values, but they
can be used in conjunction with value-accumulation clauses to
return values.  <br/>All variables are initialized in the loop prologue.  
A <a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variable</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> has <a class="glossary-reference" href="chapter-26.xhtml#glossary-lexical scope">lexical scope</a>
unless it is proclaimed <a class="declaration-reference" href="chapter-3.xhtml#declaration-special">special</a>;
thus, by default, the variable can be <a class="glossary-reference" href="chapter-26.xhtml#glossary-access">accessed</a> only by <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a> 
that lie textually within the <a class="macro-reference" href="#macro-loop">loop</a>.
Stepping assignments are made in the loop body before any other <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a>
are evaluated in the body.  <br/>The variable argument in iteration control clauses can be a 
destructuring list.  A destructuring list
is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-tree">tree</a> whose <a class="glossary-reference" href="chapter-26.xhtml#glossary-non-nil">non-nil</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-atom">atoms</a> are <a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variable</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-name">names</a>.
See <span class="section-reference error">section:DestructuringLOOPVars.</span><br/>The iteration control clauses <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">for</span>, <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">as</span>,  and <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">repeat</span> 
must precede any other loop clauses, except
  <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">initially</span>, <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">with</span>, and <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">named</span>,
since they establish variable <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a>.  
When iteration control clauses are
used in a <a class="macro-reference" href="#macro-loop">loop</a>,
the corresponding
termination tests in the loop body are evaluated
before any other loop body code is executed.<br/> 
If multiple iteration clauses are used to control iteration, variable
initialization and <span class="glossary-reference error">glossary:stepping</span><sub>1</sub> occur <a class="glossary-reference" href="chapter-26.xhtml#glossary-sequentially">sequentially</a> by default.  
The <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">and</span> construct can be used to connect two or more
iteration clauses when <a class="glossary-reference" href="chapter-26.xhtml#glossary-sequential">sequential</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> and 
<span class="glossary-reference error">glossary:stepping</span><sub>1</sub> are not necessary.
The iteration behavior of clauses joined by <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">and</span>
is analogous to the behavior of the macro <a class="macro-reference" href="#macro-do">do</a> with
respect to <a class="macro-reference" href="#macro-do*">do*</a>.<br/>The <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">for</span> and <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">as</span> clauses iterate by using one or more local 
loop  variables that are initialized to some value and that 
can be modified or <span class="glossary-reference error">glossary:stepped</span><sub>1</sub> after each iteration.  
For these clauses, iteration terminates when a local
variable reaches some supplied value or when some other loop clause
terminates iteration.
At each iteration, variables can be 
   <span class="glossary-reference error">glossary:stepped</span><sub>1</sub> by an increment or a decrement
or can be assigned a new value by the evaluation of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>).
Destructuring can be used to assign 
values to variables during iteration. <br/>The <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">for</span> and <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">as</span> keywords are synonyms; they can be used
interchangeably.  There are seven syntactic formats for these constructs.
In each syntactic format, the <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> of
<span class="parameter">var</span> can be supplied by the optional <span class="parameter">type-spec</span>
argument.  If <span class="parameter">var</span> is a destructuring list, the <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a>
supplied by the <span class="parameter">type-spec</span> argument must appropriately match
the elements of the list.  
By convention, <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">for</span> introduces new iterations and <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">as</span>
introduces iterations that depend on a previous iteration specification.<br/><section id="section-Thefor-as-arithmeticsubclause"><h5 class="section-title">The for-as-arithmetic subclause</h5>In the <span class="explicit-italic"> for-as-arithmetic</span> subclause, the <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">for</span> 
or <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">as</span> construct iterates from the value supplied by
<span class="parameter">form1</span> to the value supplied by <span class="parameter">form2</span> in increments or
decrements denoted by <span class="parameter">form3</span>. Each
expression is evaluated only once and must evaluate to a <a class="glossary-reference" href="chapter-26.xhtml#glossary-number">number</a>.  
The variable <span class="parameter">var</span> is bound to the value of 
<span class="parameter">form1</span> in the first iteration and is <span class="glossary-reference error">glossary:stepped</span><sub>1</sub>
by the value of <span class="parameter">form3</span> in each succeeding iteration,
or by 1 if <span class="parameter">form3</span> is not provided.  
The following <a class="glossary-reference" href="chapter-26.xhtml#glossary-loop keyword">loop keywords</a> serve as valid prepositions within this 
syntax.
At least one of the 
prepositions must be used; 
and at most one from each line may be used in a single subclause.<br/><dl><dt>	
 from | downfrom | upfrom</dt><dd/><dt>	
 to | downto | upto | below | above</dt><dd/><dt>	
 by</dt><dd/></dl><br/><div class="issue-annotation"><span class="issue-reference error">issue:Issue LOOP-MISCELLANEOUS-REPAIRS:FIX</span>The prepositional phrases in each subclause may appear in any order.
For example, either ``<code><span class="syntax-root"><span class="syntax-interned-symbol">from</span> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">by</span> <span class="syntax-interned-symbol">y</span>
</span></code>'' or ``<code><span class="syntax-root"><span class="syntax-interned-symbol">by</span> <span class="syntax-interned-symbol">y</span> <span class="syntax-interned-symbol">from</span> <span class="syntax-interned-symbol">x</span>
</span></code>'' is permitted.
However, because left-to-right order of evaluation is preserved,
the effects will be different in the case of side effects.
<a id="index/text-order of evaluation"></a><a id="index/text-evaluation order"></a>Consider:<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-number">1</span>)</span>)</span> <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">from</span> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">by</span> <span class="syntax-cons">(<a class="macro-reference" href="chapter-12.xhtml#macro-incf">incf</a> <span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-interned-symbol">to</span> <span class="syntax-number">10</span> <span class="syntax-interned-symbol">collect</span> <span class="syntax-interned-symbol">i</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">3</span> <span class="syntax-number">5</span> <span class="syntax-number">7</span> <span class="syntax-number">9</span>)</span>
<span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-number">1</span>)</span>)</span> <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">by</span> <span class="syntax-cons">(<a class="macro-reference" href="chapter-12.xhtml#macro-incf">incf</a> <span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-interned-symbol">from</span> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">to</span> <span class="syntax-number">10</span> <span class="syntax-interned-symbol">collect</span> <span class="syntax-interned-symbol">i</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-number">2</span> <span class="syntax-number">4</span> <span class="syntax-number">6</span> <span class="syntax-number">8</span> <span class="syntax-number">10</span>)</span>
</span></code></pre></div> 
The descriptions of the prepositions follow:<br/><dl><dt>	
 from</dt><dd>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-loop keyword">loop keyword</a> <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">from</span> specifies the value from which
<span class="glossary-reference error">glossary:stepping</span><sub>1</sub> begins, as supplied by <span class="parameter">form1</span>.  
<span class="glossary-reference error">glossary:Stepping</span><sub>1</sub> is incremental by default.  If 
decremental <span class="glossary-reference error">glossary:stepping</span><sub>1</sub> is desired, 
the preposition <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">downto</span> 
or <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">above</span> must be used with <span class="parameter">form2</span>.  For incremental
<span class="glossary-reference error">glossary:stepping</span><sub>1</sub>, the default <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">from</span> value is 0.<br/></dd><dt>	
 downfrom, upfrom</dt><dd>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-loop keyword">loop keyword</a> <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">downfrom</span> 
indicates that the variable <span class="parameter">var</span> is decreased in decrements
supplied by <span class="parameter">form3</span>; the <a class="glossary-reference" href="chapter-26.xhtml#glossary-loop keyword">loop keyword</a> <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">upfrom</span> indicates that 
<span class="parameter">var</span> is increased in increments supplied by <span class="parameter">form3</span>.<br/></dd><dt>	
 to</dt><dd>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-loop keyword">loop keyword</a> <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">to</span> marks the end value
for <span class="glossary-reference error">glossary:stepping</span><sub>1</sub> supplied in <span class="parameter">form2</span>.
<span class="glossary-reference error">glossary:Stepping</span><sub>1</sub> is incremental by default.
If decremental <span class="glossary-reference error">glossary:stepping</span><sub>1</sub> is desired, 
the preposition <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">downfrom</span> must be used with <span class="parameter">form1</span>,
or else the preposition <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">downto</span> or <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">above</span> should be used instead
   of <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">to</span> with <span class="parameter">form2</span>.<br/></dd><dt>	
 downto, upto</dt><dd>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-loop keyword">loop keyword</a> <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">downto</span> specifies decremental <span class="glossary-reference error">glossary:stepping</span>;
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-loop keyword">loop keyword</a> <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">upto</span> specifies incremental <span class="glossary-reference error">glossary:stepping</span>.
In both cases, the amount of change on each step is specified by <span class="parameter">form3</span>,
and the <a class="macro-reference" href="#macro-loop">loop</a> terminates when the variable <span class="parameter">var</span> passes 
the value of <span class="parameter">form2</span>.
Since there is no default for <span class="parameter">form1</span> in decremental <span class="glossary-reference error">glossary:stepping</span><sub>1</sub>,
a <span class="parameter">form1</span> value must be supplied (using <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">from</span> or <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">downfrom</span>)
when <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">downto</span> is supplied.<br/></dd><dt>	
 below, above</dt><dd>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-loop keyword">loop keywords</a> <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">below</span> and <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">above</span> are analogous to
<math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">upto</span> and <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">downto</span> respectively.  These keywords stop
iteration just before the value of the variable <span class="parameter">var</span> reaches the value 
supplied by <span class="parameter">form2</span>; the end value of <span class="parameter">form2</span> is not included.
Since there is no default for <span class="parameter">form1</span> in decremental <span class="glossary-reference error">glossary:stepping</span><sub>1</sub>,
a <span class="parameter">form1</span> value must be supplied (using <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">from</span> or <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">downfrom</span>)
when <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">above</span> is supplied.<br/></dd><dt>	
 by</dt><dd>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-loop keyword">loop keyword</a> <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">by</span> marks the increment or decrement supplied by
<span class="parameter">form3</span>.  The value of <span class="parameter">form3</span> can be any 
positive 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-number">number</a>.
The default value is 1.<br/></dd></dl><br/>In an iteration control clause, the <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">for</span> or <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">as</span> construct
causes termination when the supplied limit is reached.  That is,
iteration continues until the value <span class="parameter">var</span> is stepped to the
exclusive or inclusive limit supplied by <span class="parameter">form2</span>.  The range is
exclusive if <span class="parameter">form3</span> increases or decreases <span class="parameter">var</span>
to the value of <span class="parameter">form2</span> without reaching that value; the loop
keywords <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">below</span> and <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">above</span> provide exclusive limits.  An
inclusive limit allows <span class="parameter">var</span> to attain the value of
<span class="parameter">form2</span>; <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">to</span>, <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">downto</span>, and <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">upto</span> provide inclusive
limits.  <br/>
<div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><section id="section-Examplesoffor-as-arithmeticsubclause"><h6 class="section-title">Examples of for-as-arithmetic subclause</h6><pre><code><span class="syntax-root">;; Print some numbers.
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">from</span> <span class="syntax-number">1</span> <span class="syntax-interned-symbol">to</span> <span class="syntax-number">3</span>
       <a class="macro-reference" href="#macro-do">do</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-22.xhtml#function-print">print</a> <span class="syntax-interned-symbol">i</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 1
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 2
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 3
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>
 
;; Print every third number.
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">from</span> <span class="syntax-number">10</span> <span class="syntax-interned-symbol">downto</span> <span class="syntax-number">1</span> <span class="syntax-interned-symbol">by</span> <span class="syntax-number">3</span>
       <a class="macro-reference" href="#macro-do">do</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-22.xhtml#function-print">print</a> <span class="syntax-interned-symbol">i</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 10 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 7 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 4 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 1 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>
 
;; Step incrementally from the default starting value.
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">below</span> <span class="syntax-number">3</span>
       <a class="macro-reference" href="#macro-do">do</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-22.xhtml#function-print">print</a> <span class="syntax-interned-symbol">i</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 0
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 1
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 2
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>
</span></code></pre><br/></section></div></section><section id="section-Thefor-as-in-listsubclause"><h5 class="section-title">The for-as-in-list subclause</h5>In the <span class="explicit-italic"> for-as-in-list</span> subclause,
the <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">for</span> 
or <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">as</span> construct iterates over the contents of a 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a>.  It checks for 
the end of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> as if by using <a class="function-reference" href="chapter-14.xhtml#function-endp">endp</a>.  
The variable <span class="parameter">var</span> is bound to the successive elements  of 
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> in <span class="parameter">form1</span> before each
iteration.  At the end of each iteration, the function <span class="parameter">step-fun</span>
is applied to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a>; the default value for <span class="parameter">step-fun</span> is
<a class="function-reference" href="chapter-14.xhtml#function-cdr">cdr</a>.
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-loop keyword">loop keywords</a> <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">in</span> and <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">by</span> serve as valid prepositions in
this syntax.
The <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">for</span> or <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">as</span> construct causes termination when the
end of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> is reached.<br/><div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><section id="section-Examplesoffor-as-in-listsubclause"><h6 class="section-title">Examples of for-as-in-list subclause</h6><div class="issue-annotation"><span class="issue-reference error">issue:Issue LOOP-MISCELLANEOUS-REPAIRS:FIX</span><pre><code><span class="syntax-root">;; Print every item in a list.
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">item</span> <span class="syntax-interned-symbol">in</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">3</span>)</span></span> <a class="macro-reference" href="#macro-do">do</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-22.xhtml#function-print">print</a> <span class="syntax-interned-symbol">item</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 1
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 2
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 3
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>
 
;; Print every other item in a list.
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">item</span> <span class="syntax-interned-symbol">in</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">3</span> <span class="syntax-number">4</span> <span class="syntax-number">5</span>)</span></span> <span class="syntax-interned-symbol">by</span> <span class="syntax-function">#'<a class="function-reference" href="chapter-14.xhtml#function-cddr">cddr</a></span>
       <a class="macro-reference" href="#macro-do">do</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-22.xhtml#function-print">print</a> <span class="syntax-interned-symbol">item</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 1
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 3
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 5
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>
 
;; Destructure a list, and sum the x values using fixnum arithmetic.
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">item</span> <span class="syntax-symbol">.</span> <span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-interned-symbol">of-type</span> <span class="syntax-cons">(<a class="section-reference" href="chapter-26.xhtml#section-T">T</a> <span class="syntax-symbol">.</span> <a class="type-reference" href="chapter-12.xhtml#type-fixnum">fixnum</a>)</span> <span class="syntax-interned-symbol">in</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">A</span> <span class="syntax-symbol">.</span> <span class="syntax-number">1</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">B</span> <span class="syntax-symbol">.</span> <span class="syntax-number">2</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">C</span> <span class="syntax-symbol">.</span> <span class="syntax-number">3</span>)</span>)</span></span>
       <a class="macro-reference" href="chapter-5.xhtml#macro-unless">unless</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-eq">eq</a> <span class="syntax-interned-symbol">item</span> <span class="syntax-quote">'<span class="syntax-interned-symbol">B</span></span>)</span> <span class="syntax-interned-symbol">sum</span> <span class="syntax-interned-symbol">x</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">4</span>
</span></code></pre></div> 
</section></div></section><section id="section-Thefor-as-on-listsubclause"><h5 class="section-title">The for-as-on-list subclause</h5><div class="issue-annotation"><span class="issue-reference error">issue:Issue LOOP-FOR-AS-ON-TYPO:FIX-TYPO</span>In the <span class="explicit-italic"> for-as-on-list</span> subclause, the <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">for</span> or <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">as</span>
construct iterates over
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a>. It checks for the
end of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> as if by using <a class="function-reference" href="chapter-14.xhtml#function-atom">atom</a>.
</div>The variable <span class="parameter">var</span> is bound to the successive tails of the 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> in 
<span class="parameter">form1</span>.  At the end of each iteration, the function <span class="parameter">step-fun</span>
 is applied to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a>; the default value for <span class="parameter">step-fun</span> is <a class="function-reference" href="chapter-14.xhtml#function-cdr">cdr</a>.
 The <a class="glossary-reference" href="chapter-26.xhtml#glossary-loop keyword">loop keywords</a> <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">on</span> and <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">by</span> serve as valid
prepositions in this syntax.
The <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">for</span> or <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">as</span> construct causes termination when the
end of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> is reached.<br/><div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><section id="section-Examplesoffor-as-on-listsubclause"><h6 class="section-title">Examples of for-as-on-list subclause</h6><pre><code><span class="syntax-root">;; Collect successive tails of a list.
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">sublist</span> <span class="syntax-interned-symbol">on</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">d</span>)</span></span>
       <span class="syntax-interned-symbol">collect</span> <span class="syntax-interned-symbol">sublist</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">B</span> <span class="syntax-interned-symbol">C</span> <span class="syntax-interned-symbol">D</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">B</span> <span class="syntax-interned-symbol">C</span> <span class="syntax-interned-symbol">D</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">C</span> <span class="syntax-interned-symbol">D</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">D</span>)</span>)</span>
 
;; Print a list by using destructuring with the loop keyword ON.
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">item</span>)</span> <span class="syntax-interned-symbol">on</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">3</span>)</span></span>
       <a class="macro-reference" href="#macro-do">do</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-22.xhtml#function-print">print</a> <span class="syntax-interned-symbol">item</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 1 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 2 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 3 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>
 
</span></code></pre><br/></section></div></section><section id="section-Thefor-as-equals-thensubclause"><h5 class="section-title">The for-as-equals-then subclause</h5>In the <span class="explicit-italic"> for-as-equals-then</span> subclause
the <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">for</span> 
or <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">as</span> construct 
initializes the variable <span class="parameter">var</span> by setting it to the
  result of evaluating <span class="parameter">form1</span> on the first iteration, then setting
  it to the result of evaluating <span class="parameter">form2</span> on the second and
  subsequent iterations.  If <span class="parameter">form2</span> is omitted, the construct
  uses <span class="parameter">form1</span> on the second and
  subsequent iterations.  
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-loop keyword">loop keywords</a> = and <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">then</span> serve as valid prepositions
in this syntax. 
This construct does not provide any termination tests.<br/><div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><section id="section-Examplesoffor-as-equals-thensubclause"><h6 class="section-title">Examples of for-as-equals-then subclause</h6><pre><code><span class="syntax-root">;; Collect some numbers.
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">item</span> <a class="function-reference" href="chapter-12.xhtml#function-=">=</a> <span class="syntax-number">1</span> <span class="syntax-interned-symbol">then</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">item</span> <span class="syntax-number">10</span>)</span>
       <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">iteration</span> <span class="syntax-interned-symbol">from</span> <span class="syntax-number">1</span> <span class="syntax-interned-symbol">to</span> <span class="syntax-number">5</span>
       <span class="syntax-interned-symbol">collect</span> <span class="syntax-interned-symbol">item</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">11</span> <span class="syntax-number">21</span> <span class="syntax-number">31</span> <span class="syntax-number">41</span>)</span>
</span></code></pre><br/></section></div></section><section id="section-Thefor-as-acrosssubclause"><h5 class="section-title">The for-as-across subclause</h5>In the <span class="explicit-italic"> for-as-across</span> subclause the <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">for</span> 
  or <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">as</span> construct binds the variable <span class="parameter">var</span> to the value of
  each element in the array <span class="parameter">vector</span>.
  The <a class="glossary-reference" href="chapter-26.xhtml#glossary-loop keyword">loop keyword</a> <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">across</span> marks the array <span class="parameter">vector</span>; <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">across</span>
  is used as a preposition in this syntax.
  Iteration stops when there are no more elements in the supplied
  <a class="glossary-reference" href="chapter-26.xhtml#glossary-array">array</a> that can be referenced.
  Some implementations might recognize a <a class="special-operator-reference" href="chapter-3.xhtml#special-operator-the">the</a> special form
  in the <span class="parameter">vector</span> form to produce more efficient code.<br/><div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><section id="section-Examplesoffor-as-acrosssubclause"><h6 class="section-title">Examples of for-as-across subclause</h6><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <a class="function-reference" href="chapter-16.xhtml#function-char">char</a> <span class="syntax-interned-symbol">across</span> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-3.xhtml#special-operator-the">the</a> <a class="type-reference" href="chapter-16.xhtml#type-simple-string">simple-string</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">find-message</span> <span class="syntax-interned-symbol">channel</span>)</span>)</span>
      <a class="macro-reference" href="#macro-do">do</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-21.xhtml#function-write-char">write-char</a> <a class="function-reference" href="chapter-16.xhtml#function-char">char</a> <a class="type-reference" href="chapter-21.xhtml#type-stream">stream</a>)</span>)</span>
</span></code></pre><br/></section></div></section><section id="section-Thefor-as-hashsubclause"><h5 class="section-title">The for-as-hash subclause</h5>In the <span class="explicit-italic"> for-as-hash</span> subclause
  the <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">for</span> 
  or <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">as</span> construct 
  iterates over the elements, keys, and values of a <span class="glossary-reference error">glossary:hash-table</span>.
  In this syntax, a compound preposition is used to designate access to a
  <a class="glossary-reference" href="chapter-26.xhtml#glossary-hash table">hash table</a>.
  The variable <span class="parameter">var</span> takes on the value of each hash key
  or hash value in the supplied <span class="parameter">hash-table</span>. 
  The following <a class="glossary-reference" href="chapter-26.xhtml#glossary-loop keyword">loop keywords</a> serve as valid prepositions within this syntax:<br/><dl><dt><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">being</span></dt><dd>The keyword <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">being</span> introduces either the Loop schema 
<math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">hash-key</span> or <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">hash-value</span>.<br/></dd><dt><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">each</span>, <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">the</span></dt><dd>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-loop keyword">loop keyword</a> <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">each</span>
follows the <a class="glossary-reference" href="chapter-26.xhtml#glossary-loop keyword">loop keyword</a> <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">being</span> when <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">hash-key</span> or
<math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">hash-value</span> is used.  The <a class="glossary-reference" href="chapter-26.xhtml#glossary-loop keyword">loop keyword</a> <span class="explicit-mono">the</span> is used with
<math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">hash-keys</span> and <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">hash-values</span> only for ease of reading.
This agreement isn't required.<br/></dd><dt><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">hash-key</span>, <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">hash-keys</span></dt><dd>These <a class="glossary-reference" href="chapter-26.xhtml#glossary-loop keyword">loop keywords</a> access each key entry of the <a class="glossary-reference" href="chapter-26.xhtml#glossary-hash table">hash table</a>.  If 
the name <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">hash-value</span> is supplied in a <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">using</span> construct with one
of these Loop schemas, the iteration can optionally access the keyed
value. The order in which the keys are accessed is undefined; empty
slots in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-hash table">hash table</a> are ignored.  <br/></dd><dt><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">hash-value</span>, <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">hash-values</span></dt><dd>These <a class="glossary-reference" href="chapter-26.xhtml#glossary-loop keyword">loop keywords</a> access each value entry of a 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-hash table">hash table</a>.  If 
the name <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">hash-key</span> is supplied in a <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">using</span> construct with one of
these Loop schemas, the iteration can optionally access the key that
corresponds to the value.  The order in which the keys are accessed is
undefined; empty slots in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-hash table">hash table</a> are ignored. <br/></dd><dt><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">using</span></dt><dd>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-loop keyword">loop keyword</a> <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">using</span> introduces 
the optional key or the keyed value to
be accessed.  It allows access to the hash key if iteration is over
the hash values, and the hash value if 
iteration is over the hash keys.<br/></dd><dt><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">in</span>, <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">of</span></dt><dd>These loop prepositions introduce <span class="parameter">hash-table</span>.<br/></dd></dl><br/>In effect <br/><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">being</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">each</span> | <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">the</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">hash-value</span>  |
       <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">hash-values</span> |
       <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">hash-key</span>    |
       <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">hash-keys</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">in</span> | <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">of</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><br/>
is a compound preposition.<br/>Iteration stops when there are no more hash keys or hash values to be
referenced in the supplied <span class="parameter">hash-table</span>.<br/></section><section id="section-Thefor-as-packagesubclause"><h5 class="section-title">The for-as-package subclause</h5>In the <span class="explicit-italic"> for-as-package</span> subclause
the <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">for</span> 
or <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">as</span> construct                    
iterates over the <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbols</a> in a <a class="glossary-reference" href="chapter-26.xhtml#glossary-package">package</a>.
In this syntax, a compound preposition is used to designate access to a
<a class="glossary-reference" href="chapter-26.xhtml#glossary-package">package</a>.
The variable <span class="parameter">var</span> takes on the value of each <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>
in the supplied <a class="glossary-reference" href="chapter-26.xhtml#glossary-package">package</a>.  
 The following <a class="glossary-reference" href="chapter-26.xhtml#glossary-loop keyword">loop keywords</a> serve as valid prepositions within this syntax:<br/><dl><dt><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">being</span></dt><dd>The keyword <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">being</span> introduces either the Loop schema 
<math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">symbol</span>, <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">present-symbol</span>,  or <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">external-symbol</span>.<br/></dd><dt><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">each</span>, <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">the</span></dt><dd>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-loop keyword">loop keyword</a> <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">each</span>
follows the <a class="glossary-reference" href="chapter-26.xhtml#glossary-loop keyword">loop keyword</a> <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">being</span> when <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">symbol</span>, 
<math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">present-symbol</span>, or <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">external-symbol</span> is used.  
The <a class="glossary-reference" href="chapter-26.xhtml#glossary-loop keyword">loop keyword</a> <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">the</span> is used with <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">symbols</span>, 
<math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">present-symbols</span>, and <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">external-symbols</span> only for ease of reading.
This agreement isn't required.<br/></dd><dt><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">present-symbol</span>, <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">present-symbols</span></dt><dd>These Loop schemas iterate over the <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbols</a> 
<span class="issue-annotation"><span class="issue-reference error">issue:Issue LOOP-PRESENT-SYMBOLS-TYPO:FLUSH-WRONG-WORDS</span>that are <a class="glossary-reference" href="chapter-26.xhtml#glossary-present">present</a> in a <a class="glossary-reference" href="chapter-26.xhtml#glossary-package">package</a>.
</span>The <span class="parameter">package</span> to be iterated over is supplied in the same way
that <a class="glossary-reference" href="chapter-26.xhtml#glossary-package">package</a> arguments to <a class="function-reference" href="chapter-11.xhtml#function-find-package">find-package</a> are supplied.  
If the <span class="parameter">package</span> for the iteration is not supplied, 
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-current package">current package</a> is used.  
If a <span class="parameter">package</span> that does not exist is supplied, 
an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-11.xhtml#type-package-error">package-error</a> is signaled.<br/></dd><dt><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">symbol</span>, <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">symbols</span></dt><dd>These Loop schemas iterate over <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbols</a> that are
<a class="glossary-reference" href="chapter-26.xhtml#glossary-accessible">accessible</a> in a given <span class="parameter">package</span>.  
The <span class="parameter">package</span> to be iterated over is supplied in the same way
that <a class="glossary-reference" href="chapter-26.xhtml#glossary-package">package</a> arguments to <a class="function-reference" href="chapter-11.xhtml#function-find-package">find-package</a> are supplied.
If the <span class="parameter">package</span> for the iteration is not supplied, 
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-current package">current package</a> is used.
If a <span class="parameter">package</span> that does not exist is supplied, 
an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-11.xhtml#type-package-error">package-error</a> is signaled.<br/></dd><dt><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">external-symbol</span>, <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">external-symbols</span></dt><dd>These Loop schemas iterate over the <a class="glossary-reference" href="chapter-26.xhtml#glossary-external symbol">external symbols</a> of a <span class="parameter">package</span>.
The <span class="parameter">package</span> to be iterated over is supplied in the same way
that <a class="glossary-reference" href="chapter-26.xhtml#glossary-package">package</a> arguments to <a class="function-reference" href="chapter-11.xhtml#function-find-package">find-package</a> are supplied.
If the <span class="parameter">package</span> for the iteration is not supplied, 
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-current package">current package</a> is used.
If a <span class="parameter">package</span> that does not exist is supplied, 
an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-11.xhtml#type-package-error">package-error</a> is signaled.<br/></dd><dt><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">in</span>, <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">of</span></dt><dd>These loop prepositions introduce <span class="parameter">package</span>.<br/></dd></dl><br/>In effect <br/><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">being</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">each</span> | <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">the</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">symbol</span>          |
       <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">symbols</span>         |
       <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">present-symbol</span>  |
       <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">present-symbols</span> |
       <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">external-symbol</span> |
       <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">external-symbols</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">in</span> | <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">of</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><br/>
is a compound preposition.<br/>Iteration stops when there are no more <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbols</a> to be referenced 
in the supplied <span class="parameter">package</span>.<br/><div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><section id="section-Examplesoffor-as-packagesubclause"><h6 class="section-title">Examples of for-as-package subclause</h6><div class="issue-annotation"><span class="issue-reference error">issue:Issue LOOP-PRESENT-SYMBOLS-TYPO:FLUSH-WRONG-WORDS</span><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<a class="variable-reference" href="chapter-11.xhtml#variable-*package*">*package*</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-11.xhtml#function-make-package">make-package</a> <span class="syntax-string">"TEST-PACKAGE-1"</span>)</span>)</span>)</span>
   <span class="syntax-line-comment syntax-comment">;; For effect, intern some symbols
</span>   <span class="syntax-cons">(<a class="function-reference" href="chapter-23.xhtml#function-read-from-string">read-from-string</a> <span class="syntax-string">"(THIS IS A TEST)"</span>)</span>
   <span class="syntax-cons">(<a class="function-reference" href="chapter-11.xhtml#function-export">export</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-11.xhtml#function-intern">intern</a> <span class="syntax-string">"THIS"</span>)</span>)</span>
   <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">being</span> <span class="syntax-interned-symbol">each</span> <span class="syntax-interned-symbol">present-symbol</span> <span class="syntax-interned-symbol">of</span> <a class="variable-reference" href="chapter-11.xhtml#variable-*package*">*package*</a>
          <a class="macro-reference" href="#macro-do">do</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-22.xhtml#function-print">print</a> <span class="syntax-interned-symbol">x</span>)</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> A 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> TEST 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> THIS
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> IS 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>
</span></code></pre></div>
</section></div></section></section><section id="section-LocalVariableInitializations"><h4 class="section-title">Local Variable Initializations</h4>When a <a class="macro-reference" href="#macro-loop">loop</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> is executed, the local variables are bound and are
initialized to some value.  These local variables exist until <a class="macro-reference" href="#macro-loop">loop</a>
iteration terminates, at which point they cease to exist.  
Implicit variables are also established by iteration control clauses and the
<math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">into</span> preposition of accumulation clauses.<br/>The <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">with</span> construct initializes variables that are local to 
a loop.  The variables are initialized one time only.
If the optional <span class="parameter">type-spec</span> argument is supplied for the variable 
<span class="parameter">var</span>, but there is no related expression to be evaluated, <span class="parameter">var</span>
is initialized to an appropriate default value for its <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a>.
For example, for the types <a class="type-reference" href="chapter-4.xhtml#type-t">t</a>, <a class="type-reference" href="chapter-12.xhtml#type-number">number</a>, 
and <a class="type-reference" href="chapter-12.xhtml#type-float">float</a>,
the default values are <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>, <code><span class="syntax-root"><span class="syntax-number">0</span>
</span></code>, and <code><span class="syntax-root"><span class="syntax-number">0.0</span>
</span></code> respectively.
The consequences are undefined if a 
<span class="parameter">type-spec</span> argument is supplied for <span class="parameter">var</span> if
the related expression returns a value that is not of the supplied 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a>.
By default, the <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">with</span> construct initializes variables
<a class="glossary-reference" href="chapter-26.xhtml#glossary-sequentially">sequentially</a>; that is, one variable is assigned a value before the
next expression is evaluated.  However, by using the <a class="glossary-reference" href="chapter-26.xhtml#glossary-loop keyword">loop keyword</a> <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">and</span>
to join several <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">with</span> clauses, 
initializations can be forced to occur in <a class="glossary-reference" href="chapter-26.xhtml#glossary-parallel">parallel</a>; that 
is, all of the supplied
<span class="parameter">forms</span> are evaluated, and the results are bound to the respective
variables simultaneously.<br/><a class="glossary-reference" href="chapter-26.xhtml#glossary-sequential">Sequential</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> is used when it is desireable for the initialization of
some variables to depend on the values of previously bound variables.
For example, suppose the variables <code><span class="syntax-root"><span class="syntax-interned-symbol">a</span>
</span></code>, <code><span class="syntax-root"><span class="syntax-interned-symbol">b</span>
</span></code>, and <code><span class="syntax-root"><span class="syntax-interned-symbol">c</span>
</span></code> are to be bound in sequence:<br/><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">with</span> <span class="syntax-interned-symbol">a</span> <a class="function-reference" href="chapter-12.xhtml#function-=">=</a> <span class="syntax-number">1</span> 
       <span class="syntax-interned-symbol">with</span> <span class="syntax-interned-symbol">b</span> <a class="function-reference" href="chapter-12.xhtml#function-=">=</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-number">2</span>)</span> 
       <span class="syntax-interned-symbol">with</span> <span class="syntax-interned-symbol">c</span> <a class="function-reference" href="chapter-12.xhtml#function-=">=</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">b</span> <span class="syntax-number">3</span>)</span>
       <a class="macro-reference" href="chapter-5.xhtml#macro-return">return</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">3</span> <span class="syntax-number">6</span>)</span>
</span></code></pre><br/>The execution of the above <a class="macro-reference" href="#macro-loop">loop</a> is equivalent to the execution of
the following code:<br/><div class="issue-annotation"><span class="issue-reference error">issue:Issue LOOP-MISCELLANEOUS-REPAIRS:FIX</span><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-block">block</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>
  <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let*">let*</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-number">1</span>)</span>
         <span class="syntax-cons">(<span class="syntax-interned-symbol">b</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-number">2</span>)</span>)</span>
         <span class="syntax-cons">(<span class="syntax-interned-symbol">c</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">b</span> <span class="syntax-number">3</span>)</span>)</span>)</span>
    <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-tagbody">tagbody</a>
        <span class="syntax-cons">(<span class="syntax-interned-symbol">next-loop</span> <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-return">return</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span>)</span>)</span>
                   <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-go">go</a> <span class="syntax-interned-symbol">next-loop</span>)</span>
                   <span class="syntax-interned-symbol">end-loop</span>)</span>)</span>)</span>)</span>
</span></code></pre></div>
If the values of previously bound variables are not needed
for the initialization of other local variables, an 
<math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">and</span> clause can be used to 
specify that the bindings are to occur in <a class="glossary-reference" href="chapter-26.xhtml#glossary-parallel">parallel</a>:<br/><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">with</span> <span class="syntax-interned-symbol">a</span> <a class="function-reference" href="chapter-12.xhtml#function-=">=</a> <span class="syntax-number">1</span> 
       <a class="macro-reference" href="chapter-5.xhtml#macro-and">and</a> <span class="syntax-interned-symbol">b</span> <a class="function-reference" href="chapter-12.xhtml#function-=">=</a> <span class="syntax-number">2</span> 
       <a class="macro-reference" href="chapter-5.xhtml#macro-and">and</a> <span class="syntax-interned-symbol">c</span> <a class="function-reference" href="chapter-12.xhtml#function-=">=</a> <span class="syntax-number">3</span>
       <a class="macro-reference" href="chapter-5.xhtml#macro-return">return</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">3</span>)</span>
</span></code></pre><br/>The execution of the above loop is equivalent to the execution of
the following code:<br/><div class="issue-annotation"><span class="issue-reference error">issue:Issue LOOP-MISCELLANEOUS-REPAIRS:FIX</span><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-block">block</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>
  <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-number">1</span>)</span>
        <span class="syntax-cons">(<span class="syntax-interned-symbol">b</span> <span class="syntax-number">2</span>)</span>
        <span class="syntax-cons">(<span class="syntax-interned-symbol">c</span> <span class="syntax-number">3</span>)</span>)</span>
    <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-tagbody">tagbody</a>
        <span class="syntax-cons">(<span class="syntax-interned-symbol">next-loop</span> <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-return">return</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span>)</span>)</span>
                   <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-go">go</a> <span class="syntax-interned-symbol">next-loop</span>)</span>
                   <span class="syntax-interned-symbol">end-loop</span>)</span>)</span>)</span>)</span>
</span></code></pre></div>
<div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><section id="section-ExamplesofWITHclause"><h5 class="section-title">Examples of WITH clause</h5><pre><code><span class="syntax-root">;; These bindings occur in sequence.
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">with</span> <span class="syntax-interned-symbol">a</span> <a class="function-reference" href="chapter-12.xhtml#function-=">=</a> <span class="syntax-number">1</span> 
       <span class="syntax-interned-symbol">with</span> <span class="syntax-interned-symbol">b</span> <a class="function-reference" href="chapter-12.xhtml#function-=">=</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-number">2</span>)</span> 
       <span class="syntax-interned-symbol">with</span> <span class="syntax-interned-symbol">c</span> <a class="function-reference" href="chapter-12.xhtml#function-=">=</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">b</span> <span class="syntax-number">3</span>)</span>
       <a class="macro-reference" href="chapter-5.xhtml#macro-return">return</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">3</span> <span class="syntax-number">6</span>)</span>
 
;; These bindings occur in parallel.
 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-number">5</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-number">10</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">10</span>
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">with</span> <span class="syntax-interned-symbol">a</span> <a class="function-reference" href="chapter-12.xhtml#function-=">=</a> <span class="syntax-number">1</span>
       <a class="macro-reference" href="chapter-5.xhtml#macro-and">and</a> <span class="syntax-interned-symbol">b</span> <a class="function-reference" href="chapter-12.xhtml#function-=">=</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-number">2</span>)</span>
       <a class="macro-reference" href="chapter-5.xhtml#macro-and">and</a> <span class="syntax-interned-symbol">c</span> <a class="function-reference" href="chapter-12.xhtml#function-=">=</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">b</span> <span class="syntax-number">3</span>)</span>
       <a class="macro-reference" href="chapter-5.xhtml#macro-return">return</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">7</span> <span class="syntax-number">13</span>)</span>
 
;; This example shows a shorthand way to declare local variables 
;; that are of different types.
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">with</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span>)</span> <span class="syntax-interned-symbol">of-type</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-float">float</a> <a class="type-reference" href="chapter-12.xhtml#type-integer">integer</a> <a class="function-reference" href="chapter-12.xhtml#function-float">float</a>)</span>
       <a class="macro-reference" href="chapter-5.xhtml#macro-return">return</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-22.xhtml#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"~A ~A ~A"</span> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"0.0 0 0.0"</span>
 
;; This example shows a shorthand way to declare local variables 
;; that are the same type.
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">with</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span>)</span> <span class="syntax-interned-symbol">of-type</span> <a class="function-reference" href="chapter-12.xhtml#function-float">float</a> 
       <a class="macro-reference" href="chapter-5.xhtml#macro-return">return</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-22.xhtml#function-format">format</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-string">"~A ~A ~A"</span> <span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"0.0 0.0 0.0"</span>
</span></code></pre><br/></section></div></section></section><section id="section-LOOPValAcc"><h3 class="section-title">Value Accumulation Clauses</h3><br/>
The constructs <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">collect</span>, <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">collecting</span>,
<math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">append</span>, <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">appending</span>,
<math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">nconc</span>, <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">nconcing</span>,
<math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">count</span>, <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">counting</span>,
<math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">maximize</span>, <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">maximizing</span>,
<math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">minimize</span>, <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">minimizing</span>,
<math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">sum</span>, and <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">summing</span>,
allow values to be accumulated in a <a class="macro-reference" href="#macro-loop">loop</a>.<br/> 
 
The constructs <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">collect</span>, 
<math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">collecting</span>, <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">append</span>, <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">appending</span>, 
<math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">nconc</span>, and <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">nconcing</span>, 
designate clauses that
accumulate values in <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">lists</a> and return them.
The constructs <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">count</span>, <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">counting</span>, 
<math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">maximize</span>, <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">maximizing</span>, <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">minimize</span>, <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">minimizing</span>,
<math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">sum</span>, and <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">summing</span> designate clauses that accumulate and
return numerical values.<br/>During each iteration,  the constructs
<math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">collect</span> and <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">collecting</span>
collect the value of the supplied
<span class="parameter">form</span> into a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a>. 
When iteration terminates, the <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> is returned.
The argument <span class="parameter">var</span> is 
set to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> 
of collected values; if <span class="parameter">var</span> is supplied, the <a class="macro-reference" href="#macro-loop">loop</a>
does not return the final <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> automatically.  If 
<span class="parameter">var</span> is not
supplied, it is equivalent to supplying an internal name for
<span class="parameter">var</span> and returning its value in a <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">finally</span> clause.
The <span class="parameter">var</span> argument
is bound as if by the construct <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">with</span>.
No mechanism is provided for declaring the <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> of <span class="parameter">var</span>;
it must be of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-14.xhtml#type-list">list</a>.<br/><br/>The constructs <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">append</span>, <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">appending</span>, 
<math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">nconc</span>, and  <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">nconcing</span>
are similar to <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">collect</span> except that the
values of the supplied <span class="parameter">form</span> must be <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">lists</a>.  <br/><ul><li>The <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">append</span> keyword causes its <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> values to be concatenated 
into a single <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a>, as if 
they were arguments to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="chapter-14.xhtml#function-append">append</a>.<br/></li><li>The <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">nconc</span> keyword causes its <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> values to be concatenated
into a single <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a>,
as if they were arguments to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="chapter-14.xhtml#function-nconc">nconc</a>.  
</li></ul><br/>The argument <span class="parameter">var</span> is 
set to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> of 
concatenated values; if <span class="parameter">var</span> is supplied, 
<a class="macro-reference" href="#macro-loop">loop</a>
does not return the final <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> automatically.  
The <span class="parameter">var</span> argument
is bound as if by the construct <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">with</span>.
 A <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> cannot be supplied for <span class="parameter">var</span>; 
it must be of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-14.xhtml#type-list">list</a>.
 The construct <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">nconc</span> 
destructively modifies its argument <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">lists</a>.<br/>The <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">count</span> construct counts the number of times 
that the supplied <span class="parameter">form</span> returns <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>.
The argument <span class="parameter">var</span> accumulates the number of occurrences; 
if <span class="parameter">var</span> is supplied, 
<a class="macro-reference" href="#macro-loop">loop</a> does not return the final count automatically.
The <span class="parameter">var</span> argument is bound as if by the construct <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">with</span> 
to a zero of the appropriate type.
Subsequent values (including any necessary coercions) 
are computed as if by the function <a class="function-reference" href="chapter-12.xhtml#function-1+">1+</a>.
If <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">into</span> <span class="parameter">var</span> is used,
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> can be supplied  for <span class="parameter">var</span> with the <span class="parameter">type-spec</span> argument;
the consequences are unspecified if a nonnumeric <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> is supplied.           
If there is no <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">into</span> variable,
the optional <span class="parameter">type-spec</span> argument
applies to the internal variable that is keeping the count.  
The default <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a>; 
but it must be
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-supertype">supertype</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-12.xhtml#type-fixnum">fixnum</a>.<br/>The <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">maximize</span> and 
<math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">minimize</span> 
constructs compare
the value of the supplied <span class="parameter">form</span> obtained during the first 
iteration with values obtained in successive iterations.
The maximum (for <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">maximize</span>) or minimum (for <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">minimize</span>) 
value encountered is determined 
(as if by the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="chapter-12.xhtml#function-max">max</a> for <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">maximize</span> and
 as if by the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="chapter-12.xhtml#function-min">min</a> for <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">minimize</span>)
and returned.
If the <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">maximize</span> or <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">minimize</span> clause
is never executed, the accumulated value is unspecified.
The argument <span class="parameter">var</span> accumulates the maximum or minimum value;
if <span class="parameter">var</span> is supplied,
<a class="macro-reference" href="#macro-loop">loop</a> does not return the maximum or minimum automatically.
The <span class="parameter">var</span> argument is bound as if by the construct <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">with</span>.
If <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">into</span> <span class="parameter">var</span> is used,
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> can be supplied for <span class="parameter">var</span> with the <span class="parameter">type-spec</span> argument;
the consequences are unspecified if a nonnumeric <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> is supplied.           
If there is no <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">into</span> variable,
the optional <span class="parameter">type-spec</span> argument applies to the internal variable 
that is keeping the maximum or minimum value.  
The default <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> 
is <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a>; but it
must be a <a class="glossary-reference" href="chapter-26.xhtml#glossary-supertype">supertype</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-12.xhtml#type-real">real</a>.<br/>The <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">sum</span> construct forms a cumulative sum 
of the successive <span class="glossary-reference error">glossary:primary values</span> of the supplied <span class="parameter">form</span>
at each iteration.
The argument <span class="parameter">var</span> is used to accumulate the sum;
if <span class="parameter">var</span> is supplied,
<a class="macro-reference" href="#macro-loop">loop</a> does not return the final sum automatically.
The <span class="parameter">var</span> argument is bound as if by the construct <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">with</span>
to a zero of the appropriate type.
Subsequent values (including any necessary coercions) are computed as if by the <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> <a class="function-reference" href="chapter-12.xhtml#function-+">+</a>.
If <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">into</span> <span class="parameter">var</span> is used,
a <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> can be supplied for <span class="parameter">var</span> with the <span class="parameter">type-spec</span> argument;
the consequences are unspecified if a nonnumeric <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> is supplied.           
If there is no <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">into</span> variable,
the optional <span class="parameter">type-spec</span> argument applies to the internal variable
that is keeping the sum.
The default <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a>
is <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a>; but it
must be a <a class="glossary-reference" href="chapter-26.xhtml#glossary-supertype">supertype</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-12.xhtml#type-number">number</a>.<br/>If <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">into</span> is used,
the construct does not provide a default return value;
however, the variable is available
for use in any <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">finally</span> clause.  <br/> 
Certain kinds of accumulation clauses can be combined in a <a class="macro-reference" href="#macro-loop">loop</a> 
if their destination is the same 
(the result of <a class="macro-reference" href="#macro-loop">loop</a> or an <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">into</span> <span class="parameter">var</span>) 
because they are considered to accumulate conceptually compatible quantities.
In particular, 
any elements of following sets of accumulation clauses can be mixed
with other elements of the same set for the same destination 
in a <a class="macro-reference" href="#macro-loop">loop</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>:<br/><ul><li><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">collect</span>, <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">append</span>, <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">nconc</span><br/></li><li><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">sum</span>, <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">count</span><br/></li><li><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">maximize</span>, <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">minimize</span>
</li></ul><br/><pre><code><span class="syntax-root">;; Collect every name and the kids in one list by using 
;; COLLECT and APPEND.
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">name</span> <span class="syntax-interned-symbol">in</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">fred</span> <span class="syntax-interned-symbol">sue</span> <span class="syntax-interned-symbol">alice</span> <span class="syntax-interned-symbol">joe</span> <span class="syntax-interned-symbol">june</span>)</span></span>
       <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">kids</span> <span class="syntax-interned-symbol">in</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">bob</span> <span class="syntax-interned-symbol">ken</span>)</span> <span class="syntax-symbol">()</span> <span class="syntax-symbol">()</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">kris</span> <span class="syntax-interned-symbol">sunshine</span>)</span> <span class="syntax-symbol">()</span>)</span></span>
       <span class="syntax-interned-symbol">collect</span> <span class="syntax-interned-symbol">name</span>
       <a class="function-reference" href="chapter-14.xhtml#function-append">append</a> <span class="syntax-interned-symbol">kids</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-interned-symbol">FRED</span> <span class="syntax-interned-symbol">BOB</span> <span class="syntax-interned-symbol">KEN</span> <span class="syntax-interned-symbol">SUE</span> <span class="syntax-interned-symbol">ALICE</span> <span class="syntax-interned-symbol">JOE</span> <span class="syntax-interned-symbol">KRIS</span> <span class="syntax-interned-symbol">SUNSHINE</span> <span class="syntax-interned-symbol">JUNE</span>)</span>
</span></code></pre><br/>Any two
clauses that do not accumulate the same <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> of 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a> 
can coexist in a <a class="macro-reference" href="#macro-loop">loop</a> only 
if each clause accumulates its values into 
a different
<a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variable</a>.  <br/> 
<div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><section id="section-ExamplesofCOLLECTclause"><h4 class="section-title">Examples of COLLECT clause</h4><pre><code><span class="syntax-root">;; Collect all the symbols in a list.
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">in</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">bird</span> <span class="syntax-number">3</span> <span class="syntax-number">4</span> <span class="syntax-interned-symbol">turtle</span> <span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-symbol">.</span> <span class="syntax-number">4</span>)</span> <span class="syntax-interned-symbol">horse</span> <span class="syntax-interned-symbol">cat</span>)</span></span>
       <a class="macro-reference" href="chapter-5.xhtml#macro-when">when</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-10.xhtml#function-symbolp">symbolp</a> <span class="syntax-interned-symbol">i</span>)</span> <span class="syntax-interned-symbol">collect</span> <span class="syntax-interned-symbol">i</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-interned-symbol">BIRD</span> <span class="syntax-interned-symbol">TURTLE</span> <span class="syntax-interned-symbol">HORSE</span> <span class="syntax-interned-symbol">CAT</span>)</span>
 
;; Collect and return odd numbers.
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">from</span> <span class="syntax-number">1</span> <span class="syntax-interned-symbol">to</span> <span class="syntax-number">10</span>
       <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-oddp">oddp</a> <span class="syntax-interned-symbol">i</span>)</span> <span class="syntax-interned-symbol">collect</span> <span class="syntax-interned-symbol">i</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">3</span> <span class="syntax-number">5</span> <span class="syntax-number">7</span> <span class="syntax-number">9</span>)</span>
 
;; Collect items into local variable, but don't return them.
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">in</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">d</span>)</span></span> <span class="syntax-interned-symbol">by</span> <span class="syntax-function">#'<a class="function-reference" href="chapter-14.xhtml#function-cddr">cddr</a></span>
       <span class="syntax-interned-symbol">collect</span> <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">into</span> <span class="syntax-interned-symbol">my-list</span>
       <span class="syntax-interned-symbol">finally</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-22.xhtml#function-print">print</a> <span class="syntax-interned-symbol">my-list</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> (A C) 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>
</span></code></pre><br/></section></div><div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><section id="section-ExamplesofAPPENDandNCONCclauses"><h4 class="section-title">Examples of APPEND and NCONC clauses</h4><pre><code><span class="syntax-root">;; Use APPEND to concatenate some sublists.
  <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">in</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span>)</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">b</span>)</span> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">c</span>)</span>)</span>)</span></span>
        <a class="function-reference" href="chapter-14.xhtml#function-append">append</a> <span class="syntax-interned-symbol">x</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">B</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">C</span>)</span>)</span>
 
;; NCONC some sublists together.  Note that only lists made by the
;; call to LIST are modified.
  <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">upfrom</span> <span class="syntax-number">0</span> 
        <span class="syntax-interned-symbol">as</span> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">in</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">c</span>)</span>)</span></span>
        <a class="function-reference" href="chapter-14.xhtml#function-nconc">nconc</a> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-evenp">evenp</a> <span class="syntax-interned-symbol">i</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">x</span>)</span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-interned-symbol">A</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">C</span>)</span>)</span>
</span></code></pre><br/></section></div><div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><section id="section-ExamplesofCOUNTclause"><h4 class="section-title">Examples of COUNT clause</h4><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">in</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-interned-symbol">c</span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-interned-symbol">d</span> <span class="syntax-interned-symbol">e</span>)</span></span>
       <a class="function-reference" href="chapter-17.xhtml#function-count">count</a> <span class="syntax-interned-symbol">i</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">5</span>
</span></code></pre><br/></section></div><div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><section id="section-ExamplesofMAXIMIZEandMINIMIZEclauses"><h4 class="section-title">Examples of MAXIMIZE and MINIMIZE clauses</h4><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">in</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-number">2</span> <span class="syntax-number">1</span> <span class="syntax-number">5</span> <span class="syntax-number">3</span> <span class="syntax-number">4</span>)</span></span>
       <span class="syntax-interned-symbol">maximize</span> <span class="syntax-interned-symbol">i</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">5</span>
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">in</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-number">2</span> <span class="syntax-number">1</span> <span class="syntax-number">5</span> <span class="syntax-number">3</span> <span class="syntax-number">4</span>)</span></span>
       <span class="syntax-interned-symbol">minimize</span> <span class="syntax-interned-symbol">i</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">1</span>
 
;; In this example, FIXNUM applies to the internal variable that holds
;; the maximum value.
 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">series</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-number">1.2</span> <span class="syntax-number">4.3</span> <span class="syntax-number">5.7</span>)</span></span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-number">1.2</span> <span class="syntax-number">4.3</span> <span class="syntax-number">5.7</span>)</span>
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">v</span> <span class="syntax-interned-symbol">in</span> <span class="syntax-interned-symbol">series</span> 
       <span class="syntax-interned-symbol">maximize</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-round">round</a> <span class="syntax-interned-symbol">v</span>)</span> <span class="syntax-interned-symbol">of-type</span> <a class="type-reference" href="chapter-12.xhtml#type-fixnum">fixnum</a>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">6</span>
 
;; In this example, FIXNUM applies to the variable RESULT.
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">v</span> <span class="syntax-interned-symbol">of-type</span> <a class="function-reference" href="chapter-12.xhtml#function-float">float</a> <span class="syntax-interned-symbol">in</span> <span class="syntax-interned-symbol">series</span>
       <span class="syntax-interned-symbol">minimize</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-round">round</a> <span class="syntax-interned-symbol">v</span>)</span> <span class="syntax-interned-symbol">into</span> <span class="syntax-interned-symbol">result</span> <span class="syntax-interned-symbol">of-type</span> <a class="type-reference" href="chapter-12.xhtml#type-fixnum">fixnum</a>
       <span class="syntax-interned-symbol">finally</span> <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-return">return</a> <span class="syntax-interned-symbol">result</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">1</span>
</span></code></pre><br/></section></div><div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><section id="section-ExamplesofSUMclause"><h4 class="section-title">Examples of SUM clause</h4><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">of-type</span> <a class="type-reference" href="chapter-12.xhtml#type-fixnum">fixnum</a> <span class="syntax-interned-symbol">in</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">3</span> <span class="syntax-number">4</span> <span class="syntax-number">5</span>)</span></span>
       <span class="syntax-interned-symbol">sum</span> <span class="syntax-interned-symbol">i</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">15</span>
 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">series</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-number">1.2</span> <span class="syntax-number">4.3</span> <span class="syntax-number">5.7</span>)</span></span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-number">1.2</span> <span class="syntax-number">4.3</span> <span class="syntax-number">5.7</span>)</span>
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">v</span> <span class="syntax-interned-symbol">in</span> <span class="syntax-interned-symbol">series</span> 
       <span class="syntax-interned-symbol">sum</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-*">*</a> <span class="syntax-number">2.0</span> <span class="syntax-interned-symbol">v</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">22.4</span>
</span></code></pre><br/></section></div></section><section id="section-LOOPTermTest"><h3 class="section-title">Termination Test Clauses</h3><br/>The <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">repeat</span> construct causes iteration to terminate after a
specified number of times.
 The loop body executes <span class="explicit-italic"> n</span> times, where <span class="explicit-italic"> n</span> is the value 
of the expression <span class="parameter">form</span>.  The <span class="parameter">form</span> argument is evaluated one time
in the loop prologue.  If the expression evaluates to 0 or 
to a negative <a class="glossary-reference" href="chapter-26.xhtml#glossary-number">number</a>, the loop body is not evaluated.<br/>The constructs <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">always</span>,
<math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">never</span>,
<math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">thereis</span>,
<math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">while</span>,
<math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">until</span>,
and the macro <a class="macro-reference" href="#macro-loop-finish">loop-finish</a>
allow conditional termination of iteration within
a <a class="macro-reference" href="#macro-loop">loop</a>.<br/>The constructs <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">always</span>, <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">never</span>, and <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">thereis</span> provide
specific values to be returned when a <a class="macro-reference" href="#macro-loop">loop</a> terminates.  
Using <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">always</span>, <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">never</span>, or <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">thereis</span> in a loop with 
value accumulation clauses that are not <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">into</span> causes 
an error of <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> <a class="type-reference" href="chapter-5.xhtml#type-program-error">program-error</a> to be signaled (at macro expansion time).
Since <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">always</span>, <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">never</span>, and <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">thereis</span>
use 
<div class="issue-annotation"><span class="issue-reference error">issue:Issue LOOP-NAMED-BLOCK-NIL:OVERRIDE</span>the <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-return-from">return-from</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-special operator">special operator</a></div>to terminate iteration,
any <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">finally</span> clause that is supplied is not evaluated
when exit occurs due to any of these constructs.
In all other respects these
constructs behave like the <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">while</span> and <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">until</span> constructs.<br/>  The <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">always</span> construct takes one <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> and terminates the 
<a class="macro-reference" href="#macro-loop">loop</a>
  if the <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> ever evaluates to <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>; in this case, it returns
  <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.  Otherwise, it provides a default return value of <a class="symbol-reference" href="chapter-5.xhtml#symbol-t">t</a>.
If the value of the supplied <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> is never <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>, some other construct
can terminate the iteration.<br/>The <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">never</span> construct terminates iteration the first time that
the value of the supplied <span class="parameter">form</span> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-non-nil">non-nil</a>; the <a class="macro-reference" href="#macro-loop">loop</a> returns 
<a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.                                         
If the value of the supplied <span class="parameter">form</span> is always  <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>, some other 
construct can terminate the iteration.  
Unless some other clause contributes 
a return value, the default value returned is <a class="symbol-reference" href="chapter-5.xhtml#symbol-t">t</a>.<br/>The <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">thereis</span> construct terminates iteration the first time that the
value of the supplied <span class="parameter">form</span> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-non-nil">non-nil</a>; the <a class="macro-reference" href="#macro-loop">loop</a> returns the
value of the supplied <span class="parameter">form</span>.
If the value of the supplied <span class="parameter">form</span> 
is always  <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>, some other
construct can terminate the iteration.  Unless some other clause contributes a 
return value, the default value returned is <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.<br/> 
There are two differences between the <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">thereis</span> and <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">until</span>
constructs: <br/><ul><li>The <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">until</span> construct does not return a value or 
<a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a> based on the value of the supplied <span class="parameter">form</span>.<br/></li><li>The <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">until</span> construct executes 
any <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">finally</span> clause.
Since <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">thereis</span> uses
<div class="issue-annotation"><span class="issue-reference error">issue:Issue LOOP-NAMED-BLOCK-NIL:OVERRIDE</span>the <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-return-from">return-from</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-special operator">special operator</a></div>to terminate iteration,
any <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">finally</span> clause that is supplied is not evaluated
when exit occurs due to <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">thereis</span>.<br/></li></ul><br/> <br/>The <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">while</span> construct allows iteration to continue until the 
supplied <span class="parameter">form</span> 
evaluates to <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>.  The supplied <span class="parameter">form</span> 
is reevaluated at the location of the <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">while</span> clause.<br/>The <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">until</span> construct is equivalent to 
<code><span class="syntax-root"><span class="syntax-interned-symbol">while</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-not">not</a> <span class="parameter">form</span>)</span>â€¦
</span></code>.  If the value of the
supplied <span class="parameter">form</span> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-non-nil">non-nil</a>, iteration terminates.<br/>Termination-test control constructs can be used anywhere within the loop body.
The termination tests are used in the order in which they appear.
If an <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">until</span> or <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">while</span> clause causes
termination, any clauses that precede it in the source
are still evaluated.  
If the <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">until</span> and <span class="explicit-mono">while</span> constructs cause termination,
control is passed to the loop epilogue, where any <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">finally</span>
clauses will be executed.  <br/>There are two differences between the <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">never</span> and <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">until</span>
constructs: <br/><ul><li>The <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">until</span> construct does not return 
<a class="symbol-reference" href="chapter-5.xhtml#symbol-t">t</a> or <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a> based on the value of the supplied <span class="parameter">form</span>.<br/></li><li>The <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">until</span> construct 
does not bypass any <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">finally</span> clauses.
Since <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">never</span> uses 
<div class="issue-annotation"><span class="issue-reference error">issue:Issue LOOP-NAMED-BLOCK-NIL:OVERRIDE</span>the <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-return-from">return-from</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-special operator">special operator</a></div>to terminate iteration,
any <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">finally</span> clause that is supplied is not evaluated
when exit occurs due to <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">never</span>. 
</li></ul><br/>
<br/>In most cases it is not necessary to use <a class="macro-reference" href="#macro-loop-finish">loop-finish</a>
because other loop control clauses terminate the <a class="macro-reference" href="#macro-loop">loop</a>.  
The macro <a class="macro-reference" href="#macro-loop-finish">loop-finish</a> is used to provide a normal exit
from a nested conditional inside a <a class="macro-reference" href="#macro-loop">loop</a>.
Since <a class="macro-reference" href="#macro-loop-finish">loop-finish</a> transfers control to the loop epilogue,
using <a class="macro-reference" href="#macro-loop-finish">loop-finish</a> within a <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">finally</span> expression can cause
infinite looping.

<div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><section id="section-ExamplesofREPEATclause"><h4 class="section-title">Examples of REPEAT clause</h4><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">repeat</span> <span class="syntax-number">3</span>
       <a class="macro-reference" href="#macro-do">do</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-22.xhtml#function-format">format</a> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a> <span class="syntax-string">"~&amp;What I say three times is true.~%"</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> What I say three times is true.
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> What I say three times is true.
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> What I say three times is true.
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">repeat</span> <span class="syntax-number">-15</span>
   <a class="macro-reference" href="#macro-do">do</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-22.xhtml#function-format">format</a> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a> <span class="syntax-string">"What you see is what you expect~%"</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>
</span></code></pre><br/></section></div><div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><section id="section-ExamplesofALWAYS,NEVER,andTHEREISclauses"><h4 class="section-title">Examples of ALWAYS, NEVER, and THEREIS clauses</h4><pre><code><span class="syntax-root">;; Make sure I is always less than 11 (two ways).
;; The FOR construct terminates these loops.
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">from</span> <span class="syntax-number">0</span> <span class="syntax-interned-symbol">to</span> <span class="syntax-number">10</span>
       <span class="syntax-interned-symbol">always</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-&lt;">&lt;</a> <span class="syntax-interned-symbol">i</span> <span class="syntax-number">11</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a>
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">from</span> <span class="syntax-number">0</span> <span class="syntax-interned-symbol">to</span> <span class="syntax-number">10</span>
       <span class="syntax-interned-symbol">never</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-&gt;">&gt;</a> <span class="syntax-interned-symbol">i</span> <span class="syntax-number">11</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a>
 
;; If I exceeds 10 return I; otherwise, return NIL.
;; The THEREIS construct terminates this loop.
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">from</span> <span class="syntax-number">0</span>
       <span class="syntax-interned-symbol">thereis</span> <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-when">when</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-&gt;">&gt;</a> <span class="syntax-interned-symbol">i</span> <span class="syntax-number">10</span>)</span> <span class="syntax-interned-symbol">i</span>)</span> )</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">11</span>

;;; The FINALLY clause is not evaluated in these examples.
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">from</span> <span class="syntax-number">0</span> <span class="syntax-interned-symbol">to</span> <span class="syntax-number">10</span>
       <span class="syntax-interned-symbol">always</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-&lt;">&lt;</a> <span class="syntax-interned-symbol">i</span> <span class="syntax-number">9</span>)</span>
       <span class="syntax-interned-symbol">finally</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-22.xhtml#function-print">print</a> <span class="syntax-string">"you won't see this"</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">never</span> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a>
       <span class="syntax-interned-symbol">finally</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-22.xhtml#function-print">print</a> <span class="syntax-string">"you won't see this"</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">thereis</span> <span class="syntax-string">"Here is my value"</span>
       <span class="syntax-interned-symbol">finally</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-22.xhtml#function-print">print</a> <span class="syntax-string">"you won't see this"</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"Here is my value"</span>
 
;; The FOR construct terminates this loop, so the FINALLY clause 
;; is evaluated.
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">from</span> <span class="syntax-number">1</span> <span class="syntax-interned-symbol">to</span> <span class="syntax-number">10</span>
       <span class="syntax-interned-symbol">thereis</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-&gt;">&gt;</a> <span class="syntax-interned-symbol">i</span> <span class="syntax-number">11</span>)</span>
       <span class="syntax-interned-symbol">finally</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-22.xhtml#function-prin1">prin1</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">got-here</span></span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> GOT-HERE
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>
 
;; If this code could be used to find a counterexample to Fermat's
;; last theorem, it would still not return the value of the
;; counterexample because all of the THEREIS clauses in this example
;; only return T.  But if Fermat is right, that won't matter
;; because this won't terminate.
 
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">z</span> <span class="syntax-interned-symbol">upfrom</span> <span class="syntax-number">2</span>
       <span class="syntax-interned-symbol">thereis</span>
         <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">n</span> <span class="syntax-interned-symbol">upfrom</span> <span class="syntax-number">3</span> <span class="syntax-interned-symbol">below</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-log">log</a> <span class="syntax-interned-symbol">z</span> <span class="syntax-number">2</span>)</span>
               <span class="syntax-interned-symbol">thereis</span>
                 <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">below</span> <span class="syntax-interned-symbol">z</span>
                       <span class="syntax-interned-symbol">thereis</span>
                         <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">y</span> <span class="syntax-interned-symbol">below</span> <span class="syntax-interned-symbol">z</span>
                               <span class="syntax-interned-symbol">thereis</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-=">=</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-expt">expt</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">n</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-expt">expt</a> <span class="syntax-interned-symbol">y</span> <span class="syntax-interned-symbol">n</span>)</span>)</span>
                                          <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-expt">expt</a> <span class="syntax-interned-symbol">z</span> <span class="syntax-interned-symbol">n</span>)</span>)</span>)</span>)</span>)</span>)</span>
</span></code></pre><br/></section></div><div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><section id="section-ExamplesofWHILEandUNTILclauses"><h4 class="section-title">Examples of WHILE and UNTIL clauses</h4><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">while</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">hungry-p</span>)</span> <a class="macro-reference" href="#macro-do">do</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">eat</span>)</span>)</span>
 
;; UNTIL NOT is equivalent to WHILE.
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">until</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-not">not</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">hungry-p</span>)</span>)</span> <a class="macro-reference" href="#macro-do">do</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">eat</span>)</span>)</span>
 
;; Collect the length and the items of STACK.
 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">stack</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">d</span> <span class="syntax-interned-symbol">e</span> <span class="syntax-interned-symbol">f</span>)</span></span>)</span>)</span>
   <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">item</span> <a class="function-reference" href="chapter-12.xhtml#function-=">=</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-17.xhtml#function-length">length</a> <span class="syntax-interned-symbol">stack</span>)</span> <span class="syntax-interned-symbol">then</span> <span class="syntax-cons">(<a class="macro-reference" href="chapter-14.xhtml#macro-pop">pop</a> <span class="syntax-interned-symbol">stack</span>)</span>
         <span class="syntax-interned-symbol">collect</span> <span class="syntax-interned-symbol">item</span>
         <span class="syntax-interned-symbol">while</span> <span class="syntax-interned-symbol">stack</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-number">6</span> <span class="syntax-interned-symbol">A</span> <span class="syntax-interned-symbol">B</span> <span class="syntax-interned-symbol">C</span> <span class="syntax-interned-symbol">D</span> <span class="syntax-interned-symbol">E</span> <span class="syntax-interned-symbol">F</span>)</span>
 
;; Use WHILE to terminate a loop that otherwise wouldn't terminate.
;; Note that WHILE occurs after the WHEN.
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">i</span> <a class="type-reference" href="chapter-12.xhtml#type-fixnum">fixnum</a> <span class="syntax-interned-symbol">from</span> <span class="syntax-number">3</span>
       <a class="macro-reference" href="chapter-5.xhtml#macro-when">when</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-oddp">oddp</a> <span class="syntax-interned-symbol">i</span>)</span> <span class="syntax-interned-symbol">collect</span> <span class="syntax-interned-symbol">i</span>
       <span class="syntax-interned-symbol">while</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-&lt;">&lt;</a> <span class="syntax-interned-symbol">i</span> <span class="syntax-number">5</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-number">3</span> <span class="syntax-number">5</span>)</span>
</span></code></pre><br/></section></div></section><section id="section-LOOPUnconditional"><h3 class="section-title">Unconditional Execution Clauses</h3><br/>The <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">do</span> and <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">doing</span> constructs 
evaluate the 
supplied <span class="parameter">forms</span> 
wherever they occur in the expanded form of <a class="macro-reference" href="#macro-loop">loop</a>.
 The <span class="parameter">form</span> argument can be any <a class="glossary-reference" href="chapter-26.xhtml#glossary-compound form">compound form</a>.
Each <span class="parameter">form</span> is evaluated in every iteration.
Because every loop clause must begin with a <a class="glossary-reference" href="chapter-26.xhtml#glossary-loop keyword">loop keyword</a>, 
the keyword <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">do</span> is used when no control action other than execution is 
required.<br/><div class="issue-annotation"><span class="issue-reference error">issue:Issue LOOP-MISCELLANEOUS-REPAIRS:FIX</span> The <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">return</span> construct takes one <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>. 
 Any <span class="glossary-reference error">glossary:values</span> returned by the <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> 
 are immediately returned by the <a class="macro-reference" href="#macro-loop">loop</a> form.
  It is equivalent to the clause
  <code><span class="syntax-root"><a class="macro-reference" href="#macro-do">do</a> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-return-from">return-from</a> <span class="explicit-italic"> block-name</span> <span class="explicit-italic"> value</span>)</span>
</span></code>,
  where <span class="explicit-italic"> block-name</span> is the name specified in a <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">named</span>
  clause, or <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a> if there is no <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">named</span> clause.
</div> 
<div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><section id="section-Examplesofunconditionalexecution"><h4 class="section-title">Examples of unconditional execution</h4><pre><code><span class="syntax-root">;; Print numbers and their squares.
;; The DO construct applies to multiple forms.
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">from</span> <span class="syntax-number">1</span> <span class="syntax-interned-symbol">to</span> <span class="syntax-number">3</span>
       <a class="macro-reference" href="#macro-do">do</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-22.xhtml#function-print">print</a> <span class="syntax-interned-symbol">i</span>)</span>
          <span class="syntax-cons">(<a class="function-reference" href="chapter-22.xhtml#function-print">print</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-*">*</a> <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">i</span>)</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 1 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 1 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 2 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 4 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 3 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 9 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>

</span></code></pre><br/></section></div></section><section id="section-LOOPConditional"><h3 class="section-title">Conditional Execution Clauses</h3><br/><div class="issue-annotation"><span class="issue-reference error">issue:Issue LOOP-MISCELLANEOUS-REPAIRS:FIX</span>
The <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">if</span>, <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">when</span>, and <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">unless</span> constructs
establish conditional control in a <a class="macro-reference" href="#macro-loop">loop</a>. If the test
passes, the succeeding loop clause is executed. If the test does
not pass, the succeeding clause is skipped, and program control
moves to the clause that follows the <a class="glossary-reference" href="chapter-26.xhtml#glossary-loop keyword">loop keyword</a>
<math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">else</span>. If the test does not pass and no <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">else</span>
clause is supplied, control is transferred to the clause or
construct following the entire conditional clause.<br/>If conditional clauses are nested, each <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">else</span> is paired
with the closest preceding conditional clause that has no
associated <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">else</span> or <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">end</span>. <br/>In the <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">if</span> and <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">when</span> clauses, which are
synonymous, the test passes if the value of <span class="parameter">form</span> is
<a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>.<br/>In the <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">unless</span> clause,
the test passes if the value of <span class="parameter">form</span> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>.<br/></div> 
Clauses that follow the test expression can be grouped by using 
the <a class="glossary-reference" href="chapter-26.xhtml#glossary-loop keyword">loop keyword</a> <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">and</span> to produce a conditional block consisting of 
a compound clause.<br/><div class="issue-annotation"><span class="issue-reference error">issue:Issue LOOP-MISCELLANEOUS-REPAIRS:FIX</span>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-loop keyword">loop keyword</a> <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">it</span> can be used to refer to the result
of the test expression in a clause.
Use the <a class="glossary-reference" href="chapter-26.xhtml#glossary-loop keyword">loop keyword</a> <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">it</span> in place of the form in a
<math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">return</span> clause or an <span class="explicit-italic"> accumulation</span> clause that is
inside a conditional execution clause.
If multiple clauses are connected with <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">and</span>, the <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">it</span>
construct must be in the first clause in the block.
</div> 
The optional <a class="glossary-reference" href="chapter-26.xhtml#glossary-loop keyword">loop keyword</a> <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">end</span> marks the end of the clause.  If this
keyword is not supplied, the next <a class="glossary-reference" href="chapter-26.xhtml#glossary-loop keyword">loop keyword</a> marks the end.  The construct
<math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">end</span> can be used to distinguish the scoping of compound clauses.<br/><div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><section id="section-ExamplesofWHENclause"><h4 class="section-title">Examples of WHEN clause</h4><pre><code><span class="syntax-root">;; Signal an exceptional condition.
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">item</span> <span class="syntax-interned-symbol">in</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">3</span> <span class="syntax-interned-symbol">a</span> <span class="syntax-number">4</span> <span class="syntax-number">5</span>)</span></span>
       <a class="macro-reference" href="chapter-5.xhtml#macro-when">when</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-not">not</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-numberp">numberp</a> <span class="syntax-interned-symbol">item</span>)</span>)</span>
        <a class="macro-reference" href="chapter-5.xhtml#macro-return">return</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-9.xhtml#function-cerror">cerror</a> <span class="syntax-string">"enter new value"</span> <span class="syntax-string">"non-numeric value: ~s"</span> <span class="syntax-interned-symbol">item</span>)</span>)</span>
<span class="syntax-interned-symbol">Error:</span> <span class="syntax-interned-symbol">non-numeric</span> <span class="syntax-interned-symbol">value:</span> <span class="syntax-interned-symbol">A</span>
 
;; The previous example is equivalent to the following one.
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">item</span> <span class="syntax-interned-symbol">in</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">3</span> <span class="syntax-interned-symbol">a</span> <span class="syntax-number">4</span> <span class="syntax-number">5</span>)</span></span>
       <a class="macro-reference" href="chapter-5.xhtml#macro-when">when</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-not">not</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-numberp">numberp</a> <span class="syntax-interned-symbol">item</span>)</span>)</span>
        <a class="macro-reference" href="#macro-do">do</a> <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-return">return</a> 
            <span class="syntax-cons">(<a class="function-reference" href="chapter-9.xhtml#function-cerror">cerror</a> <span class="syntax-string">"Enter new value"</span> <span class="syntax-string">"non-numeric value: ~s"</span> <span class="syntax-interned-symbol">item</span>)</span>)</span>)</span>
<span class="syntax-interned-symbol">Error:</span> <span class="syntax-interned-symbol">non-numeric</span> <span class="syntax-interned-symbol">value:</span> <span class="syntax-interned-symbol">A</span>
</span></code></pre><br/><pre><code><span class="syntax-root">;; This example parses a simple printed string representation from 
;; BUFFER (which is itself a string) and returns the index of the
;; closing double-quote character.
 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">buffer</span> <span class="syntax-string">"\"a\" \"b\""</span>)</span>)</span>
   <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">initially</span> <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-unless">unless</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-13.xhtml#function-char=">char=</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-16.xhtml#function-char">char</a> <span class="syntax-interned-symbol">buffer</span> <span class="syntax-number">0</span>)</span> <span class="syntax-character">#\"</span>)</span>
                     <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop-finish">loop-finish</a>)</span>)</span>
         <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">of-type</span> <a class="type-reference" href="chapter-12.xhtml#type-fixnum">fixnum</a> <span class="syntax-interned-symbol">from</span> <span class="syntax-number">1</span> <span class="syntax-interned-symbol">below</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-17.xhtml#function-length">length</a> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-3.xhtml#special-operator-the">the</a> <a class="function-reference" href="chapter-16.xhtml#function-string">string</a> <span class="syntax-interned-symbol">buffer</span>)</span>)</span>
         <a class="macro-reference" href="chapter-5.xhtml#macro-when">when</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-13.xhtml#function-char=">char=</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-16.xhtml#function-char">char</a> <span class="syntax-interned-symbol">buffer</span> <span class="syntax-interned-symbol">i</span>)</span> <span class="syntax-character">#\"</span>)</span>
          <a class="macro-reference" href="chapter-5.xhtml#macro-return">return</a> <span class="syntax-interned-symbol">i</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">2</span>
 
;; The collected value is returned.
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">from</span> <span class="syntax-number">1</span> <span class="syntax-interned-symbol">to</span> <span class="syntax-number">10</span>
       <a class="macro-reference" href="chapter-5.xhtml#macro-when">when</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-&gt;">&gt;</a> <span class="syntax-interned-symbol">i</span> <span class="syntax-number">5</span>)</span>
         <span class="syntax-interned-symbol">collect</span> <span class="syntax-interned-symbol">i</span>
       <span class="syntax-interned-symbol">finally</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-22.xhtml#function-prin1">prin1</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">got-here</span></span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> GOT-HERE
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-number">6</span> <span class="syntax-number">7</span> <span class="syntax-number">8</span> <span class="syntax-number">9</span> <span class="syntax-number">10</span>)</span> 

;; Return both the count of collected numbers and the numbers.
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">from</span> <span class="syntax-number">1</span> <span class="syntax-interned-symbol">to</span> <span class="syntax-number">10</span>
       <a class="macro-reference" href="chapter-5.xhtml#macro-when">when</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-&gt;">&gt;</a> <span class="syntax-interned-symbol">i</span> <span class="syntax-number">5</span>)</span>
         <span class="syntax-interned-symbol">collect</span> <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">into</span> <span class="syntax-interned-symbol">number-list</span>
         <a class="macro-reference" href="chapter-5.xhtml#macro-and">and</a> <a class="function-reference" href="chapter-17.xhtml#function-count">count</a> <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">into</span> <span class="syntax-interned-symbol">number-count</span>
       <span class="syntax-interned-symbol">finally</span> <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-return">return</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-values">values</a> <span class="syntax-interned-symbol">number-count</span> <span class="syntax-interned-symbol">number-list</span>)</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">5</span><span class="syntax-verbatim">,</span> <span class="syntax-cons">(<span class="syntax-number">6</span> <span class="syntax-number">7</span> <span class="syntax-number">8</span> <span class="syntax-number">9</span> <span class="syntax-number">10</span>)</span>
</span></code></pre><br/></section></div></section><section id="section-LOOPMisc"><h3 class="section-title">Miscellaneous Clauses</h3><br/><section id="section-ControlTransferClauses"><h4 class="section-title">Control Transfer Clauses</h4>The <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">named</span> construct
establishes a name for an <a class="glossary-reference" href="chapter-26.xhtml#glossary-implicit block">implicit block</a> surrounding the 
<span class="issue-annotation"><span class="issue-reference error">issue:Issue LOOP-MISCELLANEOUS-REPAIRS:FIX</span>entire
</span> 
<a class="macro-reference" href="#macro-loop">loop</a> so that the <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-return-from">return-from</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-special operator">special operator</a> can be used to return 
values from or to exit <a class="macro-reference" href="#macro-loop">loop</a>.   
Only one name per <a class="macro-reference" href="#macro-loop">loop</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> can be assigned.
If used, the <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">named</span> construct must be the first clause in the loop expression.<br/><div class="issue-annotation"><span class="issue-reference error">issue:Issue LOOP-MISCELLANEOUS-REPAIRS:FIX</span> The <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">return</span> construct takes one <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>. 
 Any <span class="glossary-reference error">glossary:values</span> returned by the <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> 
 are immediately returned by the <a class="macro-reference" href="#macro-loop">loop</a> form.
</div>This construct is similar to the <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-return-from">return-from</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-special operator">special operator</a> and the <a class="macro-reference" href="chapter-5.xhtml#macro-return">return</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a>.
The <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">return</span> construct 
<span class="issue-annotation"><span class="issue-reference error">issue:Issue LOOP-MISCELLANEOUS-REPAIRS:FIX</span></span>does not execute any <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">finally</span> clause that 
<span class="issue-annotation"><span class="issue-reference error">issue:Issue LOOP-MISCELLANEOUS-REPAIRS:FIX</span>the <a class="macro-reference" href="#macro-loop">loop</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a></span>is given.<br/><div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><section id="section-ExamplesofNAMEDclause"><h5 class="section-title">Examples of NAMED clause</h5><pre><code><span class="syntax-root">;; Just name and return.
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">named</span> <a class="function-reference" href="chapter-12.xhtml#function-max">max</a>
       <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">from</span> <span class="syntax-number">1</span> <span class="syntax-interned-symbol">to</span> <span class="syntax-number">10</span>
       <a class="macro-reference" href="#macro-do">do</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-22.xhtml#function-print">print</a> <span class="syntax-interned-symbol">i</span>)</span>
       <a class="macro-reference" href="#macro-do">do</a> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-return-from">return-from</a> <a class="function-reference" href="chapter-12.xhtml#function-max">max</a> <span class="syntax-quote">'<span class="syntax-interned-symbol">done</span></span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 1 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">DONE</span>
</span></code></pre><br/></section></div></section><section id="section-InitialandFinalExecution"><h4 class="section-title">Initial and Final Execution</h4>The <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">initially</span> and <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">finally</span> constructs
evaluate forms that occur before and after the loop body.<br/>The <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">initially</span> construct causes the supplied
<span class="parameter">compound-forms</span>
to be evaluated
in the loop prologue, which precedes all loop code except for 
initial settings supplied by constructs <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">with</span>, <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">for</span>, or
<math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">as</span>.
  The code for any <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">initially</span> clauses is 
executed
in the order in which the clauses appeared in
  the <a class="macro-reference" href="#macro-loop">loop</a>.  
  
The <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">finally</span> construct causes the supplied
<span class="parameter">compound-forms</span>
to be evaluated
in the loop epilogue after normal iteration terminates.
  The code for any <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">finally</span> clauses is 
executed
 in the order in which the clauses appeared in
  the <a class="macro-reference" href="#macro-loop">loop</a>.  The collected code is executed once in the loop epilogue
  before any implicit values are returned from the accumulation clauses.
An explicit transfer of control (<span class="explicit-italic"> e.g.</span>,  by <a class="macro-reference" href="chapter-5.xhtml#macro-return">return</a>, <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-go">go</a>, or <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-throw">throw</a>)
from the loop body, however, will exit the 
  <a class="macro-reference" href="#macro-loop">loop</a> without executing the epilogue code.
 
Clauses such as <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">return</span>, <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">always</span>, <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">never</span>, and 
<math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">thereis</span>
can bypass the <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">finally</span> clause.
<div class="issue-annotation"><span class="issue-reference error">issue:Issue LOOP-NAMED-BLOCK-NIL:OVERRIDE</span><a class="macro-reference" href="chapter-5.xhtml#macro-return">return</a> (or <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-return-from">return-from</a>, if the <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">named</span> option was supplied)
</div>can be used after <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">finally</span> to return values from a <a class="macro-reference" href="#macro-loop">loop</a>.  
<span class="issue-annotation"><span class="issue-reference error">issue:Issue LOOP-NAMED-BLOCK-NIL:OVERRIDE</span>Such an <a class="glossary-reference" href="chapter-26.xhtml#glossary-explicit return">explicit return</a></span>inside the
<math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">finally</span> clause takes precedence over returning the accumulation
from clauses supplied by such keywords as <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">collect</span>, <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">nconc</span>, 
<math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">append</span>, <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">sum</span>, <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">count</span>, <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">maximize</span>, and 
<math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">minimize</span>; 
the accumulation values for these preempted clauses are not returned by 
<a class="macro-reference" href="#macro-loop">loop</a> if <a class="macro-reference" href="chapter-5.xhtml#macro-return">return</a> or <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-return-from">return-from</a> is used.<br/>

</section></section><div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><section id="section-ExamplesofMiscellaneousLoopFeatures"><h3 class="section-title">Examples of Miscellaneous Loop Features</h3><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">i</span> <span class="syntax-number">0</span>)</span>)</span>                     <span class="syntax-line-comment syntax-comment">; no loop keywords are used
</span>   <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-cons">(<a class="macro-reference" href="chapter-12.xhtml#macro-incf">incf</a> <span class="syntax-interned-symbol">i</span>)</span> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-=">=</a> <span class="syntax-interned-symbol">i</span> <span class="syntax-number">3</span>)</span> <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-return">return</a> <span class="syntax-interned-symbol">i</span>)</span>)</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">3</span>
<span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">i</span> <span class="syntax-number">0</span>)</span><span class="syntax-cons">(<span class="syntax-interned-symbol">j</span> <span class="syntax-number">0</span>)</span>)</span>
   <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-tagbody">tagbody</a>
     <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-cons">(<a class="macro-reference" href="chapter-12.xhtml#macro-incf">incf</a> <span class="syntax-interned-symbol">j</span> <span class="syntax-number">3</span>)</span> <span class="syntax-cons">(<a class="macro-reference" href="chapter-12.xhtml#macro-incf">incf</a> <span class="syntax-interned-symbol">i</span>)</span> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-=">=</a> <span class="syntax-interned-symbol">i</span> <span class="syntax-number">3</span>)</span> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-go">go</a> <span class="syntax-interned-symbol">exit</span>)</span>)</span>)</span>
     <span class="syntax-interned-symbol">exit</span>)</span>
   <span class="syntax-interned-symbol">j</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">9</span>
</span></code></pre><br/>
In the following example, the variable <code><span class="syntax-root"><span class="syntax-interned-symbol">x</span>
</span></code> is stepped
before <code><span class="syntax-root"><span class="syntax-interned-symbol">y</span>
</span></code> is stepped; thus, the value of <code><span class="syntax-root"><span class="syntax-interned-symbol">y</span>
</span></code>
reflects the updated value of <code><span class="syntax-root"><span class="syntax-interned-symbol">x</span>
</span></code>:<br/><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">from</span> <span class="syntax-number">1</span> <span class="syntax-interned-symbol">to</span> <span class="syntax-number">10</span> 
       <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">y</span> <a class="function-reference" href="chapter-12.xhtml#function-=">=</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-interned-symbol">then</span> <span class="syntax-interned-symbol">x</span> 
       <span class="syntax-interned-symbol">collect</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-number">1</span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span> <span class="syntax-cons">(<span class="syntax-number">2</span> <span class="syntax-number">2</span>)</span> <span class="syntax-cons">(<span class="syntax-number">3</span> <span class="syntax-number">3</span>)</span> <span class="syntax-cons">(<span class="syntax-number">4</span> <span class="syntax-number">4</span>)</span> <span class="syntax-cons">(<span class="syntax-number">5</span> <span class="syntax-number">5</span>)</span> <span class="syntax-cons">(<span class="syntax-number">6</span> <span class="syntax-number">6</span>)</span> <span class="syntax-cons">(<span class="syntax-number">7</span> <span class="syntax-number">7</span>)</span> <span class="syntax-cons">(<span class="syntax-number">8</span> <span class="syntax-number">8</span>)</span> <span class="syntax-cons">(<span class="syntax-number">9</span> <span class="syntax-number">9</span>)</span> <span class="syntax-cons">(<span class="syntax-number">10</span> <span class="syntax-number">10</span>)</span>)</span>
</span></code></pre><br/>In this example, <code><span class="syntax-root"><span class="syntax-interned-symbol">x</span>
</span></code> and <code><span class="syntax-root"><span class="syntax-interned-symbol">y</span>
</span></code> are stepped in <a class="glossary-reference" href="chapter-26.xhtml#glossary-parallel">parallel</a>:<br/><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">from</span> <span class="syntax-number">1</span> <span class="syntax-interned-symbol">to</span> <span class="syntax-number">10</span> 
       <a class="macro-reference" href="chapter-5.xhtml#macro-and">and</a> <span class="syntax-interned-symbol">y</span> <a class="function-reference" href="chapter-12.xhtml#function-=">=</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-interned-symbol">then</span> <span class="syntax-interned-symbol">x</span> 
       <span class="syntax-interned-symbol">collect</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">y</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-number">1</span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span> <span class="syntax-cons">(<span class="syntax-number">2</span> <span class="syntax-number">1</span>)</span> <span class="syntax-cons">(<span class="syntax-number">3</span> <span class="syntax-number">2</span>)</span> <span class="syntax-cons">(<span class="syntax-number">4</span> <span class="syntax-number">3</span>)</span> <span class="syntax-cons">(<span class="syntax-number">5</span> <span class="syntax-number">4</span>)</span> <span class="syntax-cons">(<span class="syntax-number">6</span> <span class="syntax-number">5</span>)</span> <span class="syntax-cons">(<span class="syntax-number">7</span> <span class="syntax-number">6</span>)</span> <span class="syntax-cons">(<span class="syntax-number">8</span> <span class="syntax-number">7</span>)</span> <span class="syntax-cons">(<span class="syntax-number">9</span> <span class="syntax-number">8</span>)</span> <span class="syntax-cons">(<span class="syntax-number">10</span> <span class="syntax-number">9</span>)</span>)</span>
</span></code></pre><br/><div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><section id="section-Examplesofclausegrouping"><h4 class="section-title">Examples of clause grouping</h4><pre><code><span class="syntax-root">;; Group conditional clauses.
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">in</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">324</span> <span class="syntax-number">2345</span> <span class="syntax-number">323</span> <span class="syntax-number">2</span> <span class="syntax-number">4</span> <span class="syntax-number">235</span> <span class="syntax-number">252</span>)</span></span>
       <a class="macro-reference" href="chapter-5.xhtml#macro-when">when</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-oddp">oddp</a> <span class="syntax-interned-symbol">i</span>)</span>
         <a class="macro-reference" href="#macro-do">do</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-22.xhtml#function-print">print</a> <span class="syntax-interned-symbol">i</span>)</span>
         <a class="macro-reference" href="chapter-5.xhtml#macro-and">and</a> <span class="syntax-interned-symbol">collect</span> <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">into</span> <span class="syntax-interned-symbol">odd-numbers</span>
         <a class="macro-reference" href="chapter-5.xhtml#macro-and">and</a> <a class="macro-reference" href="#macro-do">do</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-21.xhtml#function-terpri">terpri</a>)</span>
       <span class="syntax-interned-symbol">else</span>                              <span class="syntax-line-comment syntax-comment">; I is even.
</span>         <span class="syntax-interned-symbol">collect</span> <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">into</span> <span class="syntax-interned-symbol">even-numbers</span>
       <span class="syntax-interned-symbol">finally</span>
         <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-return">return</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-values">values</a> <span class="syntax-interned-symbol">odd-numbers</span> <span class="syntax-interned-symbol">even-numbers</span>)</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 1 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 2345 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 323 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 235 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">2345</span> <span class="syntax-number">323</span> <span class="syntax-number">235</span>)</span><span class="syntax-verbatim">,</span> <span class="syntax-cons">(<span class="syntax-number">324</span> <span class="syntax-number">2</span> <span class="syntax-number">4</span> <span class="syntax-number">252</span>)</span>

;; Collect numbers larger than 3.
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">in</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">3</span> <span class="syntax-number">4</span> <span class="syntax-number">5</span> <span class="syntax-number">6</span>)</span></span>
       <a class="macro-reference" href="chapter-5.xhtml#macro-when">when</a> <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-and">and</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-&gt;">&gt;</a> <span class="syntax-interned-symbol">i</span> <span class="syntax-number">3</span>)</span> <span class="syntax-interned-symbol">i</span>)</span>
       <span class="syntax-interned-symbol">collect</span> <span class="syntax-interned-symbol">it</span>)</span>                      ; IT refers to (and (&gt; i 3) i).
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-number">4</span> <span class="syntax-number">5</span> <span class="syntax-number">6</span>)</span>
 
;; Find a number in a list.
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">in</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">3</span> <span class="syntax-number">4</span> <span class="syntax-number">5</span> <span class="syntax-number">6</span>)</span></span>
       <a class="macro-reference" href="chapter-5.xhtml#macro-when">when</a> <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-and">and</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-&gt;">&gt;</a> <span class="syntax-interned-symbol">i</span> <span class="syntax-number">3</span>)</span> <span class="syntax-interned-symbol">i</span>)</span>
       <a class="macro-reference" href="chapter-5.xhtml#macro-return">return</a> <span class="syntax-interned-symbol">it</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">4</span>
     
;; The above example is similar to the following one.
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">in</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">3</span> <span class="syntax-number">4</span> <span class="syntax-number">5</span> <span class="syntax-number">6</span>)</span></span>
       <span class="syntax-interned-symbol">thereis</span> <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-and">and</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-&gt;">&gt;</a> <span class="syntax-interned-symbol">i</span> <span class="syntax-number">3</span>)</span> <span class="syntax-interned-symbol">i</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">4</span>


;; Nest conditional clauses.
 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-number">0</span> <span class="syntax-number">3.0</span> <span class="syntax-interned-symbol">apple</span> <span class="syntax-number">4</span> <span class="syntax-number">5</span> <span class="syntax-number">9.8</span> <span class="syntax-interned-symbol">orange</span> <span class="syntax-interned-symbol">banana</span>)</span></span>)</span>)</span>
   <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">in</span> <a class="function-reference" href="chapter-14.xhtml#function-list">list</a>
         <a class="macro-reference" href="chapter-5.xhtml#macro-when">when</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-numberp">numberp</a> <span class="syntax-interned-symbol">i</span>)</span>
           <a class="macro-reference" href="chapter-5.xhtml#macro-when">when</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-floatp">floatp</a> <span class="syntax-interned-symbol">i</span>)</span>
             <span class="syntax-interned-symbol">collect</span> <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">into</span> <span class="syntax-interned-symbol">float-numbers</span>
           <span class="syntax-interned-symbol">else</span>                                  <span class="syntax-line-comment syntax-comment">; Not (floatp i)
</span>             <span class="syntax-interned-symbol">collect</span> <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">into</span> <span class="syntax-interned-symbol">other-numbers</span>
         <span class="syntax-interned-symbol">else</span>                                    <span class="syntax-line-comment syntax-comment">; Not (numberp i)
</span>           <a class="macro-reference" href="chapter-5.xhtml#macro-when">when</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-10.xhtml#function-symbolp">symbolp</a> <span class="syntax-interned-symbol">i</span>)</span> 
             <span class="syntax-interned-symbol">collect</span> <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">into</span> <span class="syntax-interned-symbol">symbol-list</span>
           <span class="syntax-interned-symbol">else</span>                                  <span class="syntax-line-comment syntax-comment">; Not (symbolp i)
</span>             <a class="macro-reference" href="#macro-do">do</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-9.xhtml#function-error">error</a> <span class="syntax-string">"found a funny value in list ~S, value ~S~%"</span> <a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-interned-symbol">i</span>)</span>
         <span class="syntax-interned-symbol">finally</span> <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-return">return</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-values">values</a> <span class="syntax-interned-symbol">float-numbers</span> <span class="syntax-interned-symbol">other-numbers</span> <span class="syntax-interned-symbol">symbol-list</span>)</span>)</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-number">3.0</span> <span class="syntax-number">9.8</span>)</span><span class="syntax-verbatim">,</span> <span class="syntax-cons">(<span class="syntax-number">0</span> <span class="syntax-number">4</span> <span class="syntax-number">5</span>)</span><span class="syntax-verbatim">,</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">APPLE</span> <span class="syntax-interned-symbol">ORANGE</span> <span class="syntax-interned-symbol">BANANA</span>)</span>

;; Without the END preposition, the last AND would apply to the
;; inner IF rather than the outer one.
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">from</span> <span class="syntax-number">0</span> <span class="syntax-interned-symbol">to</span> <span class="syntax-number">3</span> 
       <a class="macro-reference" href="#macro-do">do</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-22.xhtml#function-print">print</a> <span class="syntax-interned-symbol">x</span>)</span>
       <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-zerop">zerop</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-mod">mod</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-number">2</span>)</span>)</span>
         <a class="macro-reference" href="#macro-do">do</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-22.xhtml#function-princ">princ</a> <span class="syntax-string">" a"</span>)</span>
          <a class="macro-reference" href="chapter-5.xhtml#macro-and">and</a> <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-zerop">zerop</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-floor">floor</a> <span class="syntax-interned-symbol">x</span> <span class="syntax-number">2</span>)</span>)</span>
                <a class="macro-reference" href="#macro-do">do</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-22.xhtml#function-princ">princ</a> <span class="syntax-string">" b"</span>)</span>
                <span class="syntax-interned-symbol">end</span>
          <a class="macro-reference" href="chapter-5.xhtml#macro-and">and</a> <a class="macro-reference" href="#macro-do">do</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-22.xhtml#function-princ">princ</a> <span class="syntax-string">" c"</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 0  a b c
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 1 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 2  a c
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> 3 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>
</span></code></pre><br/></section></div></section></div><div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><section id="section-NotesaboutLoop"><h3 class="section-title">Notes about Loop</h3><a class="glossary-reference" href="chapter-26.xhtml#glossary-type">Types</a> can be supplied for loop variables.  
It is not necessary to supply a <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> for any variable,
but supplying the <a class="glossary-reference" href="chapter-26.xhtml#glossary-type">type</a> 
can ensure that the variable has a correctly typed initial value,
and it can also enable compiler optimizations 
(depending on the <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation">implementation</a>).<br/>The clause <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">repeat</span> <span class="explicit-italic"> n</span> ... is roughly equivalent to a clause such as <br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="explicit-italic"> internal-variable</span> <span class="syntax-interned-symbol">downfrom</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function--">-</a> <span class="explicit-italic"> n</span> <span class="syntax-number">1</span>)</span> <span class="syntax-interned-symbol">to</span> <span class="syntax-number">0</span> <span class="syntax-interned-symbol">...</span>)</span>
</span></code></pre><br/>but in some <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation">implementations</a>,
the <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">repeat</span> construct might be more efficient.<br/>Within the executable parts of the loop clauses and around the entire
<a class="macro-reference" href="#macro-loop">loop</a> form, variables can be bound by using <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a>.<br/><div class="issue-annotation"><span class="issue-reference error">issue:Issue LOOP-MISCELLANEOUS-REPAIRS:FIX</span>Use caution when using a variable named <span class="explicit-mono">IT</span> (in any <a class="glossary-reference" href="chapter-26.xhtml#glossary-package">package</a>)
in connection with <a class="macro-reference" href="#macro-loop">loop</a>, since <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">it</span> is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-loop keyword">loop keyword</a> 
that can be used in place of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> in certain contexts.
</div>
There is
<span class="issue-annotation"><span class="issue-reference error">issue:Issue LOOP-MISCELLANEOUS-REPAIRS:FIX</span>no
</span><a class="glossary-reference" href="chapter-26.xhtml#glossary-standardized">standardized</a>
mechanism for users to add
extensions to <a class="macro-reference" href="#macro-loop">loop</a>.

</section></div>
</section><br/><section id="section-Dictionary"><h2 class="section-title">Dictionary</h2>


<br/><div class="component" id="macro-do"><div class="header"><span class="left"><span class="name" id="macro-do">do</span>, <span class="name" id="macro-do*">do*</span></span><span class="right"><span class="ftype">Macro</span></span></div><br/><div class="issue-annotation"><span class="issue-reference error">issue:Issue DECLS-AND-DOC</span>
<dl><dt class="label">Syntax</dt><dd><div class="issue-annotation"><a class="issue-reference" href="issues/variable-list-asymmetry.xhtml#issue-variable-list-asymmetry:symmetrize">Issue VARIABLE-LIST-ASYMMETRY:SYMMETRIZE</a><span class="function-definition"><span class="name">do</span>&nbsp;<span class="lambda-list"><span class="explicit-roman">(</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">var</span> | <span class="explicit-roman">(</span><span class="parameter">var</span> <span class="explicit-roman">[</span>init-form <span class="explicit-roman">[</span>step-form<span class="explicit-roman">]</span><span class="explicit-roman">]</span><span class="explicit-roman">)</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span><span class="explicit-roman">)</span>
	 	   	 <span class="explicit-roman">(</span>end-test-form <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">result-form</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span><span class="explicit-roman">)</span>
	 	   	 <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">declaration</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math>tag <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>|</mi></math> statement<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span></span>&nbsp;â†’&nbsp;<span class="return-values"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">result</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span></span></span><br/><br/><span class="function-definition"><span class="name">do*</span>&nbsp;<span class="lambda-list"><span class="explicit-roman">(</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">var</span> | <span class="explicit-roman">(</span><span class="parameter">var</span> <span class="explicit-roman">[</span>init-form <span class="explicit-roman">[</span>step-form<span class="explicit-roman">]</span><span class="explicit-roman">]</span><span class="explicit-roman">)</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span><span class="explicit-roman">)</span>
	 	   	 <span class="explicit-roman">(</span>end-test-form <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">result-form</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span><span class="explicit-roman">)</span>
	 	   	 <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">declaration</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math>tag <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>|</mi></math> statement<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span></span>&nbsp;â†’&nbsp;<span class="return-values"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">result</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span></span></span><br/></div>
</dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">var</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>.<br/><span class="parameter">init-form</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>.<br/><span class="parameter">step-form</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>.<br/><span class="parameter">end-test-form</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>.<br/><span class="parameter">result-forms</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-implicit progn">implicit progn</a>.<br/><span class="parameter">declaration</span>&mdash;a <a class="symbol-reference" href="chapter-3.xhtml#symbol-declare">declare</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-expression">expression</a>; not evaluated.<br/><span class="parameter">tag</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-go tag">go tag</a>; not evaluated.<br/><span class="parameter">statement</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-compound form">compound form</a>; evaluated as described below.<br/><span class="parameter">results</span>&mdash;if a <a class="macro-reference" href="chapter-5.xhtml#macro-return">return</a> or <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-return-from">return-from</a> form is executed,
 the <span class="glossary-reference error">glossary:values</span> passed from that <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>;
 otherwise, the <span class="glossary-reference error">glossary:values</span> returned by the <span class="parameter">result-forms</span>.<br/></dd></dl><dl><dt class="label">Description</dt><dd><a class="macro-reference" href="#macro-do">do</a> iterates over a group of <span class="parameter">statements</span>
while a test condition holds.
<a class="macro-reference" href="#macro-do">do</a> accepts an arbitrary number of iteration <span class="parameter">vars</span>
which are bound within the iteration and stepped in parallel.
An initial value may be supplied for each iteration variable by use of
an <span class="parameter">init-form</span>.
<span class="parameter">Step-forms</span> may be used to specify how the
<span class="parameter">vars</span> should be updated on succeeding iterations through the loop.  
<span class="parameter">Step-forms</span> may be used both to generate successive
values or to accumulate results.
If the <span class="parameter">end-test-form</span> condition 
is met prior to an execution of the body, the iteration terminates.
<span class="parameter">Tags</span> label <span class="parameter">statements</span>.<br/><a class="macro-reference" href="#macro-do*">do*</a> is exactly like <a class="macro-reference" href="#macro-do">do</a> 
except that the <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a> and steppings
of the <span class="parameter">vars</span> are performed sequentially rather than in parallel.<br/>

Before the first iteration, all the <span class="parameter">init-forms</span> are evaluated, and
each <span class="parameter">var</span> is bound to the value of its respective <span class="parameter">init-form</span>,
if supplied.
This is a <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a>, not an assignment; when the loop terminates,
the old values of those variables will be restored.
For <a class="macro-reference" href="#macro-do">do</a>, all 
of the <span class="parameter">init-forms</span> are evaluated before any <span class="parameter">var</span>
is bound. The
<span class="parameter">init-forms</span> can refer to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a> of the <span class="parameter">vars</span>
visible before beginning execution of
<a class="macro-reference" href="#macro-do">do</a>.
For <a class="macro-reference" href="#macro-do*">do*</a>, the first <span class="parameter">init-form</span> is evaluated, then the first
<span class="parameter">var</span> is bound to that value, then the second <span class="parameter">init-form</span> 
is evaluated, then the second <span class="parameter">var</span> is bound, and so on;
in general, the <span class="explicit-italic"> k</span>th <span class="parameter">init-form</span> can refer to the new binding 
of the <span class="explicit-italic"> j</span>th <span class="parameter">var</span> if <span class="explicit-italic"> j</span> &lt; <span class="explicit-italic"> k</span>, and otherwise to the 
old binding of the <span class="explicit-italic"> j</span>th <span class="parameter">var</span>.<br/>At the beginning of each iteration, after processing the variables,
the <span class="parameter">end-test-form</span> is evaluated.  If the result is
<a class="glossary-reference" href="chapter-26.xhtml#glossary-false">false</a>, execution proceeds with the body of the <a class="macro-reference" href="#macro-do">do</a> 
(or <a class="macro-reference" href="#macro-do*">do*</a>) form.
If the result is <a class="glossary-reference" href="chapter-26.xhtml#glossary-true">true</a>, the <span class="parameter">result-forms</span> are evaluated in order
as an <a class="glossary-reference" href="chapter-26.xhtml#glossary-implicit progn">implicit progn</a>,
and then <a class="macro-reference" href="#macro-do">do</a> or <a class="macro-reference" href="#macro-do*">do*</a> returns.  <br/>At the beginning of each iteration other than the first, 
<span class="parameter">vars</span> are updated as follows.  All the <span class="parameter">step-forms</span>, if supplied,
are evaluated, from left to right, and the resulting values are
assigned to the respective <span class="parameter">vars</span>.
Any <span class="parameter">var</span> that has no associated <span class="parameter">step-form</span> is not assigned to.
For <a class="macro-reference" href="#macro-do">do</a>, all the <span class="parameter">step-forms</span> are evaluated before any <span class="parameter">var</span>
is updated; the assignment of values to <span class="parameter">vars</span> is done in parallel,
as if by <a class="macro-reference" href="chapter-5.xhtml#macro-psetq">psetq</a>.
Because all of the <span class="parameter">step-forms</span> are evaluated before any
of the <span class="parameter">vars</span> are altered, a <span class="parameter">step-form</span> when evaluated always has
access to the old values of all the <span class="parameter">vars</span>, even if other <span class="parameter">step-forms</span>
precede it.
For <a class="macro-reference" href="#macro-do*">do*</a>, the first <span class="parameter">step-form</span> is evaluated, then the
value is assigned to the first <span class="parameter">var</span>, then the second <span class="parameter">step-form</span> 
is evaluated, then the value is assigned to the second <span class="parameter">var</span>, and so on;
the assignment of values to variables is done sequentially,
as if by <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a>.
For either <a class="macro-reference" href="#macro-do">do</a> or <a class="macro-reference" href="#macro-do*">do*</a>,
after the <span class="parameter">vars</span> have been updated,
the <span class="parameter">end-test-form</span> 
is evaluated as described above, and the iteration continues.<br/>
The remainder of the <a class="macro-reference" href="#macro-do">do</a> (or <a class="macro-reference" href="#macro-do*">do*</a>) form constitutes 
an <a class="glossary-reference" href="chapter-26.xhtml#glossary-implicit tagbody">implicit tagbody</a>.
<span class="parameter">Tags</span> may appear within the body of a <a class="macro-reference" href="#macro-do">do</a> loop
for use by <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-go">go</a> statements appearing in the body (but such <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-go">go</a>
statements may not appear in the variable specifiers, the <span class="parameter">end-test-form</span>,
or the <span class="parameter">result-forms</span>).
When the end of a <a class="macro-reference" href="#macro-do">do</a> body is reached, the next iteration cycle
(beginning with the evaluation of <span class="parameter">step-forms</span>) occurs.<br/>An <a class="glossary-reference" href="chapter-26.xhtml#glossary-implicit block">implicit block</a> named <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a> surrounds the entire <a class="macro-reference" href="#macro-do">do</a> 
(or <a class="macro-reference" href="#macro-do*">do*</a>) form.
A <a class="macro-reference" href="chapter-5.xhtml#macro-return">return</a> statement may be used at any point to exit the loop
immediately.<br/><span class="parameter">Init-form</span>  is an
initial value for the <span class="parameter">var</span> with which it is associated.
If <span class="parameter">init-form</span> is omitted, the initial value of <span class="parameter">var</span> is <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.
If a <span class="parameter">declaration</span> is supplied for a <span class="parameter">var</span>, <span class="parameter">init-form</span> 
must be consistent with the <span class="parameter">declaration</span>.<br/>
<span class="parameter">Declarations</span> can appear at the beginning of a <a class="macro-reference" href="#macro-do">do</a> 
(or <a class="macro-reference" href="#macro-do*">do*</a>) body.
They apply to code in the <a class="macro-reference" href="#macro-do">do</a> (or <a class="macro-reference" href="#macro-do*">do*</a>) body, 
to the <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">bindings</a> of the <a class="macro-reference" href="#macro-do">do</a> (or <a class="macro-reference" href="#macro-do*">do*</a>) 
<span class="parameter">vars</span>, 
to the <span class="parameter">step-forms</span>,
to the <span class="parameter">end-test-form</span>, and to the <span class="parameter">result-forms</span>.<br/><br/></dd></dl><div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><dl><dt class="label">Examples</dt><dd><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="macro-reference" href="#macro-do">do</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">temp-one</span> <span class="syntax-number">1</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-1+">1+</a> <span class="syntax-interned-symbol">temp-one</span>)</span>)</span>
       <span class="syntax-cons">(<span class="syntax-interned-symbol">temp-two</span> <span class="syntax-number">0</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-1-">1-</a> <span class="syntax-interned-symbol">temp-two</span>)</span>)</span>)</span>
      <span class="syntax-cons">(<span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-&gt;">&gt;</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function--">-</a> <span class="syntax-interned-symbol">temp-one</span> <span class="syntax-interned-symbol">temp-two</span>)</span> <span class="syntax-number">5</span>)</span> <span class="syntax-interned-symbol">temp-one</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">4</span>

 <span class="syntax-cons">(<a class="macro-reference" href="#macro-do">do</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">temp-one</span> <span class="syntax-number">1</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-1+">1+</a> <span class="syntax-interned-symbol">temp-one</span>)</span>)</span>
       <span class="syntax-cons">(<span class="syntax-interned-symbol">temp-two</span> <span class="syntax-number">0</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-1+">1+</a> <span class="syntax-interned-symbol">temp-one</span>)</span>)</span>)</span>     
      <span class="syntax-cons">(<span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-=">=</a> <span class="syntax-number">3</span> <span class="syntax-interned-symbol">temp-two</span>)</span> <span class="syntax-interned-symbol">temp-one</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">3</span>

 <span class="syntax-cons">(<a class="macro-reference" href="#macro-do*">do*</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">temp-one</span> <span class="syntax-number">1</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-1+">1+</a> <span class="syntax-interned-symbol">temp-one</span>)</span>)</span>
        <span class="syntax-cons">(<span class="syntax-interned-symbol">temp-two</span> <span class="syntax-number">0</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-1+">1+</a> <span class="syntax-interned-symbol">temp-one</span>)</span>)</span>)</span>
       <span class="syntax-cons">(<span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-=">=</a> <span class="syntax-number">3</span> <span class="syntax-interned-symbol">temp-two</span>)</span> <span class="syntax-interned-symbol">temp-one</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">2</span>                     

 <span class="syntax-cons">(<a class="macro-reference" href="#macro-do">do</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">j</span> <span class="syntax-number">0</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">j</span> <span class="syntax-number">1</span>)</span>)</span>)</span>
     <span class="syntax-cons">(<a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span>                       <span class="syntax-line-comment syntax-comment">;Do forever.
</span>   <span class="syntax-cons">(<a class="function-reference" href="chapter-22.xhtml#function-format">format</a> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a> <span class="syntax-string">"~%Input ~D:"</span> <span class="syntax-interned-symbol">j</span>)</span>
   <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">item</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-23.xhtml#function-read">read</a>)</span>)</span>)</span>
     <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-if">if</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-null">null</a> <span class="syntax-interned-symbol">item</span>)</span> <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-return">return</a>)</span>   <span class="syntax-line-comment syntax-comment">;Process items until NIL seen.
</span>         <span class="syntax-cons">(<a class="function-reference" href="chapter-22.xhtml#function-format">format</a> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a> <span class="syntax-string">"~&amp;Output ~D: ~S"</span> <span class="syntax-interned-symbol">j</span> <span class="syntax-interned-symbol">item</span>)</span>)</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> Input 0: <math xmlns="http://www.w3.org/1998/Math/MathML"><span style="text-decoration: underline;">\hboxbanana</span></math>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> Output 0: BANANA
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> Input 1: <math xmlns="http://www.w3.org/1998/Math/MathML"><span style="text-decoration: underline;">\hbox(57 boxes)</span></math>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> Output 1: (57 BOXES)
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> Input 2: <math xmlns="http://www.w3.org/1998/Math/MathML"><span style="text-decoration: underline;">\hboxNIL</span></math>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>

 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">a-vector</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-15.xhtml#function-vector">vector</a> <span class="syntax-number">1</span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a> <span class="syntax-number">3</span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span>)</span>
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-do">do</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">i</span> <span class="syntax-number">0</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">i</span> <span class="syntax-number">1</span>)</span>)</span>     <span class="syntax-line-comment syntax-comment">;Sets every null element of a-vector to zero.
</span>      <span class="syntax-cons">(<span class="syntax-interned-symbol">n</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-15.xhtml#function-array-dimension">array-dimension</a> <span class="syntax-interned-symbol">a-vector</span> <span class="syntax-number">0</span>)</span>)</span>)</span>
     <span class="syntax-cons">(<span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-=">=</a> <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">n</span>)</span>)</span>
   <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-when">when</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-null">null</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-15.xhtml#function-aref">aref</a> <span class="syntax-interned-symbol">a-vector</span> <span class="syntax-interned-symbol">i</span>)</span>)</span>
     <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-setf">setf</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-15.xhtml#function-aref">aref</a> <span class="syntax-interned-symbol">a-vector</span> <span class="syntax-interned-symbol">i</span>)</span> <span class="syntax-number">0</span>)</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>
<span class="syntax-interned-symbol">a-vector</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-vector">#(<span class="syntax-number">1</span> <span class="syntax-number">0</span> <span class="syntax-number">3</span> <span class="syntax-number">0</span>)</span>
</span></code></pre><br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="#macro-do">do</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">e</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-cdr">cdr</a> <span class="syntax-interned-symbol">x</span>)</span>)</span>
     <span class="syntax-cons">(<span class="syntax-interned-symbol">oldx</span> <span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">x</span>)</span>)</span>
    <span class="syntax-cons">(<span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-null">null</a> <span class="syntax-interned-symbol">x</span>)</span>)</span>
  <span class="syntax-interned-symbol">body</span>)</span>
</span></code></pre>
is an example of parallel assignment to index variables.  On the first
iteration, the value of <code><span class="syntax-root"><span class="syntax-interned-symbol">oldx</span>
</span></code> is whatever value <code><span class="syntax-root"><span class="syntax-interned-symbol">x</span>
</span></code> had before
the <a class="macro-reference" href="#macro-do">do</a> was entered.  On succeeding iterations, <code><span class="syntax-root"><span class="syntax-interned-symbol">oldx</span>
</span></code> contains
the value that <code><span class="syntax-root"><span class="syntax-interned-symbol">x</span>
</span></code> had on the previous iteration. <br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="#macro-do">do</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-interned-symbol">foo</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-cdr">cdr</a> <span class="syntax-interned-symbol">x</span>)</span>)</span>
     <span class="syntax-cons">(<span class="syntax-interned-symbol">y</span> <span class="syntax-interned-symbol">bar</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-cdr">cdr</a> <span class="syntax-interned-symbol">y</span>)</span>)</span>
     <span class="syntax-cons">(<span class="syntax-interned-symbol">z</span> <span class="syntax-quote">'<span class="syntax-symbol">()</span></span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-cons">cons</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">f</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-car">car</a> <span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-car">car</a> <span class="syntax-interned-symbol">y</span>)</span>)</span> <span class="syntax-interned-symbol">z</span>)</span>)</span>)</span>
    <span class="syntax-cons">(<span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-or">or</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-null">null</a> <span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-null">null</a> <span class="syntax-interned-symbol">y</span>)</span>)</span>
     <span class="syntax-cons">(<a class="function-reference" href="chapter-17.xhtml#function-nreverse">nreverse</a> <span class="syntax-interned-symbol">z</span>)</span>)</span>)</span>
</span></code></pre>
does the same thing as <code><span class="syntax-root"><span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-mapcar">mapcar</a> #<span class="syntax-quote">'<span class="syntax-interned-symbol">f</span></span> <span class="syntax-interned-symbol">foo</span> <span class="syntax-interned-symbol">bar</span>)</span>
</span></code>.  The step
computation for <code><span class="syntax-root"><span class="syntax-interned-symbol">z</span>
</span></code> is an example of the fact that variables 
are stepped in parallel.
Also, the body of the loop is empty.  <br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">list-reverse</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-list">list</a>)</span>
       <span class="syntax-cons">(<a class="macro-reference" href="#macro-do">do</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <a class="function-reference" href="chapter-14.xhtml#function-list">list</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-cdr">cdr</a> <span class="syntax-interned-symbol">x</span>)</span>)</span>
            <span class="syntax-cons">(<span class="syntax-interned-symbol">y</span> <span class="syntax-quote">'<span class="syntax-symbol">()</span></span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-cons">cons</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-car">car</a> <span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-interned-symbol">y</span>)</span>)</span>)</span>
           <span class="syntax-cons">(<span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-endp">endp</a> <span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-interned-symbol">y</span>)</span>)</span>)</span>
</span></code></pre><br/>As an example of nested iterations, consider a data structure that is a 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-cons">conses</a>. The <a class="glossary-reference" href="chapter-26.xhtml#glossary-car">car</a> of each <a class="glossary-reference" href="chapter-26.xhtml#glossary-cons">cons</a> is a 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> of <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbols</a>,
and the <a class="glossary-reference" href="chapter-26.xhtml#glossary-cdr">cdr</a> of each <a class="glossary-reference" href="chapter-26.xhtml#glossary-cons">cons</a> is a 
<a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a> of equal length containing
corresponding values.  Such a data structure is similar to an association
list,
but is divided into ``frames''; the overall structure resembles a rib-cage.
A lookup function on such a data structure might be:<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">ribcage-lookup</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">sym</span> <span class="syntax-interned-symbol">ribcage</span>)</span>           
       <span class="syntax-cons">(<a class="macro-reference" href="#macro-do">do</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">r</span> <span class="syntax-interned-symbol">ribcage</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-cdr">cdr</a> <span class="syntax-interned-symbol">r</span>)</span>)</span>)</span>
           <span class="syntax-cons">(<span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-null">null</a> <span class="syntax-interned-symbol">r</span>)</span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span>
         <span class="syntax-cons">(<a class="macro-reference" href="#macro-do">do</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">s</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-caar">caar</a> <span class="syntax-interned-symbol">r</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-cdr">cdr</a> <span class="syntax-interned-symbol">s</span>)</span>)</span>
              <span class="syntax-cons">(<span class="syntax-interned-symbol">v</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-cdar">cdar</a> <span class="syntax-interned-symbol">r</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-cdr">cdr</a> <span class="syntax-interned-symbol">v</span>)</span>)</span>)</span> 
             <span class="syntax-cons">(<span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-null">null</a> <span class="syntax-interned-symbol">s</span>)</span>)</span>
           <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-when">when</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-eq">eq</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-car">car</a> <span class="syntax-interned-symbol">s</span>)</span> <span class="syntax-interned-symbol">sym</span>)</span>
             <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-return-from">return-from</a> <span class="syntax-interned-symbol">ribcage-lookup</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-14.xhtml#function-car">car</a> <span class="syntax-interned-symbol">v</span>)</span>)</span>)</span>)</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">RIBCAGE-LOOKUP</span>
</span></code></pre><br/></dd></dl></div><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd><span class="none">None</span>.<br/></dd></dl><div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><dl><dt class="label">See Also</dt><dd>other iteration functions
 (<a class="macro-reference" href="#macro-dolist">dolist</a>, <a class="macro-reference" href="#macro-dotimes">dotimes</a>, and <a class="macro-reference" href="#macro-loop">loop</a>)
and more primitive functionality 
 (<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-tagbody">tagbody</a>, <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-go">go</a>, <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-block">block</a>, <a class="macro-reference" href="chapter-5.xhtml#macro-return">return</a>, 
  <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a>, and <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a>)<br/></dd></dl></div><div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><dl><dt class="label">Notes</dt><dd>If <span class="parameter">end-test-form</span> is <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>, the test will never succeed.
This provides an idiom for ``do forever'':
the body of the <a class="macro-reference" href="#macro-do">do</a> or <a class="macro-reference" href="#macro-do*">do*</a> 
is executed repeatedly.
The infinite loop can be terminated by the use of <a class="macro-reference" href="chapter-5.xhtml#macro-return">return</a>,
<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-return-from">return-from</a>, <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-go">go</a> to an outer level, or <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-throw">throw</a>.<br/>A <a class="macro-reference" href="#macro-do">do</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> may be explained in terms of the more primitive <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">forms</a>
<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-block">block</a>, <a class="macro-reference" href="chapter-5.xhtml#macro-return">return</a>, 
<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a>, <a class="macro-reference" href="#macro-loop">loop</a>, <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-tagbody">tagbody</a>,
and <a class="macro-reference" href="chapter-5.xhtml#macro-psetq">psetq</a> as follows:<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-block">block</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>        
  <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">var1</span> <span class="syntax-interned-symbol">init1</span>)</span>
        <span class="syntax-cons">(<span class="syntax-interned-symbol">var2</span> <span class="syntax-interned-symbol">init2</span>)</span>
        <span class="syntax-interned-symbol">...</span>
        <span class="syntax-cons">(<span class="syntax-interned-symbol">varn</span> <span class="syntax-interned-symbol">initn</span>)</span>)</span>
    <span class="explicit-italic"> declarations</span>
    <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-when">when</a> <span class="syntax-interned-symbol">end-test</span> <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-return">return</a> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-progn">progn</a> <span class="syntax-symbol">.</span> <span class="syntax-interned-symbol">result</span>)</span>)</span>)</span>
          <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-tagbody">tagbody</a> <span class="syntax-symbol">.</span> <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-tagbody">tagbody</a>)</span>
          <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-psetq">psetq</a> <span class="syntax-interned-symbol">var1</span> <span class="syntax-interned-symbol">step1</span>
                 <span class="syntax-interned-symbol">var2</span> <span class="syntax-interned-symbol">step2</span>
                 <span class="syntax-interned-symbol">...</span>
                 <span class="syntax-interned-symbol">varn</span> <span class="syntax-interned-symbol">stepn</span>)</span>)</span>)</span>)</span>
</span></code></pre><br/><a class="macro-reference" href="#macro-do*">do*</a> is similar, except that <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let*">let*</a> and <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> replace
the <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> and <a class="macro-reference" href="chapter-5.xhtml#macro-psetq">psetq</a>, respectively.<br/></dd></dl></div></div>
</div><br/><br/><br/><div class="component" id="macro-dotimes"><div class="header"><span class="left"><span class="name" id="macro-dotimes">dotimes</span></span><span class="right"><span class="ftype">Macro</span></span></div><br/><div class="issue-annotation"><span class="issue-reference error">issue:Issue DECLS-AND-DOC</span>
<dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">dotimes</span>&nbsp;<span class="lambda-list"><span class="explicit-roman">(</span>var count-form <span class="explicit-roman">[</span>result-form<span class="explicit-roman">]</span><span class="explicit-roman">)</span>
		  <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">declaration</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span>
		  <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math>tag | statement<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span></span>&nbsp;â†’&nbsp;<span class="return-values"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">result</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span></span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">var</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>.<br/><span class="parameter">count-form</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>.<br/><span class="parameter">result-form</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>.<br/><span class="parameter">declaration</span>&mdash;a <a class="symbol-reference" href="chapter-3.xhtml#symbol-declare">declare</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-expression">expression</a>; not evaluated.<br/><span class="parameter">tag</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-go tag">go tag</a>; not evaluated.<br/><span class="parameter">statement</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-compound form">compound form</a>; evaluated as described below.<br/><span class="parameter">results</span>&mdash;if a <a class="macro-reference" href="chapter-5.xhtml#macro-return">return</a> or <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-return-from">return-from</a> form is executed,
 the <span class="glossary-reference error">glossary:values</span> passed from that <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>;
 otherwise, the <span class="glossary-reference error">glossary:values</span> returned by the <span class="parameter">result-form</span>
 or <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a> if there is no <span class="parameter">result-form</span>.<br/></dd></dl><dl><dt class="label">Description</dt><dd><a class="macro-reference" href="#macro-dotimes">dotimes</a> iterates over a series of <a class="glossary-reference" href="chapter-26.xhtml#glossary-integer">integers</a>.<br/><a class="macro-reference" href="#macro-dotimes">dotimes</a> evaluates <span class="parameter">count-form</span>,
which should produce an <a class="glossary-reference" href="chapter-26.xhtml#glossary-integer">integer</a>. 
If <span class="parameter">count-form</span> is zero or negative,
the body is not executed.
<a class="macro-reference" href="#macro-dotimes">dotimes</a> then executes the body once for each <a class="glossary-reference" href="chapter-26.xhtml#glossary-integer">integer</a> from 0 up to
but not including
the value of <span class="parameter">count-form</span>,
in the order in which the
<span class="parameter">tags</span> and <span class="parameter">statements</span> occur, with
<span class="parameter">var</span> bound to each <a class="glossary-reference" href="chapter-26.xhtml#glossary-integer">integer</a>.
Then <span class="parameter">result-form</span> 
is evaluated.
At the time <span class="parameter">result-form</span> is processed, <span class="parameter">var</span> is bound to
the number of times the body was executed.
<span class="parameter">Tags</span> label
<span class="parameter">statements</span>.<br/>An <a class="glossary-reference" href="chapter-26.xhtml#glossary-implicit block">implicit block</a>  
named <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a> surrounds <a class="macro-reference" href="#macro-dotimes">dotimes</a>.
<a class="macro-reference" href="chapter-5.xhtml#macro-return">return</a> may be used to terminate the loop immediately without
performing any further iterations, returning zero or more <span class="glossary-reference error">glossary:values</span>.<br/>The body of the loop is an <a class="glossary-reference" href="chapter-26.xhtml#glossary-implicit tagbody">implicit tagbody</a>; 
it may contain tags to serve as the targets of <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-go">go</a> statements.
Declarations may appear before the body of the loop.<br/>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-scope">scope</a> of the binding of <span class="parameter">var</span>
does not include the <span class="parameter">count-form</span>,
but the <span class="parameter">result-form</span> is included.<br/>It is <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a> whether <a class="macro-reference" href="#macro-dotimes">dotimes</a>
<a class="glossary-reference" href="chapter-26.xhtml#glossary-establish">establishes</a> a new <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> of <span class="parameter">var</span> on each iteration
or whether it <a class="glossary-reference" href="chapter-26.xhtml#glossary-establish">establishes</a> a binding for <span class="parameter">var</span> once at the
beginning and then <span class="parameter">assigns</span> it on any subsequent iterations.<br/></dd></dl><div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><dl><dt class="label">Examples</dt><dd><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="#macro-dotimes">dotimes</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">temp-one</span> <span class="syntax-number">10</span> <span class="syntax-interned-symbol">temp-one</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">10</span>
<span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">temp-two</span> <span class="syntax-number">0</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">0</span>
<span class="syntax-cons">(<a class="macro-reference" href="#macro-dotimes">dotimes</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">temp-one</span> <span class="syntax-number">10</span> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a>)</span> <span class="syntax-cons">(<a class="macro-reference" href="chapter-12.xhtml#macro-incf">incf</a> <span class="syntax-interned-symbol">temp-two</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a>
<span class="syntax-interned-symbol">temp-two</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">10</span>
</span></code></pre><br/>

Here is an example of the use of <code><span class="syntax-root"><a class="macro-reference" href="#macro-dotimes">dotimes</a>
</span></code> in processing strings:<br/><pre><code><span class="syntax-root">;;; True if the specified subsequence of the string is a
;;; palindrome (reads the same forwards and backwards).
 <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">palindromep</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-16.xhtml#function-string">string</a> <span class="lambda-list-keyword">&amp;optional</span>
                           <span class="syntax-cons">(<span class="syntax-interned-symbol">start</span> <span class="syntax-number">0</span>)</span>
                           <span class="syntax-cons">(<span class="syntax-interned-symbol">end</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-17.xhtml#function-length">length</a> <a class="function-reference" href="chapter-16.xhtml#function-string">string</a>)</span>)</span>)</span>
   <span class="syntax-cons">(<a class="macro-reference" href="#macro-dotimes">dotimes</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">k</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-floor">floor</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function--">-</a> <span class="syntax-interned-symbol">end</span> <span class="syntax-interned-symbol">start</span>)</span> <span class="syntax-number">2</span>)</span> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a>)</span>
    <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-unless">unless</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-13.xhtml#function-char-equal">char-equal</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-16.xhtml#function-char">char</a> <a class="function-reference" href="chapter-16.xhtml#function-string">string</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-+">+</a> <span class="syntax-interned-symbol">start</span> <span class="syntax-interned-symbol">k</span>)</span>)</span>
                        <span class="syntax-cons">(<a class="function-reference" href="chapter-16.xhtml#function-char">char</a> <a class="function-reference" href="chapter-16.xhtml#function-string">string</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function--">-</a> <span class="syntax-interned-symbol">end</span> <span class="syntax-interned-symbol">k</span> <span class="syntax-number">1</span>)</span>)</span>)</span>
      <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-return">return</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span>)</span>)</span>)</span>
 <span class="syntax-cons">(<span class="syntax-interned-symbol">palindromep</span> <span class="syntax-string">"Able was I ere I saw Elba"</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a>
 <span class="syntax-cons">(<span class="syntax-interned-symbol">palindromep</span> <span class="syntax-string">"A man, a plan, a canal&ndash;Panama!"</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>
 <span class="syntax-cons">(<a class="function-reference" href="chapter-17.xhtml#function-remove-if-not">remove-if-not</a> <span class="syntax-function">#'<a class="function-reference" href="chapter-13.xhtml#function-alpha-char-p">alpha-char-p</a></span>          <span class="syntax-line-comment syntax-comment">;Remove punctuation.
</span>               <span class="syntax-string">"A man, a plan, a canal&ndash;Panama!"</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-string">"AmanaplanacanalPanama"</span>
 <span class="syntax-cons">(<span class="syntax-interned-symbol">palindromep</span>
  <span class="syntax-cons">(<a class="function-reference" href="chapter-17.xhtml#function-remove-if-not">remove-if-not</a> <span class="syntax-function">#'<a class="function-reference" href="chapter-13.xhtml#function-alpha-char-p">alpha-char-p</a></span>
                <span class="syntax-string">"A man, a plan, a canal&ndash;Panama!"</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a>
 <span class="syntax-cons">(<span class="syntax-interned-symbol">palindromep</span>
  <span class="syntax-cons">(<a class="function-reference" href="chapter-17.xhtml#function-remove-if-not">remove-if-not</a>
   <span class="syntax-function">#'<a class="function-reference" href="chapter-13.xhtml#function-alpha-char-p">alpha-char-p</a></span>
   <span class="syntax-string">"Unremarkable was I ere I saw Elba Kramer, nu?"</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a>
 <span class="syntax-cons">(<span class="syntax-interned-symbol">palindromep</span>
  <span class="syntax-cons">(<a class="function-reference" href="chapter-17.xhtml#function-remove-if-not">remove-if-not</a>
   <span class="syntax-function">#'<a class="function-reference" href="chapter-13.xhtml#function-alpha-char-p">alpha-char-p</a></span>
   <span class="syntax-string">"A man, a plan, a cat, a ham, a yak,
                  a yam, a hat, a canal&ndash;Panama!"</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a>
</span></code></pre><br/></dd></dl></div><dl><dt class="label">Side Effects</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd><span class="none">None</span>.<br/></dd></dl><div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><dl><dt class="label">See Also</dt><dd><a class="macro-reference" href="#macro-do">do</a>, <a class="macro-reference" href="#macro-dolist">dolist</a>, <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-tagbody">tagbody</a><br/></dd></dl></div><div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><dl><dt class="label">Notes</dt><dd><a class="special-operator-reference" href="chapter-5.xhtml#special-operator-go">go</a> may be used within the body of
<a class="macro-reference" href="#macro-dotimes">dotimes</a> to transfer control to a statement labeled by a <span class="parameter">tag</span>.<br/>
</dd></dl></div></div>
</div><br/><br/><br/><div class="component" id="macro-dolist"><div class="header"><span class="left"><span class="name" id="macro-dolist">dolist</span></span><span class="right"><span class="ftype">Macro</span></span></div><br/><div class="issue-annotation"><span class="issue-reference error">issue:Issue DECLS-AND-DOC</span>
<dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">dolist</span>&nbsp;<span class="lambda-list"><span class="explicit-roman">(</span>var list-form <span class="explicit-roman">[</span>result-form<span class="explicit-roman">]</span><span class="explicit-roman">)</span>
		   <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">declaration</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span>
	           <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math>tag | statement<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span></span>&nbsp;â†’&nbsp;<span class="return-values"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">result</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span></span></span><br/><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">var</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>.<br/><span class="parameter">list-form</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>.<br/><span class="parameter">result-form</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>.<br/><span class="parameter">declaration</span>&mdash;a <a class="symbol-reference" href="chapter-3.xhtml#symbol-declare">declare</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-expression">expression</a>; not evaluated.<br/><span class="parameter">tag</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-go tag">go tag</a>; not evaluated.<br/><span class="parameter">statement</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-compound form">compound form</a>; evaluated as described below.<br/><span class="parameter">results</span>&mdash;if a <a class="macro-reference" href="chapter-5.xhtml#macro-return">return</a> or <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-return-from">return-from</a> form is executed,
 the <span class="glossary-reference error">glossary:values</span> passed from that <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>;
 otherwise, the <span class="glossary-reference error">glossary:values</span> returned by the <span class="parameter">result-form</span>
 or <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a> if there is no <span class="parameter">result-form</span>.<br/></dd></dl><dl><dt class="label">Description</dt><dd><a class="macro-reference" href="#macro-dolist">dolist</a> iterates over the elements of a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a>.
The body of <a class="macro-reference" href="#macro-dolist">dolist</a> is like a <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-tagbody">tagbody</a>.
It consists of a series of <span class="parameter">tags</span> and <span class="parameter">statements</span>.<br/><a class="macro-reference" href="#macro-dolist">dolist</a>
evaluates <span class="parameter">list-form</span>,
which should produce a <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a>. It then executes the body
once for each element in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-list">list</a>, in the order in which the
<span class="parameter">tags</span> and <span class="parameter">statements</span> occur, with
<span class="parameter">var</span> bound to the element.
Then <span class="parameter">result-form</span> 
is evaluated.
<span class="parameter">tags</span> label
<span class="parameter">statements</span>.<br/>At the time <span class="parameter">result-form</span> is processed, 
<span class="parameter">var</span> is bound to <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a>.<br/>An <a class="glossary-reference" href="chapter-26.xhtml#glossary-implicit block">implicit block</a>  
named <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a> surrounds <a class="macro-reference" href="#macro-dolist">dolist</a>.
<a class="macro-reference" href="chapter-5.xhtml#macro-return">return</a> may be used to terminate the loop immediately without
performing any further iterations, returning zero or more <span class="glossary-reference error">glossary:values</span>.<br/>The <a class="glossary-reference" href="chapter-26.xhtml#glossary-scope">scope</a> of the binding of <span class="parameter">var</span>
does not include the <span class="parameter">list-form</span>,
but the <span class="parameter">result-form</span> is included.<br/>It is <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a> whether <a class="macro-reference" href="#macro-dolist">dolist</a>
<a class="glossary-reference" href="chapter-26.xhtml#glossary-establish">establishes</a> a new <a class="glossary-reference" href="chapter-26.xhtml#glossary-binding">binding</a> of <span class="parameter">var</span> on each iteration
or whether it <a class="glossary-reference" href="chapter-26.xhtml#glossary-establish">establishes</a> a binding for <span class="parameter">var</span> once at the
beginning and then <span class="parameter">assigns</span> it on any subsequent iterations.<br/></dd></dl><div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><dl><dt class="label">Examples</dt><dd><pre><code><span class="syntax-root"> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">temp-two</span> <span class="syntax-quote">'<span class="syntax-symbol">()</span></span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-dolist">dolist</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">temp-one</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">3</span> <span class="syntax-number">4</span>)</span></span> <span class="syntax-interned-symbol">temp-two</span>)</span> <span class="syntax-cons">(<a class="macro-reference" href="chapter-14.xhtml#macro-push">push</a> <span class="syntax-interned-symbol">temp-one</span> <span class="syntax-interned-symbol">temp-two</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-number">4</span> <span class="syntax-number">3</span> <span class="syntax-number">2</span> <span class="syntax-number">1</span>)</span>

 <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">temp-two</span> <span class="syntax-number">0</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">0</span>
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-dolist">dolist</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">temp-one</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">3</span> <span class="syntax-number">4</span>)</span></span>)</span> <span class="syntax-cons">(<a class="macro-reference" href="chapter-12.xhtml#macro-incf">incf</a> <span class="syntax-interned-symbol">temp-two</span>)</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>
 <span class="syntax-interned-symbol">temp-two</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">4</span>

 <span class="syntax-cons">(<a class="macro-reference" href="#macro-dolist">dolist</a> <span class="syntax-cons">(<span class="syntax-interned-symbol">x</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-interned-symbol">a</span> <span class="syntax-interned-symbol">b</span> <span class="syntax-interned-symbol">c</span> <span class="syntax-interned-symbol">d</span>)</span></span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-22.xhtml#function-prin1">prin1</a> <span class="syntax-interned-symbol">x</span>)</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-22.xhtml#function-princ">princ</a> <span class="syntax-string">" "</span>)</span>)</span> 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> A B C D 
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>
</span></code></pre><br/></dd></dl></div><dl><dt class="label">Side Effects</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd><span class="none">None</span>.<br/></dd></dl><div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><dl><dt class="label">See Also</dt><dd><a class="macro-reference" href="#macro-do">do</a>,
<a class="macro-reference" href="#macro-dotimes">dotimes</a>,
<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-tagbody">tagbody</a>,
<div class="issue-annotation"><a class="issue-reference" href="issues/mapping-destructive-interaction.xhtml#issue-mapping-destructive-interaction:explicitly-vague">Issue MAPPING-DESTRUCTIVE-INTERACTION:EXPLICITLY-VAGUE</a><a class="section-reference" href="chapter-3.xhtml#section-TraversalRules">Traversal Rules and Side Effects</a></div>
</dd></dl></div><div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><dl><dt class="label">Notes</dt><dd><a class="special-operator-reference" href="chapter-5.xhtml#special-operator-go">go</a> may be used within the body of <a class="macro-reference" href="#macro-dolist">dolist</a> 
to transfer control to a statement labeled by a <span class="parameter">tag</span>.<br/></dd></dl></div></div>
</div><br/><br/>
<br/><div class="component" id="macro-loop"><div class="header"><span class="left"><span class="name" id="macro-loop">loop</span></span><span class="right"><span class="ftype">Macro</span></span></div><br/><div class="issue-annotation"><span class="issue-reference error">issue:Issue LOOP-SYNTAX-OVERHAUL:REPAIR</span>
<dl><dt class="label">Syntax</dt><dd>The ``simple'' <a class="macro-reference" href="#macro-loop">loop</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>:<br/><span class="function-definition"><span class="name">loop</span>&nbsp;<span class="lambda-list"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">compound-form</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span></span>&nbsp;â†’&nbsp;<span class="return-values"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">result</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span></span></span><br/><br/>The ``extended'' <a class="macro-reference" href="#macro-loop">loop</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>:<br/><span class="function-definition"><span class="name">loop</span>&nbsp;<span class="lambda-list"><span class="explicit-roman">[</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">name-clause</span><span class="explicit-roman">]</span>
			<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">variable-clause</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span>
		        <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">main-clause</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span></span>&nbsp;â†’&nbsp;<span class="return-values"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">result</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span></span></span><br/><br/><tr><td>name-clause</td><td>::=</td><td><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">named</span> <span class="parameter">name</span></td></tr>
<tr><td>variable-clause</td><td>::=</td><td><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">with-clause</span> | <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">initial-final</span> | <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">for-as-clause</span></td></tr>
<tr><td>with-clause</td><td>::=</td><td><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">with</span> <span class="parameter">var1</span> <span class="explicit-roman">[</span><span class="parameter">type-spec</span><span class="explicit-roman">]</span> <span class="explicit-roman">[</span>= <span class="parameter">form1</span><span class="explicit-roman">]</span>
 <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">and</span> <span class="parameter">var2</span> <span class="explicit-roman">[</span><span class="parameter">type-spec</span><span class="explicit-roman">]</span> 
		            <span class="explicit-roman">[</span>= <span class="parameter">form2</span><span class="explicit-roman">]</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span></td></tr>
<tr><td>main-clause</td><td>::=</td><td><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">unconditional</span>    |
 <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">accumulation</span>     |
 <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">conditional</span>      |
 <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">termination-test</span> |
 <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">initial-final</span></td></tr>
<tr><td>initial-final</td><td>::=</td><td><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">initially</span> <math xmlns="http://www.w3.org/1998/Math/MathML">\hbox<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">compound-form</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><msup><mrow/><mo>+</mo></msup></math> |  <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">finally</span> <math xmlns="http://www.w3.org/1998/Math/MathML">\hbox<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">compound-form</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><msup><mrow/><mo>+</mo></msup></math></td></tr>
<tr><td>unconditional</td><td>::=</td><td><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">do</span> | <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">doing</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math> <math xmlns="http://www.w3.org/1998/Math/MathML">\hbox<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">compound-form</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><msup><mrow/><mo>+</mo></msup></math> |
 <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">return</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">form</span> | <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">it</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math></td></tr>
<tr><td>accumulation</td><td>::=</td><td><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">list-accumulation</span> | <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">numeric-accumulation</span></td></tr>
<tr><td>list-accumulation</td><td>::=</td><td><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">collect</span> | <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">collecting</span> |
	<math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">append</span>  | <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">appending</span>  |
	<math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">nconc</span> | <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">nconcing</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">form</span> | <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">it</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math> <br/>
 <span class="explicit-roman">[</span><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">into</span> <span class="parameter">simple-var</span><span class="explicit-roman">]</span></td></tr>
<tr><td>numeric-accumulation</td><td>::=</td><td><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">count</span>    | <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">counting</span>   |
	<math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">sum</span>      | <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">summing</span>    | <br/>
 0<math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">maximize</span> | <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">maximizing</span> |
        <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">minimize</span> | <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">minimizing</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">form</span> | <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">it</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math> <br/>
 <span class="explicit-roman">[</span><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">into</span> <span class="parameter">simple-var</span><span class="explicit-roman">]</span> <span class="explicit-roman">[</span><span class="parameter">type-spec</span><span class="explicit-roman">]</span></td></tr>
<tr><td>conditional</td><td>::=</td><td><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">if</span> | <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">when</span> | <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">unless</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math> <span class="parameter">form</span>
         <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">selectable-clause</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">and</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">selectable-clause</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span> <br/>
 <span class="explicit-roman">[</span><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">else</span>
         <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">selectable-clause</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">and</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">selectable-clause</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span><span class="explicit-roman">]</span> <br/>
 <span class="explicit-roman">[</span><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">end</span><span class="explicit-roman">]</span></td></tr>
<tr><td>selectable-clause</td><td>::=</td><td><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">unconditional</span> | <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">accumulation</span> | <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">conditional</span></td></tr>
<tr><td>termination-test</td><td>::=</td><td><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">while</span>   <span class="parameter">form</span>  | 
 <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">until</span>   <span class="parameter">form</span>  |
 <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">repeat</span>  <span class="parameter">form</span>  |
 <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">always</span>  <span class="parameter">form</span>  |
 <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">never</span>   <span class="parameter">form</span>  |
 <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">thereis</span> <span class="parameter">form</span></td></tr>
<tr><td>for-as-clause</td><td>::=</td><td><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">for</span> | <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">as</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">for-as-subclause</span>
 <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">and</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">for-as-subclause</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span></td></tr>
<tr><td>for-as-subclause</td><td>::=</td><td><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">for-as-arithmetic</span>  |
 <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">for-as-in-list</span>     |
 <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">for-as-on-list</span>     |
 <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">for-as-equals-then</span> |<br/>
 <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">for-as-across</span>      |
 <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">for-as-hash</span>        |
 <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">for-as-package</span></td></tr>
<tr><td>for-as-arithmetic</td><td>::=</td><td><span class="parameter">var</span> <span class="explicit-roman">[</span><span class="parameter">type-spec</span><span class="explicit-roman">]</span>
			   <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">for-as-arithmetic-subclause</span></td></tr>
<tr><td>for-as-arithmetic-subclause</td><td>::=</td><td><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">arithmetic-up</span> | <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">arithmetic-downto</span> | <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">arithmetic-downfrom</span></td></tr>
<tr><td>arithmetic-up</td><td>::=</td><td><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>[</mi><mi>[</mi></math><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">from</span> | <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">upfrom</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math> <span class="parameter">form1</span>               | 
 0<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">to</span> | <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">upto</span> | <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">below</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math> <span class="parameter">form2</span> | 
 0<math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">by</span> <span class="parameter">form3</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>]</mi><mi>]</mi></math><math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mrow/><mo>+</mo></msup></math></td></tr>
<tr><td>arithmetic-downto</td><td>::=</td><td><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>[</mi><mi>[</mi></math><math xmlns="http://www.w3.org/1998/Math/MathML">\hbox<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><math xmlns="http://www.w3.org/1998/Math/MathML"/>\hbox<span class="explicit-mono">from</span> <span class="parameter">form1</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><msup><mrow/><mo>1</mo></msup></math> 				| 
 0<math xmlns="http://www.w3.org/1998/Math/MathML">\hbox<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><math xmlns="http://www.w3.org/1998/Math/MathML"/>\hbox<span class="explicit-mono">downto</span> | <math xmlns="http://www.w3.org/1998/Math/MathML"/>\hbox<span class="explicit-mono">above</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math> <span class="parameter">form2</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><msup><mrow/><mo>1</mo></msup></math> | 
 0<math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">by</span> <span class="parameter">form3</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>]</mi><mi>]</mi></math></td></tr>
<tr><td>arithmetic-downfrom</td><td>::=</td><td><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>[</mi><mi>[</mi></math><math xmlns="http://www.w3.org/1998/Math/MathML">\hbox<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><math xmlns="http://www.w3.org/1998/Math/MathML"/>\hbox<span class="explicit-mono">downfrom</span> <span class="parameter">form1</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><msup><mrow/><mo>1</mo></msup></math> 			 | 
 0<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">to</span> | <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">downto</span> | <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">above</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math> <span class="parameter">form2</span> | 
 0<math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">by</span> <span class="parameter">form3</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>]</mi><mi>]</mi></math></td></tr>
<tr><td>for-as-in-list</td><td>::=</td><td><span class="parameter">var</span> <span class="explicit-roman">[</span><span class="parameter">type-spec</span><span class="explicit-roman">]</span>
 <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">in</span> <span class="parameter">form1</span> <span class="explicit-roman">[</span><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">by</span> <span class="parameter">step-fun</span><span class="explicit-roman">]</span></td></tr>
<tr><td>for-as-on-list</td><td>::=</td><td><span class="parameter">var</span> <span class="explicit-roman">[</span><span class="parameter">type-spec</span><span class="explicit-roman">]</span>
 <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">on</span> <span class="parameter">form1</span> <span class="explicit-roman">[</span><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">by</span> <span class="parameter">step-fun</span><span class="explicit-roman">]</span></td></tr>
<tr><td>for-as-equals-then</td><td>::=</td><td><span class="parameter">var</span> <span class="explicit-roman">[</span><span class="parameter">type-spec</span><span class="explicit-roman">]</span>
 = <span class="parameter">form1</span> <span class="explicit-roman">[</span><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">then</span> <span class="parameter">form2</span><span class="explicit-roman">]</span></td></tr>
<tr><td>for-as-across</td><td>::=</td><td><span class="parameter">var</span> <span class="explicit-roman">[</span><span class="parameter">type-spec</span><span class="explicit-roman">]</span>
 <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">across</span> <span class="parameter">vector</span></td></tr>
<tr><td>for-as-hash</td><td>::=</td><td><span class="parameter">var</span> <span class="explicit-roman">[</span><span class="parameter">type-spec</span><span class="explicit-roman">]</span>
 <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">being</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">each</span> | <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">the</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math> <br/>
 <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">hash-key</span> | <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">hash-keys</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math>
        <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">in</span> | <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">of</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math> <span class="parameter">hash-table</span> <br/>
 0<span class="explicit-roman">[</span><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">using</span> <span class="explicit-roman">(</span><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">hash-value</span> <span class="parameter">other-var</span><span class="explicit-roman">)</span><span class="explicit-roman">]</span> | <br/>
 0<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">hash-value</span> | <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">hash-values</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math>
        <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">in</span> | <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">of</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math> <span class="parameter">hash-table</span> <br/>
 0<span class="explicit-roman">[</span><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">using</span> <span class="explicit-roman">(</span><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">hash-key</span> <span class="parameter">other-var</span><span class="explicit-roman">)</span><span class="explicit-roman">]</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math></td></tr>
<tr><td>for-as-package</td><td>::=</td><td><span class="parameter">var</span> <span class="explicit-roman">[</span><span class="parameter">type-spec</span><span class="explicit-roman">]</span>
 <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">being</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">each</span> | <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">the</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math> 	        <br/>
 <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">symbol</span> | <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">symbols</span>		               |<br/>
 0<math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">present-symbol</span> | <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">present-symbols</span>           |<br/>
 0<math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">external-symbol</span> | <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">external-symbols</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math>   <br/>
 <span class="explicit-roman">[</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">in</span> | <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">of</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math> <span class="parameter">package</span><span class="explicit-roman">]</span></td></tr>
<tr><td>type-spec</td><td>::=</td><td><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">simple-type-spec</span> | <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">destructured-type-spec</span></td></tr>
<tr><td>simple-type-spec</td><td>::=</td><td><a class="type-reference" href="chapter-12.xhtml#type-fixnum">fixnum</a> | <a class="type-reference" href="chapter-12.xhtml#type-float">float</a> | <a class="type-reference" href="chapter-4.xhtml#type-t">t</a> | <a class="type-reference" href="chapter-4.xhtml#type-nil">nil</a></td></tr>
<tr><td>destructured-type-spec</td><td>::=</td><td><math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">of-type</span> <span class="parameter">d-type-spec</span></td></tr>
<tr><td>d-type-spec</td><td>::=</td><td><span class="parameter">type-specifier</span> | <code><span class="syntax-root"><span class="syntax-cons">(<span class="parameter">d-type-spec</span> <span class="syntax-symbol">.</span> <span class="parameter">d-type-spec</span>)</span>
</span></code></td></tr>
<tr><td>var</td><td>::=</td><td><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">d-var-spec</span></td></tr>
<tr><td>var1</td><td>::=</td><td><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">d-var-spec</span></td></tr>
<tr><td>var2</td><td>::=</td><td><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">d-var-spec</span></td></tr>
<tr><td>other-var</td><td>::=</td><td><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">d-var-spec</span></td></tr>
<tr><td>d-var-spec</td><td>::=</td><td><span class="parameter">simple-var</span> | 
		    <a class="symbol-reference" href="chapter-1.xhtml#symbol-nil">nil</a> |
		    <span class="explicit-roman">(</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">d-var-spec</span> <code><span class="syntax-root">.
</span></code> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†“</mi></math><span class="parameter">d-var-spec</span><span class="explicit-roman">)</span></td></tr><br/></dd></dl><dl><dt class="label">Arguments and Values</dt><dd><span class="parameter">compound-form</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-compound form">compound form</a>.<br/><span class="parameter">name</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a>.<br/><span class="parameter">simple-var</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbol</a> (a <a class="glossary-reference" href="chapter-26.xhtml#glossary-variable">variable</a> name).<br/><span class="parameter">form</span>, <span class="parameter">form1</span>, <span class="parameter">form2</span>, <span class="parameter">form3</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>.<br/><div class="issue-annotation"><span class="issue-reference error">issue:Issue LOOP-MISCELLANEOUS-REPAIRS:FIX</span><span class="parameter">step-fun</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> that evaluates to a <a class="glossary-reference" href="chapter-26.xhtml#glossary-function">function</a> of one <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">argument</a>.
</div>
<span class="parameter">vector</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> that evaluates to a <a class="glossary-reference" href="chapter-26.xhtml#glossary-vector">vector</a>.<br/><span class="parameter">hash-table</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> that evaluates to a <a class="glossary-reference" href="chapter-26.xhtml#glossary-hash table">hash table</a>.<br/><span class="parameter">package</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> that evaluates to a <a class="glossary-reference" href="chapter-26.xhtml#glossary-package designator">package designator</a>.<br/><span class="parameter">type-specifier</span>&mdash;a <a class="glossary-reference" href="chapter-26.xhtml#glossary-type specifier">type specifier</a>.
  This might be either an <a class="glossary-reference" href="chapter-26.xhtml#glossary-atomic type specifier">atomic type specifier</a> or a <a class="glossary-reference" href="chapter-26.xhtml#glossary-compound type specifier">compound type specifier</a>,
  which introduces some additional complications to proper parsing in the face of 
  destructuring; for further information, see <span class="section-reference error">section:DestructuringLOOPVars.</span><br/><span class="parameter">result</span>&mdash;an <a class="glossary-reference" href="chapter-26.xhtml#glossary-object">object</a>.<br/></dd></dl></div>
<dl><dt class="label">Description</dt><dd>For details, see <span class="section-reference error">section:LoopFacility.</span><br/></dd></dl><div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><dl><dt class="label">Examples</dt><dd><pre><code><span class="syntax-root">;; An example of the simple form of LOOP.
 <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">sqrt-advisor</span> <span class="syntax-symbol">()</span>
   <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-22.xhtml#function-format">format</a> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a> <span class="syntax-string">"~&amp;Number: "</span>)</span>
         <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">n</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-parse-integer">parse-integer</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-21.xhtml#function-read-line">read-line</a>)</span> <span class="syntax-keyword-symbol">:junk-allowed</span> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a>)</span>)</span>)</span>
           <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-when">when</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-not">not</a> <span class="syntax-interned-symbol">n</span>)</span> <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-return">return</a>)</span>)</span>
           <span class="syntax-cons">(<a class="function-reference" href="chapter-22.xhtml#function-format">format</a> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a> <span class="syntax-string">"~&amp;The square root of ~D is ~D.~%"</span> <span class="syntax-interned-symbol">n</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-sqrt">sqrt</a> <span class="syntax-interned-symbol">n</span>)</span>)</span>)</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">SQRT-ADVISOR</span>
 <span class="syntax-cons">(<span class="syntax-interned-symbol">sqrt-advisor</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> Number: <math xmlns="http://www.w3.org/1998/Math/MathML"><span style="text-decoration: underline;">\hbox5<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†©</mi></math></span></math>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> The square root of 5 is 2.236068.
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> Number: <math xmlns="http://www.w3.org/1998/Math/MathML"><span style="text-decoration: underline;">\hbox4<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†©</mi></math></span></math>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> The square root of 4 is 2.
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> Number: <math xmlns="http://www.w3.org/1998/Math/MathML"><span style="text-decoration: underline;">\hboxdone<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†©</mi></math></span></math>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>

;; An example of the extended form of LOOP.
 <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">square-advisor</span> <span class="syntax-symbol">()</span>
   <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">as</span> <span class="syntax-interned-symbol">n</span> <a class="function-reference" href="chapter-12.xhtml#function-=">=</a> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-progn">progn</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-22.xhtml#function-format">format</a> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a> <span class="syntax-string">"~&amp;Number: "</span>)</span>
                       <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-parse-integer">parse-integer</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-21.xhtml#function-read-line">read-line</a>)</span> <span class="syntax-keyword-symbol">:junk-allowed</span> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a>)</span>)</span>
         <span class="syntax-interned-symbol">while</span> <span class="syntax-interned-symbol">n</span>
         <a class="macro-reference" href="#macro-do">do</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-22.xhtml#function-format">format</a> <a class="section-reference" href="chapter-26.xhtml#section-T">T</a> <span class="syntax-string">"~&amp;The square of ~D is ~D.~%"</span> <span class="syntax-interned-symbol">n</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-*">*</a> <span class="syntax-interned-symbol">n</span> <span class="syntax-interned-symbol">n</span>)</span>)</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">SQUARE-ADVISOR</span>
 <span class="syntax-cons">(<span class="syntax-interned-symbol">square-advisor</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> Number: <math xmlns="http://www.w3.org/1998/Math/MathML"><span style="text-decoration: underline;">\hbox4<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†©</mi></math></span></math>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> The square of 4 is 16.
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> Number: <math xmlns="http://www.w3.org/1998/Math/MathML"><span style="text-decoration: underline;">\hbox23<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†©</mi></math></span></math>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> The square of 23 is 529.
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â–·</mi></math> Number: <math xmlns="http://www.w3.org/1998/Math/MathML"><span style="text-decoration: underline;">\hboxdone<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†©</mi></math></span></math>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>

;; Another example of the extended form of LOOP.
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">n</span> <span class="syntax-interned-symbol">from</span> <span class="syntax-number">1</span> <span class="syntax-interned-symbol">to</span> <span class="syntax-number">10</span>
       <a class="macro-reference" href="chapter-5.xhtml#macro-when">when</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-oddp">oddp</a> <span class="syntax-interned-symbol">n</span>)</span>
         <span class="syntax-interned-symbol">collect</span> <span class="syntax-interned-symbol">n</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">3</span> <span class="syntax-number">5</span> <span class="syntax-number">7</span> <span class="syntax-number">9</span>)</span>
</span></code></pre><br/></dd></dl></div><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd><span class="none">None</span>.<br/>
</dd></dl><div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><dl><dt class="label">See Also</dt><dd><a class="macro-reference" href="#macro-do">do</a>, <a class="macro-reference" href="#macro-dolist">dolist</a>, <a class="macro-reference" href="#macro-dotimes">dotimes</a>, 
<a class="macro-reference" href="chapter-5.xhtml#macro-return">return</a>, <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-go">go</a>, <a class="special-operator-reference" href="chapter-5.xhtml#special-operator-throw">throw</a>,
<a class="section-reference" href="#section-DestructuringLOOPVars">Destructuring</a><br/></dd></dl></div><div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><dl><dt class="label">Notes</dt><dd>Except that <a class="macro-reference" href="#macro-loop-finish">loop-finish</a> cannot be used within a simple <a class="macro-reference" href="#macro-loop">loop</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>,
a simple <a class="macro-reference" href="#macro-loop">loop</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> is related to an extended <a class="macro-reference" href="#macro-loop">loop</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> 
in the following way:<br/><pre><code><span class="syntax-root"><span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">compound-form</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span>)</span> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>â‰¡</mo></math> <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <a class="macro-reference" href="#macro-do">do</a> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>{</mo></math><span class="parameter">compound-form</span><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>}</mo></math><span class="explicit-roman">*</span>)</span>
</span></code></pre><br/></dd></dl></div></div><br/>
<br/><div class="component" id="macro-loop-finish"><div class="header"><span class="left"><span class="name" id="macro-loop-finish">loop-finish</span></span><span class="right"><span class="ftype">Local Macro</span></span></div><br/><dl><dt class="label">Syntax</dt><dd><span class="function-definition"><span class="name">loop-finish</span>&nbsp;<span class="lambda-list"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>âŸ¨</mi></math><span class="explicit-italic"> no <a class="glossary-reference" href="chapter-26.xhtml#glossary-argument">arguments</a></span><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>âŸ©</mi></math></span>&nbsp;â†’&nbsp;|</span><br/></dd></dl><dl><dt class="label">Description</dt><dd>The <a class="macro-reference" href="#macro-loop-finish">loop-finish</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-macro">macro</a> can be used lexically within 
an extended
<a class="macro-reference" href="#macro-loop">loop</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> 
to terminate that <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a> ``normally.''
That is, it transfers control to the loop epilogue
of the lexically innermost extended <a class="macro-reference" href="#macro-loop">loop</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-form">form</a>.
This permits execution of any <math xmlns="http://www.w3.org/1998/Math/MathML"/><span class="explicit-mono">finally</span> clause (for effect)
and
the return of
any accumulated result.<br/>
</dd></dl><div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><dl><dt class="label">Examples</dt><dd><pre><code><span class="syntax-root">;; Terminate the loop, but return the accumulated count.
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">in</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">3</span> <span class="syntax-interned-symbol">stop-here</span> <span class="syntax-number">4</span> <span class="syntax-number">5</span> <span class="syntax-number">6</span>)</span></span>
       <a class="macro-reference" href="chapter-5.xhtml#macro-when">when</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-10.xhtml#function-symbolp">symbolp</a> <span class="syntax-interned-symbol">i</span>)</span> <a class="macro-reference" href="#macro-do">do</a> <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop-finish">loop-finish</a>)</span>
       <a class="function-reference" href="chapter-17.xhtml#function-count">count</a> <span class="syntax-interned-symbol">i</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">3</span>
 
;; The preceding loop is equivalent to:
 <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">in</span> <span class="syntax-quote">'<span class="syntax-cons">(<span class="syntax-number">1</span> <span class="syntax-number">2</span> <span class="syntax-number">3</span> <span class="syntax-interned-symbol">stop-here</span> <span class="syntax-number">4</span> <span class="syntax-number">5</span> <span class="syntax-number">6</span>)</span></span>
       <span class="syntax-interned-symbol">until</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-10.xhtml#function-symbolp">symbolp</a> <span class="syntax-interned-symbol">i</span>)</span>
       <a class="function-reference" href="chapter-17.xhtml#function-count">count</a> <span class="syntax-interned-symbol">i</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-number">3</span>

;; While LOOP-FINISH can be used can be used in a variety of 
;; situations it is really most needed in a situation where a need
;; to exit is detected at other than the loop's `top level'
;; (where UNTIL or WHEN often work just as well), or where some 
;; computation must occur between the point where a need to exit is
;; detected and the point where the exit actually occurs.  For example:
 <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-defun">defun</a> <span class="syntax-interned-symbol">tokenize-sentence</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-16.xhtml#function-string">string</a>)</span>
   <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-macrolet">macrolet</a> <span class="syntax-cons">(<span class="syntax-cons">(<span class="syntax-interned-symbol">add-word</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">wvar</span> <span class="syntax-interned-symbol">svar</span>)</span>
                <span class="syntax-quasiquote">`<span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-when">when</a> <span class="syntax-unquote">,<span class="syntax-interned-symbol">wvar</span></span>
                   <span class="syntax-cons">(<a class="macro-reference" href="chapter-14.xhtml#macro-push">push</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-4.xhtml#function-coerce">coerce</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-17.xhtml#function-nreverse">nreverse</a> <span class="syntax-unquote">,<span class="syntax-interned-symbol">wvar</span></span>)</span> <span class="syntax-quote">'<a class="function-reference" href="chapter-16.xhtml#function-string">string</a></span>)</span> <span class="syntax-unquote">,<span class="syntax-interned-symbol">svar</span></span>)</span>
                   <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-unquote">,<span class="syntax-interned-symbol">wvar</span></span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>)</span>)</span></span>)</span>)</span>
     <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop">loop</a> <span class="syntax-interned-symbol">with</span> <span class="syntax-interned-symbol">word</span> <a class="function-reference" href="chapter-12.xhtml#function-=">=</a> <span class="syntax-quote">'<span class="syntax-symbol">()</span></span> <a class="macro-reference" href="chapter-5.xhtml#macro-and">and</a> <span class="syntax-interned-symbol">sentence</span> <a class="function-reference" href="chapter-12.xhtml#function-=">=</a> <span class="syntax-quote">'<span class="syntax-symbol">()</span></span> <a class="macro-reference" href="chapter-5.xhtml#macro-and">and</a> <span class="syntax-interned-symbol">endpos</span> <a class="function-reference" href="chapter-12.xhtml#function-=">=</a> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>
           <span class="syntax-interned-symbol">for</span> <span class="syntax-interned-symbol">i</span> <span class="syntax-interned-symbol">below</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-17.xhtml#function-length">length</a> <a class="function-reference" href="chapter-16.xhtml#function-string">string</a>)</span>
           <a class="macro-reference" href="#macro-do">do</a> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-let">let</a> <span class="syntax-cons">(<span class="syntax-cons">(<a class="function-reference" href="chapter-16.xhtml#function-char">char</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-15.xhtml#function-aref">aref</a> <a class="function-reference" href="chapter-16.xhtml#function-string">string</a> <span class="syntax-interned-symbol">i</span>)</span>)</span>)</span>
                <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-case">case</a> <a class="function-reference" href="chapter-16.xhtml#function-char">char</a>
                  <span class="syntax-cons">(<span class="syntax-character">#\Space</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">add-word</span> <span class="syntax-interned-symbol">word</span> <span class="syntax-interned-symbol">sentence</span>)</span>)</span>
                  <span class="syntax-cons">(<span class="syntax-character">#\.</span> <span class="syntax-cons">(<a class="special-operator-reference" href="chapter-5.xhtml#special-operator-setq">setq</a> <span class="syntax-interned-symbol">endpos</span> <span class="syntax-cons">(<a class="function-reference" href="chapter-12.xhtml#function-1+">1+</a> <span class="syntax-interned-symbol">i</span>)</span>)</span> <span class="syntax-cons">(<a class="macro-reference" href="#macro-loop-finish">loop-finish</a>)</span>)</span>
                  <span class="syntax-cons">(<a class="symbol-reference" href="chapter-5.xhtml#symbol-otherwise">otherwise</a> <span class="syntax-cons">(<a class="macro-reference" href="chapter-14.xhtml#macro-push">push</a> <a class="function-reference" href="chapter-16.xhtml#function-char">char</a> <span class="syntax-interned-symbol">word</span>)</span>)</span>)</span>)</span>
           <span class="syntax-interned-symbol">finally</span> <span class="syntax-cons">(<span class="syntax-interned-symbol">add-word</span> <span class="syntax-interned-symbol">word</span> <span class="syntax-interned-symbol">sentence</span>)</span>
                   <span class="syntax-cons">(<a class="macro-reference" href="chapter-5.xhtml#macro-return">return</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-5.xhtml#function-values">values</a> <span class="syntax-cons">(<a class="function-reference" href="chapter-17.xhtml#function-nreverse">nreverse</a> <span class="syntax-interned-symbol">sentence</span>)</span> <span class="syntax-interned-symbol">endpos</span>)</span>)</span>)</span>)</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-interned-symbol">TOKENIZE-SENTENCE</span>
 
 <span class="syntax-cons">(<span class="syntax-interned-symbol">tokenize-sentence</span> <span class="syntax-string">"this is a sentence. this is another sentence."</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-string">"this"</span> <span class="syntax-string">"is"</span> <span class="syntax-string">"a"</span> <span class="syntax-string">"sentence"</span>)</span><span class="syntax-verbatim">,</span> <span class="syntax-number">19</span>
 
 <span class="syntax-cons">(<span class="syntax-interned-symbol">tokenize-sentence</span> <span class="syntax-string">"this is a sentence"</span>)</span>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>â†’</mi></math> <span class="syntax-cons">(<span class="syntax-string">"this"</span> <span class="syntax-string">"is"</span> <span class="syntax-string">"a"</span> <span class="syntax-string">"sentence"</span>)</span><span class="syntax-verbatim">,</span> <a class="section-reference" href="chapter-1.xhtml#section-NIL">NIL</a>

</span></code></pre><br/></dd></dl></div><dl><dt class="label">Side Effects</dt><dd>Transfers control.<br/></dd></dl><dl><dt class="label">Affected By</dt><dd><span class="none">None</span>.<br/></dd></dl><dl><dt class="label">Exceptional Situations</dt><dd><div class="issue-annotation"><a class="issue-reference" href="issues/lexical-construct-global-definition .xhtml#issue-lexical-construct-global-definition:undefined">Issue LEXICAL-CONSTRUCT-GLOBAL-DEFINITION:UNDEFINED</a>Whether or not <a class="macro-reference" href="#macro-loop-finish">loop-finish</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-fbound">fbound</a> in the
<a class="glossary-reference" href="chapter-26.xhtml#glossary-global environment">global environment</a> is <a class="glossary-reference" href="chapter-26.xhtml#glossary-implementation-dependent">implementation-dependent</a>;
however, the restrictions on redefinition and <a class="glossary-reference" href="chapter-26.xhtml#glossary-shadow">shadowing</a> of
<a class="macro-reference" href="#macro-loop-finish">loop-finish</a> are the same as for <a class="glossary-reference" href="chapter-26.xhtml#glossary-symbol">symbols</a> in the <a class="package-reference" href="chapter-1.xhtml#package-common-lisp">common-lisp</a> <a class="glossary-reference" href="chapter-26.xhtml#glossary-package">package</a>
which are <a class="glossary-reference" href="chapter-26.xhtml#glossary-fbound">fbound</a> in the <a class="glossary-reference" href="chapter-26.xhtml#glossary-global environment">global environment</a>.
The consequences of attempting to use <a class="macro-reference" href="#macro-loop-finish">loop-finish</a> outside
of <a class="macro-reference" href="#macro-loop">loop</a> are undefined.
</div>
</dd></dl><div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><dl><dt class="label">See Also</dt><dd><a class="macro-reference" href="#macro-loop">loop</a>,
<a class="section-reference" href="#section-LoopFacility">The LOOP Facility</a><br/></dd></dl></div><div class="removable-text"><span class="removable-text-tooltip">This passage is <a href="chapter-1.xhtml#section-RemovableText">removable text</a> which is not formally part of the standard.</span><dl><dt class="label">Notes</dt><dd><span class="none">None</span>.<br/>
</dd></dl></div></div><br/></section></section></div></main><footer>Copyright Â© 2021 Jan Moringen</footer></body></html>